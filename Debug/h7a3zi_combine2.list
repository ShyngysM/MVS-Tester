
h7a3zi_combine2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b80  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f84  08008f84  00018f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f8c  08008f8c  00018f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f90  08008f90  00018f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08008f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00031120  24000060  08008ff4  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24031180  08008ff4  00021180  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018565  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000298b  00000000  00000000  00038636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001438  00000000  00000000  0003afc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000fd3  00000000  00000000  0003c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003272a  00000000  00000000  0003d3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017e7b  00000000  00000000  0006fafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00153867  00000000  00000000  00087978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005d00  00000000  00000000  001db1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  001e0ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008e18 	.word	0x08008e18

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	08008e18 	.word	0x08008e18

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 ffe7 	bl	8001664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f87d 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 fa3f 	bl	8000b1c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800069e:	f000 f9e9 	bl	8000a74 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006a2:	f000 fa33 	bl	8000b0c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006a6:	f000 f8eb 	bl	8000880 <MX_ADC1_Init>
  MX_TIM16_Init();
 80006aa:	f000 f9bb 	bl	8000a24 <MX_TIM16_Init>
  MX_TIM3_Init();
 80006ae:	f000 f95f 	bl	8000970 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /////////////////START/////////////////////////

  // pump on
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2120      	movs	r1, #32
 80006b6:	4830      	ldr	r0, [pc, #192]	; (8000778 <main+0xec>)
 80006b8:	f002 fcec 	bl	8003094 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 80006bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c0:	f001 f862 	bl	8001788 <HAL_Delay>

  uart_buf_len = sprintf(uart_buf, "MeasurementNr.,Pulses,Hightime[ms],t_vibration[ms],t_responce[ms],bad[bool]\r\n");
 80006c4:	492d      	ldr	r1, [pc, #180]	; (800077c <main+0xf0>)
 80006c6:	482e      	ldr	r0, [pc, #184]	; (8000780 <main+0xf4>)
 80006c8:	f007 ff02 	bl	80084d0 <siprintf>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a2d      	ldr	r2, [pc, #180]	; (8000784 <main+0xf8>)
 80006d0:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80006d2:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <main+0xf8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	4929      	ldr	r1, [pc, #164]	; (8000780 <main+0xf4>)
 80006dc:	482a      	ldr	r0, [pc, #168]	; (8000788 <main+0xfc>)
 80006de:	f006 fcdf 	bl	80070a0 <HAL_UART_Transmit>

  for (int i = 0; i < 100; i++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	e03c      	b.n	8000762 <main+0xd6>
    measure(&Meas);
 80006e8:	4828      	ldr	r0, [pc, #160]	; (800078c <main+0x100>)
 80006ea:	f000 fb5d 	bl	8000da8 <measure>
    analyse(&Meas);
 80006ee:	4827      	ldr	r0, [pc, #156]	; (800078c <main+0x100>)
 80006f0:	f000 fc14 	bl	8000f1c <analyse>
    
    uart_buf_len = sprintf(uart_buf, "%d, %d, %d, %d, %d, %d\r\n",
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	1c58      	adds	r0, r3, #1
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <main+0x100>)
 80006fa:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80006fe:	f8d3 4d4c 	ldr.w	r4, [r3, #3404]	; 0xd4c
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <main+0x100>)
 8000704:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000708:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <main+0x100>)
 800070e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000712:	f8d2 2d40 	ldr.w	r2, [r2, #3392]	; 0xd40
 8000716:	491d      	ldr	r1, [pc, #116]	; (800078c <main+0x100>)
 8000718:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
 800071c:	f8d1 1d44 	ldr.w	r1, [r1, #3396]	; 0xd44
                           i+1, Meas.pulses, Meas.htime, Meas.t_vibr_start, Meas.t_first_pulse, Meas.bad);
 8000720:	4d1a      	ldr	r5, [pc, #104]	; (800078c <main+0x100>)
 8000722:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
 8000726:	f895 5d54 	ldrb.w	r5, [r5, #3412]	; 0xd54
    uart_buf_len = sprintf(uart_buf, "%d, %d, %d, %d, %d, %d\r\n",
 800072a:	9503      	str	r5, [sp, #12]
 800072c:	9102      	str	r1, [sp, #8]
 800072e:	9201      	str	r2, [sp, #4]
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	4623      	mov	r3, r4
 8000734:	4602      	mov	r2, r0
 8000736:	4916      	ldr	r1, [pc, #88]	; (8000790 <main+0x104>)
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <main+0xf4>)
 800073a:	f007 fec9 	bl	80084d0 <siprintf>
 800073e:	4603      	mov	r3, r0
 8000740:	4a10      	ldr	r2, [pc, #64]	; (8000784 <main+0xf8>)
 8000742:	6013      	str	r3, [r2, #0]

    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <main+0xf8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	b29a      	uxth	r2, r3
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	490c      	ldr	r1, [pc, #48]	; (8000780 <main+0xf4>)
 800074e:	480e      	ldr	r0, [pc, #56]	; (8000788 <main+0xfc>)
 8000750:	f006 fca6 	bl	80070a0 <HAL_UART_Transmit>

    HAL_Delay(500);
 8000754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000758:	f001 f816 	bl	8001788 <HAL_Delay>
  for (int i = 0; i < 100; i++) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3301      	adds	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b63      	cmp	r3, #99	; 0x63
 8000766:	ddbf      	ble.n	80006e8 <main+0x5c>
  }

// NOTE: uart_transmit_digital() increases the measurement time up to 1 min. and 40 s, without it 31 s the loading time into µC is 11 s

  // pump off
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2120      	movs	r1, #32
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <main+0xec>)
 800076e:	f002 fc91 	bl	8003094 <HAL_GPIO_WritePin>

  uart_transmit_digital();
 8000772:	f000 fcc7 	bl	8001104 <uart_transmit_digital>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000776:	e7fe      	b.n	8000776 <main+0xea>
 8000778:	58020000 	.word	0x58020000
 800077c:	08008e30 	.word	0x08008e30
 8000780:	24030f64 	.word	0x24030f64
 8000784:	2403102c 	.word	0x2403102c
 8000788:	24030ed0 	.word	0x24030ed0
 800078c:	2400007c 	.word	0x2400007c
 8000790:	08008e80 	.word	0x08008e80

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	; 0x70
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	224c      	movs	r2, #76	; 0x4c
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f007 feb4 	bl	8008510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2220      	movs	r2, #32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f007 feae 	bl	8008510 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <SystemClock_Config+0xe4>)
 80007b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007be:	2004      	movs	r0, #4
 80007c0:	f002 fc82 	bl	80030c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007c4:	2300      	movs	r3, #0
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <SystemClock_Config+0xe8>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a2b      	ldr	r2, [pc, #172]	; (800087c <SystemClock_Config+0xe8>)
 80007ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <SystemClock_Config+0xe8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e0:	bf00      	nop
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <SystemClock_Config+0xe8>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ee:	d1f8      	bne.n	80007e2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007f0:	2321      	movs	r3, #33	; 0x21
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007fa:	2301      	movs	r3, #1
 80007fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	2302      	movs	r3, #2
 8000804:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800080a:	2318      	movs	r3, #24
 800080c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000812:	2304      	movs	r3, #4
 8000814:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000816:	2302      	movs	r3, #2
 8000818:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800081a:	230c      	movs	r3, #12
 800081c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800081e:	2300      	movs	r3, #0
 8000820:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fca6 	bl	800317c <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000836:	f000 fcab 	bl	8001190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	233f      	movs	r3, #63	; 0x3f
 800083c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2303      	movs	r3, #3
 8000840:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2102      	movs	r1, #2
 800085e:	4618      	mov	r0, r3
 8000860:	f003 f8be 	bl	80039e0 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800086a:	f000 fc91 	bl	8001190 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3770      	adds	r7, #112	; 0x70
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	58024400 	.word	0x58024400
 800087c:	58024800 	.word	0x58024800

08000880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000892:	463b      	mov	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
 80008a0:	615a      	str	r2, [r3, #20]
 80008a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a4:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008a6:	4a30      	ldr	r2, [pc, #192]	; (8000968 <MX_ADC1_Init+0xe8>)
 80008a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008aa:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008b0:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b6:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008be:	2204      	movs	r2, #4
 80008c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e0:	4b20      	ldr	r3, [pc, #128]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000900:	4818      	ldr	r0, [pc, #96]	; (8000964 <MX_ADC1_Init+0xe4>)
 8000902:	f001 f947 	bl	8001b94 <HAL_ADC_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800090c:	f000 fc40 	bl	8001190 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4812      	ldr	r0, [pc, #72]	; (8000964 <MX_ADC1_Init+0xe4>)
 800091c:	f002 f88a 	bl	8002a34 <HAL_ADCEx_MultiModeConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000926:	f000 fc33 	bl	8001190 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_ADC1_Init+0xec>)
 800092c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092e:	2306      	movs	r3, #6
 8000930:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000936:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800093a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093c:	2304      	movs	r3, #4
 800093e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_ADC1_Init+0xe4>)
 800094e:	f001 fc1b 	bl	8002188 <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000958:	f000 fc1a 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24030dd4 	.word	0x24030dd4
 8000968:	40022000 	.word	0x40022000
 800096c:	3ef08000 	.word	0x3ef08000

08000970 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2224      	movs	r2, #36	; 0x24
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f007 fdc6 	bl	8008510 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <MX_TIM3_Init+0xac>)
 8000990:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <MX_TIM3_Init+0xb0>)
 8000992:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_TIM3_Init+0xac>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MX_TIM3_Init+0xac>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_TIM3_Init+0xac>)
 80009a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_TIM3_Init+0xac>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_TIM3_Init+0xac>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009b4:	2303      	movs	r3, #3
 80009b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009bc:	2301      	movs	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009cc:	2301      	movs	r3, #1
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	480f      	ldr	r0, [pc, #60]	; (8000a1c <MX_TIM3_Init+0xac>)
 80009e0:	f006 f88c 	bl	8006afc <HAL_TIM_Encoder_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80009ea:	f000 fbd1 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4808      	ldr	r0, [pc, #32]	; (8000a1c <MX_TIM3_Init+0xac>)
 80009fc:	f006 fa72 	bl	8006ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000a06:	f000 fbc3 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000a0a:	213c      	movs	r1, #60	; 0x3c
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <MX_TIM3_Init+0xac>)
 8000a0e:	f006 f91b 	bl	8006c48 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	24030e38 	.word	0x24030e38
 8000a20:	40000400 	.word	0x40000400

08000a24 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a2a:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <MX_TIM16_Init+0x4c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600-1;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a30:	f242 527f 	movw	r2, #9599	; 0x257f
 8000a34:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000-1;
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a3e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a42:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a58:	f005 ff58 	bl	800690c <HAL_TIM_Base_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000a62:	f000 fb95 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	24030e84 	.word	0x24030e84
 8000a70:	40014400 	.word	0x40014400

08000a74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a7a:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <MX_USART3_UART_Init+0x94>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000abe:	f006 fa9f 	bl	8007000 <HAL_UART_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ac8:	f000 fb62 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ad0:	f007 fc33 	bl	800833a <HAL_UARTEx_SetTxFifoThreshold>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ada:	f000 fb59 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ae2:	f007 fc68 	bl	80083b6 <HAL_UARTEx_SetRxFifoThreshold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aec:	f000 fb50 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000af2:	f007 fbe9 	bl	80082c8 <HAL_UARTEx_DisableFifoMode>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000afc:	f000 fb48 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24030ed0 	.word	0x24030ed0
 8000b08:	40004800 	.word	0x40004800

08000b0c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08e      	sub	sp, #56	; 0x38
 8000b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b95      	ldr	r3, [pc, #596]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b38:	4a93      	ldr	r2, [pc, #588]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b42:	4b91      	ldr	r3, [pc, #580]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	623b      	str	r3, [r7, #32]
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b50:	4b8d      	ldr	r3, [pc, #564]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b56:	4a8c      	ldr	r2, [pc, #560]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b58:	f043 0320 	orr.w	r3, r3, #32
 8000b5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b60:	4b89      	ldr	r3, [pc, #548]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b66:	f003 0320 	and.w	r3, r3, #32
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6e:	4b86      	ldr	r3, [pc, #536]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b74:	4a84      	ldr	r2, [pc, #528]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b7e:	4b82      	ldr	r3, [pc, #520]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b88:	61bb      	str	r3, [r7, #24]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b7e      	ldr	r3, [pc, #504]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b92:	4a7d      	ldr	r2, [pc, #500]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b9c:	4b7a      	ldr	r3, [pc, #488]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b77      	ldr	r3, [pc, #476]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb0:	4a75      	ldr	r2, [pc, #468]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bba:	4b73      	ldr	r3, [pc, #460]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc8:	4b6f      	ldr	r3, [pc, #444]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bce:	4a6e      	ldr	r2, [pc, #440]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bd0:	f043 0310 	orr.w	r3, r3, #16
 8000bd4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bd8:	4b6b      	ldr	r3, [pc, #428]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be6:	4b68      	ldr	r3, [pc, #416]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000be8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bec:	4a66      	ldr	r2, [pc, #408]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bee:	f043 0308 	orr.w	r3, r3, #8
 8000bf2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bf6:	4b64      	ldr	r3, [pc, #400]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c04:	4b60      	ldr	r3, [pc, #384]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000c06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c0a:	4a5f      	ldr	r2, [pc, #380]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c14:	4b5c      	ldr	r3, [pc, #368]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000c16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c28:	4858      	ldr	r0, [pc, #352]	; (8000d8c <MX_GPIO_Init+0x270>)
 8000c2a:	f002 fa33 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUMP_PA5_Pin_GPIO_Port, PUMP_PA5_Pin_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2120      	movs	r1, #32
 8000c32:	4857      	ldr	r0, [pc, #348]	; (8000d90 <MX_GPIO_Init+0x274>)
 8000c34:	f002 fa2e 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|ENCMOTOR_PB6_Pin|ENCMOTOR_PB7_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000c3e:	4855      	ldr	r0, [pc, #340]	; (8000d94 <MX_GPIO_Init+0x278>)
 8000c40:	f002 fa28 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f246 0102 	movw	r1, #24578	; 0x6002
 8000c4a:	4853      	ldr	r0, [pc, #332]	; (8000d98 <MX_GPIO_Init+0x27c>)
 8000c4c:	f002 fa22 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 8000c56:	4851      	ldr	r0, [pc, #324]	; (8000d9c <MX_GPIO_Init+0x280>)
 8000c58:	f002 fa1c 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	484b      	ldr	r0, [pc, #300]	; (8000da0 <MX_GPIO_Init+0x284>)
 8000c72:	f002 f85f 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	483f      	ldr	r0, [pc, #252]	; (8000d8c <MX_GPIO_Init+0x270>)
 8000c90:	f002 f850 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUMP_PA5_Pin_Pin */
  GPIO_InitStruct.Pin = PUMP_PA5_Pin_Pin;
 8000c94:	2320      	movs	r3, #32
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PUMP_PA5_Pin_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4839      	ldr	r0, [pc, #228]	; (8000d90 <MX_GPIO_Init+0x274>)
 8000cac:	f002 f842 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin ENCMOTOR_PB6_Pin ENCMOTOR_PB7_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|ENCMOTOR_PB6_Pin|ENCMOTOR_PB7_Pin;
 8000cb0:	f244 03c1 	movw	r3, #16577	; 0x40c1
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4832      	ldr	r0, [pc, #200]	; (8000d94 <MX_GPIO_Init+0x278>)
 8000cca:	f002 f833 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER3_PE13_Pin_Pin STEPPER4_PE14_Pin_Pin LD2_Pin */
  GPIO_InitStruct.Pin = STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin;
 8000cce:	f246 0302 	movw	r3, #24578	; 0x6002
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	482c      	ldr	r0, [pc, #176]	; (8000d98 <MX_GPIO_Init+0x27c>)
 8000ce8:	f002 f824 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4826      	ldr	r0, [pc, #152]	; (8000d9c <MX_GPIO_Init+0x280>)
 8000d02:	f002 f817 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	481d      	ldr	r0, [pc, #116]	; (8000d90 <MX_GPIO_Init+0x274>)
 8000d1c:	f002 f80a 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d32:	230a      	movs	r3, #10
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4814      	ldr	r0, [pc, #80]	; (8000d90 <MX_GPIO_Init+0x274>)
 8000d3e:	f001 fff9 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_GPIO_Init+0x274>)
 8000d5c:	f001 ffea 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : HELP_SIGNAL_PG9_Pin_Pin VIBROMOTOR_PG12_Pin_Pin STEPPER2_PG14_Pin_Pin */
  GPIO_InitStruct.Pin = HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin;
 8000d60:	f44f 43a4 	mov.w	r3, #20992	; 0x5200
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <MX_GPIO_Init+0x280>)
 8000d7a:	f001 ffdb 	bl	8002d34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d7e:	bf00      	nop
 8000d80:	3738      	adds	r7, #56	; 0x38
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	58024400 	.word	0x58024400
 8000d8c:	58021400 	.word	0x58021400
 8000d90:	58020000 	.word	0x58020000
 8000d94:	58020400 	.word	0x58020400
 8000d98:	58021000 	.word	0x58021000
 8000d9c:	58021800 	.word	0x58021800
 8000da0:	58020800 	.word	0x58020800
 8000da4:	00000000 	.word	0x00000000

08000da8 <measure>:
// calling an ISR for STEPPER
// void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
//   STEPPER_TMR_OVF_ISR(htim);
// }

void measure(struct MeasureData *s) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  const int ONESEC = 10000 - 1;
 8000db0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000db4:	613b      	str	r3, [r7, #16]
  // store our counter value
  int tim_val_ms = 0; // tick is 0.1 ms
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]

  bool is_vibrating = false;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	76fb      	strb	r3, [r7, #27]
  // store our 16bit ADC reading
  uint16_t raw;
  // starting timer 16
  HAL_TIM_Base_Start(&htim16);
 8000dbe:	4854      	ldr	r0, [pc, #336]	; (8000f10 <measure+0x168>)
 8000dc0:	f005 fdfc 	bl	80069bc <HAL_TIM_Base_Start>
  // set help signal (yellow led)
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);

  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e079      	b.n	8000ebe <measure+0x116>

    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000dca:	7efb      	ldrb	r3, [r7, #27]
 8000dcc:	f083 0301 	eor.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d035      	beq.n	8000e42 <measure+0x9a>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000dea:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8000ef8 <measure+0x150>
 8000dee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000df2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfa:	db22      	blt.n	8000e42 <measure+0x9a>
        tim_val_ms < ONESEC * 0.21) {
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e10:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8000f00 <measure+0x158>
 8000e14:	ee27 7b05 	vmul.f64	d7, d7, d5
    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000e18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e20:	d50f      	bpl.n	8000e42 <measure+0x9a>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); // vibrator ON
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e28:	483a      	ldr	r0, [pc, #232]	; (8000f14 <measure+0x16c>)
 8000e2a:	f002 f933 	bl	8003094 <HAL_GPIO_WritePin>
      // saving time of begin vibration
      s->t_vibr_start = i;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e34:	461a      	mov	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
      is_vibrating = true;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	76fb      	strb	r3, [r7, #27]
 8000e40:	e01d      	b.n	8000e7e <measure+0xd6>
    } else if (is_vibrating && tim_val_ms >= ONESEC * 0.3) {
 8000e42:	7efb      	ldrb	r3, [r7, #27]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d01a      	beq.n	8000e7e <measure+0xd6>
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	ee07 3a90 	vmov	s15, r3
 8000e58:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e5c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8000f08 <measure+0x160>
 8000e60:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	db07      	blt.n	8000e7e <measure+0xd6>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); // vibrator OFF
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e74:	4827      	ldr	r0, [pc, #156]	; (8000f14 <measure+0x16c>)
 8000e76:	f002 f90d 	bl	8003094 <HAL_GPIO_WritePin>
      is_vibrating = false;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	76fb      	strb	r3, [r7, #27]
    }

    // ADC routine
    HAL_ADC_Start(&hadc1);
 8000e7e:	4826      	ldr	r0, [pc, #152]	; (8000f18 <measure+0x170>)
 8000e80:	f000 ffe2 	bl	8001e48 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e88:	4823      	ldr	r0, [pc, #140]	; (8000f18 <measure+0x170>)
 8000e8a:	f001 f897 	bl	8001fbc <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc1);
 8000e8e:	4822      	ldr	r0, [pc, #136]	; (8000f18 <measure+0x170>)
 8000e90:	f001 f96c 	bl	800216c <HAL_ADC_GetValue>
 8000e94:	4603      	mov	r3, r0
 8000e96:	81fb      	strh	r3, [r7, #14]
    // needed to save the last iterator i
    s->t_end = i;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f8c2 3d48 	str.w	r3, [r2, #3400]	; 0xd48
    // remember the last element of array will be 0, the counter will be
    // increased but array not filled
    s->signal[i] = raw;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	89f9      	ldrh	r1, [r7, #14]
 8000eac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    tim_val_ms = __HAL_TIM_GET_COUNTER(&htim16);
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <measure+0x168>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb6:	61fb      	str	r3, [r7, #28]
  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	db81      	blt.n	8000dca <measure+0x22>
  }
  // stoping and reseting timer 16
  HAL_TIM_Base_Stop_IT(&htim16);
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <measure+0x168>)
 8000ec8:	f005 fde8 	bl	8006a9c <HAL_TIM_Base_Stop_IT>
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <measure+0x168>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24
  s->pulses = 0;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000eda:	461a      	mov	r2, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
  s->htime = 0;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c2 3d50 	str.w	r3, [r2, #3408]	; 0xd50
  // reset help signal (yellow led)
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	9999999a 	.word	0x9999999a
 8000efc:	3fc99999 	.word	0x3fc99999
 8000f00:	ae147ae1 	.word	0xae147ae1
 8000f04:	3fcae147 	.word	0x3fcae147
 8000f08:	33333333 	.word	0x33333333
 8000f0c:	3fd33333 	.word	0x3fd33333
 8000f10:	24030e84 	.word	0x24030e84
 8000f14:	58021800 	.word	0x58021800
 8000f18:	24030dd4 	.word	0x24030dd4

08000f1c <analyse>:

void analyse(struct MeasureData *s) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b08b      	sub	sp, #44	; 0x2c
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  // digitalize signal v:[0,1]
  const int TRIGGER = 39718;
 8000f24:	f649 3326 	movw	r3, #39718	; 0x9b26
 8000f28:	617b      	str	r3, [r7, #20]
  const int SCALE = 1000;
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	613b      	str	r3, [r7, #16]

  for (int i = 0; i < s->t_end; i++) {
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
 8000f34:	e015      	b.n	8000f62 <analyse+0x46>
    if (s->signal[i] < TRIGGER) { // aprox. 2V TODO change it to 1V
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	4293      	cmp	r3, r2
 8000f44:	dd05      	ble.n	8000f52 <analyse+0x36>
      s->signal[i] = 0;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000f50:	e004      	b.n	8000f5c <analyse+0x40>
    } else {
      s->signal[i] = 1;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f56:	2101      	movs	r1, #1
 8000f58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i = 0; i < s->t_end; i++) {
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	3301      	adds	r3, #1
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f68:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	dbe1      	blt.n	8000f36 <analyse+0x1a>
    }
  }
  // count pulses
  for (int i = 0; i < s->t_end; i++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
 8000f76:	e02d      	b.n	8000fd4 <analyse+0xb8>
    int edge = s->signal[i + 1] - s->signal[i];
 8000f78:	6a3b      	ldr	r3, [r7, #32]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f82:	4619      	mov	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a3a      	ldr	r2, [r7, #32]
 8000f88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f8c:	1acb      	subs	r3, r1, r3
 8000f8e:	60fb      	str	r3, [r7, #12]
    if (edge == 1) { // count only negative pulses
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d10a      	bne.n	8000fac <analyse+0x90>
      s->pulses++;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f9c:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000fa8:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
    }
    if (s->signal[i] == 1) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a3a      	ldr	r2, [r7, #32]
 8000fb0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d10a      	bne.n	8000fce <analyse+0xb2>
      s->htime++;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fbe:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000fca:	f8c2 3d50 	str.w	r3, [r2, #3408]	; 0xd50
  for (int i = 0; i < s->t_end; i++) {
 8000fce:	6a3b      	ldr	r3, [r7, #32]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	623b      	str	r3, [r7, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fda:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000fde:	6a3a      	ldr	r2, [r7, #32]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbc9      	blt.n	8000f78 <analyse+0x5c>
    }
  }
  // check if sensor has been open before vibration
  s->bad = false;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2d54 	strb.w	r2, [r3, #3412]	; 0xd54
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	e00f      	b.n	8001016 <analyse+0xfa>
    if (s->signal[i] == 0) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69fa      	ldr	r2, [r7, #28]
 8000ffa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <analyse+0xf4>
      s->bad = true;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2d54 	strb.w	r2, [r3, #3412]	; 0xd54
      break;
 800100e:	e00a      	b.n	8001026 <analyse+0x10a>
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	3301      	adds	r3, #1
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800101c:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	429a      	cmp	r2, r3
 8001024:	dde7      	ble.n	8000ff6 <analyse+0xda>
  //     s->bad = true;
  //     break;
  //   }
  // }
  // check if sensor is not kurzgeschlossen all time
  if (s->pulses == 0) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800102c:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8001030:	2b00      	cmp	r3, #0
 8001032:	d105      	bne.n	8001040 <analyse+0x124>
    s->bad = true;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800103a:	2201      	movs	r2, #1
 800103c:	f883 2d54 	strb.w	r2, [r3, #3412]	; 0xd54
  }
  // find and save first pulse after vibration
  for (int i = s->t_vibr_start; i <= s->t_end; i++) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001046:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	e010      	b.n	8001070 <analyse+0x154>
    if (s->signal[i] == 0) {
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d107      	bne.n	800106a <analyse+0x14e>
      s->t_first_pulse = i;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001060:	461a      	mov	r2, r3
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	f8c2 3d44 	str.w	r3, [r2, #3396]	; 0xd44
      break;
 8001068:	e00a      	b.n	8001080 <analyse+0x164>
  for (int i = s->t_vibr_start; i <= s->t_end; i++) {
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	3301      	adds	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001076:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	429a      	cmp	r2, r3
 800107e:	dde6      	ble.n	800104e <analyse+0x132>
    }
  
  }
  // resolve the variables to human readable values
  s->htime = s->htime * SCALE / s->t_end;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001086:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	fb03 f202 	mul.w	r2, r3, r2
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001096:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800109a:	fb92 f3f3 	sdiv	r3, r2, r3
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 80010a4:	f8c2 3d50 	str.w	r3, [r2, #3408]	; 0xd50
  s->t_vibr_start = s->t_vibr_start * SCALE / s->t_end;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010ae:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	fb03 f202 	mul.w	r2, r3, r2
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010be:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80010c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 80010cc:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
  s->t_first_pulse = s->t_first_pulse * SCALE / s->t_end;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010d6:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	fb03 f202 	mul.w	r2, r3, r2
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010e6:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80010ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 80010f4:	f8c2 3d44 	str.w	r3, [r2, #3396]	; 0xd44
}
 80010f8:	bf00      	nop
 80010fa:	372c      	adds	r7, #44	; 0x2c
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <uart_transmit_digital>:
  for (int j = 0; j < Meas.t_end; j++) {
    uart_buf_len = sprintf(uart_buf, "%d, %u \r\n", j, Meas.signal[j]);
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
  }
}
void uart_transmit_digital(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
  /* Transmit an array with DIGITAL data via uart */
  uart_buf_len = sprintf(uart_buf, "Digital \n");
 800110a:	491b      	ldr	r1, [pc, #108]	; (8001178 <uart_transmit_digital+0x74>)
 800110c:	481b      	ldr	r0, [pc, #108]	; (800117c <uart_transmit_digital+0x78>)
 800110e:	f007 f9df 	bl	80084d0 <siprintf>
 8001112:	4603      	mov	r3, r0
 8001114:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <uart_transmit_digital+0x7c>)
 8001116:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <uart_transmit_digital+0x7c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29a      	uxth	r2, r3
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	4916      	ldr	r1, [pc, #88]	; (800117c <uart_transmit_digital+0x78>)
 8001122:	4818      	ldr	r0, [pc, #96]	; (8001184 <uart_transmit_digital+0x80>)
 8001124:	f005 ffbc 	bl	80070a0 <HAL_UART_Transmit>
  for (int j = 0; j < Meas.t_end; j++) {
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	e016      	b.n	800115c <uart_transmit_digital+0x58>
    uart_buf_len = sprintf(uart_buf, "%d, %u \r\n", j, Meas.signal[j]);
 800112e:	4a16      	ldr	r2, [pc, #88]	; (8001188 <uart_transmit_digital+0x84>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	4914      	ldr	r1, [pc, #80]	; (800118c <uart_transmit_digital+0x88>)
 800113a:	4810      	ldr	r0, [pc, #64]	; (800117c <uart_transmit_digital+0x78>)
 800113c:	f007 f9c8 	bl	80084d0 <siprintf>
 8001140:	4603      	mov	r3, r0
 8001142:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <uart_transmit_digital+0x7c>)
 8001144:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <uart_transmit_digital+0x7c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	b29a      	uxth	r2, r3
 800114c:	2364      	movs	r3, #100	; 0x64
 800114e:	490b      	ldr	r1, [pc, #44]	; (800117c <uart_transmit_digital+0x78>)
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <uart_transmit_digital+0x80>)
 8001152:	f005 ffa5 	bl	80070a0 <HAL_UART_Transmit>
  for (int j = 0; j < Meas.t_end; j++) {
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3301      	adds	r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <uart_transmit_digital+0x84>)
 800115e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001162:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	429a      	cmp	r2, r3
 800116a:	dbe0      	blt.n	800112e <uart_transmit_digital+0x2a>
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	08008ea8 	.word	0x08008ea8
 800117c:	24030f64 	.word	0x24030f64
 8001180:	2403102c 	.word	0x2403102c
 8001184:	24030ed0 	.word	0x24030ed0
 8001188:	2400007c 	.word	0x2400007c
 800118c:	08008e9c 	.word	0x08008e9c

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 8001198:	e7fe      	b.n	8001198 <Error_Handler+0x8>
	...

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_MspInit+0x30>)
 80011a4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011a8:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x30>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x30>)
 80011b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	58024400 	.word	0x58024400

080011d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0ba      	sub	sp, #232	; 0xe8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	22c0      	movs	r2, #192	; 0xc0
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f007 f98d 	bl	8008510 <memset>
  if(hadc->Instance==ADC1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a2b      	ldr	r2, [pc, #172]	; (80012a8 <HAL_ADC_MspInit+0xd8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d14f      	bne.n	80012a0 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001200:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001204:	f04f 0300 	mov.w	r3, #0
 8001208:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800120c:	2301      	movs	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001210:	2310      	movs	r3, #16
 8001212:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001214:	2304      	movs	r3, #4
 8001216:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001218:	2302      	movs	r3, #2
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001220:	23c0      	movs	r3, #192	; 0xc0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4618      	mov	r0, r3
 8001238:	f002 ff5e 	bl	80040f8 <HAL_RCCEx_PeriphCLKConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001242:	f7ff ffa5 	bl	8001190 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_ADC_MspInit+0xdc>)
 8001248:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800124c:	4a17      	ldr	r2, [pc, #92]	; (80012ac <HAL_ADC_MspInit+0xdc>)
 800124e:	f043 0320 	orr.w	r3, r3, #32
 8001252:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_ADC_MspInit+0xdc>)
 8001258:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800125c:	f003 0320 	and.w	r3, r3, #32
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_ADC_MspInit+0xdc>)
 8001266:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_ADC_MspInit+0xdc>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001274:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_ADC_MspInit+0xdc>)
 8001276:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|ANALOG_READ_PA3_Pin_Pin;
 8001282:	2309      	movs	r3, #9
 8001284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001288:	2303      	movs	r3, #3
 800128a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_ADC_MspInit+0xe0>)
 800129c:	f001 fd4a 	bl	8002d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	37e8      	adds	r7, #232	; 0xe8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40022000 	.word	0x40022000
 80012ac:	58024400 	.word	0x58024400
 80012b0:	58020000 	.word	0x58020000

080012b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1a      	ldr	r2, [pc, #104]	; (800133c <HAL_TIM_Encoder_MspInit+0x88>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12d      	bne.n	8001332 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <HAL_TIM_Encoder_MspInit+0x8c>)
 80012d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012dc:	4a18      	ldr	r2, [pc, #96]	; (8001340 <HAL_TIM_Encoder_MspInit+0x8c>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_TIM_Encoder_MspInit+0x8c>)
 80012e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_TIM_Encoder_MspInit+0x8c>)
 80012f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012fa:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_TIM_Encoder_MspInit+0x8c>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001306:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = encoder1PA6_Pin|encoder2PA7_Pin;
 8001312:	23c0      	movs	r3, #192	; 0xc0
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001322:	2302      	movs	r3, #2
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <HAL_TIM_Encoder_MspInit+0x90>)
 800132e:	f001 fd01 	bl	8002d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40000400 	.word	0x40000400
 8001340:	58024400 	.word	0x58024400
 8001344:	58020000 	.word	0x58020000

08001348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <HAL_TIM_Base_MspInit+0x3c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d10e      	bne.n	8001378 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_TIM_Base_MspInit+0x40>)
 800135c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001360:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_TIM_Base_MspInit+0x40>)
 8001362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001366:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_TIM_Base_MspInit+0x40>)
 800136c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40014400 	.word	0x40014400
 8001388:	58024400 	.word	0x58024400

0800138c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0ba      	sub	sp, #232	; 0xe8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	22c0      	movs	r2, #192	; 0xc0
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f007 f8af 	bl	8008510 <memset>
  if(huart->Instance==USART3)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a27      	ldr	r2, [pc, #156]	; (8001454 <HAL_UART_MspInit+0xc8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d146      	bne.n	800144a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013bc:	f04f 0202 	mov.w	r2, #2
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 fe90 	bl	80040f8 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013de:	f7ff fed7 	bl	8001190 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_UART_MspInit+0xcc>)
 80013e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013e8:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <HAL_UART_MspInit+0xcc>)
 80013ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ee:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_UART_MspInit+0xcc>)
 80013f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_UART_MspInit+0xcc>)
 8001402:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <HAL_UART_MspInit+0xcc>)
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_UART_MspInit+0xcc>)
 8001412:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800141e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001438:	2307      	movs	r3, #7
 800143a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <HAL_UART_MspInit+0xd0>)
 8001446:	f001 fc75 	bl	8002d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	37e8      	adds	r7, #232	; 0xe8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40004800 	.word	0x40004800
 8001458:	58024400 	.word	0x58024400
 800145c:	58020c00 	.word	0x58020c00

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001464:	e7fe      	b.n	8001464 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <MemManage_Handler+0x4>

08001472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler+0x4>

0800147e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ac:	f000 f94c 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f007 f81c 	bl	8008520 <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	24100000 	.word	0x24100000
 8001514:	00000400 	.word	0x00000400
 8001518:	24031030 	.word	0x24031030
 800151c:	24031180 	.word	0x24031180

08001520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001524:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <SystemInit+0xd0>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <SystemInit+0xd0>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <SystemInit+0xd4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	2b02      	cmp	r3, #2
 800153e:	d807      	bhi.n	8001550 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001540:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <SystemInit+0xd4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 030f 	bic.w	r3, r3, #15
 8001548:	4a2a      	ldr	r2, [pc, #168]	; (80015f4 <SystemInit+0xd4>)
 800154a:	f043 0303 	orr.w	r3, r3, #3
 800154e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001550:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <SystemInit+0xd8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a28      	ldr	r2, [pc, #160]	; (80015f8 <SystemInit+0xd8>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <SystemInit+0xd8>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <SystemInit+0xd8>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4924      	ldr	r1, [pc, #144]	; (80015f8 <SystemInit+0xd8>)
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <SystemInit+0xdc>)
 800156a:	4013      	ands	r3, r2
 800156c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <SystemInit+0xd4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <SystemInit+0xd4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 030f 	bic.w	r3, r3, #15
 8001582:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <SystemInit+0xd4>)
 8001584:	f043 0303 	orr.w	r3, r3, #3
 8001588:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <SystemInit+0xd8>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <SystemInit+0xd8>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <SystemInit+0xd8>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <SystemInit+0xd8>)
 800159e:	4a18      	ldr	r2, [pc, #96]	; (8001600 <SystemInit+0xe0>)
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <SystemInit+0xd8>)
 80015a4:	4a17      	ldr	r2, [pc, #92]	; (8001604 <SystemInit+0xe4>)
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <SystemInit+0xd8>)
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <SystemInit+0xe8>)
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <SystemInit+0xd8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <SystemInit+0xd8>)
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <SystemInit+0xe8>)
 80015b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <SystemInit+0xd8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <SystemInit+0xd8>)
 80015c2:	4a11      	ldr	r2, [pc, #68]	; (8001608 <SystemInit+0xe8>)
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <SystemInit+0xd8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <SystemInit+0xd8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <SystemInit+0xd8>)
 80015d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <SystemInit+0xd8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <SystemInit+0xec>)
 80015e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00
 80015f4:	52002000 	.word	0x52002000
 80015f8:	58024400 	.word	0x58024400
 80015fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001600:	02020200 	.word	0x02020200
 8001604:	01ff0000 	.word	0x01ff0000
 8001608:	01010280 	.word	0x01010280
 800160c:	52004000 	.word	0x52004000

08001610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001648 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001614:	f7ff ff84 	bl	8001520 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800161a:	490d      	ldr	r1, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001630:	4c0a      	ldr	r4, [pc, #40]	; (800165c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800163e:	f006 ff75 	bl	800852c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001642:	f7ff f823 	bl	800068c <main>
  bx  lr
 8001646:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800164c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001650:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001654:	08008f94 	.word	0x08008f94
  ldr r2, =_sbss
 8001658:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 800165c:	24031180 	.word	0x24031180

08001660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC_IRQHandler>
	...

08001664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166a:	2003      	movs	r0, #3
 800166c:	f001 fb30 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001670:	f002 fb6c 	bl	8003d4c <HAL_RCC_GetSysClockFreq>
 8001674:	4602      	mov	r2, r0
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_Init+0x68>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	4913      	ldr	r1, [pc, #76]	; (80016d0 <HAL_Init+0x6c>)
 8001682:	5ccb      	ldrb	r3, [r1, r3]
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_Init+0x68>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <HAL_Init+0x6c>)
 8001698:	5cd3      	ldrb	r3, [r2, r3]
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_Init+0x70>)
 80016a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016a8:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <HAL_Init+0x74>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ae:	2000      	movs	r0, #0
 80016b0:	f000 f814 	bl	80016dc <HAL_InitTick>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e002      	b.n	80016c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016be:	f7ff fd6d 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	58024400 	.word	0x58024400
 80016d0:	08008f18 	.word	0x08008f18
 80016d4:	24000004 	.word	0x24000004
 80016d8:	24000000 	.word	0x24000000

080016dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_InitTick+0x60>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e021      	b.n	8001734 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <HAL_InitTick+0x64>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_InitTick+0x60>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f001 fb07 	bl	8002d1a <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00e      	b.n	8001734 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d80a      	bhi.n	8001732 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001724:	f001 fadf 	bl	8002ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <HAL_InitTick+0x68>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2400000c 	.word	0x2400000c
 8001740:	24000000 	.word	0x24000000
 8001744:	24000008 	.word	0x24000008

08001748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x20>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x24>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_IncTick+0x24>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	2400000c 	.word	0x2400000c
 800176c:	24031034 	.word	0x24031034

08001770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_GetTick+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	24031034 	.word	0x24031034

08001788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff ffee 	bl	8001770 <HAL_GetTick>
 8001794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017a0:	d005      	beq.n	80017ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_Delay+0x44>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ae:	bf00      	nop
 80017b0:	f7ff ffde 	bl	8001770 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d8f7      	bhi.n	80017b0 <HAL_Delay+0x28>
  {
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2400000c 	.word	0x2400000c

080017d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	609a      	str	r2, [r3, #8]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	609a      	str	r2, [r3, #8]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3360      	adds	r3, #96	; 0x60
 800184a:	461a      	mov	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	430b      	orrs	r3, r1
 8001866:	431a      	orrs	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800186c:	bf00      	nop
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	431a      	orrs	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	611a      	str	r2, [r3, #16]
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b087      	sub	sp, #28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3360      	adds	r3, #96	; 0x60
 80018ba:	461a      	mov	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
  }
}
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001906:	b480      	push	{r7}
 8001908:	b087      	sub	sp, #28
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3330      	adds	r3, #48	; 0x30
 8001916:	461a      	mov	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	0a1b      	lsrs	r3, r3, #8
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	4413      	add	r3, r2
 8001924:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	211f      	movs	r1, #31
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	401a      	ands	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	0e9b      	lsrs	r3, r3, #26
 800193e:	f003 011f 	and.w	r1, r3, #31
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	431a      	orrs	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001952:	bf00      	nop
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800195e:	b480      	push	{r7}
 8001960:	b087      	sub	sp, #28
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3314      	adds	r3, #20
 800196e:	461a      	mov	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	0e5b      	lsrs	r3, r3, #25
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	4413      	add	r3, r2
 800197c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	0d1b      	lsrs	r3, r3, #20
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	2107      	movs	r1, #7
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	401a      	ands	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	0d1b      	lsrs	r3, r3, #20
 8001998:	f003 031f 	and.w	r3, r3, #31
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	431a      	orrs	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019a8:	bf00      	nop
 80019aa:	371c      	adds	r7, #28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019cc:	43db      	mvns	r3, r3
 80019ce:	401a      	ands	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0318 	and.w	r3, r3, #24
 80019d6:	4908      	ldr	r1, [pc, #32]	; (80019f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019d8:	40d9      	lsrs	r1, r3
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	400b      	ands	r3, r1
 80019de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019e2:	431a      	orrs	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	000fffff 	.word	0x000fffff

080019fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 031f 	and.w	r3, r3, #31
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6093      	str	r3, [r2, #8]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	5fffffc0 	.word	0x5fffffc0

08001a58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a6c:	d101      	bne.n	8001a72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	6fffffc0 	.word	0x6fffffc0

08001aa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001abc:	d101      	bne.n	8001ac2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <LL_ADC_Enable+0x24>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	f043 0201 	orr.w	r2, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	7fffffc0 	.word	0x7fffffc0

08001af8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <LL_ADC_IsEnabled+0x18>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <LL_ADC_IsEnabled+0x1a>
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <LL_ADC_REG_StartConversion+0x24>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	f043 0204 	orr.w	r2, r3, #4
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	7fffffc0 	.word	0x7fffffc0

08001b48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d101      	bne.n	8001b60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d101      	bne.n	8001b86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e138      	b.n	8001e20 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fb07 	bl	80011d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff3f 	bl	8001a58 <LL_ADC_IsDeepPowerDownEnabled>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d004      	beq.n	8001bea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff25 	bl	8001a34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ff5a 	bl	8001aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d114      	bne.n	8001c24 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff3e 	bl	8001a80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c04:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <HAL_ADC_Init+0x294>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	099b      	lsrs	r3, r3, #6
 8001c0a:	4a88      	ldr	r2, [pc, #544]	; (8001e2c <HAL_ADC_Init+0x298>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	099b      	lsrs	r3, r3, #6
 8001c12:	3301      	adds	r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c16:	e002      	b.n	8001c1e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f9      	bne.n	8001c18 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff3d 	bl	8001aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10d      	bne.n	8001c50 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	f043 0210 	orr.w	r2, r3, #16
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff77 	bl	8001b48 <LL_ADC_REG_IsConversionOngoing>
 8001c5a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f040 80d2 	bne.w	8001e0e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f040 80ce 	bne.w	8001e0e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c7a:	f043 0202 	orr.w	r2, r3, #2
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff36 	bl	8001af8 <LL_ADC_IsEnabled>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d110      	bne.n	8001cb4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c92:	4867      	ldr	r0, [pc, #412]	; (8001e30 <HAL_ADC_Init+0x29c>)
 8001c94:	f7ff ff30 	bl	8001af8 <LL_ADC_IsEnabled>
 8001c98:	4604      	mov	r4, r0
 8001c9a:	4866      	ldr	r0, [pc, #408]	; (8001e34 <HAL_ADC_Init+0x2a0>)
 8001c9c:	f7ff ff2c 	bl	8001af8 <LL_ADC_IsEnabled>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4323      	orrs	r3, r4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4619      	mov	r1, r3
 8001cae:	4862      	ldr	r0, [pc, #392]	; (8001e38 <HAL_ADC_Init+0x2a4>)
 8001cb0:	f7ff fd8e 	bl	80017d0 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7d5b      	ldrb	r3, [r3, #21]
 8001cb8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cbe:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001cc4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7f1b      	ldrb	r3, [r3, #28]
 8001cca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7f1b      	ldrb	r3, [r3, #28]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	045b      	lsls	r3, r3, #17
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <HAL_ADC_Init+0x2a8>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	69b9      	ldr	r1, [r7, #24]
 8001d12:	430b      	orrs	r3, r1
 8001d14:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff14 	bl	8001b48 <LL_ADC_REG_IsConversionOngoing>
 8001d20:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff21 	bl	8001b6e <LL_ADC_INJ_IsConversionOngoing>
 8001d2c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d14a      	bne.n	8001dca <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d147      	bne.n	8001dca <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	7d1b      	ldrb	r3, [r3, #20]
 8001d3e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <HAL_ADC_Init+0x2ac>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d11b      	bne.n	8001d9e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <HAL_ADC_Init+0x2b0>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d7a:	3a01      	subs	r2, #1
 8001d7c:	0411      	lsls	r1, r2, #16
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d82:	4311      	orrs	r1, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d88:	4311      	orrs	r1, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	611a      	str	r2, [r3, #16]
 8001d9c:	e007      	b.n	8001dae <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0201 	bic.w	r2, r2, #1
 8001dac:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fd41 	bl	800284c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d10c      	bne.n	8001dec <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	f023 010f 	bic.w	r1, r3, #15
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	1e5a      	subs	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dea:	e007      	b.n	8001dfc <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 020f 	bic.w	r2, r2, #15
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	f023 0303 	bic.w	r3, r3, #3
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
 8001e0c:	e007      	b.n	8001e1e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e12:	f043 0210 	orr.w	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3724      	adds	r7, #36	; 0x24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd90      	pop	{r4, r7, pc}
 8001e28:	24000000 	.word	0x24000000
 8001e2c:	053e2d63 	.word	0x053e2d63
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40022100 	.word	0x40022100
 8001e38:	40022300 	.word	0x40022300
 8001e3c:	fff0c003 	.word	0xfff0c003
 8001e40:	ffffbffc 	.word	0xffffbffc
 8001e44:	fc00f81e 	.word	0xfc00f81e

08001e48 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e50:	4856      	ldr	r0, [pc, #344]	; (8001fac <HAL_ADC_Start+0x164>)
 8001e52:	f7ff fdd3 	bl	80019fc <LL_ADC_GetMultimode>
 8001e56:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fe73 	bl	8001b48 <LL_ADC_REG_IsConversionOngoing>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f040 809a 	bne.w	8001f9e <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_ADC_Start+0x30>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e095      	b.n	8001fa4 <HAL_ADC_Start+0x15c>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fc67 	bl	8002754 <ADC_Enable>
 8001e86:	4603      	mov	r3, r0
 8001e88:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 8081 	bne.w	8001f94 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e96:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_ADC_Start+0x168>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a43      	ldr	r2, [pc, #268]	; (8001fb4 <HAL_ADC_Start+0x16c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d002      	beq.n	8001eb2 <HAL_ADC_Start+0x6a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	e000      	b.n	8001eb4 <HAL_ADC_Start+0x6c>
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_ADC_Start+0x170>)
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d002      	beq.n	8001ec2 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d105      	bne.n	8001ece <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eda:	d106      	bne.n	8001eea <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	f023 0206 	bic.w	r2, r3, #6
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ee8:	e002      	b.n	8001ef0 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	221c      	movs	r2, #28
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <HAL_ADC_Start+0x16c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d002      	beq.n	8001f10 <HAL_ADC_Start+0xc8>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	e000      	b.n	8001f12 <HAL_ADC_Start+0xca>
 8001f10:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <HAL_ADC_Start+0x170>)
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d008      	beq.n	8001f2c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d002      	beq.n	8001f2c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b09      	cmp	r3, #9
 8001f2a:	d114      	bne.n	8001f56 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fde6 	bl	8001b20 <LL_ADC_REG_StartConversion>
 8001f54:	e025      	b.n	8001fa2 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <HAL_ADC_Start+0x16c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d002      	beq.n	8001f72 <HAL_ADC_Start+0x12a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	e000      	b.n	8001f74 <HAL_ADC_Start+0x12c>
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_ADC_Start+0x170>)
 8001f74:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00f      	beq.n	8001fa2 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54
 8001f92:	e006      	b.n	8001fa2 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f9c:	e001      	b.n	8001fa2 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40022300 	.word	0x40022300
 8001fb0:	fffff0fe 	.word	0xfffff0fe
 8001fb4:	40022100 	.word	0x40022100
 8001fb8:	40022000 	.word	0x40022000

08001fbc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fc6:	4866      	ldr	r0, [pc, #408]	; (8002160 <HAL_ADC_PollForConversion+0x1a4>)
 8001fc8:	f7ff fd18 	bl	80019fc <LL_ADC_GetMultimode>
 8001fcc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d102      	bne.n	8001fdc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e02a      	b.n	8002032 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d002      	beq.n	8001fee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b09      	cmp	r3, #9
 8001fec:	d111      	bne.n	8002012 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f043 0220 	orr.w	r2, r3, #32
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0a4      	b.n	8002156 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800200c:	2304      	movs	r3, #4
 800200e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002010:	e00f      	b.n	8002032 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002012:	4853      	ldr	r0, [pc, #332]	; (8002160 <HAL_ADC_PollForConversion+0x1a4>)
 8002014:	f7ff fd00 	bl	8001a18 <LL_ADC_GetMultiDMATransfer>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f043 0220 	orr.w	r2, r3, #32
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e093      	b.n	8002156 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800202e:	2304      	movs	r3, #4
 8002030:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002032:	f7ff fb9d 	bl	8001770 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002038:	e021      	b.n	800207e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002040:	d01d      	beq.n	800207e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002042:	f7ff fb95 	bl	8001770 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d302      	bcc.n	8002058 <HAL_ADC_PollForConversion+0x9c>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d112      	bne.n	800207e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10b      	bne.n	800207e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	f043 0204 	orr.w	r2, r3, #4
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e06b      	b.n	8002156 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0d6      	beq.n	800203a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002090:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fc1f 	bl	80018e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01c      	beq.n	80020e2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7d5b      	ldrb	r3, [r3, #21]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d118      	bne.n	80020e2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d111      	bne.n	80020e2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1f      	ldr	r2, [pc, #124]	; (8002164 <HAL_ADC_PollForConversion+0x1a8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d002      	beq.n	80020f2 <HAL_ADC_PollForConversion+0x136>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e000      	b.n	80020f4 <HAL_ADC_PollForConversion+0x138>
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_ADC_PollForConversion+0x1ac>)
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d008      	beq.n	800210e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d002      	beq.n	800210e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b09      	cmp	r3, #9
 800210c:	d104      	bne.n	8002118 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	e00c      	b.n	8002132 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a11      	ldr	r2, [pc, #68]	; (8002164 <HAL_ADC_PollForConversion+0x1a8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d002      	beq.n	8002128 <HAL_ADC_PollForConversion+0x16c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	e000      	b.n	800212a <HAL_ADC_PollForConversion+0x16e>
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_ADC_PollForConversion+0x1ac>)
 800212a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d104      	bne.n	8002142 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2208      	movs	r2, #8
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	e008      	b.n	8002154 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d103      	bne.n	8002154 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	220c      	movs	r2, #12
 8002152:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40022300 	.word	0x40022300
 8002164:	40022100 	.word	0x40022100
 8002168:	40022000 	.word	0x40022000

0800216c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b0a1      	sub	sp, #132	; 0x84
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a9a      	ldr	r2, [pc, #616]	; (800240c <HAL_ADC_ConfigChannel+0x284>)
 80021a2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x2a>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e2bc      	b.n	800272c <HAL_ADC_ConfigChannel+0x5a4>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fcc2 	bl	8001b48 <LL_ADC_REG_IsConversionOngoing>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 82a1 	bne.w	800270e <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d108      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x62>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	0e9b      	lsrs	r3, r3, #26
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2201      	movs	r2, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	e016      	b.n	8002218 <HAL_ADC_ConfigChannel+0x90>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021fa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002202:	2320      	movs	r3, #32
 8002204:	e003      	b.n	800220e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002206:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	2201      	movs	r2, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	69d1      	ldr	r1, [r2, #28]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	430b      	orrs	r3, r1
 8002224:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	f7ff fb67 	bl	8001906 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fc83 	bl	8001b48 <LL_ADC_REG_IsConversionOngoing>
 8002242:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fc90 	bl	8001b6e <LL_ADC_INJ_IsConversionOngoing>
 800224e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 80a0 	bne.w	8002398 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 809c 	bne.w	8002398 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	461a      	mov	r2, r3
 800226e:	f7ff fb76 	bl	800195e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10b      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x110>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	695a      	ldr	r2, [r3, #20]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	e00a      	b.n	80022ae <HAL_ADC_ConfigChannel+0x126>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d027      	beq.n	8002308 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6919      	ldr	r1, [r3, #16]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022c6:	f7ff fab7 	bl	8001838 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6919      	ldr	r1, [r3, #16]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	7e5b      	ldrb	r3, [r3, #25]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d102      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x158>
 80022da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80022de:	e000      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x15a>
 80022e0:	2300      	movs	r3, #0
 80022e2:	461a      	mov	r2, r3
 80022e4:	f7ff fae1 	bl	80018aa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6919      	ldr	r1, [r3, #16]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	7e1b      	ldrb	r3, [r3, #24]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d102      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x176>
 80022f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022fc:	e000      	b.n	8002300 <HAL_ADC_ConfigChannel+0x178>
 80022fe:	2300      	movs	r3, #0
 8002300:	461a      	mov	r2, r3
 8002302:	f7ff fab9 	bl	8001878 <LL_ADC_SetDataRightShift>
 8002306:	e047      	b.n	8002398 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	069b      	lsls	r3, r3, #26
 8002318:	429a      	cmp	r2, r3
 800231a:	d107      	bne.n	800232c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800232a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002332:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	069b      	lsls	r3, r3, #26
 800233c:	429a      	cmp	r2, r3
 800233e:	d107      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800234e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	069b      	lsls	r3, r3, #26
 8002360:	429a      	cmp	r2, r3
 8002362:	d107      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002372:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800237a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	069b      	lsls	r3, r3, #26
 8002384:	429a      	cmp	r2, r3
 8002386:	d107      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002396:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fbab 	bl	8001af8 <LL_ADC_IsEnabled>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 81bb 	bne.w	8002720 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6819      	ldr	r1, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f7ff fafc 	bl	80019b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a12      	ldr	r2, [pc, #72]	; (800240c <HAL_ADC_ConfigChannel+0x284>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	f040 8130 	bne.w	8002628 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x268>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2b09      	cmp	r3, #9
 80023e6:	bf94      	ite	ls
 80023e8:	2301      	movls	r3, #1
 80023ea:	2300      	movhi	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e01b      	b.n	8002428 <HAL_ADC_ConfigChannel+0x2a0>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80023fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002400:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d103      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e005      	b.n	8002418 <HAL_ADC_ConfigChannel+0x290>
 800240c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	3301      	adds	r3, #1
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	2b09      	cmp	r3, #9
 8002420:	bf94      	ite	ls
 8002422:	2301      	movls	r3, #1
 8002424:	2300      	movhi	r3, #0
 8002426:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002428:	2b00      	cmp	r3, #0
 800242a:	d079      	beq.n	8002520 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002434:	2b00      	cmp	r3, #0
 8002436:	d107      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x2c0>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0e9b      	lsrs	r3, r3, #26
 800243e:	3301      	adds	r3, #1
 8002440:	069b      	lsls	r3, r3, #26
 8002442:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002446:	e015      	b.n	8002474 <HAL_ADC_ConfigChannel+0x2ec>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002458:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800245a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002460:	2320      	movs	r3, #32
 8002462:	e003      	b.n	800246c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3301      	adds	r3, #1
 800246e:	069b      	lsls	r3, r3, #26
 8002470:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x30c>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	3301      	adds	r3, #1
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2101      	movs	r1, #1
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	e017      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x33c>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80024a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80024ac:	2320      	movs	r3, #32
 80024ae:	e003      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80024b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	ea42 0103 	orr.w	r1, r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x362>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	3301      	adds	r3, #1
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	051b      	lsls	r3, r3, #20
 80024e8:	e018      	b.n	800251c <HAL_ADC_ConfigChannel+0x394>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80024fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002502:	2320      	movs	r3, #32
 8002504:	e003      	b.n	800250e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	3301      	adds	r3, #1
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800251c:	430b      	orrs	r3, r1
 800251e:	e07e      	b.n	800261e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <HAL_ADC_ConfigChannel+0x3b4>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	3301      	adds	r3, #1
 8002534:	069b      	lsls	r3, r3, #26
 8002536:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800253a:	e015      	b.n	8002568 <HAL_ADC_ConfigChannel+0x3e0>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002554:	2320      	movs	r3, #32
 8002556:	e003      	b.n	8002560 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	3301      	adds	r3, #1
 8002562:	069b      	lsls	r3, r3, #26
 8002564:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x400>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	3301      	adds	r3, #1
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	2101      	movs	r1, #1
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	e017      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x430>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	61bb      	str	r3, [r7, #24]
  return result;
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80025a0:	2320      	movs	r3, #32
 80025a2:	e003      	b.n	80025ac <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	ea42 0103 	orr.w	r1, r2, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10d      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x45c>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	3301      	adds	r3, #1
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	3b1e      	subs	r3, #30
 80025dc:	051b      	lsls	r3, r3, #20
 80025de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025e2:	e01b      	b.n	800261c <HAL_ADC_ConfigChannel+0x494>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	60fb      	str	r3, [r7, #12]
  return result;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80025fc:	2320      	movs	r3, #32
 80025fe:	e003      	b.n	8002608 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3301      	adds	r3, #1
 800260a:	f003 021f 	and.w	r2, r3, #31
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	3b1e      	subs	r3, #30
 8002616:	051b      	lsls	r3, r3, #20
 8002618:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800261c:	430b      	orrs	r3, r1
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	6892      	ldr	r2, [r2, #8]
 8002622:	4619      	mov	r1, r3
 8002624:	f7ff f99b 	bl	800195e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	da77      	bge.n	8002720 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002630:	4840      	ldr	r0, [pc, #256]	; (8002734 <HAL_ADC_ConfigChannel+0x5ac>)
 8002632:	f7ff f8f3 	bl	800181c <LL_ADC_GetCommonPathInternalCh>
 8002636:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002638:	483f      	ldr	r0, [pc, #252]	; (8002738 <HAL_ADC_ConfigChannel+0x5b0>)
 800263a:	f7ff fa5d 	bl	8001af8 <LL_ADC_IsEnabled>
 800263e:	4604      	mov	r4, r0
 8002640:	483e      	ldr	r0, [pc, #248]	; (800273c <HAL_ADC_ConfigChannel+0x5b4>)
 8002642:	f7ff fa59 	bl	8001af8 <LL_ADC_IsEnabled>
 8002646:	4603      	mov	r3, r0
 8002648:	4323      	orrs	r3, r4
 800264a:	2b00      	cmp	r3, #0
 800264c:	d155      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a3b      	ldr	r2, [pc, #236]	; (8002740 <HAL_ADC_ConfigChannel+0x5b8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d122      	bne.n	800269e <HAL_ADC_ConfigChannel+0x516>
 8002658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11d      	bne.n	800269e <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a35      	ldr	r2, [pc, #212]	; (800273c <HAL_ADC_ConfigChannel+0x5b4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d159      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800266c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002672:	4619      	mov	r1, r3
 8002674:	482f      	ldr	r0, [pc, #188]	; (8002734 <HAL_ADC_ConfigChannel+0x5ac>)
 8002676:	f7ff f8be 	bl	80017f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800267a:	4b32      	ldr	r3, [pc, #200]	; (8002744 <HAL_ADC_ConfigChannel+0x5bc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	4a31      	ldr	r2, [pc, #196]	; (8002748 <HAL_ADC_ConfigChannel+0x5c0>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	099b      	lsrs	r3, r3, #6
 8002688:	3301      	adds	r3, #1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800268e:	e002      	b.n	8002696 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	3b01      	subs	r3, #1
 8002694:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f9      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800269c:	e040      	b.n	8002720 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a2a      	ldr	r2, [pc, #168]	; (800274c <HAL_ADC_ConfigChannel+0x5c4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d111      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x544>
 80026a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10c      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a21      	ldr	r2, [pc, #132]	; (800273c <HAL_ADC_ConfigChannel+0x5b4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d131      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80026bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c2:	4619      	mov	r1, r3
 80026c4:	481b      	ldr	r0, [pc, #108]	; (8002734 <HAL_ADC_ConfigChannel+0x5ac>)
 80026c6:	f7ff f896 	bl	80017f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ca:	e029      	b.n	8002720 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <HAL_ADC_ConfigChannel+0x5c8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d124      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x598>
 80026d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d11f      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a15      	ldr	r2, [pc, #84]	; (800273c <HAL_ADC_ConfigChannel+0x5b4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d11a      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80026ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026f0:	4619      	mov	r1, r3
 80026f2:	4810      	ldr	r0, [pc, #64]	; (8002734 <HAL_ADC_ConfigChannel+0x5ac>)
 80026f4:	f7ff f87f 	bl	80017f6 <LL_ADC_SetCommonPathInternalCh>
 80026f8:	e012      	b.n	8002720 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f043 0220 	orr.w	r2, r3, #32
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800270c:	e008      	b.n	8002720 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	f043 0220 	orr.w	r2, r3, #32
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002728:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800272c:	4618      	mov	r0, r3
 800272e:	3784      	adds	r7, #132	; 0x84
 8002730:	46bd      	mov	sp, r7
 8002732:	bd90      	pop	{r4, r7, pc}
 8002734:	40022300 	.word	0x40022300
 8002738:	40022000 	.word	0x40022000
 800273c:	40022100 	.word	0x40022100
 8002740:	cb840000 	.word	0xcb840000
 8002744:	24000000 	.word	0x24000000
 8002748:	053e2d63 	.word	0x053e2d63
 800274c:	bac04000 	.word	0xbac04000
 8002750:	cfb80000 	.word	0xcfb80000

08002754 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff f9c9 	bl	8001af8 <LL_ADC_IsEnabled>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d161      	bne.n	8002830 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	4b32      	ldr	r3, [pc, #200]	; (800283c <ADC_Enable+0xe8>)
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00d      	beq.n	8002796 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f043 0210 	orr.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e04d      	b.n	8002832 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff f998 	bl	8001ad0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027a0:	f7fe ffe6 	bl	8001770 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027a6:	4826      	ldr	r0, [pc, #152]	; (8002840 <ADC_Enable+0xec>)
 80027a8:	f7ff f928 	bl	80019fc <LL_ADC_GetMultimode>
 80027ac:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a24      	ldr	r2, [pc, #144]	; (8002844 <ADC_Enable+0xf0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d002      	beq.n	80027be <ADC_Enable+0x6a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	e000      	b.n	80027c0 <ADC_Enable+0x6c>
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <ADC_Enable+0xf4>)
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d02c      	beq.n	8002822 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d130      	bne.n	8002830 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027ce:	e028      	b.n	8002822 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff f98f 	bl	8001af8 <LL_ADC_IsEnabled>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d104      	bne.n	80027ea <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff f973 	bl	8001ad0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027ea:	f7fe ffc1 	bl	8001770 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d914      	bls.n	8002822 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d00d      	beq.n	8002822 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	f043 0210 	orr.w	r2, r3, #16
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	f043 0201 	orr.w	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e007      	b.n	8002832 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d1cf      	bne.n	80027d0 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	8000003f 	.word	0x8000003f
 8002840:	40022300 	.word	0x40022300
 8002844:	40022100 	.word	0x40022100
 8002848:	40022000 	.word	0x40022000

0800284c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002854:	4b60      	ldr	r3, [pc, #384]	; (80029d8 <ADC_ConfigureBoostMode+0x18c>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01c      	beq.n	800289a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002860:	f001 fbee 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 8002864:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800286e:	d010      	beq.n	8002892 <ADC_ConfigureBoostMode+0x46>
 8002870:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002874:	d873      	bhi.n	800295e <ADC_ConfigureBoostMode+0x112>
 8002876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287a:	d002      	beq.n	8002882 <ADC_ConfigureBoostMode+0x36>
 800287c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002880:	d16d      	bne.n	800295e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	0c1b      	lsrs	r3, r3, #16
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	fbb2 f3f3 	udiv	r3, r2, r3
 800288e:	60fb      	str	r3, [r7, #12]
        break;
 8002890:	e068      	b.n	8002964 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	60fb      	str	r3, [r7, #12]
        break;
 8002898:	e064      	b.n	8002964 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800289a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800289e:	f04f 0100 	mov.w	r1, #0
 80028a2:	f002 fde7 	bl	8005474 <HAL_RCCEx_GetPeriphCLKFreq>
 80028a6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028b0:	d051      	beq.n	8002956 <ADC_ConfigureBoostMode+0x10a>
 80028b2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028b6:	d854      	bhi.n	8002962 <ADC_ConfigureBoostMode+0x116>
 80028b8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028bc:	d047      	beq.n	800294e <ADC_ConfigureBoostMode+0x102>
 80028be:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028c2:	d84e      	bhi.n	8002962 <ADC_ConfigureBoostMode+0x116>
 80028c4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028c8:	d03d      	beq.n	8002946 <ADC_ConfigureBoostMode+0xfa>
 80028ca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028ce:	d848      	bhi.n	8002962 <ADC_ConfigureBoostMode+0x116>
 80028d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028d4:	d033      	beq.n	800293e <ADC_ConfigureBoostMode+0xf2>
 80028d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028da:	d842      	bhi.n	8002962 <ADC_ConfigureBoostMode+0x116>
 80028dc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028e0:	d029      	beq.n	8002936 <ADC_ConfigureBoostMode+0xea>
 80028e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028e6:	d83c      	bhi.n	8002962 <ADC_ConfigureBoostMode+0x116>
 80028e8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80028ec:	d01a      	beq.n	8002924 <ADC_ConfigureBoostMode+0xd8>
 80028ee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80028f2:	d836      	bhi.n	8002962 <ADC_ConfigureBoostMode+0x116>
 80028f4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80028f8:	d014      	beq.n	8002924 <ADC_ConfigureBoostMode+0xd8>
 80028fa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80028fe:	d830      	bhi.n	8002962 <ADC_ConfigureBoostMode+0x116>
 8002900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002904:	d00e      	beq.n	8002924 <ADC_ConfigureBoostMode+0xd8>
 8002906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800290a:	d82a      	bhi.n	8002962 <ADC_ConfigureBoostMode+0x116>
 800290c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002910:	d008      	beq.n	8002924 <ADC_ConfigureBoostMode+0xd8>
 8002912:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002916:	d824      	bhi.n	8002962 <ADC_ConfigureBoostMode+0x116>
 8002918:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800291c:	d002      	beq.n	8002924 <ADC_ConfigureBoostMode+0xd8>
 800291e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002922:	d11e      	bne.n	8002962 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	0c9b      	lsrs	r3, r3, #18
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002932:	60fb      	str	r3, [r7, #12]
        break;
 8002934:	e016      	b.n	8002964 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	60fb      	str	r3, [r7, #12]
        break;
 800293c:	e012      	b.n	8002964 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	60fb      	str	r3, [r7, #12]
        break;
 8002944:	e00e      	b.n	8002964 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	60fb      	str	r3, [r7, #12]
        break;
 800294c:	e00a      	b.n	8002964 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	09db      	lsrs	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]
        break;
 8002954:	e006      	b.n	8002964 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	60fb      	str	r3, [r7, #12]
        break;
 800295c:	e002      	b.n	8002964 <ADC_ConfigureBoostMode+0x118>
        break;
 800295e:	bf00      	nop
 8002960:	e000      	b.n	8002964 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002962:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <ADC_ConfigureBoostMode+0x190>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d808      	bhi.n	8002984 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002980:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002982:	e025      	b.n	80029d0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <ADC_ConfigureBoostMode+0x194>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d80a      	bhi.n	80029a2 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299e:	609a      	str	r2, [r3, #8]
}
 80029a0:	e016      	b.n	80029d0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <ADC_ConfigureBoostMode+0x198>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d80a      	bhi.n	80029c0 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029bc:	609a      	str	r2, [r3, #8]
}
 80029be:	e007      	b.n	80029d0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80029ce:	609a      	str	r2, [r3, #8]
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40022300 	.word	0x40022300
 80029dc:	005f5e10 	.word	0x005f5e10
 80029e0:	00bebc20 	.word	0x00bebc20
 80029e4:	017d7840 	.word	0x017d7840

080029e8 <LL_ADC_IsEnabled>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <LL_ADC_IsEnabled+0x18>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <LL_ADC_IsEnabled+0x1a>
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <LL_ADC_REG_IsConversionOngoing>:
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d101      	bne.n	8002a26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b09f      	sub	sp, #124	; 0x7c
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e080      	b.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a3d      	ldr	r2, [pc, #244]	; (8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d102      	bne.n	8002a72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a6c:	4b3c      	ldr	r3, [pc, #240]	; (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	e001      	b.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10b      	bne.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e05f      	b.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff ffb9 	bl	8002a0e <LL_ADC_REG_IsConversionOngoing>
 8002a9c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ffb3 	bl	8002a0e <LL_ADC_REG_IsConversionOngoing>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d141      	bne.n	8002b32 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d13e      	bne.n	8002b32 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002ab6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ad2:	4822      	ldr	r0, [pc, #136]	; (8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ad4:	f7ff ff88 	bl	80029e8 <LL_ADC_IsEnabled>
 8002ad8:	4604      	mov	r4, r0
 8002ada:	4821      	ldr	r0, [pc, #132]	; (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002adc:	f7ff ff84 	bl	80029e8 <LL_ADC_IsEnabled>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4323      	orrs	r3, r4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d12e      	bne.n	8002b46 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	6811      	ldr	r1, [r2, #0]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	6892      	ldr	r2, [r2, #8]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	431a      	orrs	r2, r3
 8002afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b00:	e021      	b.n	8002b46 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b0c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b0e:	4813      	ldr	r0, [pc, #76]	; (8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002b10:	f7ff ff6a 	bl	80029e8 <LL_ADC_IsEnabled>
 8002b14:	4604      	mov	r4, r0
 8002b16:	4812      	ldr	r0, [pc, #72]	; (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002b18:	f7ff ff66 	bl	80029e8 <LL_ADC_IsEnabled>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4323      	orrs	r3, r4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d110      	bne.n	8002b46 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b2e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b30:	e009      	b.n	8002b46 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002b44:	e000      	b.n	8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b46:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	377c      	adds	r7, #124	; 0x7c
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd90      	pop	{r4, r7, pc}
 8002b5c:	40022000 	.word	0x40022000
 8002b60:	40022100 	.word	0x40022100
 8002b64:	40022300 	.word	0x40022300
 8002b68:	fffff0e0 	.word	0xfffff0e0

08002b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <__NVIC_SetPriorityGrouping+0x40>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9a:	4a04      	ldr	r2, [pc, #16]	; (8002bac <__NVIC_SetPriorityGrouping+0x40>)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	60d3      	str	r3, [r2, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000ed00 	.word	0xe000ed00
 8002bb0:	05fa0000 	.word	0x05fa0000

08002bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <__NVIC_GetPriorityGrouping+0x18>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	f003 0307 	and.w	r3, r3, #7
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	; (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	; (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	; 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	; 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c9c:	d301      	bcc.n	8002ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00f      	b.n	8002cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <SysTick_Config+0x40>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002caa:	210f      	movs	r1, #15
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb0:	f7ff ff8e 	bl	8002bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <SysTick_Config+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <SysTick_Config+0x40>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff47 	bl	8002b6c <__NVIC_SetPriorityGrouping>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf4:	f7ff ff5e 	bl	8002bb4 <__NVIC_GetPriorityGrouping>
 8002cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	6978      	ldr	r0, [r7, #20]
 8002d00:	f7ff ff90 	bl	8002c24 <NVIC_EncodePriority>
 8002d04:	4602      	mov	r2, r0
 8002d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff5f 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002d12:	bf00      	nop
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ffb2 	bl	8002c8c <SysTick_Config>
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	; 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d42:	4b89      	ldr	r3, [pc, #548]	; (8002f68 <HAL_GPIO_Init+0x234>)
 8002d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d46:	e194      	b.n	8003072 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8186 	beq.w	800306c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d005      	beq.n	8002d78 <HAL_GPIO_Init+0x44>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d130      	bne.n	8002dda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dae:	2201      	movs	r2, #1
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	f003 0201 	and.w	r2, r3, #1
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d017      	beq.n	8002e16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2203      	movs	r2, #3
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d123      	bne.n	8002e6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	08da      	lsrs	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3208      	adds	r2, #8
 8002e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	220f      	movs	r2, #15
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	08da      	lsrs	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3208      	adds	r2, #8
 8002e64:	69b9      	ldr	r1, [r7, #24]
 8002e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0203 	and.w	r2, r3, #3
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80e0 	beq.w	800306c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eac:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <HAL_GPIO_Init+0x238>)
 8002eae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002eb2:	4a2e      	ldr	r2, [pc, #184]	; (8002f6c <HAL_GPIO_Init+0x238>)
 8002eb4:	f043 0302 	orr.w	r3, r3, #2
 8002eb8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_GPIO_Init+0x238>)
 8002ebe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eca:	4a29      	ldr	r2, [pc, #164]	; (8002f70 <HAL_GPIO_Init+0x23c>)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	089b      	lsrs	r3, r3, #2
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	220f      	movs	r2, #15
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <HAL_GPIO_Init+0x240>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d052      	beq.n	8002f9c <HAL_GPIO_Init+0x268>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <HAL_GPIO_Init+0x244>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d031      	beq.n	8002f62 <HAL_GPIO_Init+0x22e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_GPIO_Init+0x248>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d02b      	beq.n	8002f5e <HAL_GPIO_Init+0x22a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_GPIO_Init+0x24c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d025      	beq.n	8002f5a <HAL_GPIO_Init+0x226>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <HAL_GPIO_Init+0x250>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01f      	beq.n	8002f56 <HAL_GPIO_Init+0x222>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1b      	ldr	r2, [pc, #108]	; (8002f88 <HAL_GPIO_Init+0x254>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d019      	beq.n	8002f52 <HAL_GPIO_Init+0x21e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1a      	ldr	r2, [pc, #104]	; (8002f8c <HAL_GPIO_Init+0x258>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <HAL_GPIO_Init+0x21a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <HAL_GPIO_Init+0x25c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00d      	beq.n	8002f4a <HAL_GPIO_Init+0x216>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a18      	ldr	r2, [pc, #96]	; (8002f94 <HAL_GPIO_Init+0x260>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <HAL_GPIO_Init+0x212>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <HAL_GPIO_Init+0x264>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_GPIO_Init+0x20e>
 8002f3e:	2309      	movs	r3, #9
 8002f40:	e02d      	b.n	8002f9e <HAL_GPIO_Init+0x26a>
 8002f42:	230a      	movs	r3, #10
 8002f44:	e02b      	b.n	8002f9e <HAL_GPIO_Init+0x26a>
 8002f46:	2308      	movs	r3, #8
 8002f48:	e029      	b.n	8002f9e <HAL_GPIO_Init+0x26a>
 8002f4a:	2307      	movs	r3, #7
 8002f4c:	e027      	b.n	8002f9e <HAL_GPIO_Init+0x26a>
 8002f4e:	2306      	movs	r3, #6
 8002f50:	e025      	b.n	8002f9e <HAL_GPIO_Init+0x26a>
 8002f52:	2305      	movs	r3, #5
 8002f54:	e023      	b.n	8002f9e <HAL_GPIO_Init+0x26a>
 8002f56:	2304      	movs	r3, #4
 8002f58:	e021      	b.n	8002f9e <HAL_GPIO_Init+0x26a>
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e01f      	b.n	8002f9e <HAL_GPIO_Init+0x26a>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e01d      	b.n	8002f9e <HAL_GPIO_Init+0x26a>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e01b      	b.n	8002f9e <HAL_GPIO_Init+0x26a>
 8002f66:	bf00      	nop
 8002f68:	58000080 	.word	0x58000080
 8002f6c:	58024400 	.word	0x58024400
 8002f70:	58000400 	.word	0x58000400
 8002f74:	58020000 	.word	0x58020000
 8002f78:	58020400 	.word	0x58020400
 8002f7c:	58020800 	.word	0x58020800
 8002f80:	58020c00 	.word	0x58020c00
 8002f84:	58021000 	.word	0x58021000
 8002f88:	58021400 	.word	0x58021400
 8002f8c:	58021800 	.word	0x58021800
 8002f90:	58021c00 	.word	0x58021c00
 8002f94:	58022000 	.word	0x58022000
 8002f98:	58022400 	.word	0x58022400
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	f002 0203 	and.w	r2, r2, #3
 8002fa4:	0092      	lsls	r2, r2, #2
 8002fa6:	4093      	lsls	r3, r2
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fae:	4938      	ldr	r1, [pc, #224]	; (8003090 <HAL_GPIO_Init+0x35c>)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	089b      	lsrs	r3, r3, #2
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	3301      	adds	r3, #1
 8003070:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	f47f ae63 	bne.w	8002d48 <HAL_GPIO_Init+0x14>
  }
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	3724      	adds	r7, #36	; 0x24
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	58000400 	.word	0x58000400

08003094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	807b      	strh	r3, [r7, #2]
 80030a0:	4613      	mov	r3, r2
 80030a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030a4:	787b      	ldrb	r3, [r7, #1]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030b0:	e003      	b.n	80030ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030b2:	887b      	ldrh	r3, [r7, #2]
 80030b4:	041a      	lsls	r2, r3, #16
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	619a      	str	r2, [r3, #24]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80030d0:	4b29      	ldr	r3, [pc, #164]	; (8003178 <HAL_PWREx_ConfigSupply+0xb0>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	2b06      	cmp	r3, #6
 80030da:	d00a      	beq.n	80030f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030dc:	4b26      	ldr	r3, [pc, #152]	; (8003178 <HAL_PWREx_ConfigSupply+0xb0>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d001      	beq.n	80030ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e040      	b.n	8003170 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e03e      	b.n	8003170 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80030f2:	4b21      	ldr	r3, [pc, #132]	; (8003178 <HAL_PWREx_ConfigSupply+0xb0>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80030fa:	491f      	ldr	r1, [pc, #124]	; (8003178 <HAL_PWREx_ConfigSupply+0xb0>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003102:	f7fe fb35 	bl	8001770 <HAL_GetTick>
 8003106:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003108:	e009      	b.n	800311e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800310a:	f7fe fb31 	bl	8001770 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003118:	d901      	bls.n	800311e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e028      	b.n	8003170 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800311e:	4b16      	ldr	r3, [pc, #88]	; (8003178 <HAL_PWREx_ConfigSupply+0xb0>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312a:	d1ee      	bne.n	800310a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b1e      	cmp	r3, #30
 8003130:	d008      	beq.n	8003144 <HAL_PWREx_ConfigSupply+0x7c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b2e      	cmp	r3, #46	; 0x2e
 8003136:	d005      	beq.n	8003144 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b1d      	cmp	r3, #29
 800313c:	d002      	beq.n	8003144 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b2d      	cmp	r3, #45	; 0x2d
 8003142:	d114      	bne.n	800316e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003144:	f7fe fb14 	bl	8001770 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800314a:	e009      	b.n	8003160 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800314c:	f7fe fb10 	bl	8001770 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800315a:	d901      	bls.n	8003160 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e007      	b.n	8003170 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_PWREx_ConfigSupply+0xb0>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316c:	d1ee      	bne.n	800314c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	58024800 	.word	0x58024800

0800317c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08c      	sub	sp, #48	; 0x30
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d102      	bne.n	8003190 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	f000 bc1f 	b.w	80039ce <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80b3 	beq.w	8003304 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319e:	4b95      	ldr	r3, [pc, #596]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031a8:	4b92      	ldr	r3, [pc, #584]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d007      	beq.n	80031c4 <HAL_RCC_OscConfig+0x48>
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	2b18      	cmp	r3, #24
 80031b8:	d112      	bne.n	80031e0 <HAL_RCC_OscConfig+0x64>
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d10d      	bne.n	80031e0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	4b8b      	ldr	r3, [pc, #556]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8098 	beq.w	8003302 <HAL_RCC_OscConfig+0x186>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 8093 	bne.w	8003302 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e3f6      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e8:	d106      	bne.n	80031f8 <HAL_RCC_OscConfig+0x7c>
 80031ea:	4b82      	ldr	r3, [pc, #520]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a81      	ldr	r2, [pc, #516]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e058      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d112      	bne.n	8003226 <HAL_RCC_OscConfig+0xaa>
 8003200:	4b7c      	ldr	r3, [pc, #496]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a7b      	ldr	r2, [pc, #492]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b79      	ldr	r3, [pc, #484]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a78      	ldr	r2, [pc, #480]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003212:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	4b76      	ldr	r3, [pc, #472]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a75      	ldr	r2, [pc, #468]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800321e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	e041      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800322e:	d112      	bne.n	8003256 <HAL_RCC_OscConfig+0xda>
 8003230:	4b70      	ldr	r3, [pc, #448]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a6f      	ldr	r2, [pc, #444]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a6c      	ldr	r2, [pc, #432]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003242:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4b6a      	ldr	r3, [pc, #424]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a69      	ldr	r2, [pc, #420]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800324e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	e029      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800325e:	d112      	bne.n	8003286 <HAL_RCC_OscConfig+0x10a>
 8003260:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a63      	ldr	r2, [pc, #396]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a60      	ldr	r2, [pc, #384]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4b5e      	ldr	r3, [pc, #376]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a5d      	ldr	r2, [pc, #372]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800327e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e011      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
 8003286:	4b5b      	ldr	r3, [pc, #364]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a5a      	ldr	r2, [pc, #360]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800328c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b58      	ldr	r3, [pc, #352]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a57      	ldr	r2, [pc, #348]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	4b55      	ldr	r3, [pc, #340]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a54      	ldr	r2, [pc, #336]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80032a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80032a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d013      	beq.n	80032da <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7fe fa5d 	bl	8001770 <HAL_GetTick>
 80032b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ba:	f7fe fa59 	bl	8001770 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b64      	cmp	r3, #100	; 0x64
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e380      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032cc:	4b49      	ldr	r3, [pc, #292]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x13e>
 80032d8:	e014      	b.n	8003304 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe fa49 	bl	8001770 <HAL_GetTick>
 80032de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e2:	f7fe fa45 	bl	8001770 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	; 0x64
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e36c      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032f4:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_OscConfig+0x166>
 8003300:	e000      	b.n	8003304 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003302:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 808c 	beq.w	800342a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003312:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800331a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800331c:	4b35      	ldr	r3, [pc, #212]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <HAL_RCC_OscConfig+0x1bc>
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	2b18      	cmp	r3, #24
 800332c:	d137      	bne.n	800339e <HAL_RCC_OscConfig+0x222>
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d132      	bne.n	800339e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003338:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_OscConfig+0x1d4>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e33e      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 0219 	bic.w	r2, r3, #25
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4925      	ldr	r1, [pc, #148]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7fe fa05 	bl	8001770 <HAL_GetTick>
 8003366:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336a:	f7fe fa01 	bl	8001770 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e328      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003388:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	061b      	lsls	r3, r3, #24
 8003396:	4917      	ldr	r1, [pc, #92]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339c:	e045      	b.n	800342a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d028      	beq.n	80033f8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 0219 	bic.w	r2, r3, #25
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4910      	ldr	r1, [pc, #64]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe f9da 	bl	8001770 <HAL_GetTick>
 80033bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c0:	f7fe f9d6 	bl	8001770 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e2fd      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	061b      	lsls	r3, r3, #24
 80033ec:	4901      	ldr	r1, [pc, #4]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	604b      	str	r3, [r1, #4]
 80033f2:	e01a      	b.n	800342a <HAL_RCC_OscConfig+0x2ae>
 80033f4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f8:	4b97      	ldr	r3, [pc, #604]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a96      	ldr	r2, [pc, #600]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe f9b4 	bl	8001770 <HAL_GetTick>
 8003408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340c:	f7fe f9b0 	bl	8001770 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e2d7      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800341e:	4b8e      	ldr	r3, [pc, #568]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d06a      	beq.n	800350c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003436:	4b88      	ldr	r3, [pc, #544]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800343e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003440:	4b85      	ldr	r3, [pc, #532]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b08      	cmp	r3, #8
 800344a:	d007      	beq.n	800345c <HAL_RCC_OscConfig+0x2e0>
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b18      	cmp	r3, #24
 8003450:	d11b      	bne.n	800348a <HAL_RCC_OscConfig+0x30e>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d116      	bne.n	800348a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800345c:	4b7e      	ldr	r3, [pc, #504]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_OscConfig+0x2f8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	2b80      	cmp	r3, #128	; 0x80
 800346e:	d001      	beq.n	8003474 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e2ac      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003474:	4b78      	ldr	r3, [pc, #480]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	4975      	ldr	r1, [pc, #468]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 8003484:	4313      	orrs	r3, r2
 8003486:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003488:	e040      	b.n	800350c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d023      	beq.n	80034da <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003492:	4b71      	ldr	r3, [pc, #452]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a70      	ldr	r2, [pc, #448]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 8003498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fe f967 	bl	8001770 <HAL_GetTick>
 80034a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034a6:	f7fe f963 	bl	8001770 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e28a      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034b8:	4b67      	ldr	r3, [pc, #412]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034c4:	4b64      	ldr	r3, [pc, #400]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	4961      	ldr	r1, [pc, #388]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60cb      	str	r3, [r1, #12]
 80034d8:	e018      	b.n	800350c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034da:	4b5f      	ldr	r3, [pc, #380]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a5e      	ldr	r2, [pc, #376]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 80034e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fe f943 	bl	8001770 <HAL_GetTick>
 80034ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034ee:	f7fe f93f 	bl	8001770 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e266      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003500:	4b55      	ldr	r3, [pc, #340]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d036      	beq.n	8003586 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d019      	beq.n	8003554 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003520:	4b4d      	ldr	r3, [pc, #308]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 8003522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003524:	4a4c      	ldr	r2, [pc, #304]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fe f920 	bl	8001770 <HAL_GetTick>
 8003530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003534:	f7fe f91c 	bl	8001770 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e243      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003546:	4b44      	ldr	r3, [pc, #272]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 8003548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x3b8>
 8003552:	e018      	b.n	8003586 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003554:	4b40      	ldr	r3, [pc, #256]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	4a3f      	ldr	r2, [pc, #252]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fe f906 	bl	8001770 <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003568:	f7fe f902 	bl	8001770 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e229      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d036      	beq.n	8003600 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d019      	beq.n	80035ce <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800359a:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a2e      	ldr	r2, [pc, #184]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 80035a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035a6:	f7fe f8e3 	bl	8001770 <HAL_GetTick>
 80035aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ae:	f7fe f8df 	bl	8001770 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e206      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035c0:	4b25      	ldr	r3, [pc, #148]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x432>
 80035cc:	e018      	b.n	8003600 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035ce:	4b22      	ldr	r3, [pc, #136]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a21      	ldr	r2, [pc, #132]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 80035d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035da:	f7fe f8c9 	bl	8001770 <HAL_GetTick>
 80035de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e2:	f7fe f8c5 	bl	8001770 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e1ec      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035f4:	4b18      	ldr	r3, [pc, #96]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f0      	bne.n	80035e2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80af 	beq.w	800376c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_RCC_OscConfig+0x4e0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a12      	ldr	r2, [pc, #72]	; (800365c <HAL_RCC_OscConfig+0x4e0>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003618:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800361a:	f7fe f8a9 	bl	8001770 <HAL_GetTick>
 800361e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003622:	f7fe f8a5 	bl	8001770 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b64      	cmp	r3, #100	; 0x64
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e1cc      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003634:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_RCC_OscConfig+0x4e0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d10b      	bne.n	8003660 <HAL_RCC_OscConfig+0x4e4>
 8003648:	4b03      	ldr	r3, [pc, #12]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	4a02      	ldr	r2, [pc, #8]	; (8003658 <HAL_RCC_OscConfig+0x4dc>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6713      	str	r3, [r2, #112]	; 0x70
 8003654:	e05b      	b.n	800370e <HAL_RCC_OscConfig+0x592>
 8003656:	bf00      	nop
 8003658:	58024400 	.word	0x58024400
 800365c:	58024800 	.word	0x58024800
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d112      	bne.n	800368e <HAL_RCC_OscConfig+0x512>
 8003668:	4b9d      	ldr	r3, [pc, #628]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a9c      	ldr	r2, [pc, #624]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
 8003674:	4b9a      	ldr	r3, [pc, #616]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	4a99      	ldr	r2, [pc, #612]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 800367a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800367e:	6713      	str	r3, [r2, #112]	; 0x70
 8003680:	4b97      	ldr	r3, [pc, #604]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a96      	ldr	r2, [pc, #600]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003686:	f023 0304 	bic.w	r3, r3, #4
 800368a:	6713      	str	r3, [r2, #112]	; 0x70
 800368c:	e03f      	b.n	800370e <HAL_RCC_OscConfig+0x592>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b05      	cmp	r3, #5
 8003694:	d112      	bne.n	80036bc <HAL_RCC_OscConfig+0x540>
 8003696:	4b92      	ldr	r3, [pc, #584]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	4a91      	ldr	r2, [pc, #580]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 800369c:	f043 0304 	orr.w	r3, r3, #4
 80036a0:	6713      	str	r3, [r2, #112]	; 0x70
 80036a2:	4b8f      	ldr	r3, [pc, #572]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	4a8e      	ldr	r2, [pc, #568]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ac:	6713      	str	r3, [r2, #112]	; 0x70
 80036ae:	4b8c      	ldr	r3, [pc, #560]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a8b      	ldr	r2, [pc, #556]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ba:	e028      	b.n	800370e <HAL_RCC_OscConfig+0x592>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b85      	cmp	r3, #133	; 0x85
 80036c2:	d112      	bne.n	80036ea <HAL_RCC_OscConfig+0x56e>
 80036c4:	4b86      	ldr	r3, [pc, #536]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a85      	ldr	r2, [pc, #532]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036ca:	f043 0304 	orr.w	r3, r3, #4
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
 80036d0:	4b83      	ldr	r3, [pc, #524]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a82      	ldr	r2, [pc, #520]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	4b80      	ldr	r3, [pc, #512]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4a7f      	ldr	r2, [pc, #508]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
 80036e8:	e011      	b.n	800370e <HAL_RCC_OscConfig+0x592>
 80036ea:	4b7d      	ldr	r3, [pc, #500]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a7c      	ldr	r2, [pc, #496]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70
 80036f6:	4b7a      	ldr	r3, [pc, #488]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	4a79      	ldr	r2, [pc, #484]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80036fc:	f023 0304 	bic.w	r3, r3, #4
 8003700:	6713      	str	r3, [r2, #112]	; 0x70
 8003702:	4b77      	ldr	r3, [pc, #476]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a76      	ldr	r2, [pc, #472]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d015      	beq.n	8003742 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003716:	f7fe f82b 	bl	8001770 <HAL_GetTick>
 800371a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fe f827 	bl	8001770 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	; 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e14c      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003734:	4b6a      	ldr	r3, [pc, #424]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ee      	beq.n	800371e <HAL_RCC_OscConfig+0x5a2>
 8003740:	e014      	b.n	800376c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003742:	f7fe f815 	bl	8001770 <HAL_GetTick>
 8003746:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fe f811 	bl	8001770 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	; 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e136      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003760:	4b5f      	ldr	r3, [pc, #380]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ee      	bne.n	800374a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 812b 	beq.w	80039cc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003776:	4b5a      	ldr	r3, [pc, #360]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800377e:	2b18      	cmp	r3, #24
 8003780:	f000 80bb 	beq.w	80038fa <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	2b02      	cmp	r3, #2
 800378a:	f040 8095 	bne.w	80038b8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378e:	4b54      	ldr	r3, [pc, #336]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a53      	ldr	r2, [pc, #332]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003794:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379a:	f7fd ffe9 	bl	8001770 <HAL_GetTick>
 800379e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a2:	f7fd ffe5 	bl	8001770 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e10c      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037b4:	4b4a      	ldr	r3, [pc, #296]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f0      	bne.n	80037a2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037c0:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80037c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037c4:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_RCC_OscConfig+0x768>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037d0:	0112      	lsls	r2, r2, #4
 80037d2:	430a      	orrs	r2, r1
 80037d4:	4942      	ldr	r1, [pc, #264]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	628b      	str	r3, [r1, #40]	; 0x28
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	3b01      	subs	r3, #1
 80037e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	3b01      	subs	r3, #1
 80037ea:	025b      	lsls	r3, r3, #9
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	3b01      	subs	r3, #1
 80037f6:	041b      	lsls	r3, r3, #16
 80037f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	3b01      	subs	r3, #1
 8003804:	061b      	lsls	r3, r3, #24
 8003806:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800380a:	4935      	ldr	r1, [pc, #212]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 800380c:	4313      	orrs	r3, r2
 800380e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003810:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	4a32      	ldr	r2, [pc, #200]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003816:	f023 0301 	bic.w	r3, r3, #1
 800381a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800381c:	4b30      	ldr	r3, [pc, #192]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 800381e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003820:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_RCC_OscConfig+0x76c>)
 8003822:	4013      	ands	r3, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003828:	00d2      	lsls	r2, r2, #3
 800382a:	492d      	ldr	r1, [pc, #180]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 800382c:	4313      	orrs	r3, r2
 800382e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003830:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	f023 020c 	bic.w	r2, r3, #12
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	4928      	ldr	r1, [pc, #160]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 800383e:	4313      	orrs	r3, r2
 8003840:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003842:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	f023 0202 	bic.w	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	4924      	ldr	r1, [pc, #144]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003850:	4313      	orrs	r3, r2
 8003852:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003854:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	4a21      	ldr	r2, [pc, #132]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 800385a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003860:	4b1f      	ldr	r3, [pc, #124]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800386c:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003872:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003884:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a15      	ldr	r2, [pc, #84]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fd ff6e 	bl	8001770 <HAL_GetTick>
 8003894:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003898:	f7fd ff6a 	bl	8001770 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e091      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038aa:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x71c>
 80038b6:	e089      	b.n	80039cc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a08      	ldr	r2, [pc, #32]	; (80038e0 <HAL_RCC_OscConfig+0x764>)
 80038be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fd ff54 	bl	8001770 <HAL_GetTick>
 80038c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ca:	e00f      	b.n	80038ec <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fd ff50 	bl	8001770 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d908      	bls.n	80038ec <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e077      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
 80038de:	bf00      	nop
 80038e0:	58024400 	.word	0x58024400
 80038e4:	fffffc0c 	.word	0xfffffc0c
 80038e8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ec:	4b3a      	ldr	r3, [pc, #232]	; (80039d8 <HAL_RCC_OscConfig+0x85c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e9      	bne.n	80038cc <HAL_RCC_OscConfig+0x750>
 80038f8:	e068      	b.n	80039cc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038fa:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <HAL_RCC_OscConfig+0x85c>)
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003900:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <HAL_RCC_OscConfig+0x85c>)
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b01      	cmp	r3, #1
 800390c:	d031      	beq.n	8003972 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0203 	and.w	r2, r3, #3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d12a      	bne.n	8003972 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003928:	429a      	cmp	r2, r3
 800392a:	d122      	bne.n	8003972 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d11a      	bne.n	8003972 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	0a5b      	lsrs	r3, r3, #9
 8003940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003948:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d111      	bne.n	8003972 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d108      	bne.n	8003972 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	0e1b      	lsrs	r3, r3, #24
 8003964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e02b      	b.n	80039ce <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003976:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <HAL_RCC_OscConfig+0x85c>)
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397a:	08db      	lsrs	r3, r3, #3
 800397c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003980:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	429a      	cmp	r2, r3
 800398a:	d01f      	beq.n	80039cc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800398c:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_RCC_OscConfig+0x85c>)
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	4a11      	ldr	r2, [pc, #68]	; (80039d8 <HAL_RCC_OscConfig+0x85c>)
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003998:	f7fd feea 	bl	8001770 <HAL_GetTick>
 800399c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800399e:	bf00      	nop
 80039a0:	f7fd fee6 	bl	8001770 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d0f9      	beq.n	80039a0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_RCC_OscConfig+0x85c>)
 80039ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <HAL_RCC_OscConfig+0x860>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039b8:	00d2      	lsls	r2, r2, #3
 80039ba:	4907      	ldr	r1, [pc, #28]	; (80039d8 <HAL_RCC_OscConfig+0x85c>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_RCC_OscConfig+0x85c>)
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <HAL_RCC_OscConfig+0x85c>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3730      	adds	r7, #48	; 0x30
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	58024400 	.word	0x58024400
 80039dc:	ffff0007 	.word	0xffff0007

080039e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e19c      	b.n	8003d2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039f4:	4b8a      	ldr	r3, [pc, #552]	; (8003c20 <HAL_RCC_ClockConfig+0x240>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d910      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b87      	ldr	r3, [pc, #540]	; (8003c20 <HAL_RCC_ClockConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 020f 	bic.w	r2, r3, #15
 8003a0a:	4985      	ldr	r1, [pc, #532]	; (8003c20 <HAL_RCC_ClockConfig+0x240>)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b83      	ldr	r3, [pc, #524]	; (8003c20 <HAL_RCC_ClockConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e184      	b.n	8003d2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d010      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	4b7b      	ldr	r3, [pc, #492]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d908      	bls.n	8003a52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a40:	4b78      	ldr	r3, [pc, #480]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	4975      	ldr	r1, [pc, #468]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d010      	beq.n	8003a80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	4b70      	ldr	r3, [pc, #448]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d908      	bls.n	8003a80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a6e:	4b6d      	ldr	r3, [pc, #436]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	496a      	ldr	r1, [pc, #424]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d010      	beq.n	8003aae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	4b64      	ldr	r3, [pc, #400]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d908      	bls.n	8003aae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a9c:	4b61      	ldr	r3, [pc, #388]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	495e      	ldr	r1, [pc, #376]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d010      	beq.n	8003adc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	4b59      	ldr	r3, [pc, #356]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d908      	bls.n	8003adc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003aca:	4b56      	ldr	r3, [pc, #344]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	4953      	ldr	r1, [pc, #332]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d010      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	4b4d      	ldr	r3, [pc, #308]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d908      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af8:	4b4a      	ldr	r3, [pc, #296]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f023 020f 	bic.w	r2, r3, #15
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4947      	ldr	r1, [pc, #284]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d055      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b16:	4b43      	ldr	r3, [pc, #268]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	4940      	ldr	r1, [pc, #256]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b30:	4b3c      	ldr	r3, [pc, #240]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d121      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0f6      	b.n	8003d2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d107      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b48:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d115      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0ea      	b.n	8003d2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d107      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b60:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d109      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0de      	b.n	8003d2e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b70:	4b2c      	ldr	r3, [pc, #176]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0d6      	b.n	8003d2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b80:	4b28      	ldr	r3, [pc, #160]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f023 0207 	bic.w	r2, r3, #7
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4925      	ldr	r1, [pc, #148]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b92:	f7fd fded 	bl	8001770 <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b98:	e00a      	b.n	8003bb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b9a:	f7fd fde9 	bl	8001770 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e0be      	b.n	8003d2e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d1eb      	bne.n	8003b9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d010      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d208      	bcs.n	8003bf0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bde:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f023 020f 	bic.w	r2, r3, #15
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	490e      	ldr	r1, [pc, #56]	; (8003c24 <HAL_RCC_ClockConfig+0x244>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_ClockConfig+0x240>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d214      	bcs.n	8003c28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <HAL_RCC_ClockConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 020f 	bic.w	r2, r3, #15
 8003c06:	4906      	ldr	r1, [pc, #24]	; (8003c20 <HAL_RCC_ClockConfig+0x240>)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0e:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <HAL_RCC_ClockConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e086      	b.n	8003d2e <HAL_RCC_ClockConfig+0x34e>
 8003c20:	52002000 	.word	0x52002000
 8003c24:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d010      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	4b3f      	ldr	r3, [pc, #252]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d208      	bcs.n	8003c56 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c44:	4b3c      	ldr	r3, [pc, #240]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	4939      	ldr	r1, [pc, #228]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d010      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	4b34      	ldr	r3, [pc, #208]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d208      	bcs.n	8003c84 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c72:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	492e      	ldr	r1, [pc, #184]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699a      	ldr	r2, [r3, #24]
 8003c94:	4b28      	ldr	r3, [pc, #160]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d208      	bcs.n	8003cb2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ca0:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	4922      	ldr	r1, [pc, #136]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d010      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69da      	ldr	r2, [r3, #28]
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d208      	bcs.n	8003ce0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	4917      	ldr	r1, [pc, #92]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003ce0:	f000 f834 	bl	8003d4c <HAL_RCC_GetSysClockFreq>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	0a1b      	lsrs	r3, r3, #8
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	4912      	ldr	r1, [pc, #72]	; (8003d3c <HAL_RCC_ClockConfig+0x35c>)
 8003cf2:	5ccb      	ldrb	r3, [r1, r3]
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <HAL_RCC_ClockConfig+0x358>)
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	4a0d      	ldr	r2, [pc, #52]	; (8003d3c <HAL_RCC_ClockConfig+0x35c>)
 8003d08:	5cd3      	ldrb	r3, [r2, r3]
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
 8003d14:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <HAL_RCC_ClockConfig+0x360>)
 8003d16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d18:	4a0a      	ldr	r2, [pc, #40]	; (8003d44 <HAL_RCC_ClockConfig+0x364>)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <HAL_RCC_ClockConfig+0x368>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd fcda 	bl	80016dc <HAL_InitTick>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	58024400 	.word	0x58024400
 8003d3c:	08008f18 	.word	0x08008f18
 8003d40:	24000004 	.word	0x24000004
 8003d44:	24000000 	.word	0x24000000
 8003d48:	24000008 	.word	0x24000008

08003d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b089      	sub	sp, #36	; 0x24
 8003d50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d52:	4bb3      	ldr	r3, [pc, #716]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d5a:	2b18      	cmp	r3, #24
 8003d5c:	f200 8155 	bhi.w	800400a <HAL_RCC_GetSysClockFreq+0x2be>
 8003d60:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003dcd 	.word	0x08003dcd
 8003d6c:	0800400b 	.word	0x0800400b
 8003d70:	0800400b 	.word	0x0800400b
 8003d74:	0800400b 	.word	0x0800400b
 8003d78:	0800400b 	.word	0x0800400b
 8003d7c:	0800400b 	.word	0x0800400b
 8003d80:	0800400b 	.word	0x0800400b
 8003d84:	0800400b 	.word	0x0800400b
 8003d88:	08003df3 	.word	0x08003df3
 8003d8c:	0800400b 	.word	0x0800400b
 8003d90:	0800400b 	.word	0x0800400b
 8003d94:	0800400b 	.word	0x0800400b
 8003d98:	0800400b 	.word	0x0800400b
 8003d9c:	0800400b 	.word	0x0800400b
 8003da0:	0800400b 	.word	0x0800400b
 8003da4:	0800400b 	.word	0x0800400b
 8003da8:	08003df9 	.word	0x08003df9
 8003dac:	0800400b 	.word	0x0800400b
 8003db0:	0800400b 	.word	0x0800400b
 8003db4:	0800400b 	.word	0x0800400b
 8003db8:	0800400b 	.word	0x0800400b
 8003dbc:	0800400b 	.word	0x0800400b
 8003dc0:	0800400b 	.word	0x0800400b
 8003dc4:	0800400b 	.word	0x0800400b
 8003dc8:	08003dff 	.word	0x08003dff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dcc:	4b94      	ldr	r3, [pc, #592]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003dd8:	4b91      	ldr	r3, [pc, #580]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	08db      	lsrs	r3, r3, #3
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	4a90      	ldr	r2, [pc, #576]	; (8004024 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
 8003de8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003dea:	e111      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003dec:	4b8d      	ldr	r3, [pc, #564]	; (8004024 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dee:	61bb      	str	r3, [r7, #24]
      break;
 8003df0:	e10e      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003df2:	4b8d      	ldr	r3, [pc, #564]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003df4:	61bb      	str	r3, [r7, #24]
      break;
 8003df6:	e10b      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003df8:	4b8c      	ldr	r3, [pc, #560]	; (800402c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003dfa:	61bb      	str	r3, [r7, #24]
      break;
 8003dfc:	e108      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dfe:	4b88      	ldr	r3, [pc, #544]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003e08:	4b85      	ldr	r3, [pc, #532]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e12:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e14:	4b82      	ldr	r3, [pc, #520]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e1e:	4b80      	ldr	r3, [pc, #512]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e22:	08db      	lsrs	r3, r3, #3
 8003e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	fb02 f303 	mul.w	r3, r2, r3
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e36:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80e1 	beq.w	8004004 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	f000 8083 	beq.w	8003f50 <HAL_RCC_GetSysClockFreq+0x204>
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	f200 80a1 	bhi.w	8003f94 <HAL_RCC_GetSysClockFreq+0x248>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x114>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d056      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e5e:	e099      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e60:	4b6f      	ldr	r3, [pc, #444]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d02d      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e6c:	4b6c      	ldr	r3, [pc, #432]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	08db      	lsrs	r3, r3, #3
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	4a6b      	ldr	r2, [pc, #428]	; (8004024 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	ee07 3a90 	vmov	s15, r3
 8003e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e96:	4b62      	ldr	r3, [pc, #392]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eaa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004030 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003ec6:	e087      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004034 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eda:	4b51      	ldr	r3, [pc, #324]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004030 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f0a:	e065      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f16:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004038 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1e:	4b40      	ldr	r3, [pc, #256]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f32:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004030 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f4e:	e043      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800403c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f62:	4b2f      	ldr	r3, [pc, #188]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f76:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004030 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f92:	e021      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004038 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa6:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004030 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fd6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003fd8:	4b11      	ldr	r3, [pc, #68]	; (8004020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	0a5b      	lsrs	r3, r3, #9
 8003fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	ee07 3a90 	vmov	s15, r3
 8003fec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ff0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ffc:	ee17 3a90 	vmov	r3, s15
 8004000:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004002:	e005      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	61bb      	str	r3, [r7, #24]
      break;
 8004008:	e002      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800400c:	61bb      	str	r3, [r7, #24]
      break;
 800400e:	bf00      	nop
  }

  return sysclockfreq;
 8004010:	69bb      	ldr	r3, [r7, #24]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3724      	adds	r7, #36	; 0x24
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	58024400 	.word	0x58024400
 8004024:	03d09000 	.word	0x03d09000
 8004028:	003d0900 	.word	0x003d0900
 800402c:	007a1200 	.word	0x007a1200
 8004030:	46000000 	.word	0x46000000
 8004034:	4c742400 	.word	0x4c742400
 8004038:	4a742400 	.word	0x4a742400
 800403c:	4af42400 	.word	0x4af42400

08004040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004046:	f7ff fe81 	bl	8003d4c <HAL_RCC_GetSysClockFreq>
 800404a:	4602      	mov	r2, r0
 800404c:	4b10      	ldr	r3, [pc, #64]	; (8004090 <HAL_RCC_GetHCLKFreq+0x50>)
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	0a1b      	lsrs	r3, r3, #8
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	490f      	ldr	r1, [pc, #60]	; (8004094 <HAL_RCC_GetHCLKFreq+0x54>)
 8004058:	5ccb      	ldrb	r3, [r1, r3]
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	fa22 f303 	lsr.w	r3, r2, r3
 8004062:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <HAL_RCC_GetHCLKFreq+0x50>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	4a09      	ldr	r2, [pc, #36]	; (8004094 <HAL_RCC_GetHCLKFreq+0x54>)
 800406e:	5cd3      	ldrb	r3, [r2, r3]
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	fa22 f303 	lsr.w	r3, r2, r3
 800407a:	4a07      	ldr	r2, [pc, #28]	; (8004098 <HAL_RCC_GetHCLKFreq+0x58>)
 800407c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800407e:	4a07      	ldr	r2, [pc, #28]	; (800409c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <HAL_RCC_GetHCLKFreq+0x58>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	58024400 	.word	0x58024400
 8004094:	08008f18 	.word	0x08008f18
 8004098:	24000004 	.word	0x24000004
 800409c:	24000000 	.word	0x24000000

080040a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80040a4:	f7ff ffcc 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	4904      	ldr	r1, [pc, #16]	; (80040c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	58024400 	.word	0x58024400
 80040c8:	08008f18 	.word	0x08008f18

080040cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80040d0:	f7ff ffb6 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4904      	ldr	r1, [pc, #16]	; (80040f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	58024400 	.word	0x58024400
 80040f4:	08008f18 	.word	0x08008f18

080040f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040fc:	b0c8      	sub	sp, #288	; 0x120
 80040fe:	af00      	add	r7, sp, #0
 8004100:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004104:	2300      	movs	r3, #0
 8004106:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800410a:	2300      	movs	r3, #0
 800410c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800411c:	2500      	movs	r5, #0
 800411e:	ea54 0305 	orrs.w	r3, r4, r5
 8004122:	d049      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800412a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800412e:	d02f      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004130:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004134:	d828      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004136:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800413a:	d01a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800413c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004140:	d822      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800414a:	d007      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800414c:	e01c      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414e:	4ba7      	ldr	r3, [pc, #668]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	4aa6      	ldr	r2, [pc, #664]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004158:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800415a:	e01a      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800415c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004160:	3308      	adds	r3, #8
 8004162:	2102      	movs	r1, #2
 8004164:	4618      	mov	r0, r3
 8004166:	f002 fa6d 	bl	8006644 <RCCEx_PLL2_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004170:	e00f      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004176:	3328      	adds	r3, #40	; 0x28
 8004178:	2102      	movs	r1, #2
 800417a:	4618      	mov	r0, r3
 800417c:	f002 fb14 	bl	80067a8 <RCCEx_PLL3_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004186:	e004      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800418e:	e000      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004192:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800419a:	4b94      	ldr	r3, [pc, #592]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800419c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80041a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a8:	4a90      	ldr	r2, [pc, #576]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041aa:	430b      	orrs	r3, r1
 80041ac:	6513      	str	r3, [r2, #80]	; 0x50
 80041ae:	e003      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80041c4:	f04f 0900 	mov.w	r9, #0
 80041c8:	ea58 0309 	orrs.w	r3, r8, r9
 80041cc:	d047      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80041ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d82a      	bhi.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80041d8:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80041da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041de:	bf00      	nop
 80041e0:	080041f5 	.word	0x080041f5
 80041e4:	08004203 	.word	0x08004203
 80041e8:	08004219 	.word	0x08004219
 80041ec:	08004237 	.word	0x08004237
 80041f0:	08004237 	.word	0x08004237
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f4:	4b7d      	ldr	r3, [pc, #500]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	4a7c      	ldr	r2, [pc, #496]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004200:	e01a      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004206:	3308      	adds	r3, #8
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f002 fa1a 	bl	8006644 <RCCEx_PLL2_Config>
 8004210:	4603      	mov	r3, r0
 8004212:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004216:	e00f      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421c:	3328      	adds	r3, #40	; 0x28
 800421e:	2100      	movs	r1, #0
 8004220:	4618      	mov	r0, r3
 8004222:	f002 fac1 	bl	80067a8 <RCCEx_PLL3_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800422c:	e004      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004234:	e000      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004238:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004240:	4b6a      	ldr	r3, [pc, #424]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004244:	f023 0107 	bic.w	r1, r3, #7
 8004248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	4a67      	ldr	r2, [pc, #412]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004250:	430b      	orrs	r3, r1
 8004252:	6513      	str	r3, [r2, #80]	; 0x50
 8004254:	e003      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004256:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800425a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800425e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800426a:	f04f 0b00 	mov.w	fp, #0
 800426e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004272:	d054      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800427e:	d036      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004280:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004284:	d82f      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428a:	d032      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800428c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004290:	d829      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004292:	2bc0      	cmp	r3, #192	; 0xc0
 8004294:	d02f      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004296:	2bc0      	cmp	r3, #192	; 0xc0
 8004298:	d825      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800429a:	2b80      	cmp	r3, #128	; 0x80
 800429c:	d018      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800429e:	2b80      	cmp	r3, #128	; 0x80
 80042a0:	d821      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80042a6:	2b40      	cmp	r3, #64	; 0x40
 80042a8:	d007      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80042aa:	e01c      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ac:	4b4f      	ldr	r3, [pc, #316]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	4a4e      	ldr	r2, [pc, #312]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80042b8:	e01e      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042be:	3308      	adds	r3, #8
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f002 f9be 	bl	8006644 <RCCEx_PLL2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80042ce:	e013      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d4:	3328      	adds	r3, #40	; 0x28
 80042d6:	2100      	movs	r1, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	f002 fa65 	bl	80067a8 <RCCEx_PLL3_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80042e4:	e008      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042ec:	e004      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80042ee:	bf00      	nop
 80042f0:	e002      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80042f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004300:	4b3a      	ldr	r3, [pc, #232]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004304:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800430c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430e:	4a37      	ldr	r2, [pc, #220]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004310:	430b      	orrs	r3, r1
 8004312:	6513      	str	r3, [r2, #80]	; 0x50
 8004314:	e003      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004316:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800431a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800432a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800432e:	2300      	movs	r3, #0
 8004330:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004334:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004338:	460b      	mov	r3, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	d05c      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800433e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004344:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004348:	d03b      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800434a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800434e:	d834      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004354:	d037      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435a:	d82e      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800435c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004360:	d033      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004362:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004366:	d828      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436c:	d01a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004372:	d822      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437c:	d007      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800437e:	e01c      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004380:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	4a19      	ldr	r2, [pc, #100]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800438a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800438c:	e01e      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800438e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004392:	3308      	adds	r3, #8
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f002 f954 	bl	8006644 <RCCEx_PLL2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80043a2:	e013      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a8:	3328      	adds	r3, #40	; 0x28
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f002 f9fb 	bl	80067a8 <RCCEx_PLL3_Config>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80043b8:	e008      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043c0:	e004      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80043c2:	bf00      	nop
 80043c4:	e002      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80043c6:	bf00      	nop
 80043c8:	e000      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80043ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80043dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e2:	4a02      	ldr	r2, [pc, #8]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6513      	str	r3, [r2, #80]	; 0x50
 80043e8:	e006      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80043ea:	bf00      	nop
 80043ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004404:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004408:	2300      	movs	r3, #0
 800440a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800440e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004412:	460b      	mov	r3, r1
 8004414:	4313      	orrs	r3, r2
 8004416:	d03a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800441c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441e:	2b30      	cmp	r3, #48	; 0x30
 8004420:	d01f      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004422:	2b30      	cmp	r3, #48	; 0x30
 8004424:	d819      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004426:	2b20      	cmp	r3, #32
 8004428:	d00c      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800442a:	2b20      	cmp	r3, #32
 800442c:	d815      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d019      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004432:	2b10      	cmp	r3, #16
 8004434:	d111      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004436:	4bae      	ldr	r3, [pc, #696]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	4aad      	ldr	r2, [pc, #692]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800443c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004442:	e011      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004448:	3308      	adds	r3, #8
 800444a:	2102      	movs	r1, #2
 800444c:	4618      	mov	r0, r3
 800444e:	f002 f8f9 	bl	8006644 <RCCEx_PLL2_Config>
 8004452:	4603      	mov	r3, r0
 8004454:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004458:	e006      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004460:	e002      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004468:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004470:	4b9f      	ldr	r3, [pc, #636]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004474:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	4a9c      	ldr	r2, [pc, #624]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004480:	430b      	orrs	r3, r1
 8004482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004484:	e003      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004486:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800448a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800448e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800449a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800449e:	2300      	movs	r3, #0
 80044a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80044a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4313      	orrs	r3, r2
 80044ac:	d051      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80044ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b8:	d035      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80044ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044be:	d82e      	bhi.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80044c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044c4:	d031      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80044c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044ca:	d828      	bhi.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80044cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d0:	d01a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80044d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d6:	d822      	bhi.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80044dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e0:	d007      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80044e2:	e01c      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044e4:	4b82      	ldr	r3, [pc, #520]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	4a81      	ldr	r2, [pc, #516]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044f0:	e01c      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044f6:	3308      	adds	r3, #8
 80044f8:	2100      	movs	r1, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	f002 f8a2 	bl	8006644 <RCCEx_PLL2_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004506:	e011      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800450c:	3328      	adds	r3, #40	; 0x28
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f002 f949 	bl	80067a8 <RCCEx_PLL3_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800451c:	e006      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004524:	e002      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004526:	bf00      	nop
 8004528:	e000      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800452a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800452c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004534:	4b6e      	ldr	r3, [pc, #440]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004538:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800453c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004542:	4a6b      	ldr	r2, [pc, #428]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004544:	430b      	orrs	r3, r1
 8004546:	6513      	str	r3, [r2, #80]	; 0x50
 8004548:	e003      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800454e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800455e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004562:	2300      	movs	r3, #0
 8004564:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004568:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800456c:	460b      	mov	r3, r1
 800456e:	4313      	orrs	r3, r2
 8004570:	d053      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800457c:	d033      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800457e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004582:	d82c      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004584:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004588:	d02f      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800458a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800458e:	d826      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004590:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004594:	d02b      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004596:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800459a:	d820      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800459c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045a0:	d012      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80045a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045a6:	d81a      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d022      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b0:	d115      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b6:	3308      	adds	r3, #8
 80045b8:	2101      	movs	r1, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f002 f842 	bl	8006644 <RCCEx_PLL2_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045c6:	e015      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045cc:	3328      	adds	r3, #40	; 0x28
 80045ce:	2101      	movs	r1, #1
 80045d0:	4618      	mov	r0, r3
 80045d2:	f002 f8e9 	bl	80067a8 <RCCEx_PLL3_Config>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045dc:	e00a      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045e4:	e006      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80045e6:	bf00      	nop
 80045e8:	e004      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80045ea:	bf00      	nop
 80045ec:	e002      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80045ee:	bf00      	nop
 80045f0:	e000      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80045f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10a      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80045fc:	4b3c      	ldr	r3, [pc, #240]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004600:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800460a:	4a39      	ldr	r2, [pc, #228]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800460c:	430b      	orrs	r3, r1
 800460e:	6513      	str	r3, [r2, #80]	; 0x50
 8004610:	e003      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004612:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004616:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800461a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004622:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004626:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800462a:	2300      	movs	r3, #0
 800462c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004630:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004634:	460b      	mov	r3, r1
 8004636:	4313      	orrs	r3, r2
 8004638:	d060      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800463a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004642:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004646:	d039      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004648:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800464c:	d832      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800464e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004652:	d035      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004658:	d82c      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800465a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465e:	d031      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004664:	d826      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004666:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800466a:	d02d      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800466c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004670:	d820      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004676:	d012      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800467c:	d81a      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800467e:	2b00      	cmp	r3, #0
 8004680:	d024      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004686:	d115      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468c:	3308      	adds	r3, #8
 800468e:	2101      	movs	r1, #1
 8004690:	4618      	mov	r0, r3
 8004692:	f001 ffd7 	bl	8006644 <RCCEx_PLL2_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800469c:	e017      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800469e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a2:	3328      	adds	r3, #40	; 0x28
 80046a4:	2101      	movs	r1, #1
 80046a6:	4618      	mov	r0, r3
 80046a8:	f002 f87e 	bl	80067a8 <RCCEx_PLL3_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046b2:	e00c      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046ba:	e008      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046bc:	bf00      	nop
 80046be:	e006      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046c0:	bf00      	nop
 80046c2:	e004      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046c4:	bf00      	nop
 80046c6:	e002      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046c8:	bf00      	nop
 80046ca:	e000      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10e      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80046de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046e6:	4a02      	ldr	r2, [pc, #8]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6593      	str	r3, [r2, #88]	; 0x58
 80046ec:	e006      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80046ee:	bf00      	nop
 80046f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800470c:	2300      	movs	r3, #0
 800470e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004712:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004716:	460b      	mov	r3, r1
 8004718:	4313      	orrs	r3, r2
 800471a:	d037      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800471c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004726:	d00e      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800472c:	d816      	bhi.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d018      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004736:	d111      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004738:	4bc4      	ldr	r3, [pc, #784]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	4ac3      	ldr	r2, [pc, #780]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800473e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004742:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004744:	e00f      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800474a:	3308      	adds	r3, #8
 800474c:	2101      	movs	r1, #1
 800474e:	4618      	mov	r0, r3
 8004750:	f001 ff78 	bl	8006644 <RCCEx_PLL2_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800475a:	e004      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004762:	e000      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004766:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800476e:	4bb7      	ldr	r3, [pc, #732]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004772:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800477a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800477c:	4ab3      	ldr	r2, [pc, #716]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800477e:	430b      	orrs	r3, r1
 8004780:	6513      	str	r3, [r2, #80]	; 0x50
 8004782:	e003      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004784:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004788:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800478c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800479c:	2300      	movs	r3, #0
 800479e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4313      	orrs	r3, r2
 80047aa:	d039      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80047ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d81c      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80047b6:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047f9 	.word	0x080047f9
 80047c0:	080047cd 	.word	0x080047cd
 80047c4:	080047db 	.word	0x080047db
 80047c8:	080047f9 	.word	0x080047f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047cc:	4b9f      	ldr	r3, [pc, #636]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4a9e      	ldr	r2, [pc, #632]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047d8:	e00f      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047de:	3308      	adds	r3, #8
 80047e0:	2102      	movs	r1, #2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 ff2e 	bl	8006644 <RCCEx_PLL2_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047ee:	e004      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80047f6:	e000      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80047f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004802:	4b92      	ldr	r3, [pc, #584]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004806:	f023 0103 	bic.w	r1, r3, #3
 800480a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004810:	4a8e      	ldr	r2, [pc, #568]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004812:	430b      	orrs	r3, r1
 8004814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004816:	e003      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800481c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800482c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004830:	2300      	movs	r3, #0
 8004832:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004836:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800483a:	460b      	mov	r3, r1
 800483c:	4313      	orrs	r3, r2
 800483e:	f000 8099 	beq.w	8004974 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004842:	4b83      	ldr	r3, [pc, #524]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a82      	ldr	r2, [pc, #520]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800484e:	f7fc ff8f 	bl	8001770 <HAL_GetTick>
 8004852:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004856:	e00b      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004858:	f7fc ff8a 	bl	8001770 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b64      	cmp	r3, #100	; 0x64
 8004866:	d903      	bls.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800486e:	e005      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004870:	4b77      	ldr	r3, [pc, #476]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ed      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800487c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004880:	2b00      	cmp	r3, #0
 8004882:	d173      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004884:	4b71      	ldr	r3, [pc, #452]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800488c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004890:	4053      	eors	r3, r2
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004896:	2b00      	cmp	r3, #0
 8004898:	d015      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800489a:	4b6c      	ldr	r3, [pc, #432]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048a6:	4b69      	ldr	r3, [pc, #420]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048aa:	4a68      	ldr	r2, [pc, #416]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048b2:	4b66      	ldr	r3, [pc, #408]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	4a65      	ldr	r2, [pc, #404]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048bc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048be:	4a63      	ldr	r2, [pc, #396]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d2:	d118      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fc ff4c 	bl	8001770 <HAL_GetTick>
 80048d8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048dc:	e00d      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048de:	f7fc ff47 	bl	8001770 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80048e8:	1ad2      	subs	r2, r2, r3
 80048ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d903      	bls.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80048f8:	e005      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048fa:	4b54      	ldr	r3, [pc, #336]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0eb      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004906:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800490a:	2b00      	cmp	r3, #0
 800490c:	d129      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800490e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800491e:	d10e      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004920:	4b4a      	ldr	r3, [pc, #296]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004930:	091a      	lsrs	r2, r3, #4
 8004932:	4b48      	ldr	r3, [pc, #288]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004934:	4013      	ands	r3, r2
 8004936:	4a45      	ldr	r2, [pc, #276]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004938:	430b      	orrs	r3, r1
 800493a:	6113      	str	r3, [r2, #16]
 800493c:	e005      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800493e:	4b43      	ldr	r3, [pc, #268]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	4a42      	ldr	r2, [pc, #264]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004944:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004948:	6113      	str	r3, [r2, #16]
 800494a:	4b40      	ldr	r3, [pc, #256]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800494c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800494e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004952:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495a:	4a3c      	ldr	r2, [pc, #240]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800495c:	430b      	orrs	r3, r1
 800495e:	6713      	str	r3, [r2, #112]	; 0x70
 8004960:	e008      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004962:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004966:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800496a:	e003      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004970:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	f002 0301 	and.w	r3, r2, #1
 8004980:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004984:	2300      	movs	r3, #0
 8004986:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800498a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800498e:	460b      	mov	r3, r1
 8004990:	4313      	orrs	r3, r2
 8004992:	f000 8090 	beq.w	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499e:	2b28      	cmp	r3, #40	; 0x28
 80049a0:	d870      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80049a2:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80049a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a8:	08004a8d 	.word	0x08004a8d
 80049ac:	08004a85 	.word	0x08004a85
 80049b0:	08004a85 	.word	0x08004a85
 80049b4:	08004a85 	.word	0x08004a85
 80049b8:	08004a85 	.word	0x08004a85
 80049bc:	08004a85 	.word	0x08004a85
 80049c0:	08004a85 	.word	0x08004a85
 80049c4:	08004a85 	.word	0x08004a85
 80049c8:	08004a59 	.word	0x08004a59
 80049cc:	08004a85 	.word	0x08004a85
 80049d0:	08004a85 	.word	0x08004a85
 80049d4:	08004a85 	.word	0x08004a85
 80049d8:	08004a85 	.word	0x08004a85
 80049dc:	08004a85 	.word	0x08004a85
 80049e0:	08004a85 	.word	0x08004a85
 80049e4:	08004a85 	.word	0x08004a85
 80049e8:	08004a6f 	.word	0x08004a6f
 80049ec:	08004a85 	.word	0x08004a85
 80049f0:	08004a85 	.word	0x08004a85
 80049f4:	08004a85 	.word	0x08004a85
 80049f8:	08004a85 	.word	0x08004a85
 80049fc:	08004a85 	.word	0x08004a85
 8004a00:	08004a85 	.word	0x08004a85
 8004a04:	08004a85 	.word	0x08004a85
 8004a08:	08004a8d 	.word	0x08004a8d
 8004a0c:	08004a85 	.word	0x08004a85
 8004a10:	08004a85 	.word	0x08004a85
 8004a14:	08004a85 	.word	0x08004a85
 8004a18:	08004a85 	.word	0x08004a85
 8004a1c:	08004a85 	.word	0x08004a85
 8004a20:	08004a85 	.word	0x08004a85
 8004a24:	08004a85 	.word	0x08004a85
 8004a28:	08004a8d 	.word	0x08004a8d
 8004a2c:	08004a85 	.word	0x08004a85
 8004a30:	08004a85 	.word	0x08004a85
 8004a34:	08004a85 	.word	0x08004a85
 8004a38:	08004a85 	.word	0x08004a85
 8004a3c:	08004a85 	.word	0x08004a85
 8004a40:	08004a85 	.word	0x08004a85
 8004a44:	08004a85 	.word	0x08004a85
 8004a48:	08004a8d 	.word	0x08004a8d
 8004a4c:	58024400 	.word	0x58024400
 8004a50:	58024800 	.word	0x58024800
 8004a54:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	2101      	movs	r1, #1
 8004a60:	4618      	mov	r0, r3
 8004a62:	f001 fdef 	bl	8006644 <RCCEx_PLL2_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a6c:	e00f      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a72:	3328      	adds	r3, #40	; 0x28
 8004a74:	2101      	movs	r1, #1
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 fe96 	bl	80067a8 <RCCEx_PLL3_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a82:	e004      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a8a:	e000      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a96:	4bc0      	ldr	r3, [pc, #768]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa6:	4abc      	ldr	r2, [pc, #752]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	6553      	str	r3, [r2, #84]	; 0x54
 8004aac:	e003      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ab2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f002 0302 	and.w	r3, r2, #2
 8004ac2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004acc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	d043      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d824      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b35 	.word	0x08004b35
 8004aec:	08004b01 	.word	0x08004b01
 8004af0:	08004b17 	.word	0x08004b17
 8004af4:	08004b35 	.word	0x08004b35
 8004af8:	08004b35 	.word	0x08004b35
 8004afc:	08004b35 	.word	0x08004b35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b04:	3308      	adds	r3, #8
 8004b06:	2101      	movs	r1, #1
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f001 fd9b 	bl	8006644 <RCCEx_PLL2_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b14:	e00f      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b1a:	3328      	adds	r3, #40	; 0x28
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f001 fe42 	bl	80067a8 <RCCEx_PLL3_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b2a:	e004      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b32:	e000      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b3e:	4b96      	ldr	r3, [pc, #600]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b42:	f023 0107 	bic.w	r1, r3, #7
 8004b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b4e:	4a92      	ldr	r2, [pc, #584]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6553      	str	r3, [r2, #84]	; 0x54
 8004b54:	e003      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	f002 0304 	and.w	r3, r2, #4
 8004b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b74:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d043      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b86:	2b05      	cmp	r3, #5
 8004b88:	d824      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004bdd 	.word	0x08004bdd
 8004b94:	08004ba9 	.word	0x08004ba9
 8004b98:	08004bbf 	.word	0x08004bbf
 8004b9c:	08004bdd 	.word	0x08004bdd
 8004ba0:	08004bdd 	.word	0x08004bdd
 8004ba4:	08004bdd 	.word	0x08004bdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bac:	3308      	adds	r3, #8
 8004bae:	2101      	movs	r1, #1
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f001 fd47 	bl	8006644 <RCCEx_PLL2_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bbc:	e00f      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc2:	3328      	adds	r3, #40	; 0x28
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 fdee 	bl	80067a8 <RCCEx_PLL3_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bd2:	e004      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004bda:	e000      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004be6:	4b6c      	ldr	r3, [pc, #432]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	f023 0107 	bic.w	r1, r3, #7
 8004bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bf6:	4a68      	ldr	r2, [pc, #416]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8004bfc:	e003      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c02:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f002 0320 	and.w	r3, r2, #32
 8004c12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c16:	2300      	movs	r3, #0
 8004c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c20:	460b      	mov	r3, r1
 8004c22:	4313      	orrs	r3, r2
 8004c24:	d055      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c32:	d033      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c38:	d82c      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3e:	d02f      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c44:	d826      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c4a:	d02b      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004c4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c50:	d820      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c56:	d012      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c5c:	d81a      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d022      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004c62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c66:	d115      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 fce7 	bl	8006644 <RCCEx_PLL2_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c7c:	e015      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c82:	3328      	adds	r3, #40	; 0x28
 8004c84:	2102      	movs	r1, #2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f001 fd8e 	bl	80067a8 <RCCEx_PLL3_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c92:	e00a      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c9a:	e006      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004c9c:	bf00      	nop
 8004c9e:	e004      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004ca0:	bf00      	nop
 8004ca2:	e002      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004ca4:	bf00      	nop
 8004ca6:	e000      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004caa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10b      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cb2:	4b39      	ldr	r3, [pc, #228]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cc2:	4a35      	ldr	r2, [pc, #212]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6553      	str	r3, [r2, #84]	; 0x54
 8004cc8:	e003      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ce8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	d058      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004cfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004cfe:	d033      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004d00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d04:	d82c      	bhi.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0a:	d02f      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d10:	d826      	bhi.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d16:	d02b      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004d18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d1c:	d820      	bhi.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d22:	d012      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d28:	d81a      	bhi.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d022      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d32:	d115      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d38:	3308      	adds	r3, #8
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 fc81 	bl	8006644 <RCCEx_PLL2_Config>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d48:	e015      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d4e:	3328      	adds	r3, #40	; 0x28
 8004d50:	2102      	movs	r1, #2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f001 fd28 	bl	80067a8 <RCCEx_PLL3_Config>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d66:	e006      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d68:	bf00      	nop
 8004d6a:	e004      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d6c:	bf00      	nop
 8004d6e:	e002      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d70:	bf00      	nop
 8004d72:	e000      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10e      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d8e:	4a02      	ldr	r2, [pc, #8]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6593      	str	r3, [r2, #88]	; 0x58
 8004d94:	e006      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004d96:	bf00      	nop
 8004d98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004da0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004db0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004db4:	2300      	movs	r3, #0
 8004db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	d055      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004dcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004dd0:	d033      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004dd2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004dd6:	d82c      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ddc:	d02f      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de2:	d826      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004de4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004de8:	d02b      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004dea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004dee:	d820      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004df4:	d012      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dfa:	d81a      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d022      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e04:	d115      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 fc18 	bl	8006644 <RCCEx_PLL2_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e1a:	e015      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e20:	3328      	adds	r3, #40	; 0x28
 8004e22:	2102      	movs	r1, #2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 fcbf 	bl	80067a8 <RCCEx_PLL3_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e30:	e00a      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e38:	e006      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004e3a:	bf00      	nop
 8004e3c:	e004      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004e3e:	bf00      	nop
 8004e40:	e002      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004e42:	bf00      	nop
 8004e44:	e000      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e50:	4ba1      	ldr	r3, [pc, #644]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e54:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e60:	4a9d      	ldr	r2, [pc, #628]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e62:	430b      	orrs	r3, r1
 8004e64:	6593      	str	r3, [r2, #88]	; 0x58
 8004e66:	e003      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	f002 0308 	and.w	r3, r2, #8
 8004e7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e80:	2300      	movs	r3, #0
 8004e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	d01e      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea2:	3328      	adds	r3, #40	; 0x28
 8004ea4:	2102      	movs	r1, #2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 fc7e 	bl	80067a8 <RCCEx_PLL3_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004eb8:	4b87      	ldr	r3, [pc, #540]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec8:	4a83      	ldr	r2, [pc, #524]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	f002 0310 	and.w	r3, r2, #16
 8004eda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004ee4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4313      	orrs	r3, r2
 8004eec:	d01e      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efa:	d10c      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f00:	3328      	adds	r3, #40	; 0x28
 8004f02:	2102      	movs	r1, #2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 fc4f 	bl	80067a8 <RCCEx_PLL3_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f16:	4b70      	ldr	r3, [pc, #448]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f26:	4a6c      	ldr	r2, [pc, #432]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004f38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f42:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004f46:	460b      	mov	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	d03e      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f58:	d022      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004f5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f5e:	d81b      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f68:	d00b      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004f6a:	e015      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f70:	3308      	adds	r3, #8
 8004f72:	2100      	movs	r1, #0
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 fb65 	bl	8006644 <RCCEx_PLL2_Config>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f80:	e00f      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f86:	3328      	adds	r3, #40	; 0x28
 8004f88:	2102      	movs	r1, #2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 fc0c 	bl	80067a8 <RCCEx_PLL3_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f96:	e004      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004faa:	4b4b      	ldr	r3, [pc, #300]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fba:	4a47      	ldr	r2, [pc, #284]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004fc0:	e003      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fc6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004fd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fd8:	2300      	movs	r3, #0
 8004fda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fdc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	d03b      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ff2:	d01f      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004ff4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ff8:	d818      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffe:	d003      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005000:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005004:	d007      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005006:	e011      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005008:	4b33      	ldr	r3, [pc, #204]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	4a32      	ldr	r2, [pc, #200]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800500e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005014:	e00f      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501a:	3328      	adds	r3, #40	; 0x28
 800501c:	2101      	movs	r1, #1
 800501e:	4618      	mov	r0, r3
 8005020:	f001 fbc2 	bl	80067a8 <RCCEx_PLL3_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800502a:	e004      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005032:	e000      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005036:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10b      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800503e:	4b26      	ldr	r3, [pc, #152]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504e:	4a22      	ldr	r2, [pc, #136]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005050:	430b      	orrs	r3, r1
 8005052:	6553      	str	r3, [r2, #84]	; 0x54
 8005054:	e003      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005056:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800505a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800505e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800506a:	673b      	str	r3, [r7, #112]	; 0x70
 800506c:	2300      	movs	r3, #0
 800506e:	677b      	str	r3, [r7, #116]	; 0x74
 8005070:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005074:	460b      	mov	r3, r1
 8005076:	4313      	orrs	r3, r2
 8005078:	d034      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800507a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800507e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005088:	d007      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800508a:	e011      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800508c:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	4a11      	ldr	r2, [pc, #68]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005096:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005098:	e00e      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800509a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800509e:	3308      	adds	r3, #8
 80050a0:	2102      	movs	r1, #2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 face 	bl	8006644 <RCCEx_PLL2_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050ae:	e003      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80050b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10d      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ce:	4a02      	ldr	r2, [pc, #8]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050d0:	430b      	orrs	r3, r1
 80050d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050d4:	e006      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80050d6:	bf00      	nop
 80050d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80050f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80050f2:	2300      	movs	r3, #0
 80050f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80050fa:	460b      	mov	r3, r1
 80050fc:	4313      	orrs	r3, r2
 80050fe:	d00c      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005104:	3328      	adds	r3, #40	; 0x28
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f001 fb4d 	bl	80067a8 <RCCEx_PLL3_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800511a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005126:	663b      	str	r3, [r7, #96]	; 0x60
 8005128:	2300      	movs	r3, #0
 800512a:	667b      	str	r3, [r7, #100]	; 0x64
 800512c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005130:	460b      	mov	r3, r1
 8005132:	4313      	orrs	r3, r2
 8005134:	d038      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005142:	d018      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005148:	d811      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800514a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514e:	d014      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005154:	d80b      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d011      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800515a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800515e:	d106      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005160:	4bc3      	ldr	r3, [pc, #780]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	4ac2      	ldr	r2, [pc, #776]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800516a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800516c:	e008      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005174:	e004      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005176:	bf00      	nop
 8005178:	e002      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800517e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005180:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10b      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005188:	4bb9      	ldr	r3, [pc, #740]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	4ab5      	ldr	r2, [pc, #724]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800519a:	430b      	orrs	r3, r1
 800519c:	6553      	str	r3, [r2, #84]	; 0x54
 800519e:	e003      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80051b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80051b6:	2300      	movs	r3, #0
 80051b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80051be:	460b      	mov	r3, r1
 80051c0:	4313      	orrs	r3, r2
 80051c2:	d009      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051c4:	4baa      	ldr	r3, [pc, #680]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80051cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d2:	4aa7      	ldr	r2, [pc, #668]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051d4:	430b      	orrs	r3, r1
 80051d6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80051e4:	653b      	str	r3, [r7, #80]	; 0x50
 80051e6:	2300      	movs	r3, #0
 80051e8:	657b      	str	r3, [r7, #84]	; 0x54
 80051ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80051ee:	460b      	mov	r3, r1
 80051f0:	4313      	orrs	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051f4:	4b9e      	ldr	r3, [pc, #632]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80051fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	4a9b      	ldr	r2, [pc, #620]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005204:	430b      	orrs	r3, r1
 8005206:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005214:	64bb      	str	r3, [r7, #72]	; 0x48
 8005216:	2300      	movs	r3, #0
 8005218:	64fb      	str	r3, [r7, #76]	; 0x4c
 800521a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800521e:	460b      	mov	r3, r1
 8005220:	4313      	orrs	r3, r2
 8005222:	d009      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005224:	4b92      	ldr	r3, [pc, #584]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800522c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005232:	4a8f      	ldr	r2, [pc, #572]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005234:	430b      	orrs	r3, r1
 8005236:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005244:	643b      	str	r3, [r7, #64]	; 0x40
 8005246:	2300      	movs	r3, #0
 8005248:	647b      	str	r3, [r7, #68]	; 0x44
 800524a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800524e:	460b      	mov	r3, r1
 8005250:	4313      	orrs	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005254:	4b86      	ldr	r3, [pc, #536]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	4a85      	ldr	r2, [pc, #532]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800525a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800525e:	6113      	str	r3, [r2, #16]
 8005260:	4b83      	ldr	r3, [pc, #524]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005262:	6919      	ldr	r1, [r3, #16]
 8005264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005268:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800526c:	4a80      	ldr	r2, [pc, #512]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800526e:	430b      	orrs	r3, r1
 8005270:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005280:	2300      	movs	r3, #0
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005284:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005288:	460b      	mov	r3, r1
 800528a:	4313      	orrs	r3, r2
 800528c:	d009      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800528e:	4b78      	ldr	r3, [pc, #480]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005292:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800529a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529c:	4a74      	ldr	r2, [pc, #464]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800529e:	430b      	orrs	r3, r1
 80052a0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052aa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80052ae:	633b      	str	r3, [r7, #48]	; 0x30
 80052b0:	2300      	movs	r3, #0
 80052b2:	637b      	str	r3, [r7, #52]	; 0x34
 80052b4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80052b8:	460b      	mov	r3, r1
 80052ba:	4313      	orrs	r3, r2
 80052bc:	d00a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052be:	4b6c      	ldr	r3, [pc, #432]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80052c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ce:	4a68      	ldr	r2, [pc, #416]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052d0:	430b      	orrs	r3, r1
 80052d2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80052d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	2100      	movs	r1, #0
 80052de:	62b9      	str	r1, [r7, #40]	; 0x28
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052e6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80052ea:	460b      	mov	r3, r1
 80052ec:	4313      	orrs	r3, r2
 80052ee:	d011      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f4:	3308      	adds	r3, #8
 80052f6:	2100      	movs	r1, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 f9a3 	bl	8006644 <RCCEx_PLL2_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005304:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005310:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	2100      	movs	r1, #0
 800531e:	6239      	str	r1, [r7, #32]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
 8005326:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800532a:	460b      	mov	r3, r1
 800532c:	4313      	orrs	r3, r2
 800532e:	d011      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005334:	3308      	adds	r3, #8
 8005336:	2101      	movs	r1, #1
 8005338:	4618      	mov	r0, r3
 800533a:	f001 f983 	bl	8006644 <RCCEx_PLL2_Config>
 800533e:	4603      	mov	r3, r0
 8005340:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005344:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005350:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005354:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	2100      	movs	r1, #0
 800535e:	61b9      	str	r1, [r7, #24]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800536a:	460b      	mov	r3, r1
 800536c:	4313      	orrs	r3, r2
 800536e:	d011      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005374:	3308      	adds	r3, #8
 8005376:	2102      	movs	r1, #2
 8005378:	4618      	mov	r0, r3
 800537a:	f001 f963 	bl	8006644 <RCCEx_PLL2_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005384:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005390:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	2100      	movs	r1, #0
 800539e:	6139      	str	r1, [r7, #16]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80053aa:	460b      	mov	r3, r1
 80053ac:	4313      	orrs	r3, r2
 80053ae:	d011      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b4:	3328      	adds	r3, #40	; 0x28
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f001 f9f5 	bl	80067a8 <RCCEx_PLL3_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80053c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80053d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	2100      	movs	r1, #0
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80053ea:	460b      	mov	r3, r1
 80053ec:	4313      	orrs	r3, r2
 80053ee:	d011      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f4:	3328      	adds	r3, #40	; 0x28
 80053f6:	2101      	movs	r1, #1
 80053f8:	4618      	mov	r0, r3
 80053fa:	f001 f9d5 	bl	80067a8 <RCCEx_PLL3_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005404:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005410:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	2100      	movs	r1, #0
 800541e:	6039      	str	r1, [r7, #0]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	607b      	str	r3, [r7, #4]
 8005426:	e9d7 1200 	ldrd	r1, r2, [r7]
 800542a:	460b      	mov	r3, r1
 800542c:	4313      	orrs	r3, r2
 800542e:	d011      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005434:	3328      	adds	r3, #40	; 0x28
 8005436:	2102      	movs	r1, #2
 8005438:	4618      	mov	r0, r3
 800543a:	f001 f9b5 	bl	80067a8 <RCCEx_PLL3_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005444:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005450:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8005454:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	e000      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
}
 8005462:	4618      	mov	r0, r3
 8005464:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005468:	46bd      	mov	sp, r7
 800546a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800546e:	bf00      	nop
 8005470:	58024400 	.word	0x58024400

08005474 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b090      	sub	sp, #64	; 0x40
 8005478:	af00      	add	r7, sp, #0
 800547a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800547e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005482:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005486:	430b      	orrs	r3, r1
 8005488:	f040 8094 	bne.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800548c:	4b97      	ldr	r3, [pc, #604]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	2b04      	cmp	r3, #4
 800549a:	f200 8087 	bhi.w	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800549e:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80054a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a4:	080054b9 	.word	0x080054b9
 80054a8:	080054e1 	.word	0x080054e1
 80054ac:	08005509 	.word	0x08005509
 80054b0:	080055a5 	.word	0x080055a5
 80054b4:	08005531 	.word	0x08005531
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054b8:	4b8c      	ldr	r3, [pc, #560]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054c4:	d108      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 ff68 	bl	80063a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054d4:	f000 bc97 	b.w	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054dc:	f000 bc93 	b.w	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054e0:	4b82      	ldr	r3, [pc, #520]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ec:	d108      	bne.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054ee:	f107 0318 	add.w	r3, r7, #24
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fcac 	bl	8005e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054fc:	f000 bc83 	b.w	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005504:	f000 bc7f 	b.w	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005508:	4b78      	ldr	r3, [pc, #480]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005514:	d108      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005516:	f107 030c 	add.w	r3, r7, #12
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fdec 	bl	80060f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005524:	f000 bc6f 	b.w	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800552c:	f000 bc6b 	b.w	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005530:	4b6e      	ldr	r3, [pc, #440]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005534:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005538:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800553a:	4b6c      	ldr	r3, [pc, #432]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b04      	cmp	r3, #4
 8005544:	d10c      	bne.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005548:	2b00      	cmp	r3, #0
 800554a:	d109      	bne.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800554c:	4b67      	ldr	r3, [pc, #412]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	08db      	lsrs	r3, r3, #3
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	4a66      	ldr	r2, [pc, #408]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
 800555c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800555e:	e01f      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005560:	4b62      	ldr	r3, [pc, #392]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556c:	d106      	bne.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005570:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005574:	d102      	bne.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005576:	4b5f      	ldr	r3, [pc, #380]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800557a:	e011      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800557c:	4b5b      	ldr	r3, [pc, #364]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005588:	d106      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800558a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005590:	d102      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005592:	4b59      	ldr	r3, [pc, #356]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005596:	e003      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800559c:	f000 bc33 	b.w	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80055a0:	f000 bc31 	b.w	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80055a4:	4b55      	ldr	r3, [pc, #340]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055a8:	f000 bc2d 	b.w	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055b0:	f000 bc29 	b.w	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80055b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80055bc:	430b      	orrs	r3, r1
 80055be:	f040 809f 	bne.w	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80055c2:	4b4a      	ldr	r3, [pc, #296]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80055c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80055ca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d2:	d04d      	beq.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055da:	f200 8084 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	2bc0      	cmp	r3, #192	; 0xc0
 80055e2:	d07d      	beq.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	2bc0      	cmp	r3, #192	; 0xc0
 80055e8:	d87d      	bhi.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	2b80      	cmp	r3, #128	; 0x80
 80055ee:	d02d      	beq.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	2b80      	cmp	r3, #128	; 0x80
 80055f4:	d877      	bhi.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	2b40      	cmp	r3, #64	; 0x40
 8005600:	d012      	beq.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005602:	e070      	b.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005604:	4b39      	ldr	r3, [pc, #228]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005610:	d107      	bne.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fec2 	bl	80063a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005620:	e3f1      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005626:	e3ee      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005628:	4b30      	ldr	r3, [pc, #192]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005634:	d107      	bne.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005636:	f107 0318 	add.w	r3, r7, #24
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fc08 	bl	8005e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005644:	e3df      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800564a:	e3dc      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800564c:	4b27      	ldr	r3, [pc, #156]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005658:	d107      	bne.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800565a:	f107 030c 	add.w	r3, r7, #12
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fd4a 	bl	80060f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005668:	e3cd      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800566e:	e3ca      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005670:	4b1e      	ldr	r3, [pc, #120]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005678:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800567a:	4b1c      	ldr	r3, [pc, #112]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b04      	cmp	r3, #4
 8005684:	d10c      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	2b00      	cmp	r3, #0
 800568a:	d109      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800568c:	4b17      	ldr	r3, [pc, #92]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	08db      	lsrs	r3, r3, #3
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	4a16      	ldr	r2, [pc, #88]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800569e:	e01e      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056a0:	4b12      	ldr	r3, [pc, #72]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ac:	d106      	bne.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80056ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056b4:	d102      	bne.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80056b6:	4b0f      	ldr	r3, [pc, #60]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ba:	e010      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056bc:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056c8:	d106      	bne.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80056ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056d0:	d102      	bne.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80056d2:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d6:	e002      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80056dc:	e393      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80056de:	e392      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80056e0:	4b06      	ldr	r3, [pc, #24]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056e4:	e38f      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ea:	e38c      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80056ec:	58024400 	.word	0x58024400
 80056f0:	03d09000 	.word	0x03d09000
 80056f4:	003d0900 	.word	0x003d0900
 80056f8:	007a1200 	.word	0x007a1200
 80056fc:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005704:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005708:	430b      	orrs	r3, r1
 800570a:	f040 809c 	bne.w	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800570e:	4b9e      	ldr	r3, [pc, #632]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005712:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005716:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800571e:	d054      	beq.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005726:	f200 808b 	bhi.w	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005730:	f000 8083 	beq.w	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800573a:	f200 8081 	bhi.w	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005744:	d02f      	beq.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574c:	d878      	bhi.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575a:	d012      	beq.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800575c:	e070      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800575e:	4b8a      	ldr	r3, [pc, #552]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800576a:	d107      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800576c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005770:	4618      	mov	r0, r3
 8005772:	f000 fe15 	bl	80063a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800577a:	e344      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005780:	e341      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005782:	4b81      	ldr	r3, [pc, #516]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800578a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800578e:	d107      	bne.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005790:	f107 0318 	add.w	r3, r7, #24
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fb5b 	bl	8005e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800579e:	e332      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80057a0:	2300      	movs	r3, #0
 80057a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057a4:	e32f      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057a6:	4b78      	ldr	r3, [pc, #480]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b2:	d107      	bne.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057b4:	f107 030c 	add.w	r3, r7, #12
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fc9d 	bl	80060f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057c2:	e320      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057c8:	e31d      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057ca:	4b6f      	ldr	r3, [pc, #444]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057d4:	4b6c      	ldr	r3, [pc, #432]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d10c      	bne.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80057e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057e6:	4b68      	ldr	r3, [pc, #416]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	08db      	lsrs	r3, r3, #3
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	4a66      	ldr	r2, [pc, #408]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80057f2:	fa22 f303 	lsr.w	r3, r2, r3
 80057f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f8:	e01e      	b.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057fa:	4b63      	ldr	r3, [pc, #396]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005806:	d106      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800580e:	d102      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005810:	4b5f      	ldr	r3, [pc, #380]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005814:	e010      	b.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005816:	4b5c      	ldr	r3, [pc, #368]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005822:	d106      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800582a:	d102      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800582c:	4b59      	ldr	r3, [pc, #356]	; (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800582e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005830:	e002      	b.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8005836:	e2e6      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005838:	e2e5      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800583a:	4b57      	ldr	r3, [pc, #348]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800583c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800583e:	e2e2      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005844:	e2df      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800584a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800584e:	430b      	orrs	r3, r1
 8005850:	f040 80a7 	bne.w	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005854:	4b4c      	ldr	r3, [pc, #304]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005858:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800585c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005864:	d055      	beq.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800586c:	f200 8096 	bhi.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005876:	f000 8084 	beq.w	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005880:	f200 808c 	bhi.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800588a:	d030      	beq.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005892:	f200 8083 	bhi.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	2b00      	cmp	r3, #0
 800589a:	d004      	beq.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800589c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a2:	d012      	beq.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80058a4:	e07a      	b.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058a6:	4b38      	ldr	r3, [pc, #224]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058b2:	d107      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fd71 	bl	80063a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058c2:	e2a0      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058c8:	e29d      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058ca:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058d6:	d107      	bne.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058d8:	f107 0318 	add.w	r3, r7, #24
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fab7 	bl	8005e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058e6:	e28e      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058ec:	e28b      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058ee:	4b26      	ldr	r3, [pc, #152]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058fa:	d107      	bne.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058fc:	f107 030c 	add.w	r3, r7, #12
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fbf9 	bl	80060f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800590a:	e27c      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005910:	e279      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005912:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800591a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800591c:	4b1a      	ldr	r3, [pc, #104]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b04      	cmp	r3, #4
 8005926:	d10c      	bne.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8005928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800592e:	4b16      	ldr	r3, [pc, #88]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	08db      	lsrs	r3, r3, #3
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	4a14      	ldr	r2, [pc, #80]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800593a:	fa22 f303 	lsr.w	r3, r2, r3
 800593e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005940:	e01e      	b.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005942:	4b11      	ldr	r3, [pc, #68]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594e:	d106      	bne.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005956:	d102      	bne.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005958:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800595a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800595c:	e010      	b.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800595e:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800596a:	d106      	bne.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005972:	d102      	bne.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005974:	4b07      	ldr	r3, [pc, #28]	; (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005978:	e002      	b.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800597e:	e242      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005980:	e241      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005982:	4b05      	ldr	r3, [pc, #20]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005986:	e23e      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005988:	58024400 	.word	0x58024400
 800598c:	03d09000 	.word	0x03d09000
 8005990:	003d0900 	.word	0x003d0900
 8005994:	007a1200 	.word	0x007a1200
 8005998:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059a0:	e231      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80059a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059a6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80059aa:	430b      	orrs	r3, r1
 80059ac:	f040 8085 	bne.w	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80059b0:	4b9c      	ldr	r3, [pc, #624]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80059b8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059c0:	d06b      	beq.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059c8:	d874      	bhi.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059d0:	d056      	beq.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059d8:	d86c      	bhi.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059e0:	d03b      	beq.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059e8:	d864      	bhi.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059f0:	d021      	beq.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059f8:	d85c      	bhi.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80059fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d004      	beq.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a06:	d004      	beq.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8005a08:	e054      	b.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005a0a:	f7fe fb49 	bl	80040a0 <HAL_RCC_GetPCLK1Freq>
 8005a0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a10:	e1f9      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a12:	4b84      	ldr	r3, [pc, #528]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a1e:	d107      	bne.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a20:	f107 0318 	add.w	r3, r7, #24
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fa13 	bl	8005e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a2e:	e1ea      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a34:	e1e7      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a36:	4b7b      	ldr	r3, [pc, #492]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a42:	d107      	bne.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a44:	f107 030c 	add.w	r3, r7, #12
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fb55 	bl	80060f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a52:	e1d8      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a58:	e1d5      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a5a:	4b72      	ldr	r3, [pc, #456]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d109      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a66:	4b6f      	ldr	r3, [pc, #444]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	08db      	lsrs	r3, r3, #3
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	4a6d      	ldr	r2, [pc, #436]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005a72:	fa22 f303 	lsr.w	r3, r2, r3
 8005a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a78:	e1c5      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a7e:	e1c2      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005a80:	4b68      	ldr	r3, [pc, #416]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8c:	d102      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8005a8e:	4b67      	ldr	r3, [pc, #412]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a92:	e1b8      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a98:	e1b5      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a9a:	4b62      	ldr	r3, [pc, #392]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aa6:	d102      	bne.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8005aa8:	4b61      	ldr	r3, [pc, #388]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aac:	e1ab      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ab2:	e1a8      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ab8:	e1a5      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005abe:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	d173      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005ac6:	4b57      	ldr	r3, [pc, #348]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ace:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ad6:	d02f      	beq.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ade:	d863      	bhi.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aec:	d012      	beq.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8005aee:	e05b      	b.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005af0:	4b4c      	ldr	r3, [pc, #304]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005afc:	d107      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005afe:	f107 0318 	add.w	r3, r7, #24
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f9a4 	bl	8005e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b0c:	e17b      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b12:	e178      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b14:	4b43      	ldr	r3, [pc, #268]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b20:	d107      	bne.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b22:	f107 030c 	add.w	r3, r7, #12
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fae6 	bl	80060f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b30:	e169      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b36:	e166      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b38:	4b3a      	ldr	r3, [pc, #232]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b42:	4b38      	ldr	r3, [pc, #224]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d10c      	bne.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d109      	bne.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b54:	4b33      	ldr	r3, [pc, #204]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	08db      	lsrs	r3, r3, #3
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	4a32      	ldr	r2, [pc, #200]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005b60:	fa22 f303 	lsr.w	r3, r2, r3
 8005b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b66:	e01e      	b.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b68:	4b2e      	ldr	r3, [pc, #184]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b74:	d106      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8005b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b7c:	d102      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b7e:	4b2b      	ldr	r3, [pc, #172]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b82:	e010      	b.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b84:	4b27      	ldr	r3, [pc, #156]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b90:	d106      	bne.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b98:	d102      	bne.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b9a:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b9e:	e002      	b.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005ba4:	e12f      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005ba6:	e12e      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bac:	e12b      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	d13c      	bne.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005bba:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d004      	beq.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd0:	d012      	beq.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8005bd2:	e023      	b.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bd4:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005be0:	d107      	bne.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fbda 	bl	80063a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bf0:	e109      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bf6:	e106      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c04:	d107      	bne.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c06:	f107 0318 	add.w	r3, r7, #24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 f920 	bl	8005e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c14:	e0f7      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c1a:	e0f4      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c20:	e0f1      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005c22:	bf00      	nop
 8005c24:	58024400 	.word	0x58024400
 8005c28:	03d09000 	.word	0x03d09000
 8005c2c:	003d0900 	.word	0x003d0900
 8005c30:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c38:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	f040 8091 	bne.w	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005c42:	4b73      	ldr	r3, [pc, #460]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c46:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005c4a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005c52:	f000 8081 	beq.w	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005c5c:	d87f      	bhi.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c64:	d06b      	beq.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c6c:	d877      	bhi.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c74:	d056      	beq.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7c:	d86f      	bhi.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c84:	d03b      	beq.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c8c:	d867      	bhi.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c94:	d021      	beq.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c9c:	d85f      	bhi.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d004      	beq.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005caa:	d004      	beq.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005cac:	e057      	b.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005cae:	f000 f8b9 	bl	8005e24 <HAL_RCCEx_GetD3PCLK1Freq>
 8005cb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005cb4:	e0a7      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cb6:	4b56      	ldr	r3, [pc, #344]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cc2:	d107      	bne.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cc4:	f107 0318 	add.w	r3, r7, #24
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 f8c1 	bl	8005e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cd2:	e098      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cd8:	e095      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cda:	4b4d      	ldr	r3, [pc, #308]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ce6:	d107      	bne.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ce8:	f107 030c 	add.w	r3, r7, #12
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fa03 	bl	80060f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cf6:	e086      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cfc:	e083      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cfe:	4b44      	ldr	r3, [pc, #272]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d109      	bne.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d0a:	4b41      	ldr	r3, [pc, #260]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	08db      	lsrs	r3, r3, #3
 8005d10:	f003 0303 	and.w	r3, r3, #3
 8005d14:	4a3f      	ldr	r2, [pc, #252]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005d16:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d1c:	e073      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d22:	e070      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005d24:	4b3a      	ldr	r3, [pc, #232]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d30:	d102      	bne.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8005d32:	4b39      	ldr	r3, [pc, #228]	; (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d36:	e066      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d3c:	e063      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d3e:	4b34      	ldr	r3, [pc, #208]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d4a:	d102      	bne.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8005d4c:	4b33      	ldr	r3, [pc, #204]	; (8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d50:	e059      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d56:	e056      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d58:	4b31      	ldr	r3, [pc, #196]	; (8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d5c:	e053      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d62:	e050      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d68:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	d148      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005d70:	4b27      	ldr	r3, [pc, #156]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d78:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d80:	d02a      	beq.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d88:	d838      	bhi.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d96:	d00d      	beq.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005d98:	e030      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d9a:	4b1d      	ldr	r3, [pc, #116]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005da6:	d102      	bne.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8005da8:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dac:	e02b      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005db2:	e028      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005db4:	4b16      	ldr	r3, [pc, #88]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dc0:	d107      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 faea 	bl	80063a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dd0:	e019      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dd6:	e016      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dd8:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005de4:	d107      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005de6:	f107 0318 	add.w	r3, r7, #24
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 f830 	bl	8005e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005df4:	e007      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dfa:	e004      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e00:	e001      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3740      	adds	r7, #64	; 0x40
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	58024400 	.word	0x58024400
 8005e14:	03d09000 	.word	0x03d09000
 8005e18:	003d0900 	.word	0x003d0900
 8005e1c:	007a1200 	.word	0x007a1200
 8005e20:	00bb8000 	.word	0x00bb8000

08005e24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005e28:	f7fe f90a 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	091b      	lsrs	r3, r3, #4
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	4904      	ldr	r1, [pc, #16]	; (8005e4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e3a:	5ccb      	ldrb	r3, [r1, r3]
 8005e3c:	f003 031f 	and.w	r3, r3, #31
 8005e40:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	58024400 	.word	0x58024400
 8005e4c:	08008f18 	.word	0x08008f18

08005e50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b089      	sub	sp, #36	; 0x24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e58:	4ba1      	ldr	r3, [pc, #644]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005e62:	4b9f      	ldr	r3, [pc, #636]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	0b1b      	lsrs	r3, r3, #12
 8005e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e6e:	4b9c      	ldr	r3, [pc, #624]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	091b      	lsrs	r3, r3, #4
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005e7a:	4b99      	ldr	r3, [pc, #612]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	08db      	lsrs	r3, r3, #3
 8005e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	fb02 f303 	mul.w	r3, r2, r3
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8111 	beq.w	80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	f000 8083 	beq.w	8005fac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	f200 80a1 	bhi.w	8005ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d056      	beq.n	8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005eba:	e099      	b.n	8005ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ebc:	4b88      	ldr	r3, [pc, #544]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d02d      	beq.n	8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ec8:	4b85      	ldr	r3, [pc, #532]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	08db      	lsrs	r3, r3, #3
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	4a84      	ldr	r2, [pc, #528]	; (80060e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef2:	4b7b      	ldr	r3, [pc, #492]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f06:	eddf 5a78 	vldr	s11, [pc, #480]	; 80060e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f22:	e087      	b.n	8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80060ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	4b6a      	ldr	r3, [pc, #424]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80060e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f66:	e065      	b.n	8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80060f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7a:	4b59      	ldr	r3, [pc, #356]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80060e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005faa:	e043      	b.n	8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fbe:	4b48      	ldr	r3, [pc, #288]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80060e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fee:	e021      	b.n	8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80060f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006002:	4b37      	ldr	r3, [pc, #220]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006012:	ed97 6a03 	vldr	s12, [r7, #12]
 8006016:	eddf 5a34 	vldr	s11, [pc, #208]	; 80060e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006032:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006034:	4b2a      	ldr	r3, [pc, #168]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	0a5b      	lsrs	r3, r3, #9
 800603a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800604a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800604e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800605a:	ee17 2a90 	vmov	r2, s15
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006062:	4b1f      	ldr	r3, [pc, #124]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	0c1b      	lsrs	r3, r3, #16
 8006068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606c:	ee07 3a90 	vmov	s15, r3
 8006070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006074:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006078:	ee37 7a87 	vadd.f32	s14, s15, s14
 800607c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006088:	ee17 2a90 	vmov	r2, s15
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006090:	4b13      	ldr	r3, [pc, #76]	; (80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	0e1b      	lsrs	r3, r3, #24
 8006096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b6:	ee17 2a90 	vmov	r2, s15
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80060be:	e008      	b.n	80060d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	609a      	str	r2, [r3, #8]
}
 80060d2:	bf00      	nop
 80060d4:	3724      	adds	r7, #36	; 0x24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	58024400 	.word	0x58024400
 80060e4:	03d09000 	.word	0x03d09000
 80060e8:	46000000 	.word	0x46000000
 80060ec:	4c742400 	.word	0x4c742400
 80060f0:	4a742400 	.word	0x4a742400
 80060f4:	4af42400 	.word	0x4af42400

080060f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b089      	sub	sp, #36	; 0x24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006100:	4ba1      	ldr	r3, [pc, #644]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	f003 0303 	and.w	r3, r3, #3
 8006108:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800610a:	4b9f      	ldr	r3, [pc, #636]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	0d1b      	lsrs	r3, r3, #20
 8006110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006114:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006116:	4b9c      	ldr	r3, [pc, #624]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	0a1b      	lsrs	r3, r3, #8
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006122:	4b99      	ldr	r3, [pc, #612]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006126:	08db      	lsrs	r3, r3, #3
 8006128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	fb02 f303 	mul.w	r3, r2, r3
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 8111 	beq.w	8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b02      	cmp	r3, #2
 800614a:	f000 8083 	beq.w	8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	2b02      	cmp	r3, #2
 8006152:	f200 80a1 	bhi.w	8006298 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d056      	beq.n	8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006162:	e099      	b.n	8006298 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006164:	4b88      	ldr	r3, [pc, #544]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0320 	and.w	r3, r3, #32
 800616c:	2b00      	cmp	r3, #0
 800616e:	d02d      	beq.n	80061cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006170:	4b85      	ldr	r3, [pc, #532]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	08db      	lsrs	r3, r3, #3
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	4a84      	ldr	r2, [pc, #528]	; (800638c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800617c:	fa22 f303 	lsr.w	r3, r2, r3
 8006180:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	ee07 3a90 	vmov	s15, r3
 8006188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800619a:	4b7b      	ldr	r3, [pc, #492]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80061ca:	e087      	b.n	80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80061da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061de:	4b6a      	ldr	r3, [pc, #424]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80061f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800620a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800620e:	e065      	b.n	80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006398 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800621e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006222:	4b59      	ldr	r3, [pc, #356]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006232:	ed97 6a03 	vldr	s12, [r7, #12]
 8006236:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800623a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800623e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800624a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006252:	e043      	b.n	80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800639c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006266:	4b48      	ldr	r3, [pc, #288]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006276:	ed97 6a03 	vldr	s12, [r7, #12]
 800627a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800627e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800628a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800628e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006296:	e021      	b.n	80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006398 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80062a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062aa:	4b37      	ldr	r3, [pc, #220]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80062be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80062dc:	4b2a      	ldr	r3, [pc, #168]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e0:	0a5b      	lsrs	r3, r3, #9
 80062e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e6:	ee07 3a90 	vmov	s15, r3
 80062ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80062fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006302:	ee17 2a90 	vmov	r2, s15
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800630a:	4b1f      	ldr	r3, [pc, #124]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	0c1b      	lsrs	r3, r3, #16
 8006310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006314:	ee07 3a90 	vmov	s15, r3
 8006318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006320:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006324:	edd7 6a07 	vldr	s13, [r7, #28]
 8006328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800632c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006330:	ee17 2a90 	vmov	r2, s15
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006338:	4b13      	ldr	r3, [pc, #76]	; (8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	0e1b      	lsrs	r3, r3, #24
 800633e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800634e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006352:	edd7 6a07 	vldr	s13, [r7, #28]
 8006356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800635a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800635e:	ee17 2a90 	vmov	r2, s15
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006366:	e008      	b.n	800637a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	609a      	str	r2, [r3, #8]
}
 800637a:	bf00      	nop
 800637c:	3724      	adds	r7, #36	; 0x24
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	58024400 	.word	0x58024400
 800638c:	03d09000 	.word	0x03d09000
 8006390:	46000000 	.word	0x46000000
 8006394:	4c742400 	.word	0x4c742400
 8006398:	4a742400 	.word	0x4a742400
 800639c:	4af42400 	.word	0x4af42400

080063a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b089      	sub	sp, #36	; 0x24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063a8:	4ba0      	ldr	r3, [pc, #640]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ac:	f003 0303 	and.w	r3, r3, #3
 80063b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80063b2:	4b9e      	ldr	r3, [pc, #632]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b6:	091b      	lsrs	r3, r3, #4
 80063b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80063be:	4b9b      	ldr	r3, [pc, #620]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80063c8:	4b98      	ldr	r3, [pc, #608]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063cc:	08db      	lsrs	r3, r3, #3
 80063ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	fb02 f303 	mul.w	r3, r2, r3
 80063d8:	ee07 3a90 	vmov	s15, r3
 80063dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8111 	beq.w	800660e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	f000 8083 	beq.w	80064fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	f200 80a1 	bhi.w	800653e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d056      	beq.n	80064b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006408:	e099      	b.n	800653e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800640a:	4b88      	ldr	r3, [pc, #544]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d02d      	beq.n	8006472 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006416:	4b85      	ldr	r3, [pc, #532]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	08db      	lsrs	r3, r3, #3
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	4a83      	ldr	r2, [pc, #524]	; (8006630 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006422:	fa22 f303 	lsr.w	r3, r2, r3
 8006426:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006440:	4b7a      	ldr	r3, [pc, #488]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006448:	ee07 3a90 	vmov	s15, r3
 800644c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006450:	ed97 6a03 	vldr	s12, [r7, #12]
 8006454:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800645c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006470:	e087      	b.n	8006582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006638 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006484:	4b69      	ldr	r3, [pc, #420]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006494:	ed97 6a03 	vldr	s12, [r7, #12]
 8006498:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800649c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064b4:	e065      	b.n	8006582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	ee07 3a90 	vmov	s15, r3
 80064bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800663c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80064c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c8:	4b58      	ldr	r3, [pc, #352]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d0:	ee07 3a90 	vmov	s15, r3
 80064d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80064dc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80064e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064f8:	e043      	b.n	8006582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006504:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006640 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650c:	4b47      	ldr	r3, [pc, #284]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006514:	ee07 3a90 	vmov	s15, r3
 8006518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006520:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800652c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006538:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800653c:	e021      	b.n	8006582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	ee07 3a90 	vmov	s15, r3
 8006544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006548:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006638 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800654c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006550:	4b36      	ldr	r3, [pc, #216]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006558:	ee07 3a90 	vmov	s15, r3
 800655c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006560:	ed97 6a03 	vldr	s12, [r7, #12]
 8006564:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006580:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006582:	4b2a      	ldr	r3, [pc, #168]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006586:	0a5b      	lsrs	r3, r3, #9
 8006588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800658c:	ee07 3a90 	vmov	s15, r3
 8006590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006598:	ee37 7a87 	vadd.f32	s14, s15, s14
 800659c:	edd7 6a07 	vldr	s13, [r7, #28]
 80065a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a8:	ee17 2a90 	vmov	r2, s15
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80065b0:	4b1e      	ldr	r3, [pc, #120]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	0c1b      	lsrs	r3, r3, #16
 80065b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065d6:	ee17 2a90 	vmov	r2, s15
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80065de:	4b13      	ldr	r3, [pc, #76]	; (800662c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	0e1b      	lsrs	r3, r3, #24
 80065e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e8:	ee07 3a90 	vmov	s15, r3
 80065ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80065fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006604:	ee17 2a90 	vmov	r2, s15
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800660c:	e008      	b.n	8006620 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	609a      	str	r2, [r3, #8]
}
 8006620:	bf00      	nop
 8006622:	3724      	adds	r7, #36	; 0x24
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	58024400 	.word	0x58024400
 8006630:	03d09000 	.word	0x03d09000
 8006634:	46000000 	.word	0x46000000
 8006638:	4c742400 	.word	0x4c742400
 800663c:	4a742400 	.word	0x4a742400
 8006640:	4af42400 	.word	0x4af42400

08006644 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006652:	4b53      	ldr	r3, [pc, #332]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	2b03      	cmp	r3, #3
 800665c:	d101      	bne.n	8006662 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e099      	b.n	8006796 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006662:	4b4f      	ldr	r3, [pc, #316]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a4e      	ldr	r2, [pc, #312]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 8006668:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800666c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666e:	f7fb f87f 	bl	8001770 <HAL_GetTick>
 8006672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006674:	e008      	b.n	8006688 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006676:	f7fb f87b 	bl	8001770 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d901      	bls.n	8006688 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e086      	b.n	8006796 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006688:	4b45      	ldr	r3, [pc, #276]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1f0      	bne.n	8006676 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006694:	4b42      	ldr	r3, [pc, #264]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006698:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	031b      	lsls	r3, r3, #12
 80066a2:	493f      	ldr	r1, [pc, #252]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	628b      	str	r3, [r1, #40]	; 0x28
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	025b      	lsls	r3, r3, #9
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	041b      	lsls	r3, r3, #16
 80066c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	061b      	lsls	r3, r3, #24
 80066d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066d8:	4931      	ldr	r1, [pc, #196]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80066de:	4b30      	ldr	r3, [pc, #192]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	492d      	ldr	r1, [pc, #180]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80066f0:	4b2b      	ldr	r3, [pc, #172]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 80066f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f4:	f023 0220 	bic.w	r2, r3, #32
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	4928      	ldr	r1, [pc, #160]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006702:	4b27      	ldr	r3, [pc, #156]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	4a26      	ldr	r2, [pc, #152]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 8006708:	f023 0310 	bic.w	r3, r3, #16
 800670c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800670e:	4b24      	ldr	r3, [pc, #144]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 8006710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006712:	4b24      	ldr	r3, [pc, #144]	; (80067a4 <RCCEx_PLL2_Config+0x160>)
 8006714:	4013      	ands	r3, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	69d2      	ldr	r2, [r2, #28]
 800671a:	00d2      	lsls	r2, r2, #3
 800671c:	4920      	ldr	r1, [pc, #128]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 800671e:	4313      	orrs	r3, r2
 8006720:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006722:	4b1f      	ldr	r3, [pc, #124]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	4a1e      	ldr	r2, [pc, #120]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 8006728:	f043 0310 	orr.w	r3, r3, #16
 800672c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d106      	bne.n	8006742 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006734:	4b1a      	ldr	r3, [pc, #104]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	4a19      	ldr	r2, [pc, #100]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 800673a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800673e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006740:	e00f      	b.n	8006762 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d106      	bne.n	8006756 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006748:	4b15      	ldr	r3, [pc, #84]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	4a14      	ldr	r2, [pc, #80]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 800674e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006752:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006754:	e005      	b.n	8006762 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006756:	4b12      	ldr	r3, [pc, #72]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	4a11      	ldr	r2, [pc, #68]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 800675c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006760:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006762:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a0e      	ldr	r2, [pc, #56]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 8006768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800676c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800676e:	f7fa ffff 	bl	8001770 <HAL_GetTick>
 8006772:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006774:	e008      	b.n	8006788 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006776:	f7fa fffb 	bl	8001770 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e006      	b.n	8006796 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <RCCEx_PLL2_Config+0x15c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0f0      	beq.n	8006776 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006794:	7bfb      	ldrb	r3, [r7, #15]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	58024400 	.word	0x58024400
 80067a4:	ffff0007 	.word	0xffff0007

080067a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067b6:	4b53      	ldr	r3, [pc, #332]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d101      	bne.n	80067c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e099      	b.n	80068fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80067c6:	4b4f      	ldr	r3, [pc, #316]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a4e      	ldr	r2, [pc, #312]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 80067cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d2:	f7fa ffcd 	bl	8001770 <HAL_GetTick>
 80067d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067d8:	e008      	b.n	80067ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067da:	f7fa ffc9 	bl	8001770 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e086      	b.n	80068fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067ec:	4b45      	ldr	r3, [pc, #276]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1f0      	bne.n	80067da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80067f8:	4b42      	ldr	r3, [pc, #264]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 80067fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	051b      	lsls	r3, r3, #20
 8006806:	493f      	ldr	r1, [pc, #252]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 8006808:	4313      	orrs	r3, r2
 800680a:	628b      	str	r3, [r1, #40]	; 0x28
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	3b01      	subs	r3, #1
 8006812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	3b01      	subs	r3, #1
 800681c:	025b      	lsls	r3, r3, #9
 800681e:	b29b      	uxth	r3, r3
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	3b01      	subs	r3, #1
 8006828:	041b      	lsls	r3, r3, #16
 800682a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	3b01      	subs	r3, #1
 8006836:	061b      	lsls	r3, r3, #24
 8006838:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800683c:	4931      	ldr	r1, [pc, #196]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 800683e:	4313      	orrs	r3, r2
 8006840:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006842:	4b30      	ldr	r3, [pc, #192]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 8006844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006846:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	492d      	ldr	r1, [pc, #180]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 8006850:	4313      	orrs	r3, r2
 8006852:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006854:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	4928      	ldr	r1, [pc, #160]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 8006862:	4313      	orrs	r3, r2
 8006864:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006866:	4b27      	ldr	r3, [pc, #156]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 8006868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686a:	4a26      	ldr	r2, [pc, #152]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 800686c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006870:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006872:	4b24      	ldr	r3, [pc, #144]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 8006874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006876:	4b24      	ldr	r3, [pc, #144]	; (8006908 <RCCEx_PLL3_Config+0x160>)
 8006878:	4013      	ands	r3, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	69d2      	ldr	r2, [r2, #28]
 800687e:	00d2      	lsls	r2, r2, #3
 8006880:	4920      	ldr	r1, [pc, #128]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 8006882:	4313      	orrs	r3, r2
 8006884:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006886:	4b1f      	ldr	r3, [pc, #124]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 8006888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688a:	4a1e      	ldr	r2, [pc, #120]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 800688c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006890:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d106      	bne.n	80068a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006898:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	4a19      	ldr	r2, [pc, #100]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 800689e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068a4:	e00f      	b.n	80068c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d106      	bne.n	80068ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80068ac:	4b15      	ldr	r3, [pc, #84]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	4a14      	ldr	r2, [pc, #80]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 80068b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068b8:	e005      	b.n	80068c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	4a11      	ldr	r2, [pc, #68]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 80068c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80068c6:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a0e      	ldr	r2, [pc, #56]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 80068cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068d2:	f7fa ff4d 	bl	8001770 <HAL_GetTick>
 80068d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068d8:	e008      	b.n	80068ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80068da:	f7fa ff49 	bl	8001770 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e006      	b.n	80068fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068ec:	4b05      	ldr	r3, [pc, #20]	; (8006904 <RCCEx_PLL3_Config+0x15c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	58024400 	.word	0x58024400
 8006908:	ffff0007 	.word	0xffff0007

0800690c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e049      	b.n	80069b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d106      	bne.n	8006938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7fa fd08 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3304      	adds	r3, #4
 8006948:	4619      	mov	r1, r3
 800694a:	4610      	mov	r0, r2
 800694c:	f000 fa0a 	bl	8006d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d001      	beq.n	80069d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e04c      	b.n	8006a6e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a26      	ldr	r2, [pc, #152]	; (8006a7c <HAL_TIM_Base_Start+0xc0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d022      	beq.n	8006a2c <HAL_TIM_Base_Start+0x70>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ee:	d01d      	beq.n	8006a2c <HAL_TIM_Base_Start+0x70>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a22      	ldr	r2, [pc, #136]	; (8006a80 <HAL_TIM_Base_Start+0xc4>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d018      	beq.n	8006a2c <HAL_TIM_Base_Start+0x70>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a21      	ldr	r2, [pc, #132]	; (8006a84 <HAL_TIM_Base_Start+0xc8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d013      	beq.n	8006a2c <HAL_TIM_Base_Start+0x70>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1f      	ldr	r2, [pc, #124]	; (8006a88 <HAL_TIM_Base_Start+0xcc>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00e      	beq.n	8006a2c <HAL_TIM_Base_Start+0x70>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1e      	ldr	r2, [pc, #120]	; (8006a8c <HAL_TIM_Base_Start+0xd0>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d009      	beq.n	8006a2c <HAL_TIM_Base_Start+0x70>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1c      	ldr	r2, [pc, #112]	; (8006a90 <HAL_TIM_Base_Start+0xd4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <HAL_TIM_Base_Start+0x70>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1b      	ldr	r2, [pc, #108]	; (8006a94 <HAL_TIM_Base_Start+0xd8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d115      	bne.n	8006a58 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	4b19      	ldr	r3, [pc, #100]	; (8006a98 <HAL_TIM_Base_Start+0xdc>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2b06      	cmp	r3, #6
 8006a3c:	d015      	beq.n	8006a6a <HAL_TIM_Base_Start+0xae>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a44:	d011      	beq.n	8006a6a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0201 	orr.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a56:	e008      	b.n	8006a6a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	e000      	b.n	8006a6c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	40010000 	.word	0x40010000
 8006a80:	40000400 	.word	0x40000400
 8006a84:	40000800 	.word	0x40000800
 8006a88:	40000c00 	.word	0x40000c00
 8006a8c:	40010400 	.word	0x40010400
 8006a90:	40001800 	.word	0x40001800
 8006a94:	40014000 	.word	0x40014000
 8006a98:	00010007 	.word	0x00010007

08006a9c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0201 	bic.w	r2, r2, #1
 8006ab2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6a1a      	ldr	r2, [r3, #32]
 8006aba:	f241 1311 	movw	r3, #4369	; 0x1111
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10f      	bne.n	8006ae4 <HAL_TIM_Base_Stop_IT+0x48>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6a1a      	ldr	r2, [r3, #32]
 8006aca:	f240 4344 	movw	r3, #1092	; 0x444
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d107      	bne.n	8006ae4 <HAL_TIM_Base_Stop_IT+0x48>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0201 	bic.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e08f      	b.n	8006c30 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d106      	bne.n	8006b2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7fa fbc5 	bl	80012b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6899      	ldr	r1, [r3, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	4b3e      	ldr	r3, [pc, #248]	; (8006c38 <HAL_TIM_Encoder_Init+0x13c>)
 8006b3e:	400b      	ands	r3, r1
 8006b40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3304      	adds	r3, #4
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	f000 f909 	bl	8006d64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4b31      	ldr	r3, [pc, #196]	; (8006c3c <HAL_TIM_Encoder_Init+0x140>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	4313      	orrs	r3, r2
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4b2b      	ldr	r3, [pc, #172]	; (8006c40 <HAL_TIM_Encoder_Init+0x144>)
 8006b92:	4013      	ands	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4b2a      	ldr	r3, [pc, #168]	; (8006c44 <HAL_TIM_Encoder_Init+0x148>)
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	011a      	lsls	r2, r3, #4
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	031b      	lsls	r3, r3, #12
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006bca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006bd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	4313      	orrs	r3, r2
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	fffebff8 	.word	0xfffebff8
 8006c3c:	fffffcfc 	.word	0xfffffcfc
 8006c40:	fffff3f3 	.word	0xfffff3f3
 8006c44:	ffff0f0f 	.word	0xffff0f0f

08006c48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d110      	bne.n	8006c9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d102      	bne.n	8006c84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c7e:	7b7b      	ldrb	r3, [r7, #13]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d001      	beq.n	8006c88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e069      	b.n	8006d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c98:	e031      	b.n	8006cfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d110      	bne.n	8006cc2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d102      	bne.n	8006cac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ca6:	7b3b      	ldrb	r3, [r7, #12]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d001      	beq.n	8006cb0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e055      	b.n	8006d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cc0:	e01d      	b.n	8006cfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d108      	bne.n	8006cda <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d105      	bne.n	8006cda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cce:	7b7b      	ldrb	r3, [r7, #13]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d102      	bne.n	8006cda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cd4:	7b3b      	ldrb	r3, [r7, #12]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d001      	beq.n	8006cde <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e03e      	b.n	8006d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_TIM_Encoder_Start+0xc4>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d008      	beq.n	8006d1c <HAL_TIM_Encoder_Start+0xd4>
 8006d0a:	e00f      	b.n	8006d2c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2201      	movs	r2, #1
 8006d12:	2100      	movs	r1, #0
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 f8bf 	bl	8006e98 <TIM_CCxChannelCmd>
      break;
 8006d1a:	e016      	b.n	8006d4a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2201      	movs	r2, #1
 8006d22:	2104      	movs	r1, #4
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 f8b7 	bl	8006e98 <TIM_CCxChannelCmd>
      break;
 8006d2a:	e00e      	b.n	8006d4a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2201      	movs	r2, #1
 8006d32:	2100      	movs	r1, #0
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 f8af 	bl	8006e98 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	2104      	movs	r1, #4
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 f8a8 	bl	8006e98 <TIM_CCxChannelCmd>
      break;
 8006d48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0201 	orr.w	r2, r2, #1
 8006d58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a40      	ldr	r2, [pc, #256]	; (8006e78 <TIM_Base_SetConfig+0x114>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d013      	beq.n	8006da4 <TIM_Base_SetConfig+0x40>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d82:	d00f      	beq.n	8006da4 <TIM_Base_SetConfig+0x40>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a3d      	ldr	r2, [pc, #244]	; (8006e7c <TIM_Base_SetConfig+0x118>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d00b      	beq.n	8006da4 <TIM_Base_SetConfig+0x40>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a3c      	ldr	r2, [pc, #240]	; (8006e80 <TIM_Base_SetConfig+0x11c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d007      	beq.n	8006da4 <TIM_Base_SetConfig+0x40>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a3b      	ldr	r2, [pc, #236]	; (8006e84 <TIM_Base_SetConfig+0x120>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d003      	beq.n	8006da4 <TIM_Base_SetConfig+0x40>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a3a      	ldr	r2, [pc, #232]	; (8006e88 <TIM_Base_SetConfig+0x124>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d108      	bne.n	8006db6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2f      	ldr	r2, [pc, #188]	; (8006e78 <TIM_Base_SetConfig+0x114>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01f      	beq.n	8006dfe <TIM_Base_SetConfig+0x9a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc4:	d01b      	beq.n	8006dfe <TIM_Base_SetConfig+0x9a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a2c      	ldr	r2, [pc, #176]	; (8006e7c <TIM_Base_SetConfig+0x118>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d017      	beq.n	8006dfe <TIM_Base_SetConfig+0x9a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a2b      	ldr	r2, [pc, #172]	; (8006e80 <TIM_Base_SetConfig+0x11c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <TIM_Base_SetConfig+0x9a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a2a      	ldr	r2, [pc, #168]	; (8006e84 <TIM_Base_SetConfig+0x120>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00f      	beq.n	8006dfe <TIM_Base_SetConfig+0x9a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a29      	ldr	r2, [pc, #164]	; (8006e88 <TIM_Base_SetConfig+0x124>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00b      	beq.n	8006dfe <TIM_Base_SetConfig+0x9a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a28      	ldr	r2, [pc, #160]	; (8006e8c <TIM_Base_SetConfig+0x128>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d007      	beq.n	8006dfe <TIM_Base_SetConfig+0x9a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a27      	ldr	r2, [pc, #156]	; (8006e90 <TIM_Base_SetConfig+0x12c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d003      	beq.n	8006dfe <TIM_Base_SetConfig+0x9a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a26      	ldr	r2, [pc, #152]	; (8006e94 <TIM_Base_SetConfig+0x130>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d108      	bne.n	8006e10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a10      	ldr	r2, [pc, #64]	; (8006e78 <TIM_Base_SetConfig+0x114>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00f      	beq.n	8006e5c <TIM_Base_SetConfig+0xf8>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a12      	ldr	r2, [pc, #72]	; (8006e88 <TIM_Base_SetConfig+0x124>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00b      	beq.n	8006e5c <TIM_Base_SetConfig+0xf8>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a11      	ldr	r2, [pc, #68]	; (8006e8c <TIM_Base_SetConfig+0x128>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d007      	beq.n	8006e5c <TIM_Base_SetConfig+0xf8>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a10      	ldr	r2, [pc, #64]	; (8006e90 <TIM_Base_SetConfig+0x12c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d003      	beq.n	8006e5c <TIM_Base_SetConfig+0xf8>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a0f      	ldr	r2, [pc, #60]	; (8006e94 <TIM_Base_SetConfig+0x130>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d103      	bne.n	8006e64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	615a      	str	r2, [r3, #20]
}
 8006e6a:	bf00      	nop
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	40010000 	.word	0x40010000
 8006e7c:	40000400 	.word	0x40000400
 8006e80:	40000800 	.word	0x40000800
 8006e84:	40000c00 	.word	0x40000c00
 8006e88:	40010400 	.word	0x40010400
 8006e8c:	40014000 	.word	0x40014000
 8006e90:	40014400 	.word	0x40014400
 8006e94:	40014800 	.word	0x40014800

08006e98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f003 031f 	and.w	r3, r3, #31
 8006eaa:	2201      	movs	r2, #1
 8006eac:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6a1a      	ldr	r2, [r3, #32]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	401a      	ands	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a1a      	ldr	r2, [r3, #32]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f003 031f 	and.w	r3, r3, #31
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
	...

08006ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e06d      	b.n	8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a30      	ldr	r2, [pc, #192]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d004      	beq.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a2f      	ldr	r2, [pc, #188]	; (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d108      	bne.n	8006f42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a20      	ldr	r2, [pc, #128]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d022      	beq.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6e:	d01d      	beq.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1d      	ldr	r2, [pc, #116]	; (8006fec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d018      	beq.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1c      	ldr	r2, [pc, #112]	; (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d013      	beq.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1a      	ldr	r2, [pc, #104]	; (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00e      	beq.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a15      	ldr	r2, [pc, #84]	; (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d009      	beq.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a16      	ldr	r2, [pc, #88]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a15      	ldr	r2, [pc, #84]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d10c      	bne.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	40010000 	.word	0x40010000
 8006fe8:	40010400 	.word	0x40010400
 8006fec:	40000400 	.word	0x40000400
 8006ff0:	40000800 	.word	0x40000800
 8006ff4:	40000c00 	.word	0x40000c00
 8006ff8:	40001800 	.word	0x40001800
 8006ffc:	40014000 	.word	0x40014000

08007000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e042      	b.n	8007098 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007018:	2b00      	cmp	r3, #0
 800701a:	d106      	bne.n	800702a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7fa f9b1 	bl	800138c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2224      	movs	r2, #36	; 0x24
 800702e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0201 	bic.w	r2, r2, #1
 8007040:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f8ba 	bl	80071bc <UART_SetConfig>
 8007048:	4603      	mov	r3, r0
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e022      	b.n	8007098 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 ff1a 	bl	8007e94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800706e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800707e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 ffa1 	bl	8007fd8 <UART_CheckIdleState>
 8007096:	4603      	mov	r3, r0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08a      	sub	sp, #40	; 0x28
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	4613      	mov	r3, r2
 80070ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b6:	2b20      	cmp	r3, #32
 80070b8:	d17b      	bne.n	80071b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <HAL_UART_Transmit+0x26>
 80070c0:	88fb      	ldrh	r3, [r7, #6]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e074      	b.n	80071b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2221      	movs	r2, #33	; 0x21
 80070d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070da:	f7fa fb49 	bl	8001770 <HAL_GetTick>
 80070de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	88fa      	ldrh	r2, [r7, #6]
 80070e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	88fa      	ldrh	r2, [r7, #6]
 80070ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f8:	d108      	bne.n	800710c <HAL_UART_Transmit+0x6c>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d104      	bne.n	800710c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	61bb      	str	r3, [r7, #24]
 800710a:	e003      	b.n	8007114 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007110:	2300      	movs	r3, #0
 8007112:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007114:	e030      	b.n	8007178 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2200      	movs	r2, #0
 800711e:	2180      	movs	r1, #128	; 0x80
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f001 f803 	bl	800812c <UART_WaitOnFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2220      	movs	r2, #32
 8007130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e03d      	b.n	80071b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10b      	bne.n	8007156 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800714c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	3302      	adds	r3, #2
 8007152:	61bb      	str	r3, [r7, #24]
 8007154:	e007      	b.n	8007166 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	781a      	ldrb	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	3301      	adds	r3, #1
 8007164:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800716c:	b29b      	uxth	r3, r3
 800716e:	3b01      	subs	r3, #1
 8007170:	b29a      	uxth	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800717e:	b29b      	uxth	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1c8      	bne.n	8007116 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2200      	movs	r2, #0
 800718c:	2140      	movs	r1, #64	; 0x40
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 ffcc 	bl	800812c <UART_WaitOnFlagUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2220      	movs	r2, #32
 800719e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e006      	b.n	80071b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2220      	movs	r2, #32
 80071aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	e000      	b.n	80071b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80071b2:	2302      	movs	r3, #2
  }
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3720      	adds	r7, #32
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071c0:	b092      	sub	sp, #72	; 0x48
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	431a      	orrs	r2, r3
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	431a      	orrs	r2, r3
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	4bbe      	ldr	r3, [pc, #760]	; (80074e4 <UART_SetConfig+0x328>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071f4:	430b      	orrs	r3, r1
 80071f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4ab3      	ldr	r2, [pc, #716]	; (80074e8 <UART_SetConfig+0x32c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d004      	beq.n	8007228 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007224:	4313      	orrs	r3, r2
 8007226:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	4baf      	ldr	r3, [pc, #700]	; (80074ec <UART_SetConfig+0x330>)
 8007230:	4013      	ands	r3, r2
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	6812      	ldr	r2, [r2, #0]
 8007236:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007238:	430b      	orrs	r3, r1
 800723a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	f023 010f 	bic.w	r1, r3, #15
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4aa6      	ldr	r2, [pc, #664]	; (80074f0 <UART_SetConfig+0x334>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d177      	bne.n	800734c <UART_SetConfig+0x190>
 800725c:	4ba5      	ldr	r3, [pc, #660]	; (80074f4 <UART_SetConfig+0x338>)
 800725e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007260:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007264:	2b28      	cmp	r3, #40	; 0x28
 8007266:	d86d      	bhi.n	8007344 <UART_SetConfig+0x188>
 8007268:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <UART_SetConfig+0xb4>)
 800726a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726e:	bf00      	nop
 8007270:	08007315 	.word	0x08007315
 8007274:	08007345 	.word	0x08007345
 8007278:	08007345 	.word	0x08007345
 800727c:	08007345 	.word	0x08007345
 8007280:	08007345 	.word	0x08007345
 8007284:	08007345 	.word	0x08007345
 8007288:	08007345 	.word	0x08007345
 800728c:	08007345 	.word	0x08007345
 8007290:	0800731d 	.word	0x0800731d
 8007294:	08007345 	.word	0x08007345
 8007298:	08007345 	.word	0x08007345
 800729c:	08007345 	.word	0x08007345
 80072a0:	08007345 	.word	0x08007345
 80072a4:	08007345 	.word	0x08007345
 80072a8:	08007345 	.word	0x08007345
 80072ac:	08007345 	.word	0x08007345
 80072b0:	08007325 	.word	0x08007325
 80072b4:	08007345 	.word	0x08007345
 80072b8:	08007345 	.word	0x08007345
 80072bc:	08007345 	.word	0x08007345
 80072c0:	08007345 	.word	0x08007345
 80072c4:	08007345 	.word	0x08007345
 80072c8:	08007345 	.word	0x08007345
 80072cc:	08007345 	.word	0x08007345
 80072d0:	0800732d 	.word	0x0800732d
 80072d4:	08007345 	.word	0x08007345
 80072d8:	08007345 	.word	0x08007345
 80072dc:	08007345 	.word	0x08007345
 80072e0:	08007345 	.word	0x08007345
 80072e4:	08007345 	.word	0x08007345
 80072e8:	08007345 	.word	0x08007345
 80072ec:	08007345 	.word	0x08007345
 80072f0:	08007335 	.word	0x08007335
 80072f4:	08007345 	.word	0x08007345
 80072f8:	08007345 	.word	0x08007345
 80072fc:	08007345 	.word	0x08007345
 8007300:	08007345 	.word	0x08007345
 8007304:	08007345 	.word	0x08007345
 8007308:	08007345 	.word	0x08007345
 800730c:	08007345 	.word	0x08007345
 8007310:	0800733d 	.word	0x0800733d
 8007314:	2301      	movs	r3, #1
 8007316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731a:	e326      	b.n	800796a <UART_SetConfig+0x7ae>
 800731c:	2304      	movs	r3, #4
 800731e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007322:	e322      	b.n	800796a <UART_SetConfig+0x7ae>
 8007324:	2308      	movs	r3, #8
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732a:	e31e      	b.n	800796a <UART_SetConfig+0x7ae>
 800732c:	2310      	movs	r3, #16
 800732e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007332:	e31a      	b.n	800796a <UART_SetConfig+0x7ae>
 8007334:	2320      	movs	r3, #32
 8007336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733a:	e316      	b.n	800796a <UART_SetConfig+0x7ae>
 800733c:	2340      	movs	r3, #64	; 0x40
 800733e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007342:	e312      	b.n	800796a <UART_SetConfig+0x7ae>
 8007344:	2380      	movs	r3, #128	; 0x80
 8007346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734a:	e30e      	b.n	800796a <UART_SetConfig+0x7ae>
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a69      	ldr	r2, [pc, #420]	; (80074f8 <UART_SetConfig+0x33c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d130      	bne.n	80073b8 <UART_SetConfig+0x1fc>
 8007356:	4b67      	ldr	r3, [pc, #412]	; (80074f4 <UART_SetConfig+0x338>)
 8007358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	2b05      	cmp	r3, #5
 8007360:	d826      	bhi.n	80073b0 <UART_SetConfig+0x1f4>
 8007362:	a201      	add	r2, pc, #4	; (adr r2, 8007368 <UART_SetConfig+0x1ac>)
 8007364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007368:	08007381 	.word	0x08007381
 800736c:	08007389 	.word	0x08007389
 8007370:	08007391 	.word	0x08007391
 8007374:	08007399 	.word	0x08007399
 8007378:	080073a1 	.word	0x080073a1
 800737c:	080073a9 	.word	0x080073a9
 8007380:	2300      	movs	r3, #0
 8007382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007386:	e2f0      	b.n	800796a <UART_SetConfig+0x7ae>
 8007388:	2304      	movs	r3, #4
 800738a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800738e:	e2ec      	b.n	800796a <UART_SetConfig+0x7ae>
 8007390:	2308      	movs	r3, #8
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007396:	e2e8      	b.n	800796a <UART_SetConfig+0x7ae>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739e:	e2e4      	b.n	800796a <UART_SetConfig+0x7ae>
 80073a0:	2320      	movs	r3, #32
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a6:	e2e0      	b.n	800796a <UART_SetConfig+0x7ae>
 80073a8:	2340      	movs	r3, #64	; 0x40
 80073aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ae:	e2dc      	b.n	800796a <UART_SetConfig+0x7ae>
 80073b0:	2380      	movs	r3, #128	; 0x80
 80073b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b6:	e2d8      	b.n	800796a <UART_SetConfig+0x7ae>
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a4f      	ldr	r2, [pc, #316]	; (80074fc <UART_SetConfig+0x340>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d130      	bne.n	8007424 <UART_SetConfig+0x268>
 80073c2:	4b4c      	ldr	r3, [pc, #304]	; (80074f4 <UART_SetConfig+0x338>)
 80073c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	2b05      	cmp	r3, #5
 80073cc:	d826      	bhi.n	800741c <UART_SetConfig+0x260>
 80073ce:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <UART_SetConfig+0x218>)
 80073d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d4:	080073ed 	.word	0x080073ed
 80073d8:	080073f5 	.word	0x080073f5
 80073dc:	080073fd 	.word	0x080073fd
 80073e0:	08007405 	.word	0x08007405
 80073e4:	0800740d 	.word	0x0800740d
 80073e8:	08007415 	.word	0x08007415
 80073ec:	2300      	movs	r3, #0
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f2:	e2ba      	b.n	800796a <UART_SetConfig+0x7ae>
 80073f4:	2304      	movs	r3, #4
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fa:	e2b6      	b.n	800796a <UART_SetConfig+0x7ae>
 80073fc:	2308      	movs	r3, #8
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007402:	e2b2      	b.n	800796a <UART_SetConfig+0x7ae>
 8007404:	2310      	movs	r3, #16
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740a:	e2ae      	b.n	800796a <UART_SetConfig+0x7ae>
 800740c:	2320      	movs	r3, #32
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007412:	e2aa      	b.n	800796a <UART_SetConfig+0x7ae>
 8007414:	2340      	movs	r3, #64	; 0x40
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741a:	e2a6      	b.n	800796a <UART_SetConfig+0x7ae>
 800741c:	2380      	movs	r3, #128	; 0x80
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007422:	e2a2      	b.n	800796a <UART_SetConfig+0x7ae>
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a35      	ldr	r2, [pc, #212]	; (8007500 <UART_SetConfig+0x344>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d130      	bne.n	8007490 <UART_SetConfig+0x2d4>
 800742e:	4b31      	ldr	r3, [pc, #196]	; (80074f4 <UART_SetConfig+0x338>)
 8007430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	2b05      	cmp	r3, #5
 8007438:	d826      	bhi.n	8007488 <UART_SetConfig+0x2cc>
 800743a:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <UART_SetConfig+0x284>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	08007459 	.word	0x08007459
 8007444:	08007461 	.word	0x08007461
 8007448:	08007469 	.word	0x08007469
 800744c:	08007471 	.word	0x08007471
 8007450:	08007479 	.word	0x08007479
 8007454:	08007481 	.word	0x08007481
 8007458:	2300      	movs	r3, #0
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745e:	e284      	b.n	800796a <UART_SetConfig+0x7ae>
 8007460:	2304      	movs	r3, #4
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007466:	e280      	b.n	800796a <UART_SetConfig+0x7ae>
 8007468:	2308      	movs	r3, #8
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746e:	e27c      	b.n	800796a <UART_SetConfig+0x7ae>
 8007470:	2310      	movs	r3, #16
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007476:	e278      	b.n	800796a <UART_SetConfig+0x7ae>
 8007478:	2320      	movs	r3, #32
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747e:	e274      	b.n	800796a <UART_SetConfig+0x7ae>
 8007480:	2340      	movs	r3, #64	; 0x40
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007486:	e270      	b.n	800796a <UART_SetConfig+0x7ae>
 8007488:	2380      	movs	r3, #128	; 0x80
 800748a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748e:	e26c      	b.n	800796a <UART_SetConfig+0x7ae>
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1b      	ldr	r2, [pc, #108]	; (8007504 <UART_SetConfig+0x348>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d142      	bne.n	8007520 <UART_SetConfig+0x364>
 800749a:	4b16      	ldr	r3, [pc, #88]	; (80074f4 <UART_SetConfig+0x338>)
 800749c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	2b05      	cmp	r3, #5
 80074a4:	d838      	bhi.n	8007518 <UART_SetConfig+0x35c>
 80074a6:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <UART_SetConfig+0x2f0>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	080074c5 	.word	0x080074c5
 80074b0:	080074cd 	.word	0x080074cd
 80074b4:	080074d5 	.word	0x080074d5
 80074b8:	080074dd 	.word	0x080074dd
 80074bc:	08007509 	.word	0x08007509
 80074c0:	08007511 	.word	0x08007511
 80074c4:	2300      	movs	r3, #0
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ca:	e24e      	b.n	800796a <UART_SetConfig+0x7ae>
 80074cc:	2304      	movs	r3, #4
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d2:	e24a      	b.n	800796a <UART_SetConfig+0x7ae>
 80074d4:	2308      	movs	r3, #8
 80074d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074da:	e246      	b.n	800796a <UART_SetConfig+0x7ae>
 80074dc:	2310      	movs	r3, #16
 80074de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e2:	e242      	b.n	800796a <UART_SetConfig+0x7ae>
 80074e4:	cfff69f3 	.word	0xcfff69f3
 80074e8:	58000c00 	.word	0x58000c00
 80074ec:	11fff4ff 	.word	0x11fff4ff
 80074f0:	40011000 	.word	0x40011000
 80074f4:	58024400 	.word	0x58024400
 80074f8:	40004400 	.word	0x40004400
 80074fc:	40004800 	.word	0x40004800
 8007500:	40004c00 	.word	0x40004c00
 8007504:	40005000 	.word	0x40005000
 8007508:	2320      	movs	r3, #32
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750e:	e22c      	b.n	800796a <UART_SetConfig+0x7ae>
 8007510:	2340      	movs	r3, #64	; 0x40
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007516:	e228      	b.n	800796a <UART_SetConfig+0x7ae>
 8007518:	2380      	movs	r3, #128	; 0x80
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751e:	e224      	b.n	800796a <UART_SetConfig+0x7ae>
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4ab1      	ldr	r2, [pc, #708]	; (80077ec <UART_SetConfig+0x630>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d176      	bne.n	8007618 <UART_SetConfig+0x45c>
 800752a:	4bb1      	ldr	r3, [pc, #708]	; (80077f0 <UART_SetConfig+0x634>)
 800752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007532:	2b28      	cmp	r3, #40	; 0x28
 8007534:	d86c      	bhi.n	8007610 <UART_SetConfig+0x454>
 8007536:	a201      	add	r2, pc, #4	; (adr r2, 800753c <UART_SetConfig+0x380>)
 8007538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753c:	080075e1 	.word	0x080075e1
 8007540:	08007611 	.word	0x08007611
 8007544:	08007611 	.word	0x08007611
 8007548:	08007611 	.word	0x08007611
 800754c:	08007611 	.word	0x08007611
 8007550:	08007611 	.word	0x08007611
 8007554:	08007611 	.word	0x08007611
 8007558:	08007611 	.word	0x08007611
 800755c:	080075e9 	.word	0x080075e9
 8007560:	08007611 	.word	0x08007611
 8007564:	08007611 	.word	0x08007611
 8007568:	08007611 	.word	0x08007611
 800756c:	08007611 	.word	0x08007611
 8007570:	08007611 	.word	0x08007611
 8007574:	08007611 	.word	0x08007611
 8007578:	08007611 	.word	0x08007611
 800757c:	080075f1 	.word	0x080075f1
 8007580:	08007611 	.word	0x08007611
 8007584:	08007611 	.word	0x08007611
 8007588:	08007611 	.word	0x08007611
 800758c:	08007611 	.word	0x08007611
 8007590:	08007611 	.word	0x08007611
 8007594:	08007611 	.word	0x08007611
 8007598:	08007611 	.word	0x08007611
 800759c:	080075f9 	.word	0x080075f9
 80075a0:	08007611 	.word	0x08007611
 80075a4:	08007611 	.word	0x08007611
 80075a8:	08007611 	.word	0x08007611
 80075ac:	08007611 	.word	0x08007611
 80075b0:	08007611 	.word	0x08007611
 80075b4:	08007611 	.word	0x08007611
 80075b8:	08007611 	.word	0x08007611
 80075bc:	08007601 	.word	0x08007601
 80075c0:	08007611 	.word	0x08007611
 80075c4:	08007611 	.word	0x08007611
 80075c8:	08007611 	.word	0x08007611
 80075cc:	08007611 	.word	0x08007611
 80075d0:	08007611 	.word	0x08007611
 80075d4:	08007611 	.word	0x08007611
 80075d8:	08007611 	.word	0x08007611
 80075dc:	08007609 	.word	0x08007609
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e6:	e1c0      	b.n	800796a <UART_SetConfig+0x7ae>
 80075e8:	2304      	movs	r3, #4
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ee:	e1bc      	b.n	800796a <UART_SetConfig+0x7ae>
 80075f0:	2308      	movs	r3, #8
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f6:	e1b8      	b.n	800796a <UART_SetConfig+0x7ae>
 80075f8:	2310      	movs	r3, #16
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fe:	e1b4      	b.n	800796a <UART_SetConfig+0x7ae>
 8007600:	2320      	movs	r3, #32
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007606:	e1b0      	b.n	800796a <UART_SetConfig+0x7ae>
 8007608:	2340      	movs	r3, #64	; 0x40
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760e:	e1ac      	b.n	800796a <UART_SetConfig+0x7ae>
 8007610:	2380      	movs	r3, #128	; 0x80
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007616:	e1a8      	b.n	800796a <UART_SetConfig+0x7ae>
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a75      	ldr	r2, [pc, #468]	; (80077f4 <UART_SetConfig+0x638>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d130      	bne.n	8007684 <UART_SetConfig+0x4c8>
 8007622:	4b73      	ldr	r3, [pc, #460]	; (80077f0 <UART_SetConfig+0x634>)
 8007624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	2b05      	cmp	r3, #5
 800762c:	d826      	bhi.n	800767c <UART_SetConfig+0x4c0>
 800762e:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <UART_SetConfig+0x478>)
 8007630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007634:	0800764d 	.word	0x0800764d
 8007638:	08007655 	.word	0x08007655
 800763c:	0800765d 	.word	0x0800765d
 8007640:	08007665 	.word	0x08007665
 8007644:	0800766d 	.word	0x0800766d
 8007648:	08007675 	.word	0x08007675
 800764c:	2300      	movs	r3, #0
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007652:	e18a      	b.n	800796a <UART_SetConfig+0x7ae>
 8007654:	2304      	movs	r3, #4
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765a:	e186      	b.n	800796a <UART_SetConfig+0x7ae>
 800765c:	2308      	movs	r3, #8
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007662:	e182      	b.n	800796a <UART_SetConfig+0x7ae>
 8007664:	2310      	movs	r3, #16
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766a:	e17e      	b.n	800796a <UART_SetConfig+0x7ae>
 800766c:	2320      	movs	r3, #32
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007672:	e17a      	b.n	800796a <UART_SetConfig+0x7ae>
 8007674:	2340      	movs	r3, #64	; 0x40
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767a:	e176      	b.n	800796a <UART_SetConfig+0x7ae>
 800767c:	2380      	movs	r3, #128	; 0x80
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007682:	e172      	b.n	800796a <UART_SetConfig+0x7ae>
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a5b      	ldr	r2, [pc, #364]	; (80077f8 <UART_SetConfig+0x63c>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d130      	bne.n	80076f0 <UART_SetConfig+0x534>
 800768e:	4b58      	ldr	r3, [pc, #352]	; (80077f0 <UART_SetConfig+0x634>)
 8007690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	2b05      	cmp	r3, #5
 8007698:	d826      	bhi.n	80076e8 <UART_SetConfig+0x52c>
 800769a:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <UART_SetConfig+0x4e4>)
 800769c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a0:	080076b9 	.word	0x080076b9
 80076a4:	080076c1 	.word	0x080076c1
 80076a8:	080076c9 	.word	0x080076c9
 80076ac:	080076d1 	.word	0x080076d1
 80076b0:	080076d9 	.word	0x080076d9
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	2300      	movs	r3, #0
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076be:	e154      	b.n	800796a <UART_SetConfig+0x7ae>
 80076c0:	2304      	movs	r3, #4
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c6:	e150      	b.n	800796a <UART_SetConfig+0x7ae>
 80076c8:	2308      	movs	r3, #8
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ce:	e14c      	b.n	800796a <UART_SetConfig+0x7ae>
 80076d0:	2310      	movs	r3, #16
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d6:	e148      	b.n	800796a <UART_SetConfig+0x7ae>
 80076d8:	2320      	movs	r3, #32
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076de:	e144      	b.n	800796a <UART_SetConfig+0x7ae>
 80076e0:	2340      	movs	r3, #64	; 0x40
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e6:	e140      	b.n	800796a <UART_SetConfig+0x7ae>
 80076e8:	2380      	movs	r3, #128	; 0x80
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ee:	e13c      	b.n	800796a <UART_SetConfig+0x7ae>
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a41      	ldr	r2, [pc, #260]	; (80077fc <UART_SetConfig+0x640>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	f040 8082 	bne.w	8007800 <UART_SetConfig+0x644>
 80076fc:	4b3c      	ldr	r3, [pc, #240]	; (80077f0 <UART_SetConfig+0x634>)
 80076fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007700:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007704:	2b28      	cmp	r3, #40	; 0x28
 8007706:	d86d      	bhi.n	80077e4 <UART_SetConfig+0x628>
 8007708:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <UART_SetConfig+0x554>)
 800770a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770e:	bf00      	nop
 8007710:	080077b5 	.word	0x080077b5
 8007714:	080077e5 	.word	0x080077e5
 8007718:	080077e5 	.word	0x080077e5
 800771c:	080077e5 	.word	0x080077e5
 8007720:	080077e5 	.word	0x080077e5
 8007724:	080077e5 	.word	0x080077e5
 8007728:	080077e5 	.word	0x080077e5
 800772c:	080077e5 	.word	0x080077e5
 8007730:	080077bd 	.word	0x080077bd
 8007734:	080077e5 	.word	0x080077e5
 8007738:	080077e5 	.word	0x080077e5
 800773c:	080077e5 	.word	0x080077e5
 8007740:	080077e5 	.word	0x080077e5
 8007744:	080077e5 	.word	0x080077e5
 8007748:	080077e5 	.word	0x080077e5
 800774c:	080077e5 	.word	0x080077e5
 8007750:	080077c5 	.word	0x080077c5
 8007754:	080077e5 	.word	0x080077e5
 8007758:	080077e5 	.word	0x080077e5
 800775c:	080077e5 	.word	0x080077e5
 8007760:	080077e5 	.word	0x080077e5
 8007764:	080077e5 	.word	0x080077e5
 8007768:	080077e5 	.word	0x080077e5
 800776c:	080077e5 	.word	0x080077e5
 8007770:	080077cd 	.word	0x080077cd
 8007774:	080077e5 	.word	0x080077e5
 8007778:	080077e5 	.word	0x080077e5
 800777c:	080077e5 	.word	0x080077e5
 8007780:	080077e5 	.word	0x080077e5
 8007784:	080077e5 	.word	0x080077e5
 8007788:	080077e5 	.word	0x080077e5
 800778c:	080077e5 	.word	0x080077e5
 8007790:	080077d5 	.word	0x080077d5
 8007794:	080077e5 	.word	0x080077e5
 8007798:	080077e5 	.word	0x080077e5
 800779c:	080077e5 	.word	0x080077e5
 80077a0:	080077e5 	.word	0x080077e5
 80077a4:	080077e5 	.word	0x080077e5
 80077a8:	080077e5 	.word	0x080077e5
 80077ac:	080077e5 	.word	0x080077e5
 80077b0:	080077dd 	.word	0x080077dd
 80077b4:	2301      	movs	r3, #1
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ba:	e0d6      	b.n	800796a <UART_SetConfig+0x7ae>
 80077bc:	2304      	movs	r3, #4
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077c2:	e0d2      	b.n	800796a <UART_SetConfig+0x7ae>
 80077c4:	2308      	movs	r3, #8
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ca:	e0ce      	b.n	800796a <UART_SetConfig+0x7ae>
 80077cc:	2310      	movs	r3, #16
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d2:	e0ca      	b.n	800796a <UART_SetConfig+0x7ae>
 80077d4:	2320      	movs	r3, #32
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077da:	e0c6      	b.n	800796a <UART_SetConfig+0x7ae>
 80077dc:	2340      	movs	r3, #64	; 0x40
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	e0c2      	b.n	800796a <UART_SetConfig+0x7ae>
 80077e4:	2380      	movs	r3, #128	; 0x80
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ea:	e0be      	b.n	800796a <UART_SetConfig+0x7ae>
 80077ec:	40011400 	.word	0x40011400
 80077f0:	58024400 	.word	0x58024400
 80077f4:	40007800 	.word	0x40007800
 80077f8:	40007c00 	.word	0x40007c00
 80077fc:	40011800 	.word	0x40011800
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4aad      	ldr	r2, [pc, #692]	; (8007abc <UART_SetConfig+0x900>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d176      	bne.n	80078f8 <UART_SetConfig+0x73c>
 800780a:	4bad      	ldr	r3, [pc, #692]	; (8007ac0 <UART_SetConfig+0x904>)
 800780c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007812:	2b28      	cmp	r3, #40	; 0x28
 8007814:	d86c      	bhi.n	80078f0 <UART_SetConfig+0x734>
 8007816:	a201      	add	r2, pc, #4	; (adr r2, 800781c <UART_SetConfig+0x660>)
 8007818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781c:	080078c1 	.word	0x080078c1
 8007820:	080078f1 	.word	0x080078f1
 8007824:	080078f1 	.word	0x080078f1
 8007828:	080078f1 	.word	0x080078f1
 800782c:	080078f1 	.word	0x080078f1
 8007830:	080078f1 	.word	0x080078f1
 8007834:	080078f1 	.word	0x080078f1
 8007838:	080078f1 	.word	0x080078f1
 800783c:	080078c9 	.word	0x080078c9
 8007840:	080078f1 	.word	0x080078f1
 8007844:	080078f1 	.word	0x080078f1
 8007848:	080078f1 	.word	0x080078f1
 800784c:	080078f1 	.word	0x080078f1
 8007850:	080078f1 	.word	0x080078f1
 8007854:	080078f1 	.word	0x080078f1
 8007858:	080078f1 	.word	0x080078f1
 800785c:	080078d1 	.word	0x080078d1
 8007860:	080078f1 	.word	0x080078f1
 8007864:	080078f1 	.word	0x080078f1
 8007868:	080078f1 	.word	0x080078f1
 800786c:	080078f1 	.word	0x080078f1
 8007870:	080078f1 	.word	0x080078f1
 8007874:	080078f1 	.word	0x080078f1
 8007878:	080078f1 	.word	0x080078f1
 800787c:	080078d9 	.word	0x080078d9
 8007880:	080078f1 	.word	0x080078f1
 8007884:	080078f1 	.word	0x080078f1
 8007888:	080078f1 	.word	0x080078f1
 800788c:	080078f1 	.word	0x080078f1
 8007890:	080078f1 	.word	0x080078f1
 8007894:	080078f1 	.word	0x080078f1
 8007898:	080078f1 	.word	0x080078f1
 800789c:	080078e1 	.word	0x080078e1
 80078a0:	080078f1 	.word	0x080078f1
 80078a4:	080078f1 	.word	0x080078f1
 80078a8:	080078f1 	.word	0x080078f1
 80078ac:	080078f1 	.word	0x080078f1
 80078b0:	080078f1 	.word	0x080078f1
 80078b4:	080078f1 	.word	0x080078f1
 80078b8:	080078f1 	.word	0x080078f1
 80078bc:	080078e9 	.word	0x080078e9
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078c6:	e050      	b.n	800796a <UART_SetConfig+0x7ae>
 80078c8:	2304      	movs	r3, #4
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ce:	e04c      	b.n	800796a <UART_SetConfig+0x7ae>
 80078d0:	2308      	movs	r3, #8
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d6:	e048      	b.n	800796a <UART_SetConfig+0x7ae>
 80078d8:	2310      	movs	r3, #16
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078de:	e044      	b.n	800796a <UART_SetConfig+0x7ae>
 80078e0:	2320      	movs	r3, #32
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e6:	e040      	b.n	800796a <UART_SetConfig+0x7ae>
 80078e8:	2340      	movs	r3, #64	; 0x40
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ee:	e03c      	b.n	800796a <UART_SetConfig+0x7ae>
 80078f0:	2380      	movs	r3, #128	; 0x80
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f6:	e038      	b.n	800796a <UART_SetConfig+0x7ae>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a71      	ldr	r2, [pc, #452]	; (8007ac4 <UART_SetConfig+0x908>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d130      	bne.n	8007964 <UART_SetConfig+0x7a8>
 8007902:	4b6f      	ldr	r3, [pc, #444]	; (8007ac0 <UART_SetConfig+0x904>)
 8007904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b05      	cmp	r3, #5
 800790c:	d826      	bhi.n	800795c <UART_SetConfig+0x7a0>
 800790e:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <UART_SetConfig+0x758>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	0800792d 	.word	0x0800792d
 8007918:	08007935 	.word	0x08007935
 800791c:	0800793d 	.word	0x0800793d
 8007920:	08007945 	.word	0x08007945
 8007924:	0800794d 	.word	0x0800794d
 8007928:	08007955 	.word	0x08007955
 800792c:	2302      	movs	r3, #2
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007932:	e01a      	b.n	800796a <UART_SetConfig+0x7ae>
 8007934:	2304      	movs	r3, #4
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793a:	e016      	b.n	800796a <UART_SetConfig+0x7ae>
 800793c:	2308      	movs	r3, #8
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007942:	e012      	b.n	800796a <UART_SetConfig+0x7ae>
 8007944:	2310      	movs	r3, #16
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794a:	e00e      	b.n	800796a <UART_SetConfig+0x7ae>
 800794c:	2320      	movs	r3, #32
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007952:	e00a      	b.n	800796a <UART_SetConfig+0x7ae>
 8007954:	2340      	movs	r3, #64	; 0x40
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795a:	e006      	b.n	800796a <UART_SetConfig+0x7ae>
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007962:	e002      	b.n	800796a <UART_SetConfig+0x7ae>
 8007964:	2380      	movs	r3, #128	; 0x80
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a55      	ldr	r2, [pc, #340]	; (8007ac4 <UART_SetConfig+0x908>)
 8007970:	4293      	cmp	r3, r2
 8007972:	f040 80f8 	bne.w	8007b66 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007976:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800797a:	2b20      	cmp	r3, #32
 800797c:	dc46      	bgt.n	8007a0c <UART_SetConfig+0x850>
 800797e:	2b02      	cmp	r3, #2
 8007980:	db75      	blt.n	8007a6e <UART_SetConfig+0x8b2>
 8007982:	3b02      	subs	r3, #2
 8007984:	2b1e      	cmp	r3, #30
 8007986:	d872      	bhi.n	8007a6e <UART_SetConfig+0x8b2>
 8007988:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <UART_SetConfig+0x7d4>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	08007a13 	.word	0x08007a13
 8007994:	08007a6f 	.word	0x08007a6f
 8007998:	08007a1b 	.word	0x08007a1b
 800799c:	08007a6f 	.word	0x08007a6f
 80079a0:	08007a6f 	.word	0x08007a6f
 80079a4:	08007a6f 	.word	0x08007a6f
 80079a8:	08007a2b 	.word	0x08007a2b
 80079ac:	08007a6f 	.word	0x08007a6f
 80079b0:	08007a6f 	.word	0x08007a6f
 80079b4:	08007a6f 	.word	0x08007a6f
 80079b8:	08007a6f 	.word	0x08007a6f
 80079bc:	08007a6f 	.word	0x08007a6f
 80079c0:	08007a6f 	.word	0x08007a6f
 80079c4:	08007a6f 	.word	0x08007a6f
 80079c8:	08007a3b 	.word	0x08007a3b
 80079cc:	08007a6f 	.word	0x08007a6f
 80079d0:	08007a6f 	.word	0x08007a6f
 80079d4:	08007a6f 	.word	0x08007a6f
 80079d8:	08007a6f 	.word	0x08007a6f
 80079dc:	08007a6f 	.word	0x08007a6f
 80079e0:	08007a6f 	.word	0x08007a6f
 80079e4:	08007a6f 	.word	0x08007a6f
 80079e8:	08007a6f 	.word	0x08007a6f
 80079ec:	08007a6f 	.word	0x08007a6f
 80079f0:	08007a6f 	.word	0x08007a6f
 80079f4:	08007a6f 	.word	0x08007a6f
 80079f8:	08007a6f 	.word	0x08007a6f
 80079fc:	08007a6f 	.word	0x08007a6f
 8007a00:	08007a6f 	.word	0x08007a6f
 8007a04:	08007a6f 	.word	0x08007a6f
 8007a08:	08007a61 	.word	0x08007a61
 8007a0c:	2b40      	cmp	r3, #64	; 0x40
 8007a0e:	d02a      	beq.n	8007a66 <UART_SetConfig+0x8aa>
 8007a10:	e02d      	b.n	8007a6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a12:	f7fe fa07 	bl	8005e24 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a18:	e02f      	b.n	8007a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fe fa16 	bl	8005e50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a28:	e027      	b.n	8007a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a2a:	f107 0318 	add.w	r3, r7, #24
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fb62 	bl	80060f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a38:	e01f      	b.n	8007a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a3a:	4b21      	ldr	r3, [pc, #132]	; (8007ac0 <UART_SetConfig+0x904>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d009      	beq.n	8007a5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a46:	4b1e      	ldr	r3, [pc, #120]	; (8007ac0 <UART_SetConfig+0x904>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	08db      	lsrs	r3, r3, #3
 8007a4c:	f003 0303 	and.w	r3, r3, #3
 8007a50:	4a1d      	ldr	r2, [pc, #116]	; (8007ac8 <UART_SetConfig+0x90c>)
 8007a52:	fa22 f303 	lsr.w	r3, r2, r3
 8007a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a58:	e00f      	b.n	8007a7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007a5a:	4b1b      	ldr	r3, [pc, #108]	; (8007ac8 <UART_SetConfig+0x90c>)
 8007a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a5e:	e00c      	b.n	8007a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a60:	4b1a      	ldr	r3, [pc, #104]	; (8007acc <UART_SetConfig+0x910>)
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a64:	e009      	b.n	8007a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a6c:	e005      	b.n	8007a7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 81ee 	beq.w	8007e5e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	4a12      	ldr	r2, [pc, #72]	; (8007ad0 <UART_SetConfig+0x914>)
 8007a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a94:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	4413      	add	r3, r2
 8007aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d305      	bcc.n	8007ab2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d910      	bls.n	8007ad4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ab8:	e1d1      	b.n	8007e5e <UART_SetConfig+0xca2>
 8007aba:	bf00      	nop
 8007abc:	40011c00 	.word	0x40011c00
 8007ac0:	58024400 	.word	0x58024400
 8007ac4:	58000c00 	.word	0x58000c00
 8007ac8:	03d09000 	.word	0x03d09000
 8007acc:	003d0900 	.word	0x003d0900
 8007ad0:	08008f28 	.word	0x08008f28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	60bb      	str	r3, [r7, #8]
 8007ada:	60fa      	str	r2, [r7, #12]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	4ac0      	ldr	r2, [pc, #768]	; (8007de4 <UART_SetConfig+0xc28>)
 8007ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	2200      	movs	r2, #0
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	607a      	str	r2, [r7, #4]
 8007aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007af6:	f7f8 fc4b 	bl	8000390 <__aeabi_uldivmod>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4610      	mov	r0, r2
 8007b00:	4619      	mov	r1, r3
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	020b      	lsls	r3, r1, #8
 8007b0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b10:	0202      	lsls	r2, r0, #8
 8007b12:	6979      	ldr	r1, [r7, #20]
 8007b14:	6849      	ldr	r1, [r1, #4]
 8007b16:	0849      	lsrs	r1, r1, #1
 8007b18:	2000      	movs	r0, #0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	eb12 0804 	adds.w	r8, r2, r4
 8007b22:	eb43 0905 	adc.w	r9, r3, r5
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	469a      	mov	sl, r3
 8007b2e:	4693      	mov	fp, r2
 8007b30:	4652      	mov	r2, sl
 8007b32:	465b      	mov	r3, fp
 8007b34:	4640      	mov	r0, r8
 8007b36:	4649      	mov	r1, r9
 8007b38:	f7f8 fc2a 	bl	8000390 <__aeabi_uldivmod>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4613      	mov	r3, r2
 8007b42:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b4a:	d308      	bcc.n	8007b5e <UART_SetConfig+0x9a2>
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b52:	d204      	bcs.n	8007b5e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b5a:	60da      	str	r2, [r3, #12]
 8007b5c:	e17f      	b.n	8007e5e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b64:	e17b      	b.n	8007e5e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b6e:	f040 80bd 	bne.w	8007cec <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007b72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	dc48      	bgt.n	8007c0c <UART_SetConfig+0xa50>
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	db7b      	blt.n	8007c76 <UART_SetConfig+0xaba>
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d879      	bhi.n	8007c76 <UART_SetConfig+0xaba>
 8007b82:	a201      	add	r2, pc, #4	; (adr r2, 8007b88 <UART_SetConfig+0x9cc>)
 8007b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b88:	08007c13 	.word	0x08007c13
 8007b8c:	08007c1b 	.word	0x08007c1b
 8007b90:	08007c77 	.word	0x08007c77
 8007b94:	08007c77 	.word	0x08007c77
 8007b98:	08007c23 	.word	0x08007c23
 8007b9c:	08007c77 	.word	0x08007c77
 8007ba0:	08007c77 	.word	0x08007c77
 8007ba4:	08007c77 	.word	0x08007c77
 8007ba8:	08007c33 	.word	0x08007c33
 8007bac:	08007c77 	.word	0x08007c77
 8007bb0:	08007c77 	.word	0x08007c77
 8007bb4:	08007c77 	.word	0x08007c77
 8007bb8:	08007c77 	.word	0x08007c77
 8007bbc:	08007c77 	.word	0x08007c77
 8007bc0:	08007c77 	.word	0x08007c77
 8007bc4:	08007c77 	.word	0x08007c77
 8007bc8:	08007c43 	.word	0x08007c43
 8007bcc:	08007c77 	.word	0x08007c77
 8007bd0:	08007c77 	.word	0x08007c77
 8007bd4:	08007c77 	.word	0x08007c77
 8007bd8:	08007c77 	.word	0x08007c77
 8007bdc:	08007c77 	.word	0x08007c77
 8007be0:	08007c77 	.word	0x08007c77
 8007be4:	08007c77 	.word	0x08007c77
 8007be8:	08007c77 	.word	0x08007c77
 8007bec:	08007c77 	.word	0x08007c77
 8007bf0:	08007c77 	.word	0x08007c77
 8007bf4:	08007c77 	.word	0x08007c77
 8007bf8:	08007c77 	.word	0x08007c77
 8007bfc:	08007c77 	.word	0x08007c77
 8007c00:	08007c77 	.word	0x08007c77
 8007c04:	08007c77 	.word	0x08007c77
 8007c08:	08007c69 	.word	0x08007c69
 8007c0c:	2b40      	cmp	r3, #64	; 0x40
 8007c0e:	d02e      	beq.n	8007c6e <UART_SetConfig+0xab2>
 8007c10:	e031      	b.n	8007c76 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c12:	f7fc fa45 	bl	80040a0 <HAL_RCC_GetPCLK1Freq>
 8007c16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c18:	e033      	b.n	8007c82 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c1a:	f7fc fa57 	bl	80040cc <HAL_RCC_GetPCLK2Freq>
 8007c1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c20:	e02f      	b.n	8007c82 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe f912 	bl	8005e50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c30:	e027      	b.n	8007c82 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c32:	f107 0318 	add.w	r3, r7, #24
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fa5e 	bl	80060f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c40:	e01f      	b.n	8007c82 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c42:	4b69      	ldr	r3, [pc, #420]	; (8007de8 <UART_SetConfig+0xc2c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d009      	beq.n	8007c62 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c4e:	4b66      	ldr	r3, [pc, #408]	; (8007de8 <UART_SetConfig+0xc2c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	08db      	lsrs	r3, r3, #3
 8007c54:	f003 0303 	and.w	r3, r3, #3
 8007c58:	4a64      	ldr	r2, [pc, #400]	; (8007dec <UART_SetConfig+0xc30>)
 8007c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c60:	e00f      	b.n	8007c82 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007c62:	4b62      	ldr	r3, [pc, #392]	; (8007dec <UART_SetConfig+0xc30>)
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c66:	e00c      	b.n	8007c82 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c68:	4b61      	ldr	r3, [pc, #388]	; (8007df0 <UART_SetConfig+0xc34>)
 8007c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c6c:	e009      	b.n	8007c82 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c74:	e005      	b.n	8007c82 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 80ea 	beq.w	8007e5e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8e:	4a55      	ldr	r2, [pc, #340]	; (8007de4 <UART_SetConfig+0xc28>)
 8007c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c94:	461a      	mov	r2, r3
 8007c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c9c:	005a      	lsls	r2, r3, #1
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	085b      	lsrs	r3, r3, #1
 8007ca4:	441a      	add	r2, r3
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	2b0f      	cmp	r3, #15
 8007cb4:	d916      	bls.n	8007ce4 <UART_SetConfig+0xb28>
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cbc:	d212      	bcs.n	8007ce4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	f023 030f 	bic.w	r3, r3, #15
 8007cc6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	085b      	lsrs	r3, r3, #1
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007ce0:	60da      	str	r2, [r3, #12]
 8007ce2:	e0bc      	b.n	8007e5e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007cea:	e0b8      	b.n	8007e5e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007cf0:	2b20      	cmp	r3, #32
 8007cf2:	dc4b      	bgt.n	8007d8c <UART_SetConfig+0xbd0>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f2c0 8087 	blt.w	8007e08 <UART_SetConfig+0xc4c>
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	f200 8084 	bhi.w	8007e08 <UART_SetConfig+0xc4c>
 8007d00:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <UART_SetConfig+0xb4c>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d93 	.word	0x08007d93
 8007d0c:	08007d9b 	.word	0x08007d9b
 8007d10:	08007e09 	.word	0x08007e09
 8007d14:	08007e09 	.word	0x08007e09
 8007d18:	08007da3 	.word	0x08007da3
 8007d1c:	08007e09 	.word	0x08007e09
 8007d20:	08007e09 	.word	0x08007e09
 8007d24:	08007e09 	.word	0x08007e09
 8007d28:	08007db3 	.word	0x08007db3
 8007d2c:	08007e09 	.word	0x08007e09
 8007d30:	08007e09 	.word	0x08007e09
 8007d34:	08007e09 	.word	0x08007e09
 8007d38:	08007e09 	.word	0x08007e09
 8007d3c:	08007e09 	.word	0x08007e09
 8007d40:	08007e09 	.word	0x08007e09
 8007d44:	08007e09 	.word	0x08007e09
 8007d48:	08007dc3 	.word	0x08007dc3
 8007d4c:	08007e09 	.word	0x08007e09
 8007d50:	08007e09 	.word	0x08007e09
 8007d54:	08007e09 	.word	0x08007e09
 8007d58:	08007e09 	.word	0x08007e09
 8007d5c:	08007e09 	.word	0x08007e09
 8007d60:	08007e09 	.word	0x08007e09
 8007d64:	08007e09 	.word	0x08007e09
 8007d68:	08007e09 	.word	0x08007e09
 8007d6c:	08007e09 	.word	0x08007e09
 8007d70:	08007e09 	.word	0x08007e09
 8007d74:	08007e09 	.word	0x08007e09
 8007d78:	08007e09 	.word	0x08007e09
 8007d7c:	08007e09 	.word	0x08007e09
 8007d80:	08007e09 	.word	0x08007e09
 8007d84:	08007e09 	.word	0x08007e09
 8007d88:	08007dfb 	.word	0x08007dfb
 8007d8c:	2b40      	cmp	r3, #64	; 0x40
 8007d8e:	d037      	beq.n	8007e00 <UART_SetConfig+0xc44>
 8007d90:	e03a      	b.n	8007e08 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d92:	f7fc f985 	bl	80040a0 <HAL_RCC_GetPCLK1Freq>
 8007d96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d98:	e03c      	b.n	8007e14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d9a:	f7fc f997 	bl	80040cc <HAL_RCC_GetPCLK2Freq>
 8007d9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007da0:	e038      	b.n	8007e14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe f852 	bl	8005e50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007db0:	e030      	b.n	8007e14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007db2:	f107 0318 	add.w	r3, r7, #24
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe f99e 	bl	80060f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dc0:	e028      	b.n	8007e14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dc2:	4b09      	ldr	r3, [pc, #36]	; (8007de8 <UART_SetConfig+0xc2c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d012      	beq.n	8007df4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007dce:	4b06      	ldr	r3, [pc, #24]	; (8007de8 <UART_SetConfig+0xc2c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	08db      	lsrs	r3, r3, #3
 8007dd4:	f003 0303 	and.w	r3, r3, #3
 8007dd8:	4a04      	ldr	r2, [pc, #16]	; (8007dec <UART_SetConfig+0xc30>)
 8007dda:	fa22 f303 	lsr.w	r3, r2, r3
 8007dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007de0:	e018      	b.n	8007e14 <UART_SetConfig+0xc58>
 8007de2:	bf00      	nop
 8007de4:	08008f28 	.word	0x08008f28
 8007de8:	58024400 	.word	0x58024400
 8007dec:	03d09000 	.word	0x03d09000
 8007df0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007df4:	4b24      	ldr	r3, [pc, #144]	; (8007e88 <UART_SetConfig+0xccc>)
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007df8:	e00c      	b.n	8007e14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007dfa:	4b24      	ldr	r3, [pc, #144]	; (8007e8c <UART_SetConfig+0xcd0>)
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dfe:	e009      	b.n	8007e14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e06:	e005      	b.n	8007e14 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e12:	bf00      	nop
    }

    if (pclk != 0U)
 8007e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d021      	beq.n	8007e5e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	4a1c      	ldr	r2, [pc, #112]	; (8007e90 <UART_SetConfig+0xcd4>)
 8007e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e24:	461a      	mov	r2, r3
 8007e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e28:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	085b      	lsrs	r3, r3, #1
 8007e32:	441a      	add	r2, r3
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e3c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	2b0f      	cmp	r3, #15
 8007e42:	d909      	bls.n	8007e58 <UART_SetConfig+0xc9c>
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e4a:	d205      	bcs.n	8007e58 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60da      	str	r2, [r3, #12]
 8007e56:	e002      	b.n	8007e5e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2200      	movs	r2, #0
 8007e72:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	2200      	movs	r2, #0
 8007e78:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007e7a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3748      	adds	r7, #72	; 0x48
 8007e82:	46bd      	mov	sp, r7
 8007e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e88:	03d09000 	.word	0x03d09000
 8007e8c:	003d0900 	.word	0x003d0900
 8007e90:	08008f28 	.word	0x08008f28

08007e94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00a      	beq.n	8007ebe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00a      	beq.n	8007f02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	f003 0308 	and.w	r3, r3, #8
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f28:	f003 0310 	and.w	r3, r3, #16
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00a      	beq.n	8007f46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4a:	f003 0320 	and.w	r3, r3, #32
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d01a      	beq.n	8007faa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f92:	d10a      	bne.n	8007faa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	605a      	str	r2, [r3, #4]
  }
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b098      	sub	sp, #96	; 0x60
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fe8:	f7f9 fbc2 	bl	8001770 <HAL_GetTick>
 8007fec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0308 	and.w	r3, r3, #8
 8007ff8:	2b08      	cmp	r3, #8
 8007ffa:	d12f      	bne.n	800805c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ffc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008004:	2200      	movs	r2, #0
 8008006:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f88e 	bl	800812c <UART_WaitOnFlagUntilTimeout>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d022      	beq.n	800805c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800802a:	653b      	str	r3, [r7, #80]	; 0x50
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	461a      	mov	r2, r3
 8008032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008034:	647b      	str	r3, [r7, #68]	; 0x44
 8008036:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008038:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800803a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e6      	bne.n	8008016 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2220      	movs	r2, #32
 800804c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e063      	b.n	8008124 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0304 	and.w	r3, r3, #4
 8008066:	2b04      	cmp	r3, #4
 8008068:	d149      	bne.n	80080fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800806a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008072:	2200      	movs	r2, #0
 8008074:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f857 	bl	800812c <UART_WaitOnFlagUntilTimeout>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d03c      	beq.n	80080fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	623b      	str	r3, [r7, #32]
   return(result);
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a2:	633b      	str	r3, [r7, #48]	; 0x30
 80080a4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e6      	bne.n	8008084 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3308      	adds	r3, #8
 80080bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f023 0301 	bic.w	r3, r3, #1
 80080cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3308      	adds	r3, #8
 80080d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080d6:	61fa      	str	r2, [r7, #28]
 80080d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	69b9      	ldr	r1, [r7, #24]
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	617b      	str	r3, [r7, #20]
   return(result);
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e5      	bne.n	80080b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e012      	b.n	8008124 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2220      	movs	r2, #32
 800810a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3758      	adds	r7, #88	; 0x58
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	4613      	mov	r3, r2
 800813a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800813c:	e049      	b.n	80081d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008144:	d045      	beq.n	80081d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008146:	f7f9 fb13 	bl	8001770 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	429a      	cmp	r2, r3
 8008154:	d302      	bcc.n	800815c <UART_WaitOnFlagUntilTimeout+0x30>
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e048      	b.n	80081f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0304 	and.w	r3, r3, #4
 800816a:	2b00      	cmp	r3, #0
 800816c:	d031      	beq.n	80081d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	f003 0308 	and.w	r3, r3, #8
 8008178:	2b08      	cmp	r3, #8
 800817a:	d110      	bne.n	800819e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2208      	movs	r2, #8
 8008182:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 f839 	bl	80081fc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2208      	movs	r2, #8
 800818e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e029      	b.n	80081f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ac:	d111      	bne.n	80081d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 f81f 	bl	80081fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e00f      	b.n	80081f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	69da      	ldr	r2, [r3, #28]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	4013      	ands	r3, r2
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	429a      	cmp	r2, r3
 80081e0:	bf0c      	ite	eq
 80081e2:	2301      	moveq	r3, #1
 80081e4:	2300      	movne	r3, #0
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	461a      	mov	r2, r3
 80081ea:	79fb      	ldrb	r3, [r7, #7]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d0a6      	beq.n	800813e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
	...

080081fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b095      	sub	sp, #84	; 0x54
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008218:	64fb      	str	r3, [r7, #76]	; 0x4c
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008222:	643b      	str	r3, [r7, #64]	; 0x40
 8008224:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008226:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008228:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1e6      	bne.n	8008204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3308      	adds	r3, #8
 800823c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	61fb      	str	r3, [r7, #28]
   return(result);
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	4b1e      	ldr	r3, [pc, #120]	; (80082c4 <UART_EndRxTransfer+0xc8>)
 800824a:	4013      	ands	r3, r2
 800824c:	64bb      	str	r3, [r7, #72]	; 0x48
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3308      	adds	r3, #8
 8008254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008258:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800825c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e5      	bne.n	8008236 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800826e:	2b01      	cmp	r3, #1
 8008270:	d118      	bne.n	80082a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f023 0310 	bic.w	r3, r3, #16
 8008286:	647b      	str	r3, [r7, #68]	; 0x44
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008290:	61bb      	str	r3, [r7, #24]
 8008292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	6979      	ldr	r1, [r7, #20]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	613b      	str	r3, [r7, #16]
   return(result);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e6      	bne.n	8008272 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80082b8:	bf00      	nop
 80082ba:	3754      	adds	r7, #84	; 0x54
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	effffffe 	.word	0xeffffffe

080082c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <HAL_UARTEx_DisableFifoMode+0x16>
 80082da:	2302      	movs	r3, #2
 80082dc:	e027      	b.n	800832e <HAL_UARTEx_DisableFifoMode+0x66>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2224      	movs	r2, #36	; 0x24
 80082ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0201 	bic.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800830c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2220      	movs	r2, #32
 8008320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800834a:	2b01      	cmp	r3, #1
 800834c:	d101      	bne.n	8008352 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800834e:	2302      	movs	r3, #2
 8008350:	e02d      	b.n	80083ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2224      	movs	r2, #36	; 0x24
 800835e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 0201 	bic.w	r2, r2, #1
 8008378:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f850 	bl	8008434 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2220      	movs	r2, #32
 80083a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d101      	bne.n	80083ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083ca:	2302      	movs	r3, #2
 80083cc:	e02d      	b.n	800842a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2224      	movs	r2, #36	; 0x24
 80083da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 0201 	bic.w	r2, r2, #1
 80083f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f812 	bl	8008434 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2220      	movs	r2, #32
 800841c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008440:	2b00      	cmp	r3, #0
 8008442:	d108      	bne.n	8008456 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008454:	e031      	b.n	80084ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008456:	2310      	movs	r3, #16
 8008458:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800845a:	2310      	movs	r3, #16
 800845c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	0e5b      	lsrs	r3, r3, #25
 8008466:	b2db      	uxtb	r3, r3
 8008468:	f003 0307 	and.w	r3, r3, #7
 800846c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	0f5b      	lsrs	r3, r3, #29
 8008476:	b2db      	uxtb	r3, r3
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	7b3a      	ldrb	r2, [r7, #12]
 8008482:	4911      	ldr	r1, [pc, #68]	; (80084c8 <UARTEx_SetNbDataToProcess+0x94>)
 8008484:	5c8a      	ldrb	r2, [r1, r2]
 8008486:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800848a:	7b3a      	ldrb	r2, [r7, #12]
 800848c:	490f      	ldr	r1, [pc, #60]	; (80084cc <UARTEx_SetNbDataToProcess+0x98>)
 800848e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008490:	fb93 f3f2 	sdiv	r3, r3, r2
 8008494:	b29a      	uxth	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	7b7a      	ldrb	r2, [r7, #13]
 80084a0:	4909      	ldr	r1, [pc, #36]	; (80084c8 <UARTEx_SetNbDataToProcess+0x94>)
 80084a2:	5c8a      	ldrb	r2, [r1, r2]
 80084a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084a8:	7b7a      	ldrb	r2, [r7, #13]
 80084aa:	4908      	ldr	r1, [pc, #32]	; (80084cc <UARTEx_SetNbDataToProcess+0x98>)
 80084ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	08008f40 	.word	0x08008f40
 80084cc:	08008f48 	.word	0x08008f48

080084d0 <siprintf>:
 80084d0:	b40e      	push	{r1, r2, r3}
 80084d2:	b500      	push	{lr}
 80084d4:	b09c      	sub	sp, #112	; 0x70
 80084d6:	ab1d      	add	r3, sp, #116	; 0x74
 80084d8:	9002      	str	r0, [sp, #8]
 80084da:	9006      	str	r0, [sp, #24]
 80084dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084e0:	4809      	ldr	r0, [pc, #36]	; (8008508 <siprintf+0x38>)
 80084e2:	9107      	str	r1, [sp, #28]
 80084e4:	9104      	str	r1, [sp, #16]
 80084e6:	4909      	ldr	r1, [pc, #36]	; (800850c <siprintf+0x3c>)
 80084e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ec:	9105      	str	r1, [sp, #20]
 80084ee:	6800      	ldr	r0, [r0, #0]
 80084f0:	9301      	str	r3, [sp, #4]
 80084f2:	a902      	add	r1, sp, #8
 80084f4:	f000 f992 	bl	800881c <_svfiprintf_r>
 80084f8:	9b02      	ldr	r3, [sp, #8]
 80084fa:	2200      	movs	r2, #0
 80084fc:	701a      	strb	r2, [r3, #0]
 80084fe:	b01c      	add	sp, #112	; 0x70
 8008500:	f85d eb04 	ldr.w	lr, [sp], #4
 8008504:	b003      	add	sp, #12
 8008506:	4770      	bx	lr
 8008508:	2400005c 	.word	0x2400005c
 800850c:	ffff0208 	.word	0xffff0208

08008510 <memset>:
 8008510:	4402      	add	r2, r0
 8008512:	4603      	mov	r3, r0
 8008514:	4293      	cmp	r3, r2
 8008516:	d100      	bne.n	800851a <memset+0xa>
 8008518:	4770      	bx	lr
 800851a:	f803 1b01 	strb.w	r1, [r3], #1
 800851e:	e7f9      	b.n	8008514 <memset+0x4>

08008520 <__errno>:
 8008520:	4b01      	ldr	r3, [pc, #4]	; (8008528 <__errno+0x8>)
 8008522:	6818      	ldr	r0, [r3, #0]
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	2400005c 	.word	0x2400005c

0800852c <__libc_init_array>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	4d0d      	ldr	r5, [pc, #52]	; (8008564 <__libc_init_array+0x38>)
 8008530:	4c0d      	ldr	r4, [pc, #52]	; (8008568 <__libc_init_array+0x3c>)
 8008532:	1b64      	subs	r4, r4, r5
 8008534:	10a4      	asrs	r4, r4, #2
 8008536:	2600      	movs	r6, #0
 8008538:	42a6      	cmp	r6, r4
 800853a:	d109      	bne.n	8008550 <__libc_init_array+0x24>
 800853c:	4d0b      	ldr	r5, [pc, #44]	; (800856c <__libc_init_array+0x40>)
 800853e:	4c0c      	ldr	r4, [pc, #48]	; (8008570 <__libc_init_array+0x44>)
 8008540:	f000 fc6a 	bl	8008e18 <_init>
 8008544:	1b64      	subs	r4, r4, r5
 8008546:	10a4      	asrs	r4, r4, #2
 8008548:	2600      	movs	r6, #0
 800854a:	42a6      	cmp	r6, r4
 800854c:	d105      	bne.n	800855a <__libc_init_array+0x2e>
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	f855 3b04 	ldr.w	r3, [r5], #4
 8008554:	4798      	blx	r3
 8008556:	3601      	adds	r6, #1
 8008558:	e7ee      	b.n	8008538 <__libc_init_array+0xc>
 800855a:	f855 3b04 	ldr.w	r3, [r5], #4
 800855e:	4798      	blx	r3
 8008560:	3601      	adds	r6, #1
 8008562:	e7f2      	b.n	800854a <__libc_init_array+0x1e>
 8008564:	08008f8c 	.word	0x08008f8c
 8008568:	08008f8c 	.word	0x08008f8c
 800856c:	08008f8c 	.word	0x08008f8c
 8008570:	08008f90 	.word	0x08008f90

08008574 <__retarget_lock_acquire_recursive>:
 8008574:	4770      	bx	lr

08008576 <__retarget_lock_release_recursive>:
 8008576:	4770      	bx	lr

08008578 <_free_r>:
 8008578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800857a:	2900      	cmp	r1, #0
 800857c:	d044      	beq.n	8008608 <_free_r+0x90>
 800857e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008582:	9001      	str	r0, [sp, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f1a1 0404 	sub.w	r4, r1, #4
 800858a:	bfb8      	it	lt
 800858c:	18e4      	addlt	r4, r4, r3
 800858e:	f000 f8df 	bl	8008750 <__malloc_lock>
 8008592:	4a1e      	ldr	r2, [pc, #120]	; (800860c <_free_r+0x94>)
 8008594:	9801      	ldr	r0, [sp, #4]
 8008596:	6813      	ldr	r3, [r2, #0]
 8008598:	b933      	cbnz	r3, 80085a8 <_free_r+0x30>
 800859a:	6063      	str	r3, [r4, #4]
 800859c:	6014      	str	r4, [r2, #0]
 800859e:	b003      	add	sp, #12
 80085a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085a4:	f000 b8da 	b.w	800875c <__malloc_unlock>
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	d908      	bls.n	80085be <_free_r+0x46>
 80085ac:	6825      	ldr	r5, [r4, #0]
 80085ae:	1961      	adds	r1, r4, r5
 80085b0:	428b      	cmp	r3, r1
 80085b2:	bf01      	itttt	eq
 80085b4:	6819      	ldreq	r1, [r3, #0]
 80085b6:	685b      	ldreq	r3, [r3, #4]
 80085b8:	1949      	addeq	r1, r1, r5
 80085ba:	6021      	streq	r1, [r4, #0]
 80085bc:	e7ed      	b.n	800859a <_free_r+0x22>
 80085be:	461a      	mov	r2, r3
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	b10b      	cbz	r3, 80085c8 <_free_r+0x50>
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	d9fa      	bls.n	80085be <_free_r+0x46>
 80085c8:	6811      	ldr	r1, [r2, #0]
 80085ca:	1855      	adds	r5, r2, r1
 80085cc:	42a5      	cmp	r5, r4
 80085ce:	d10b      	bne.n	80085e8 <_free_r+0x70>
 80085d0:	6824      	ldr	r4, [r4, #0]
 80085d2:	4421      	add	r1, r4
 80085d4:	1854      	adds	r4, r2, r1
 80085d6:	42a3      	cmp	r3, r4
 80085d8:	6011      	str	r1, [r2, #0]
 80085da:	d1e0      	bne.n	800859e <_free_r+0x26>
 80085dc:	681c      	ldr	r4, [r3, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	6053      	str	r3, [r2, #4]
 80085e2:	440c      	add	r4, r1
 80085e4:	6014      	str	r4, [r2, #0]
 80085e6:	e7da      	b.n	800859e <_free_r+0x26>
 80085e8:	d902      	bls.n	80085f0 <_free_r+0x78>
 80085ea:	230c      	movs	r3, #12
 80085ec:	6003      	str	r3, [r0, #0]
 80085ee:	e7d6      	b.n	800859e <_free_r+0x26>
 80085f0:	6825      	ldr	r5, [r4, #0]
 80085f2:	1961      	adds	r1, r4, r5
 80085f4:	428b      	cmp	r3, r1
 80085f6:	bf04      	itt	eq
 80085f8:	6819      	ldreq	r1, [r3, #0]
 80085fa:	685b      	ldreq	r3, [r3, #4]
 80085fc:	6063      	str	r3, [r4, #4]
 80085fe:	bf04      	itt	eq
 8008600:	1949      	addeq	r1, r1, r5
 8008602:	6021      	streq	r1, [r4, #0]
 8008604:	6054      	str	r4, [r2, #4]
 8008606:	e7ca      	b.n	800859e <_free_r+0x26>
 8008608:	b003      	add	sp, #12
 800860a:	bd30      	pop	{r4, r5, pc}
 800860c:	24031178 	.word	0x24031178

08008610 <sbrk_aligned>:
 8008610:	b570      	push	{r4, r5, r6, lr}
 8008612:	4e0e      	ldr	r6, [pc, #56]	; (800864c <sbrk_aligned+0x3c>)
 8008614:	460c      	mov	r4, r1
 8008616:	6831      	ldr	r1, [r6, #0]
 8008618:	4605      	mov	r5, r0
 800861a:	b911      	cbnz	r1, 8008622 <sbrk_aligned+0x12>
 800861c:	f000 fba6 	bl	8008d6c <_sbrk_r>
 8008620:	6030      	str	r0, [r6, #0]
 8008622:	4621      	mov	r1, r4
 8008624:	4628      	mov	r0, r5
 8008626:	f000 fba1 	bl	8008d6c <_sbrk_r>
 800862a:	1c43      	adds	r3, r0, #1
 800862c:	d00a      	beq.n	8008644 <sbrk_aligned+0x34>
 800862e:	1cc4      	adds	r4, r0, #3
 8008630:	f024 0403 	bic.w	r4, r4, #3
 8008634:	42a0      	cmp	r0, r4
 8008636:	d007      	beq.n	8008648 <sbrk_aligned+0x38>
 8008638:	1a21      	subs	r1, r4, r0
 800863a:	4628      	mov	r0, r5
 800863c:	f000 fb96 	bl	8008d6c <_sbrk_r>
 8008640:	3001      	adds	r0, #1
 8008642:	d101      	bne.n	8008648 <sbrk_aligned+0x38>
 8008644:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008648:	4620      	mov	r0, r4
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	2403117c 	.word	0x2403117c

08008650 <_malloc_r>:
 8008650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008654:	1ccd      	adds	r5, r1, #3
 8008656:	f025 0503 	bic.w	r5, r5, #3
 800865a:	3508      	adds	r5, #8
 800865c:	2d0c      	cmp	r5, #12
 800865e:	bf38      	it	cc
 8008660:	250c      	movcc	r5, #12
 8008662:	2d00      	cmp	r5, #0
 8008664:	4607      	mov	r7, r0
 8008666:	db01      	blt.n	800866c <_malloc_r+0x1c>
 8008668:	42a9      	cmp	r1, r5
 800866a:	d905      	bls.n	8008678 <_malloc_r+0x28>
 800866c:	230c      	movs	r3, #12
 800866e:	603b      	str	r3, [r7, #0]
 8008670:	2600      	movs	r6, #0
 8008672:	4630      	mov	r0, r6
 8008674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008678:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800874c <_malloc_r+0xfc>
 800867c:	f000 f868 	bl	8008750 <__malloc_lock>
 8008680:	f8d8 3000 	ldr.w	r3, [r8]
 8008684:	461c      	mov	r4, r3
 8008686:	bb5c      	cbnz	r4, 80086e0 <_malloc_r+0x90>
 8008688:	4629      	mov	r1, r5
 800868a:	4638      	mov	r0, r7
 800868c:	f7ff ffc0 	bl	8008610 <sbrk_aligned>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	4604      	mov	r4, r0
 8008694:	d155      	bne.n	8008742 <_malloc_r+0xf2>
 8008696:	f8d8 4000 	ldr.w	r4, [r8]
 800869a:	4626      	mov	r6, r4
 800869c:	2e00      	cmp	r6, #0
 800869e:	d145      	bne.n	800872c <_malloc_r+0xdc>
 80086a0:	2c00      	cmp	r4, #0
 80086a2:	d048      	beq.n	8008736 <_malloc_r+0xe6>
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	4631      	mov	r1, r6
 80086a8:	4638      	mov	r0, r7
 80086aa:	eb04 0903 	add.w	r9, r4, r3
 80086ae:	f000 fb5d 	bl	8008d6c <_sbrk_r>
 80086b2:	4581      	cmp	r9, r0
 80086b4:	d13f      	bne.n	8008736 <_malloc_r+0xe6>
 80086b6:	6821      	ldr	r1, [r4, #0]
 80086b8:	1a6d      	subs	r5, r5, r1
 80086ba:	4629      	mov	r1, r5
 80086bc:	4638      	mov	r0, r7
 80086be:	f7ff ffa7 	bl	8008610 <sbrk_aligned>
 80086c2:	3001      	adds	r0, #1
 80086c4:	d037      	beq.n	8008736 <_malloc_r+0xe6>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	442b      	add	r3, r5
 80086ca:	6023      	str	r3, [r4, #0]
 80086cc:	f8d8 3000 	ldr.w	r3, [r8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d038      	beq.n	8008746 <_malloc_r+0xf6>
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	42a2      	cmp	r2, r4
 80086d8:	d12b      	bne.n	8008732 <_malloc_r+0xe2>
 80086da:	2200      	movs	r2, #0
 80086dc:	605a      	str	r2, [r3, #4]
 80086de:	e00f      	b.n	8008700 <_malloc_r+0xb0>
 80086e0:	6822      	ldr	r2, [r4, #0]
 80086e2:	1b52      	subs	r2, r2, r5
 80086e4:	d41f      	bmi.n	8008726 <_malloc_r+0xd6>
 80086e6:	2a0b      	cmp	r2, #11
 80086e8:	d917      	bls.n	800871a <_malloc_r+0xca>
 80086ea:	1961      	adds	r1, r4, r5
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	6025      	str	r5, [r4, #0]
 80086f0:	bf18      	it	ne
 80086f2:	6059      	strne	r1, [r3, #4]
 80086f4:	6863      	ldr	r3, [r4, #4]
 80086f6:	bf08      	it	eq
 80086f8:	f8c8 1000 	streq.w	r1, [r8]
 80086fc:	5162      	str	r2, [r4, r5]
 80086fe:	604b      	str	r3, [r1, #4]
 8008700:	4638      	mov	r0, r7
 8008702:	f104 060b 	add.w	r6, r4, #11
 8008706:	f000 f829 	bl	800875c <__malloc_unlock>
 800870a:	f026 0607 	bic.w	r6, r6, #7
 800870e:	1d23      	adds	r3, r4, #4
 8008710:	1af2      	subs	r2, r6, r3
 8008712:	d0ae      	beq.n	8008672 <_malloc_r+0x22>
 8008714:	1b9b      	subs	r3, r3, r6
 8008716:	50a3      	str	r3, [r4, r2]
 8008718:	e7ab      	b.n	8008672 <_malloc_r+0x22>
 800871a:	42a3      	cmp	r3, r4
 800871c:	6862      	ldr	r2, [r4, #4]
 800871e:	d1dd      	bne.n	80086dc <_malloc_r+0x8c>
 8008720:	f8c8 2000 	str.w	r2, [r8]
 8008724:	e7ec      	b.n	8008700 <_malloc_r+0xb0>
 8008726:	4623      	mov	r3, r4
 8008728:	6864      	ldr	r4, [r4, #4]
 800872a:	e7ac      	b.n	8008686 <_malloc_r+0x36>
 800872c:	4634      	mov	r4, r6
 800872e:	6876      	ldr	r6, [r6, #4]
 8008730:	e7b4      	b.n	800869c <_malloc_r+0x4c>
 8008732:	4613      	mov	r3, r2
 8008734:	e7cc      	b.n	80086d0 <_malloc_r+0x80>
 8008736:	230c      	movs	r3, #12
 8008738:	603b      	str	r3, [r7, #0]
 800873a:	4638      	mov	r0, r7
 800873c:	f000 f80e 	bl	800875c <__malloc_unlock>
 8008740:	e797      	b.n	8008672 <_malloc_r+0x22>
 8008742:	6025      	str	r5, [r4, #0]
 8008744:	e7dc      	b.n	8008700 <_malloc_r+0xb0>
 8008746:	605b      	str	r3, [r3, #4]
 8008748:	deff      	udf	#255	; 0xff
 800874a:	bf00      	nop
 800874c:	24031178 	.word	0x24031178

08008750 <__malloc_lock>:
 8008750:	4801      	ldr	r0, [pc, #4]	; (8008758 <__malloc_lock+0x8>)
 8008752:	f7ff bf0f 	b.w	8008574 <__retarget_lock_acquire_recursive>
 8008756:	bf00      	nop
 8008758:	24031174 	.word	0x24031174

0800875c <__malloc_unlock>:
 800875c:	4801      	ldr	r0, [pc, #4]	; (8008764 <__malloc_unlock+0x8>)
 800875e:	f7ff bf0a 	b.w	8008576 <__retarget_lock_release_recursive>
 8008762:	bf00      	nop
 8008764:	24031174 	.word	0x24031174

08008768 <__ssputs_r>:
 8008768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800876c:	688e      	ldr	r6, [r1, #8]
 800876e:	461f      	mov	r7, r3
 8008770:	42be      	cmp	r6, r7
 8008772:	680b      	ldr	r3, [r1, #0]
 8008774:	4682      	mov	sl, r0
 8008776:	460c      	mov	r4, r1
 8008778:	4690      	mov	r8, r2
 800877a:	d82c      	bhi.n	80087d6 <__ssputs_r+0x6e>
 800877c:	898a      	ldrh	r2, [r1, #12]
 800877e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008782:	d026      	beq.n	80087d2 <__ssputs_r+0x6a>
 8008784:	6965      	ldr	r5, [r4, #20]
 8008786:	6909      	ldr	r1, [r1, #16]
 8008788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800878c:	eba3 0901 	sub.w	r9, r3, r1
 8008790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008794:	1c7b      	adds	r3, r7, #1
 8008796:	444b      	add	r3, r9
 8008798:	106d      	asrs	r5, r5, #1
 800879a:	429d      	cmp	r5, r3
 800879c:	bf38      	it	cc
 800879e:	461d      	movcc	r5, r3
 80087a0:	0553      	lsls	r3, r2, #21
 80087a2:	d527      	bpl.n	80087f4 <__ssputs_r+0x8c>
 80087a4:	4629      	mov	r1, r5
 80087a6:	f7ff ff53 	bl	8008650 <_malloc_r>
 80087aa:	4606      	mov	r6, r0
 80087ac:	b360      	cbz	r0, 8008808 <__ssputs_r+0xa0>
 80087ae:	6921      	ldr	r1, [r4, #16]
 80087b0:	464a      	mov	r2, r9
 80087b2:	f000 faeb 	bl	8008d8c <memcpy>
 80087b6:	89a3      	ldrh	r3, [r4, #12]
 80087b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c0:	81a3      	strh	r3, [r4, #12]
 80087c2:	6126      	str	r6, [r4, #16]
 80087c4:	6165      	str	r5, [r4, #20]
 80087c6:	444e      	add	r6, r9
 80087c8:	eba5 0509 	sub.w	r5, r5, r9
 80087cc:	6026      	str	r6, [r4, #0]
 80087ce:	60a5      	str	r5, [r4, #8]
 80087d0:	463e      	mov	r6, r7
 80087d2:	42be      	cmp	r6, r7
 80087d4:	d900      	bls.n	80087d8 <__ssputs_r+0x70>
 80087d6:	463e      	mov	r6, r7
 80087d8:	6820      	ldr	r0, [r4, #0]
 80087da:	4632      	mov	r2, r6
 80087dc:	4641      	mov	r1, r8
 80087de:	f000 faab 	bl	8008d38 <memmove>
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	1b9b      	subs	r3, r3, r6
 80087e6:	60a3      	str	r3, [r4, #8]
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	4433      	add	r3, r6
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	2000      	movs	r0, #0
 80087f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f4:	462a      	mov	r2, r5
 80087f6:	f000 fad7 	bl	8008da8 <_realloc_r>
 80087fa:	4606      	mov	r6, r0
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d1e0      	bne.n	80087c2 <__ssputs_r+0x5a>
 8008800:	6921      	ldr	r1, [r4, #16]
 8008802:	4650      	mov	r0, sl
 8008804:	f7ff feb8 	bl	8008578 <_free_r>
 8008808:	230c      	movs	r3, #12
 800880a:	f8ca 3000 	str.w	r3, [sl]
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008814:	81a3      	strh	r3, [r4, #12]
 8008816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800881a:	e7e9      	b.n	80087f0 <__ssputs_r+0x88>

0800881c <_svfiprintf_r>:
 800881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	4698      	mov	r8, r3
 8008822:	898b      	ldrh	r3, [r1, #12]
 8008824:	061b      	lsls	r3, r3, #24
 8008826:	b09d      	sub	sp, #116	; 0x74
 8008828:	4607      	mov	r7, r0
 800882a:	460d      	mov	r5, r1
 800882c:	4614      	mov	r4, r2
 800882e:	d50e      	bpl.n	800884e <_svfiprintf_r+0x32>
 8008830:	690b      	ldr	r3, [r1, #16]
 8008832:	b963      	cbnz	r3, 800884e <_svfiprintf_r+0x32>
 8008834:	2140      	movs	r1, #64	; 0x40
 8008836:	f7ff ff0b 	bl	8008650 <_malloc_r>
 800883a:	6028      	str	r0, [r5, #0]
 800883c:	6128      	str	r0, [r5, #16]
 800883e:	b920      	cbnz	r0, 800884a <_svfiprintf_r+0x2e>
 8008840:	230c      	movs	r3, #12
 8008842:	603b      	str	r3, [r7, #0]
 8008844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008848:	e0d0      	b.n	80089ec <_svfiprintf_r+0x1d0>
 800884a:	2340      	movs	r3, #64	; 0x40
 800884c:	616b      	str	r3, [r5, #20]
 800884e:	2300      	movs	r3, #0
 8008850:	9309      	str	r3, [sp, #36]	; 0x24
 8008852:	2320      	movs	r3, #32
 8008854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008858:	f8cd 800c 	str.w	r8, [sp, #12]
 800885c:	2330      	movs	r3, #48	; 0x30
 800885e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a04 <_svfiprintf_r+0x1e8>
 8008862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008866:	f04f 0901 	mov.w	r9, #1
 800886a:	4623      	mov	r3, r4
 800886c:	469a      	mov	sl, r3
 800886e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008872:	b10a      	cbz	r2, 8008878 <_svfiprintf_r+0x5c>
 8008874:	2a25      	cmp	r2, #37	; 0x25
 8008876:	d1f9      	bne.n	800886c <_svfiprintf_r+0x50>
 8008878:	ebba 0b04 	subs.w	fp, sl, r4
 800887c:	d00b      	beq.n	8008896 <_svfiprintf_r+0x7a>
 800887e:	465b      	mov	r3, fp
 8008880:	4622      	mov	r2, r4
 8008882:	4629      	mov	r1, r5
 8008884:	4638      	mov	r0, r7
 8008886:	f7ff ff6f 	bl	8008768 <__ssputs_r>
 800888a:	3001      	adds	r0, #1
 800888c:	f000 80a9 	beq.w	80089e2 <_svfiprintf_r+0x1c6>
 8008890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008892:	445a      	add	r2, fp
 8008894:	9209      	str	r2, [sp, #36]	; 0x24
 8008896:	f89a 3000 	ldrb.w	r3, [sl]
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 80a1 	beq.w	80089e2 <_svfiprintf_r+0x1c6>
 80088a0:	2300      	movs	r3, #0
 80088a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088aa:	f10a 0a01 	add.w	sl, sl, #1
 80088ae:	9304      	str	r3, [sp, #16]
 80088b0:	9307      	str	r3, [sp, #28]
 80088b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088b6:	931a      	str	r3, [sp, #104]	; 0x68
 80088b8:	4654      	mov	r4, sl
 80088ba:	2205      	movs	r2, #5
 80088bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c0:	4850      	ldr	r0, [pc, #320]	; (8008a04 <_svfiprintf_r+0x1e8>)
 80088c2:	f7f7 fd15 	bl	80002f0 <memchr>
 80088c6:	9a04      	ldr	r2, [sp, #16]
 80088c8:	b9d8      	cbnz	r0, 8008902 <_svfiprintf_r+0xe6>
 80088ca:	06d0      	lsls	r0, r2, #27
 80088cc:	bf44      	itt	mi
 80088ce:	2320      	movmi	r3, #32
 80088d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088d4:	0711      	lsls	r1, r2, #28
 80088d6:	bf44      	itt	mi
 80088d8:	232b      	movmi	r3, #43	; 0x2b
 80088da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088de:	f89a 3000 	ldrb.w	r3, [sl]
 80088e2:	2b2a      	cmp	r3, #42	; 0x2a
 80088e4:	d015      	beq.n	8008912 <_svfiprintf_r+0xf6>
 80088e6:	9a07      	ldr	r2, [sp, #28]
 80088e8:	4654      	mov	r4, sl
 80088ea:	2000      	movs	r0, #0
 80088ec:	f04f 0c0a 	mov.w	ip, #10
 80088f0:	4621      	mov	r1, r4
 80088f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088f6:	3b30      	subs	r3, #48	; 0x30
 80088f8:	2b09      	cmp	r3, #9
 80088fa:	d94d      	bls.n	8008998 <_svfiprintf_r+0x17c>
 80088fc:	b1b0      	cbz	r0, 800892c <_svfiprintf_r+0x110>
 80088fe:	9207      	str	r2, [sp, #28]
 8008900:	e014      	b.n	800892c <_svfiprintf_r+0x110>
 8008902:	eba0 0308 	sub.w	r3, r0, r8
 8008906:	fa09 f303 	lsl.w	r3, r9, r3
 800890a:	4313      	orrs	r3, r2
 800890c:	9304      	str	r3, [sp, #16]
 800890e:	46a2      	mov	sl, r4
 8008910:	e7d2      	b.n	80088b8 <_svfiprintf_r+0x9c>
 8008912:	9b03      	ldr	r3, [sp, #12]
 8008914:	1d19      	adds	r1, r3, #4
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	9103      	str	r1, [sp, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	bfbb      	ittet	lt
 800891e:	425b      	neglt	r3, r3
 8008920:	f042 0202 	orrlt.w	r2, r2, #2
 8008924:	9307      	strge	r3, [sp, #28]
 8008926:	9307      	strlt	r3, [sp, #28]
 8008928:	bfb8      	it	lt
 800892a:	9204      	strlt	r2, [sp, #16]
 800892c:	7823      	ldrb	r3, [r4, #0]
 800892e:	2b2e      	cmp	r3, #46	; 0x2e
 8008930:	d10c      	bne.n	800894c <_svfiprintf_r+0x130>
 8008932:	7863      	ldrb	r3, [r4, #1]
 8008934:	2b2a      	cmp	r3, #42	; 0x2a
 8008936:	d134      	bne.n	80089a2 <_svfiprintf_r+0x186>
 8008938:	9b03      	ldr	r3, [sp, #12]
 800893a:	1d1a      	adds	r2, r3, #4
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	9203      	str	r2, [sp, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	bfb8      	it	lt
 8008944:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008948:	3402      	adds	r4, #2
 800894a:	9305      	str	r3, [sp, #20]
 800894c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008a14 <_svfiprintf_r+0x1f8>
 8008950:	7821      	ldrb	r1, [r4, #0]
 8008952:	2203      	movs	r2, #3
 8008954:	4650      	mov	r0, sl
 8008956:	f7f7 fccb 	bl	80002f0 <memchr>
 800895a:	b138      	cbz	r0, 800896c <_svfiprintf_r+0x150>
 800895c:	9b04      	ldr	r3, [sp, #16]
 800895e:	eba0 000a 	sub.w	r0, r0, sl
 8008962:	2240      	movs	r2, #64	; 0x40
 8008964:	4082      	lsls	r2, r0
 8008966:	4313      	orrs	r3, r2
 8008968:	3401      	adds	r4, #1
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008970:	4825      	ldr	r0, [pc, #148]	; (8008a08 <_svfiprintf_r+0x1ec>)
 8008972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008976:	2206      	movs	r2, #6
 8008978:	f7f7 fcba 	bl	80002f0 <memchr>
 800897c:	2800      	cmp	r0, #0
 800897e:	d038      	beq.n	80089f2 <_svfiprintf_r+0x1d6>
 8008980:	4b22      	ldr	r3, [pc, #136]	; (8008a0c <_svfiprintf_r+0x1f0>)
 8008982:	bb1b      	cbnz	r3, 80089cc <_svfiprintf_r+0x1b0>
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	3307      	adds	r3, #7
 8008988:	f023 0307 	bic.w	r3, r3, #7
 800898c:	3308      	adds	r3, #8
 800898e:	9303      	str	r3, [sp, #12]
 8008990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008992:	4433      	add	r3, r6
 8008994:	9309      	str	r3, [sp, #36]	; 0x24
 8008996:	e768      	b.n	800886a <_svfiprintf_r+0x4e>
 8008998:	fb0c 3202 	mla	r2, ip, r2, r3
 800899c:	460c      	mov	r4, r1
 800899e:	2001      	movs	r0, #1
 80089a0:	e7a6      	b.n	80088f0 <_svfiprintf_r+0xd4>
 80089a2:	2300      	movs	r3, #0
 80089a4:	3401      	adds	r4, #1
 80089a6:	9305      	str	r3, [sp, #20]
 80089a8:	4619      	mov	r1, r3
 80089aa:	f04f 0c0a 	mov.w	ip, #10
 80089ae:	4620      	mov	r0, r4
 80089b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089b4:	3a30      	subs	r2, #48	; 0x30
 80089b6:	2a09      	cmp	r2, #9
 80089b8:	d903      	bls.n	80089c2 <_svfiprintf_r+0x1a6>
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0c6      	beq.n	800894c <_svfiprintf_r+0x130>
 80089be:	9105      	str	r1, [sp, #20]
 80089c0:	e7c4      	b.n	800894c <_svfiprintf_r+0x130>
 80089c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80089c6:	4604      	mov	r4, r0
 80089c8:	2301      	movs	r3, #1
 80089ca:	e7f0      	b.n	80089ae <_svfiprintf_r+0x192>
 80089cc:	ab03      	add	r3, sp, #12
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	462a      	mov	r2, r5
 80089d2:	4b0f      	ldr	r3, [pc, #60]	; (8008a10 <_svfiprintf_r+0x1f4>)
 80089d4:	a904      	add	r1, sp, #16
 80089d6:	4638      	mov	r0, r7
 80089d8:	f3af 8000 	nop.w
 80089dc:	1c42      	adds	r2, r0, #1
 80089de:	4606      	mov	r6, r0
 80089e0:	d1d6      	bne.n	8008990 <_svfiprintf_r+0x174>
 80089e2:	89ab      	ldrh	r3, [r5, #12]
 80089e4:	065b      	lsls	r3, r3, #25
 80089e6:	f53f af2d 	bmi.w	8008844 <_svfiprintf_r+0x28>
 80089ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ec:	b01d      	add	sp, #116	; 0x74
 80089ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f2:	ab03      	add	r3, sp, #12
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	462a      	mov	r2, r5
 80089f8:	4b05      	ldr	r3, [pc, #20]	; (8008a10 <_svfiprintf_r+0x1f4>)
 80089fa:	a904      	add	r1, sp, #16
 80089fc:	4638      	mov	r0, r7
 80089fe:	f000 f879 	bl	8008af4 <_printf_i>
 8008a02:	e7eb      	b.n	80089dc <_svfiprintf_r+0x1c0>
 8008a04:	08008f50 	.word	0x08008f50
 8008a08:	08008f5a 	.word	0x08008f5a
 8008a0c:	00000000 	.word	0x00000000
 8008a10:	08008769 	.word	0x08008769
 8008a14:	08008f56 	.word	0x08008f56

08008a18 <_printf_common>:
 8008a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a1c:	4616      	mov	r6, r2
 8008a1e:	4699      	mov	r9, r3
 8008a20:	688a      	ldr	r2, [r1, #8]
 8008a22:	690b      	ldr	r3, [r1, #16]
 8008a24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	bfb8      	it	lt
 8008a2c:	4613      	movlt	r3, r2
 8008a2e:	6033      	str	r3, [r6, #0]
 8008a30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a34:	4607      	mov	r7, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	b10a      	cbz	r2, 8008a3e <_printf_common+0x26>
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	6033      	str	r3, [r6, #0]
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	0699      	lsls	r1, r3, #26
 8008a42:	bf42      	ittt	mi
 8008a44:	6833      	ldrmi	r3, [r6, #0]
 8008a46:	3302      	addmi	r3, #2
 8008a48:	6033      	strmi	r3, [r6, #0]
 8008a4a:	6825      	ldr	r5, [r4, #0]
 8008a4c:	f015 0506 	ands.w	r5, r5, #6
 8008a50:	d106      	bne.n	8008a60 <_printf_common+0x48>
 8008a52:	f104 0a19 	add.w	sl, r4, #25
 8008a56:	68e3      	ldr	r3, [r4, #12]
 8008a58:	6832      	ldr	r2, [r6, #0]
 8008a5a:	1a9b      	subs	r3, r3, r2
 8008a5c:	42ab      	cmp	r3, r5
 8008a5e:	dc26      	bgt.n	8008aae <_printf_common+0x96>
 8008a60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a64:	1e13      	subs	r3, r2, #0
 8008a66:	6822      	ldr	r2, [r4, #0]
 8008a68:	bf18      	it	ne
 8008a6a:	2301      	movne	r3, #1
 8008a6c:	0692      	lsls	r2, r2, #26
 8008a6e:	d42b      	bmi.n	8008ac8 <_printf_common+0xb0>
 8008a70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a74:	4649      	mov	r1, r9
 8008a76:	4638      	mov	r0, r7
 8008a78:	47c0      	blx	r8
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	d01e      	beq.n	8008abc <_printf_common+0xa4>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	6922      	ldr	r2, [r4, #16]
 8008a82:	f003 0306 	and.w	r3, r3, #6
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	bf02      	ittt	eq
 8008a8a:	68e5      	ldreq	r5, [r4, #12]
 8008a8c:	6833      	ldreq	r3, [r6, #0]
 8008a8e:	1aed      	subeq	r5, r5, r3
 8008a90:	68a3      	ldr	r3, [r4, #8]
 8008a92:	bf0c      	ite	eq
 8008a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a98:	2500      	movne	r5, #0
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	bfc4      	itt	gt
 8008a9e:	1a9b      	subgt	r3, r3, r2
 8008aa0:	18ed      	addgt	r5, r5, r3
 8008aa2:	2600      	movs	r6, #0
 8008aa4:	341a      	adds	r4, #26
 8008aa6:	42b5      	cmp	r5, r6
 8008aa8:	d11a      	bne.n	8008ae0 <_printf_common+0xc8>
 8008aaa:	2000      	movs	r0, #0
 8008aac:	e008      	b.n	8008ac0 <_printf_common+0xa8>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	4652      	mov	r2, sl
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	47c0      	blx	r8
 8008ab8:	3001      	adds	r0, #1
 8008aba:	d103      	bne.n	8008ac4 <_printf_common+0xac>
 8008abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac4:	3501      	adds	r5, #1
 8008ac6:	e7c6      	b.n	8008a56 <_printf_common+0x3e>
 8008ac8:	18e1      	adds	r1, r4, r3
 8008aca:	1c5a      	adds	r2, r3, #1
 8008acc:	2030      	movs	r0, #48	; 0x30
 8008ace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ad2:	4422      	add	r2, r4
 8008ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008adc:	3302      	adds	r3, #2
 8008ade:	e7c7      	b.n	8008a70 <_printf_common+0x58>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	4649      	mov	r1, r9
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	47c0      	blx	r8
 8008aea:	3001      	adds	r0, #1
 8008aec:	d0e6      	beq.n	8008abc <_printf_common+0xa4>
 8008aee:	3601      	adds	r6, #1
 8008af0:	e7d9      	b.n	8008aa6 <_printf_common+0x8e>
	...

08008af4 <_printf_i>:
 8008af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008af8:	7e0f      	ldrb	r7, [r1, #24]
 8008afa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008afc:	2f78      	cmp	r7, #120	; 0x78
 8008afe:	4691      	mov	r9, r2
 8008b00:	4680      	mov	r8, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	469a      	mov	sl, r3
 8008b06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b0a:	d807      	bhi.n	8008b1c <_printf_i+0x28>
 8008b0c:	2f62      	cmp	r7, #98	; 0x62
 8008b0e:	d80a      	bhi.n	8008b26 <_printf_i+0x32>
 8008b10:	2f00      	cmp	r7, #0
 8008b12:	f000 80d4 	beq.w	8008cbe <_printf_i+0x1ca>
 8008b16:	2f58      	cmp	r7, #88	; 0x58
 8008b18:	f000 80c0 	beq.w	8008c9c <_printf_i+0x1a8>
 8008b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b24:	e03a      	b.n	8008b9c <_printf_i+0xa8>
 8008b26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b2a:	2b15      	cmp	r3, #21
 8008b2c:	d8f6      	bhi.n	8008b1c <_printf_i+0x28>
 8008b2e:	a101      	add	r1, pc, #4	; (adr r1, 8008b34 <_printf_i+0x40>)
 8008b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b34:	08008b8d 	.word	0x08008b8d
 8008b38:	08008ba1 	.word	0x08008ba1
 8008b3c:	08008b1d 	.word	0x08008b1d
 8008b40:	08008b1d 	.word	0x08008b1d
 8008b44:	08008b1d 	.word	0x08008b1d
 8008b48:	08008b1d 	.word	0x08008b1d
 8008b4c:	08008ba1 	.word	0x08008ba1
 8008b50:	08008b1d 	.word	0x08008b1d
 8008b54:	08008b1d 	.word	0x08008b1d
 8008b58:	08008b1d 	.word	0x08008b1d
 8008b5c:	08008b1d 	.word	0x08008b1d
 8008b60:	08008ca5 	.word	0x08008ca5
 8008b64:	08008bcd 	.word	0x08008bcd
 8008b68:	08008c5f 	.word	0x08008c5f
 8008b6c:	08008b1d 	.word	0x08008b1d
 8008b70:	08008b1d 	.word	0x08008b1d
 8008b74:	08008cc7 	.word	0x08008cc7
 8008b78:	08008b1d 	.word	0x08008b1d
 8008b7c:	08008bcd 	.word	0x08008bcd
 8008b80:	08008b1d 	.word	0x08008b1d
 8008b84:	08008b1d 	.word	0x08008b1d
 8008b88:	08008c67 	.word	0x08008c67
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	1d1a      	adds	r2, r3, #4
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	602a      	str	r2, [r5, #0]
 8008b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e09f      	b.n	8008ce0 <_printf_i+0x1ec>
 8008ba0:	6820      	ldr	r0, [r4, #0]
 8008ba2:	682b      	ldr	r3, [r5, #0]
 8008ba4:	0607      	lsls	r7, r0, #24
 8008ba6:	f103 0104 	add.w	r1, r3, #4
 8008baa:	6029      	str	r1, [r5, #0]
 8008bac:	d501      	bpl.n	8008bb2 <_printf_i+0xbe>
 8008bae:	681e      	ldr	r6, [r3, #0]
 8008bb0:	e003      	b.n	8008bba <_printf_i+0xc6>
 8008bb2:	0646      	lsls	r6, r0, #25
 8008bb4:	d5fb      	bpl.n	8008bae <_printf_i+0xba>
 8008bb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008bba:	2e00      	cmp	r6, #0
 8008bbc:	da03      	bge.n	8008bc6 <_printf_i+0xd2>
 8008bbe:	232d      	movs	r3, #45	; 0x2d
 8008bc0:	4276      	negs	r6, r6
 8008bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bc6:	485a      	ldr	r0, [pc, #360]	; (8008d30 <_printf_i+0x23c>)
 8008bc8:	230a      	movs	r3, #10
 8008bca:	e012      	b.n	8008bf2 <_printf_i+0xfe>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	6820      	ldr	r0, [r4, #0]
 8008bd0:	1d19      	adds	r1, r3, #4
 8008bd2:	6029      	str	r1, [r5, #0]
 8008bd4:	0605      	lsls	r5, r0, #24
 8008bd6:	d501      	bpl.n	8008bdc <_printf_i+0xe8>
 8008bd8:	681e      	ldr	r6, [r3, #0]
 8008bda:	e002      	b.n	8008be2 <_printf_i+0xee>
 8008bdc:	0641      	lsls	r1, r0, #25
 8008bde:	d5fb      	bpl.n	8008bd8 <_printf_i+0xe4>
 8008be0:	881e      	ldrh	r6, [r3, #0]
 8008be2:	4853      	ldr	r0, [pc, #332]	; (8008d30 <_printf_i+0x23c>)
 8008be4:	2f6f      	cmp	r7, #111	; 0x6f
 8008be6:	bf0c      	ite	eq
 8008be8:	2308      	moveq	r3, #8
 8008bea:	230a      	movne	r3, #10
 8008bec:	2100      	movs	r1, #0
 8008bee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bf2:	6865      	ldr	r5, [r4, #4]
 8008bf4:	60a5      	str	r5, [r4, #8]
 8008bf6:	2d00      	cmp	r5, #0
 8008bf8:	bfa2      	ittt	ge
 8008bfa:	6821      	ldrge	r1, [r4, #0]
 8008bfc:	f021 0104 	bicge.w	r1, r1, #4
 8008c00:	6021      	strge	r1, [r4, #0]
 8008c02:	b90e      	cbnz	r6, 8008c08 <_printf_i+0x114>
 8008c04:	2d00      	cmp	r5, #0
 8008c06:	d04b      	beq.n	8008ca0 <_printf_i+0x1ac>
 8008c08:	4615      	mov	r5, r2
 8008c0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008c12:	5dc7      	ldrb	r7, [r0, r7]
 8008c14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c18:	4637      	mov	r7, r6
 8008c1a:	42bb      	cmp	r3, r7
 8008c1c:	460e      	mov	r6, r1
 8008c1e:	d9f4      	bls.n	8008c0a <_printf_i+0x116>
 8008c20:	2b08      	cmp	r3, #8
 8008c22:	d10b      	bne.n	8008c3c <_printf_i+0x148>
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	07de      	lsls	r6, r3, #31
 8008c28:	d508      	bpl.n	8008c3c <_printf_i+0x148>
 8008c2a:	6923      	ldr	r3, [r4, #16]
 8008c2c:	6861      	ldr	r1, [r4, #4]
 8008c2e:	4299      	cmp	r1, r3
 8008c30:	bfde      	ittt	le
 8008c32:	2330      	movle	r3, #48	; 0x30
 8008c34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008c3c:	1b52      	subs	r2, r2, r5
 8008c3e:	6122      	str	r2, [r4, #16]
 8008c40:	f8cd a000 	str.w	sl, [sp]
 8008c44:	464b      	mov	r3, r9
 8008c46:	aa03      	add	r2, sp, #12
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	f7ff fee4 	bl	8008a18 <_printf_common>
 8008c50:	3001      	adds	r0, #1
 8008c52:	d14a      	bne.n	8008cea <_printf_i+0x1f6>
 8008c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c58:	b004      	add	sp, #16
 8008c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	f043 0320 	orr.w	r3, r3, #32
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	4833      	ldr	r0, [pc, #204]	; (8008d34 <_printf_i+0x240>)
 8008c68:	2778      	movs	r7, #120	; 0x78
 8008c6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	6829      	ldr	r1, [r5, #0]
 8008c72:	061f      	lsls	r7, r3, #24
 8008c74:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c78:	d402      	bmi.n	8008c80 <_printf_i+0x18c>
 8008c7a:	065f      	lsls	r7, r3, #25
 8008c7c:	bf48      	it	mi
 8008c7e:	b2b6      	uxthmi	r6, r6
 8008c80:	07df      	lsls	r7, r3, #31
 8008c82:	bf48      	it	mi
 8008c84:	f043 0320 	orrmi.w	r3, r3, #32
 8008c88:	6029      	str	r1, [r5, #0]
 8008c8a:	bf48      	it	mi
 8008c8c:	6023      	strmi	r3, [r4, #0]
 8008c8e:	b91e      	cbnz	r6, 8008c98 <_printf_i+0x1a4>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	f023 0320 	bic.w	r3, r3, #32
 8008c96:	6023      	str	r3, [r4, #0]
 8008c98:	2310      	movs	r3, #16
 8008c9a:	e7a7      	b.n	8008bec <_printf_i+0xf8>
 8008c9c:	4824      	ldr	r0, [pc, #144]	; (8008d30 <_printf_i+0x23c>)
 8008c9e:	e7e4      	b.n	8008c6a <_printf_i+0x176>
 8008ca0:	4615      	mov	r5, r2
 8008ca2:	e7bd      	b.n	8008c20 <_printf_i+0x12c>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	6826      	ldr	r6, [r4, #0]
 8008ca8:	6961      	ldr	r1, [r4, #20]
 8008caa:	1d18      	adds	r0, r3, #4
 8008cac:	6028      	str	r0, [r5, #0]
 8008cae:	0635      	lsls	r5, r6, #24
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	d501      	bpl.n	8008cb8 <_printf_i+0x1c4>
 8008cb4:	6019      	str	r1, [r3, #0]
 8008cb6:	e002      	b.n	8008cbe <_printf_i+0x1ca>
 8008cb8:	0670      	lsls	r0, r6, #25
 8008cba:	d5fb      	bpl.n	8008cb4 <_printf_i+0x1c0>
 8008cbc:	8019      	strh	r1, [r3, #0]
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	6123      	str	r3, [r4, #16]
 8008cc2:	4615      	mov	r5, r2
 8008cc4:	e7bc      	b.n	8008c40 <_printf_i+0x14c>
 8008cc6:	682b      	ldr	r3, [r5, #0]
 8008cc8:	1d1a      	adds	r2, r3, #4
 8008cca:	602a      	str	r2, [r5, #0]
 8008ccc:	681d      	ldr	r5, [r3, #0]
 8008cce:	6862      	ldr	r2, [r4, #4]
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f7f7 fb0c 	bl	80002f0 <memchr>
 8008cd8:	b108      	cbz	r0, 8008cde <_printf_i+0x1ea>
 8008cda:	1b40      	subs	r0, r0, r5
 8008cdc:	6060      	str	r0, [r4, #4]
 8008cde:	6863      	ldr	r3, [r4, #4]
 8008ce0:	6123      	str	r3, [r4, #16]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ce8:	e7aa      	b.n	8008c40 <_printf_i+0x14c>
 8008cea:	6923      	ldr	r3, [r4, #16]
 8008cec:	462a      	mov	r2, r5
 8008cee:	4649      	mov	r1, r9
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	47d0      	blx	sl
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d0ad      	beq.n	8008c54 <_printf_i+0x160>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	079b      	lsls	r3, r3, #30
 8008cfc:	d413      	bmi.n	8008d26 <_printf_i+0x232>
 8008cfe:	68e0      	ldr	r0, [r4, #12]
 8008d00:	9b03      	ldr	r3, [sp, #12]
 8008d02:	4298      	cmp	r0, r3
 8008d04:	bfb8      	it	lt
 8008d06:	4618      	movlt	r0, r3
 8008d08:	e7a6      	b.n	8008c58 <_printf_i+0x164>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4632      	mov	r2, r6
 8008d0e:	4649      	mov	r1, r9
 8008d10:	4640      	mov	r0, r8
 8008d12:	47d0      	blx	sl
 8008d14:	3001      	adds	r0, #1
 8008d16:	d09d      	beq.n	8008c54 <_printf_i+0x160>
 8008d18:	3501      	adds	r5, #1
 8008d1a:	68e3      	ldr	r3, [r4, #12]
 8008d1c:	9903      	ldr	r1, [sp, #12]
 8008d1e:	1a5b      	subs	r3, r3, r1
 8008d20:	42ab      	cmp	r3, r5
 8008d22:	dcf2      	bgt.n	8008d0a <_printf_i+0x216>
 8008d24:	e7eb      	b.n	8008cfe <_printf_i+0x20a>
 8008d26:	2500      	movs	r5, #0
 8008d28:	f104 0619 	add.w	r6, r4, #25
 8008d2c:	e7f5      	b.n	8008d1a <_printf_i+0x226>
 8008d2e:	bf00      	nop
 8008d30:	08008f61 	.word	0x08008f61
 8008d34:	08008f72 	.word	0x08008f72

08008d38 <memmove>:
 8008d38:	4288      	cmp	r0, r1
 8008d3a:	b510      	push	{r4, lr}
 8008d3c:	eb01 0402 	add.w	r4, r1, r2
 8008d40:	d902      	bls.n	8008d48 <memmove+0x10>
 8008d42:	4284      	cmp	r4, r0
 8008d44:	4623      	mov	r3, r4
 8008d46:	d807      	bhi.n	8008d58 <memmove+0x20>
 8008d48:	1e43      	subs	r3, r0, #1
 8008d4a:	42a1      	cmp	r1, r4
 8008d4c:	d008      	beq.n	8008d60 <memmove+0x28>
 8008d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d56:	e7f8      	b.n	8008d4a <memmove+0x12>
 8008d58:	4402      	add	r2, r0
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	428a      	cmp	r2, r1
 8008d5e:	d100      	bne.n	8008d62 <memmove+0x2a>
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d6a:	e7f7      	b.n	8008d5c <memmove+0x24>

08008d6c <_sbrk_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d06      	ldr	r5, [pc, #24]	; (8008d88 <_sbrk_r+0x1c>)
 8008d70:	2300      	movs	r3, #0
 8008d72:	4604      	mov	r4, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	602b      	str	r3, [r5, #0]
 8008d78:	f7f8 fb9c 	bl	80014b4 <_sbrk>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_sbrk_r+0x1a>
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_sbrk_r+0x1a>
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	24031170 	.word	0x24031170

08008d8c <memcpy>:
 8008d8c:	440a      	add	r2, r1
 8008d8e:	4291      	cmp	r1, r2
 8008d90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008d94:	d100      	bne.n	8008d98 <memcpy+0xc>
 8008d96:	4770      	bx	lr
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008da2:	4291      	cmp	r1, r2
 8008da4:	d1f9      	bne.n	8008d9a <memcpy+0xe>
 8008da6:	bd10      	pop	{r4, pc}

08008da8 <_realloc_r>:
 8008da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dac:	4680      	mov	r8, r0
 8008dae:	4614      	mov	r4, r2
 8008db0:	460e      	mov	r6, r1
 8008db2:	b921      	cbnz	r1, 8008dbe <_realloc_r+0x16>
 8008db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008db8:	4611      	mov	r1, r2
 8008dba:	f7ff bc49 	b.w	8008650 <_malloc_r>
 8008dbe:	b92a      	cbnz	r2, 8008dcc <_realloc_r+0x24>
 8008dc0:	f7ff fbda 	bl	8008578 <_free_r>
 8008dc4:	4625      	mov	r5, r4
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dcc:	f000 f81b 	bl	8008e06 <_malloc_usable_size_r>
 8008dd0:	4284      	cmp	r4, r0
 8008dd2:	4607      	mov	r7, r0
 8008dd4:	d802      	bhi.n	8008ddc <_realloc_r+0x34>
 8008dd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008dda:	d812      	bhi.n	8008e02 <_realloc_r+0x5a>
 8008ddc:	4621      	mov	r1, r4
 8008dde:	4640      	mov	r0, r8
 8008de0:	f7ff fc36 	bl	8008650 <_malloc_r>
 8008de4:	4605      	mov	r5, r0
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d0ed      	beq.n	8008dc6 <_realloc_r+0x1e>
 8008dea:	42bc      	cmp	r4, r7
 8008dec:	4622      	mov	r2, r4
 8008dee:	4631      	mov	r1, r6
 8008df0:	bf28      	it	cs
 8008df2:	463a      	movcs	r2, r7
 8008df4:	f7ff ffca 	bl	8008d8c <memcpy>
 8008df8:	4631      	mov	r1, r6
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	f7ff fbbc 	bl	8008578 <_free_r>
 8008e00:	e7e1      	b.n	8008dc6 <_realloc_r+0x1e>
 8008e02:	4635      	mov	r5, r6
 8008e04:	e7df      	b.n	8008dc6 <_realloc_r+0x1e>

08008e06 <_malloc_usable_size_r>:
 8008e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e0a:	1f18      	subs	r0, r3, #4
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	bfbc      	itt	lt
 8008e10:	580b      	ldrlt	r3, [r1, r0]
 8008e12:	18c0      	addlt	r0, r0, r3
 8008e14:	4770      	bx	lr
	...

08008e18 <_init>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr

08008e24 <_fini>:
 8008e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e26:	bf00      	nop
 8008e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2a:	bc08      	pop	{r3}
 8008e2c:	469e      	mov	lr, r3
 8008e2e:	4770      	bx	lr
