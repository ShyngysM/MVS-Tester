
h7a3zi_combine2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008be4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08008e94  08008e94  00018e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008fe8  08008fe8  00018fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08008ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00031120  24000060  08009058  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24031180  08009058  00021180  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001857f  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000298b  00000000  00000000  00038650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001438  00000000  00000000  0003afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000fd3  00000000  00000000  0003c418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003272a  00000000  00000000  0003d3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017ea6  00000000  00000000  0006fb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00153867  00000000  00000000  000879bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005d00  00000000  00000000  001db224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  001e0f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008e7c 	.word	0x08008e7c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	08008e7c 	.word	0x08008e7c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f001 f819 	bl	80016c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f87d 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 fa3f 	bl	8000b1c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800069e:	f000 f9e9 	bl	8000a74 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006a2:	f000 fa33 	bl	8000b0c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006a6:	f000 f8eb 	bl	8000880 <MX_ADC1_Init>
  MX_TIM16_Init();
 80006aa:	f000 f9bb 	bl	8000a24 <MX_TIM16_Init>
  MX_TIM3_Init();
 80006ae:	f000 f95f 	bl	8000970 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /////////////////START/////////////////////////

  // pump on
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2120      	movs	r1, #32
 80006b6:	4830      	ldr	r0, [pc, #192]	; (8000778 <main+0xec>)
 80006b8:	f002 fd1e 	bl	80030f8 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 80006bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c0:	f001 f894 	bl	80017ec <HAL_Delay>

  uart_buf_len = sprintf(uart_buf, "MeasurementNr.,Pulses,Hightime[ms],t_vibration[ms],t_responce[ms],bad[bool]\r\n");
 80006c4:	492d      	ldr	r1, [pc, #180]	; (800077c <main+0xf0>)
 80006c6:	482e      	ldr	r0, [pc, #184]	; (8000780 <main+0xf4>)
 80006c8:	f007 ff34 	bl	8008534 <siprintf>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a2d      	ldr	r2, [pc, #180]	; (8000784 <main+0xf8>)
 80006d0:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80006d2:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <main+0xf8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	4929      	ldr	r1, [pc, #164]	; (8000780 <main+0xf4>)
 80006dc:	482a      	ldr	r0, [pc, #168]	; (8000788 <main+0xfc>)
 80006de:	f006 fd11 	bl	8007104 <HAL_UART_Transmit>

  for (int i = 0; i < 100; i++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	e03c      	b.n	8000762 <main+0xd6>
    measure(&Meas);
 80006e8:	4828      	ldr	r0, [pc, #160]	; (800078c <main+0x100>)
 80006ea:	f000 fb5d 	bl	8000da8 <measure>
    analyse(&Meas);
 80006ee:	4827      	ldr	r0, [pc, #156]	; (800078c <main+0x100>)
 80006f0:	f000 fc16 	bl	8000f20 <analyse>
    
    uart_buf_len = sprintf(uart_buf, "%d, %d, %d, %d, %d, %d\r\n",
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	1c58      	adds	r0, r3, #1
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <main+0x100>)
 80006fa:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80006fe:	f8d3 4d4c 	ldr.w	r4, [r3, #3404]	; 0xd4c
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <main+0x100>)
 8000704:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000708:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <main+0x100>)
 800070e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000712:	f8d2 2d40 	ldr.w	r2, [r2, #3392]	; 0xd40
 8000716:	491d      	ldr	r1, [pc, #116]	; (800078c <main+0x100>)
 8000718:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
 800071c:	f8d1 1d44 	ldr.w	r1, [r1, #3396]	; 0xd44
                           i+1, Meas.pulses, Meas.htime, Meas.t_vibr_start, Meas.t_first_pulse, Meas.bad);
 8000720:	4d1a      	ldr	r5, [pc, #104]	; (800078c <main+0x100>)
 8000722:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
 8000726:	f895 5d54 	ldrb.w	r5, [r5, #3412]	; 0xd54
    uart_buf_len = sprintf(uart_buf, "%d, %d, %d, %d, %d, %d\r\n",
 800072a:	9503      	str	r5, [sp, #12]
 800072c:	9102      	str	r1, [sp, #8]
 800072e:	9201      	str	r2, [sp, #4]
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	4623      	mov	r3, r4
 8000734:	4602      	mov	r2, r0
 8000736:	4916      	ldr	r1, [pc, #88]	; (8000790 <main+0x104>)
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <main+0xf4>)
 800073a:	f007 fefb 	bl	8008534 <siprintf>
 800073e:	4603      	mov	r3, r0
 8000740:	4a10      	ldr	r2, [pc, #64]	; (8000784 <main+0xf8>)
 8000742:	6013      	str	r3, [r2, #0]

    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <main+0xf8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	b29a      	uxth	r2, r3
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	490c      	ldr	r1, [pc, #48]	; (8000780 <main+0xf4>)
 800074e:	480e      	ldr	r0, [pc, #56]	; (8000788 <main+0xfc>)
 8000750:	f006 fcd8 	bl	8007104 <HAL_UART_Transmit>

    HAL_Delay(500);
 8000754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000758:	f001 f848 	bl	80017ec <HAL_Delay>
  for (int i = 0; i < 100; i++) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3301      	adds	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b63      	cmp	r3, #99	; 0x63
 8000766:	ddbf      	ble.n	80006e8 <main+0x5c>
  }

// NOTE: uart_transmit_digital() increases the measurement time up to 1 min. and 40 s, without it 31 s the loading time into µC is 11 s

  // pump off
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2120      	movs	r1, #32
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <main+0xec>)
 800076e:	f002 fcc3 	bl	80030f8 <HAL_GPIO_WritePin>

  uart_transmit_digital();
 8000772:	f000 fcf9 	bl	8001168 <uart_transmit_digital>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000776:	e7fe      	b.n	8000776 <main+0xea>
 8000778:	58020000 	.word	0x58020000
 800077c:	08008e94 	.word	0x08008e94
 8000780:	24030f64 	.word	0x24030f64
 8000784:	2403102c 	.word	0x2403102c
 8000788:	24030ed0 	.word	0x24030ed0
 800078c:	2400007c 	.word	0x2400007c
 8000790:	08008ee4 	.word	0x08008ee4

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	; 0x70
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	224c      	movs	r2, #76	; 0x4c
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f007 fee6 	bl	8008574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2220      	movs	r2, #32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f007 fee0 	bl	8008574 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <SystemClock_Config+0xe4>)
 80007b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007be:	2004      	movs	r0, #4
 80007c0:	f002 fcb4 	bl	800312c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007c4:	2300      	movs	r3, #0
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <SystemClock_Config+0xe8>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a2b      	ldr	r2, [pc, #172]	; (800087c <SystemClock_Config+0xe8>)
 80007ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <SystemClock_Config+0xe8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e0:	bf00      	nop
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <SystemClock_Config+0xe8>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ee:	d1f8      	bne.n	80007e2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007f0:	2321      	movs	r3, #33	; 0x21
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007fa:	2301      	movs	r3, #1
 80007fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	2302      	movs	r3, #2
 8000804:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800080a:	2318      	movs	r3, #24
 800080c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000812:	2304      	movs	r3, #4
 8000814:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000816:	2302      	movs	r3, #2
 8000818:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800081a:	230c      	movs	r3, #12
 800081c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800081e:	2300      	movs	r3, #0
 8000820:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fcd8 	bl	80031e0 <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000836:	f000 fcdd 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	233f      	movs	r3, #63	; 0x3f
 800083c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2303      	movs	r3, #3
 8000840:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2102      	movs	r1, #2
 800085e:	4618      	mov	r0, r3
 8000860:	f003 f8f0 	bl	8003a44 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800086a:	f000 fcc3 	bl	80011f4 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3770      	adds	r7, #112	; 0x70
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	58024400 	.word	0x58024400
 800087c:	58024800 	.word	0x58024800

08000880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000892:	463b      	mov	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
 80008a0:	615a      	str	r2, [r3, #20]
 80008a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a4:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008a6:	4a30      	ldr	r2, [pc, #192]	; (8000968 <MX_ADC1_Init+0xe8>)
 80008a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008aa:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008b0:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b6:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008be:	2204      	movs	r2, #4
 80008c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e0:	4b20      	ldr	r3, [pc, #128]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_ADC1_Init+0xe4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000900:	4818      	ldr	r0, [pc, #96]	; (8000964 <MX_ADC1_Init+0xe4>)
 8000902:	f001 f979 	bl	8001bf8 <HAL_ADC_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800090c:	f000 fc72 	bl	80011f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4812      	ldr	r0, [pc, #72]	; (8000964 <MX_ADC1_Init+0xe4>)
 800091c:	f002 f8bc 	bl	8002a98 <HAL_ADCEx_MultiModeConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000926:	f000 fc65 	bl	80011f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_ADC1_Init+0xec>)
 800092c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092e:	2306      	movs	r3, #6
 8000930:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000936:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800093a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093c:	2304      	movs	r3, #4
 800093e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_ADC1_Init+0xe4>)
 800094e:	f001 fc4d 	bl	80021ec <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000958:	f000 fc4c 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24030dd4 	.word	0x24030dd4
 8000968:	40022000 	.word	0x40022000
 800096c:	3ef08000 	.word	0x3ef08000

08000970 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2224      	movs	r2, #36	; 0x24
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f007 fdf8 	bl	8008574 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <MX_TIM3_Init+0xac>)
 8000990:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <MX_TIM3_Init+0xb0>)
 8000992:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_TIM3_Init+0xac>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MX_TIM3_Init+0xac>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_TIM3_Init+0xac>)
 80009a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_TIM3_Init+0xac>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_TIM3_Init+0xac>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009b4:	2303      	movs	r3, #3
 80009b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009bc:	2301      	movs	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009cc:	2301      	movs	r3, #1
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	480f      	ldr	r0, [pc, #60]	; (8000a1c <MX_TIM3_Init+0xac>)
 80009e0:	f006 f8be 	bl	8006b60 <HAL_TIM_Encoder_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80009ea:	f000 fc03 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4808      	ldr	r0, [pc, #32]	; (8000a1c <MX_TIM3_Init+0xac>)
 80009fc:	f006 faa4 	bl	8006f48 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000a06:	f000 fbf5 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000a0a:	213c      	movs	r1, #60	; 0x3c
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <MX_TIM3_Init+0xac>)
 8000a0e:	f006 f94d 	bl	8006cac <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	24030e38 	.word	0x24030e38
 8000a20:	40000400 	.word	0x40000400

08000a24 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a2a:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <MX_TIM16_Init+0x4c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600-1;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a30:	f242 527f 	movw	r2, #9599	; 0x257f
 8000a34:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000-1;
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a3e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a42:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_TIM16_Init+0x48>)
 8000a58:	f005 ff8a 	bl	8006970 <HAL_TIM_Base_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000a62:	f000 fbc7 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	24030e84 	.word	0x24030e84
 8000a70:	40014400 	.word	0x40014400

08000a74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a7a:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <MX_USART3_UART_Init+0x94>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000abe:	f006 fad1 	bl	8007064 <HAL_UART_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ac8:	f000 fb94 	bl	80011f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ad0:	f007 fc65 	bl	800839e <HAL_UARTEx_SetTxFifoThreshold>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ada:	f000 fb8b 	bl	80011f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000ae2:	f007 fc9a 	bl	800841a <HAL_UARTEx_SetRxFifoThreshold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aec:	f000 fb82 	bl	80011f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_USART3_UART_Init+0x90>)
 8000af2:	f007 fc1b 	bl	800832c <HAL_UARTEx_DisableFifoMode>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000afc:	f000 fb7a 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24030ed0 	.word	0x24030ed0
 8000b08:	40004800 	.word	0x40004800

08000b0c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08e      	sub	sp, #56	; 0x38
 8000b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b95      	ldr	r3, [pc, #596]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b38:	4a93      	ldr	r2, [pc, #588]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b42:	4b91      	ldr	r3, [pc, #580]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	623b      	str	r3, [r7, #32]
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b50:	4b8d      	ldr	r3, [pc, #564]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b56:	4a8c      	ldr	r2, [pc, #560]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b58:	f043 0320 	orr.w	r3, r3, #32
 8000b5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b60:	4b89      	ldr	r3, [pc, #548]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b66:	f003 0320 	and.w	r3, r3, #32
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6e:	4b86      	ldr	r3, [pc, #536]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b74:	4a84      	ldr	r2, [pc, #528]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b7e:	4b82      	ldr	r3, [pc, #520]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b88:	61bb      	str	r3, [r7, #24]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b7e      	ldr	r3, [pc, #504]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b92:	4a7d      	ldr	r2, [pc, #500]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b9c:	4b7a      	ldr	r3, [pc, #488]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000b9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b77      	ldr	r3, [pc, #476]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb0:	4a75      	ldr	r2, [pc, #468]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bba:	4b73      	ldr	r3, [pc, #460]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc8:	4b6f      	ldr	r3, [pc, #444]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bce:	4a6e      	ldr	r2, [pc, #440]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bd0:	f043 0310 	orr.w	r3, r3, #16
 8000bd4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bd8:	4b6b      	ldr	r3, [pc, #428]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be6:	4b68      	ldr	r3, [pc, #416]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000be8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bec:	4a66      	ldr	r2, [pc, #408]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bee:	f043 0308 	orr.w	r3, r3, #8
 8000bf2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bf6:	4b64      	ldr	r3, [pc, #400]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000bf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c04:	4b60      	ldr	r3, [pc, #384]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000c06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c0a:	4a5f      	ldr	r2, [pc, #380]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c14:	4b5c      	ldr	r3, [pc, #368]	; (8000d88 <MX_GPIO_Init+0x26c>)
 8000c16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c28:	4858      	ldr	r0, [pc, #352]	; (8000d8c <MX_GPIO_Init+0x270>)
 8000c2a:	f002 fa65 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUMP_PA5_Pin_GPIO_Port, PUMP_PA5_Pin_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2120      	movs	r1, #32
 8000c32:	4857      	ldr	r0, [pc, #348]	; (8000d90 <MX_GPIO_Init+0x274>)
 8000c34:	f002 fa60 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|ENCMOTOR_PB6_Pin|ENCMOTOR_PB7_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000c3e:	4855      	ldr	r0, [pc, #340]	; (8000d94 <MX_GPIO_Init+0x278>)
 8000c40:	f002 fa5a 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f246 0102 	movw	r1, #24578	; 0x6002
 8000c4a:	4853      	ldr	r0, [pc, #332]	; (8000d98 <MX_GPIO_Init+0x27c>)
 8000c4c:	f002 fa54 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 8000c56:	4851      	ldr	r0, [pc, #324]	; (8000d9c <MX_GPIO_Init+0x280>)
 8000c58:	f002 fa4e 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	484b      	ldr	r0, [pc, #300]	; (8000da0 <MX_GPIO_Init+0x284>)
 8000c72:	f002 f891 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	483f      	ldr	r0, [pc, #252]	; (8000d8c <MX_GPIO_Init+0x270>)
 8000c90:	f002 f882 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUMP_PA5_Pin_Pin */
  GPIO_InitStruct.Pin = PUMP_PA5_Pin_Pin;
 8000c94:	2320      	movs	r3, #32
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PUMP_PA5_Pin_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4839      	ldr	r0, [pc, #228]	; (8000d90 <MX_GPIO_Init+0x274>)
 8000cac:	f002 f874 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin ENCMOTOR_PB6_Pin ENCMOTOR_PB7_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|ENCMOTOR_PB6_Pin|ENCMOTOR_PB7_Pin;
 8000cb0:	f244 03c1 	movw	r3, #16577	; 0x40c1
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4832      	ldr	r0, [pc, #200]	; (8000d94 <MX_GPIO_Init+0x278>)
 8000cca:	f002 f865 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER3_PE13_Pin_Pin STEPPER4_PE14_Pin_Pin LD2_Pin */
  GPIO_InitStruct.Pin = STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin;
 8000cce:	f246 0302 	movw	r3, #24578	; 0x6002
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	482c      	ldr	r0, [pc, #176]	; (8000d98 <MX_GPIO_Init+0x27c>)
 8000ce8:	f002 f856 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4826      	ldr	r0, [pc, #152]	; (8000d9c <MX_GPIO_Init+0x280>)
 8000d02:	f002 f849 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	481d      	ldr	r0, [pc, #116]	; (8000d90 <MX_GPIO_Init+0x274>)
 8000d1c:	f002 f83c 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d32:	230a      	movs	r3, #10
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4814      	ldr	r0, [pc, #80]	; (8000d90 <MX_GPIO_Init+0x274>)
 8000d3e:	f002 f82b 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_GPIO_Init+0x274>)
 8000d5c:	f002 f81c 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : HELP_SIGNAL_PG9_Pin_Pin VIBROMOTOR_PG12_Pin_Pin STEPPER2_PG14_Pin_Pin */
  GPIO_InitStruct.Pin = HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin;
 8000d60:	f44f 43a4 	mov.w	r3, #20992	; 0x5200
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <MX_GPIO_Init+0x280>)
 8000d7a:	f002 f80d 	bl	8002d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d7e:	bf00      	nop
 8000d80:	3738      	adds	r7, #56	; 0x38
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	58024400 	.word	0x58024400
 8000d8c:	58021400 	.word	0x58021400
 8000d90:	58020000 	.word	0x58020000
 8000d94:	58020400 	.word	0x58020400
 8000d98:	58021000 	.word	0x58021000
 8000d9c:	58021800 	.word	0x58021800
 8000da0:	58020800 	.word	0x58020800
 8000da4:	00000000 	.word	0x00000000

08000da8 <measure>:
// calling an ISR for STEPPER
// void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
//   STEPPER_TMR_OVF_ISR(htim);
// }

void measure(struct MeasureData *s) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  const int ONESEC = 10000 - 1;
 8000db0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000db4:	613b      	str	r3, [r7, #16]
  // store our counter value
  int tim_val_ms = 0; // tick is 0.1 ms
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]

  bool is_vibrating = false;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	76fb      	strb	r3, [r7, #27]
  // store our 16bit ADC reading
  uint16_t raw;
  // starting timer 16
  HAL_TIM_Base_Start(&htim16);
 8000dbe:	4854      	ldr	r0, [pc, #336]	; (8000f10 <measure+0x168>)
 8000dc0:	f005 fe2e 	bl	8006a20 <HAL_TIM_Base_Start>
  // set help signal (yellow led)
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);

  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e079      	b.n	8000ebe <measure+0x116>

    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000dca:	7efb      	ldrb	r3, [r7, #27]
 8000dcc:	f083 0301 	eor.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d035      	beq.n	8000e42 <measure+0x9a>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000dea:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8000ef8 <measure+0x150>
 8000dee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000df2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfa:	db22      	blt.n	8000e42 <measure+0x9a>
        tim_val_ms < ONESEC * 0.21) {
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e10:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8000f00 <measure+0x158>
 8000e14:	ee27 7b05 	vmul.f64	d7, d7, d5
    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000e18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e20:	d50f      	bpl.n	8000e42 <measure+0x9a>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); // vibrator ON
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e28:	483a      	ldr	r0, [pc, #232]	; (8000f14 <measure+0x16c>)
 8000e2a:	f002 f965 	bl	80030f8 <HAL_GPIO_WritePin>
      // saving time of begin vibration
      s->t_vibr_start = i;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e34:	461a      	mov	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
      is_vibrating = true;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	76fb      	strb	r3, [r7, #27]
 8000e40:	e01d      	b.n	8000e7e <measure+0xd6>
    } else if (is_vibrating && tim_val_ms >= ONESEC * 0.3) {
 8000e42:	7efb      	ldrb	r3, [r7, #27]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d01a      	beq.n	8000e7e <measure+0xd6>
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	ee07 3a90 	vmov	s15, r3
 8000e58:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e5c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8000f08 <measure+0x160>
 8000e60:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	db07      	blt.n	8000e7e <measure+0xd6>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); // vibrator OFF
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e74:	4827      	ldr	r0, [pc, #156]	; (8000f14 <measure+0x16c>)
 8000e76:	f002 f93f 	bl	80030f8 <HAL_GPIO_WritePin>
      is_vibrating = false;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	76fb      	strb	r3, [r7, #27]
    }

    // ADC routine
    HAL_ADC_Start(&hadc1);
 8000e7e:	4826      	ldr	r0, [pc, #152]	; (8000f18 <measure+0x170>)
 8000e80:	f001 f814 	bl	8001eac <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e88:	4823      	ldr	r0, [pc, #140]	; (8000f18 <measure+0x170>)
 8000e8a:	f001 f8c9 	bl	8002020 <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc1);
 8000e8e:	4822      	ldr	r0, [pc, #136]	; (8000f18 <measure+0x170>)
 8000e90:	f001 f99e 	bl	80021d0 <HAL_ADC_GetValue>
 8000e94:	4603      	mov	r3, r0
 8000e96:	81fb      	strh	r3, [r7, #14]
    // needed to save the last iterator i
    s->t_end = i;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f8c2 3d48 	str.w	r3, [r2, #3400]	; 0xd48
    // remember the last element of array will be 0, the counter will be
    // increased but array not filled
    s->signal[i] = raw;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	89f9      	ldrh	r1, [r7, #14]
 8000eac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    tim_val_ms = __HAL_TIM_GET_COUNTER(&htim16);
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <measure+0x168>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb6:	61fb      	str	r3, [r7, #28]
  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	db81      	blt.n	8000dca <measure+0x22>
  }
  // stoping and reseting timer 16
  HAL_TIM_Base_Stop_IT(&htim16);
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <measure+0x168>)
 8000ec8:	f005 fe1a 	bl	8006b00 <HAL_TIM_Base_Stop_IT>
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <measure+0x168>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24
  s->pulses = 0;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000eda:	461a      	mov	r2, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
  s->htime = 0;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c2 3d50 	str.w	r3, [r2, #3408]	; 0xd50
  // reset help signal (yellow led)
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	9999999a 	.word	0x9999999a
 8000efc:	3fc99999 	.word	0x3fc99999
 8000f00:	ae147ae1 	.word	0xae147ae1
 8000f04:	3fcae147 	.word	0x3fcae147
 8000f08:	33333333 	.word	0x33333333
 8000f0c:	3fd33333 	.word	0x3fd33333
 8000f10:	24030e84 	.word	0x24030e84
 8000f14:	58021800 	.word	0x58021800
 8000f18:	24030dd4 	.word	0x24030dd4
 8000f1c:	00000000 	.word	0x00000000

08000f20 <analyse>:

void analyse(struct MeasureData *s) {
 8000f20:	b480      	push	{r7}
 8000f22:	b08b      	sub	sp, #44	; 0x2c
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  // digitalize signal v:[0,1]
  const int TRIGGER = 39718;
 8000f28:	f649 3326 	movw	r3, #39718	; 0x9b26
 8000f2c:	613b      	str	r3, [r7, #16]
  const int SCALE = 1000;
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < s->t_end; i++) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
 8000f38:	e015      	b.n	8000f66 <analyse+0x46>
    if (s->signal[i] < TRIGGER) { // aprox. 2V TODO change it to 1V
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f42:	461a      	mov	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4293      	cmp	r3, r2
 8000f48:	dd05      	ble.n	8000f56 <analyse+0x36>
      s->signal[i] = 0;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000f54:	e004      	b.n	8000f60 <analyse+0x40>
    } else {
      s->signal[i] = 1;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i = 0; i < s->t_end; i++) {
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	3301      	adds	r3, #1
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f6c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dbe1      	blt.n	8000f3a <analyse+0x1a>
    }
  }
  // count pulses
  for (int i = 0; i < s->t_end; i++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
 8000f7a:	e02d      	b.n	8000fd8 <analyse+0xb8>
    int edge = s->signal[i + 1] - s->signal[i];
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f86:	4619      	mov	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a3a      	ldr	r2, [r7, #32]
 8000f8c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f90:	1acb      	subs	r3, r1, r3
 8000f92:	60bb      	str	r3, [r7, #8]
    if (edge == 1) { // count only negative pulses
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d10a      	bne.n	8000fb0 <analyse+0x90>
      s->pulses++;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fa0:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000fac:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
    }
    if (s->signal[i] == 1) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a3a      	ldr	r2, [r7, #32]
 8000fb4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d10a      	bne.n	8000fd2 <analyse+0xb2>
      s->htime++;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fc2:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000fce:	f8c2 3d50 	str.w	r3, [r2, #3408]	; 0xd50
  for (int i = 0; i < s->t_end; i++) {
 8000fd2:	6a3b      	ldr	r3, [r7, #32]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fde:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000fe2:	6a3a      	ldr	r2, [r7, #32]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	dbc9      	blt.n	8000f7c <analyse+0x5c>
    }
  }
  // check if sensor has been open before vibration
  s->bad = false;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2d54 	strb.w	r2, [r3, #3412]	; 0xd54
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	e00f      	b.n	800101a <analyse+0xfa>
    if (s->signal[i] == 0) {
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69fa      	ldr	r2, [r7, #28]
 8000ffe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d106      	bne.n	8001014 <analyse+0xf4>
      s->bad = true;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2d54 	strb.w	r2, [r3, #3412]	; 0xd54
      break;
 8001012:	e00a      	b.n	800102a <analyse+0x10a>
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	3301      	adds	r3, #1
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001020:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8001024:	69fa      	ldr	r2, [r7, #28]
 8001026:	429a      	cmp	r2, r3
 8001028:	dde7      	ble.n	8000ffa <analyse+0xda>
    }
  }
  // check if sensor has been open after vibration + Einschwingungszeit
  for (int i = (int)(s->t_end * 0.90); i < s->t_end; i++) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001030:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800103c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8001160 <analyse+0x240>
 8001040:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001044:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001048:	ee17 3a90 	vmov	r3, s15
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	e00f      	b.n	8001070 <analyse+0x150>
    if (s->signal[i] == 0) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d106      	bne.n	800106a <analyse+0x14a>
      s->bad = true;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2d54 	strb.w	r2, [r3, #3412]	; 0xd54
      break;
 8001068:	e00a      	b.n	8001080 <analyse+0x160>
  for (int i = (int)(s->t_end * 0.90); i < s->t_end; i++) {
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	3301      	adds	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001076:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbe7      	blt.n	8001050 <analyse+0x130>
    }
  }
  // check if sensor is not kurzgeschlossen all time
  if (s->pulses == 0) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001086:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800108a:	2b00      	cmp	r3, #0
 800108c:	d105      	bne.n	800109a <analyse+0x17a>
    s->bad = true;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2d54 	strb.w	r2, [r3, #3412]	; 0xd54
  }
  // find and save first pulse after vibration
  for (int i = s->t_vibr_start; i <= s->t_end; i++) {
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010a0:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	e010      	b.n	80010ca <analyse+0x1aa>
    if (s->signal[i] == 0) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d107      	bne.n	80010c4 <analyse+0x1a4>
      s->t_first_pulse = i;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010ba:	461a      	mov	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f8c2 3d44 	str.w	r3, [r2, #3396]	; 0xd44
      break;
 80010c2:	e00a      	b.n	80010da <analyse+0x1ba>
  for (int i = s->t_vibr_start; i <= s->t_end; i++) {
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	3301      	adds	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010d0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dde6      	ble.n	80010a8 <analyse+0x188>
    }
  
  }
  // resolve the variables to human readable values
  s->htime = s->htime * SCALE / s->t_end;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010e0:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	fb03 f202 	mul.w	r2, r3, r2
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010f0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80010f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 80010fe:	f8c2 3d50 	str.w	r3, [r2, #3408]	; 0xd50
  s->t_vibr_start = s->t_vibr_start * SCALE / s->t_end;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001108:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	fb03 f202 	mul.w	r2, r3, r2
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001118:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800111c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8001126:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
  s->t_first_pulse = s->t_first_pulse * SCALE / s->t_end;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001130:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	fb03 f202 	mul.w	r2, r3, r2
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001140:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8001144:	fb92 f3f3 	sdiv	r3, r2, r3
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 800114e:	f8c2 3d44 	str.w	r3, [r2, #3396]	; 0xd44
}
 8001152:	bf00      	nop
 8001154:	372c      	adds	r7, #44	; 0x2c
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	cccccccd 	.word	0xcccccccd
 8001164:	3feccccc 	.word	0x3feccccc

08001168 <uart_transmit_digital>:
  for (int j = 0; j < Meas.t_end; j++) {
    uart_buf_len = sprintf(uart_buf, "%d, %u \r\n", j, Meas.signal[j]);
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
  }
}
void uart_transmit_digital(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  /* Transmit an array with DIGITAL data via uart */
  uart_buf_len = sprintf(uart_buf, "Digital \n");
 800116e:	491b      	ldr	r1, [pc, #108]	; (80011dc <uart_transmit_digital+0x74>)
 8001170:	481b      	ldr	r0, [pc, #108]	; (80011e0 <uart_transmit_digital+0x78>)
 8001172:	f007 f9df 	bl	8008534 <siprintf>
 8001176:	4603      	mov	r3, r0
 8001178:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <uart_transmit_digital+0x7c>)
 800117a:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <uart_transmit_digital+0x7c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	b29a      	uxth	r2, r3
 8001182:	2364      	movs	r3, #100	; 0x64
 8001184:	4916      	ldr	r1, [pc, #88]	; (80011e0 <uart_transmit_digital+0x78>)
 8001186:	4818      	ldr	r0, [pc, #96]	; (80011e8 <uart_transmit_digital+0x80>)
 8001188:	f005 ffbc 	bl	8007104 <HAL_UART_Transmit>
  for (int j = 0; j < Meas.t_end; j++) {
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	e016      	b.n	80011c0 <uart_transmit_digital+0x58>
    uart_buf_len = sprintf(uart_buf, "%d, %u \r\n", j, Meas.signal[j]);
 8001192:	4a16      	ldr	r2, [pc, #88]	; (80011ec <uart_transmit_digital+0x84>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4914      	ldr	r1, [pc, #80]	; (80011f0 <uart_transmit_digital+0x88>)
 800119e:	4810      	ldr	r0, [pc, #64]	; (80011e0 <uart_transmit_digital+0x78>)
 80011a0:	f007 f9c8 	bl	8008534 <siprintf>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <uart_transmit_digital+0x7c>)
 80011a8:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <uart_transmit_digital+0x7c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	2364      	movs	r3, #100	; 0x64
 80011b2:	490b      	ldr	r1, [pc, #44]	; (80011e0 <uart_transmit_digital+0x78>)
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <uart_transmit_digital+0x80>)
 80011b6:	f005 ffa5 	bl	8007104 <HAL_UART_Transmit>
  for (int j = 0; j < Meas.t_end; j++) {
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3301      	adds	r3, #1
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <uart_transmit_digital+0x84>)
 80011c2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80011c6:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbe0      	blt.n	8001192 <uart_transmit_digital+0x2a>
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	08008f0c 	.word	0x08008f0c
 80011e0:	24030f64 	.word	0x24030f64
 80011e4:	2403102c 	.word	0x2403102c
 80011e8:	24030ed0 	.word	0x24030ed0
 80011ec:	2400007c 	.word	0x2400007c
 80011f0:	08008f00 	.word	0x08008f00

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_MspInit+0x30>)
 8001208:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800120c:	4a08      	ldr	r2, [pc, #32]	; (8001230 <HAL_MspInit+0x30>)
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_MspInit+0x30>)
 8001218:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	58024400 	.word	0x58024400

08001234 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b0ba      	sub	sp, #232	; 0xe8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	22c0      	movs	r2, #192	; 0xc0
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f007 f98d 	bl	8008574 <memset>
  if(hadc->Instance==ADC1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a2b      	ldr	r2, [pc, #172]	; (800130c <HAL_ADC_MspInit+0xd8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d14f      	bne.n	8001304 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001264:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001274:	2310      	movs	r3, #16
 8001276:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001278:	2304      	movs	r3, #4
 800127a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001284:	23c0      	movs	r3, #192	; 0xc0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001288:	2300      	movs	r3, #0
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4618      	mov	r0, r3
 800129c:	f002 ff5e 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80012a6:	f7ff ffa5 	bl	80011f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_ADC_MspInit+0xdc>)
 80012ac:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80012b0:	4a17      	ldr	r2, [pc, #92]	; (8001310 <HAL_ADC_MspInit+0xdc>)
 80012b2:	f043 0320 	orr.w	r3, r3, #32
 80012b6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_ADC_MspInit+0xdc>)
 80012bc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80012c0:	f003 0320 	and.w	r3, r3, #32
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_ADC_MspInit+0xdc>)
 80012ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <HAL_ADC_MspInit+0xdc>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_ADC_MspInit+0xdc>)
 80012da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|ANALOG_READ_PA3_Pin_Pin;
 80012e6:	2309      	movs	r3, #9
 80012e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ec:	2303      	movs	r3, #3
 80012ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <HAL_ADC_MspInit+0xe0>)
 8001300:	f001 fd4a 	bl	8002d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001304:	bf00      	nop
 8001306:	37e8      	adds	r7, #232	; 0xe8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40022000 	.word	0x40022000
 8001310:	58024400 	.word	0x58024400
 8001314:	58020000 	.word	0x58020000

08001318 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d12d      	bne.n	8001396 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 800133c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001340:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 800134c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 800135a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 800136a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = encoder1PA6_Pin|encoder2PA7_Pin;
 8001376:	23c0      	movs	r3, #192	; 0xc0
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001386:	2302      	movs	r3, #2
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001392:	f001 fd01 	bl	8002d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40000400 	.word	0x40000400
 80013a4:	58024400 	.word	0x58024400
 80013a8:	58020000 	.word	0x58020000

080013ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_TIM_Base_MspInit+0x3c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d10e      	bne.n	80013dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_TIM_Base_MspInit+0x40>)
 80013c0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80013c4:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_TIM_Base_MspInit+0x40>)
 80013c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ca:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_TIM_Base_MspInit+0x40>)
 80013d0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	40014400 	.word	0x40014400
 80013ec:	58024400 	.word	0x58024400

080013f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0ba      	sub	sp, #232	; 0xe8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	22c0      	movs	r2, #192	; 0xc0
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f007 f8af 	bl	8008574 <memset>
  if(huart->Instance==USART3)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <HAL_UART_MspInit+0xc8>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d146      	bne.n	80014ae <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001420:	f04f 0202 	mov.w	r2, #2
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fe90 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001442:	f7ff fed7 	bl	80011f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_UART_MspInit+0xcc>)
 8001448:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800144c:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <HAL_UART_MspInit+0xcc>)
 800144e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001452:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_UART_MspInit+0xcc>)
 8001458:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800145c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_UART_MspInit+0xcc>)
 8001466:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800146a:	4a14      	ldr	r2, [pc, #80]	; (80014bc <HAL_UART_MspInit+0xcc>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_UART_MspInit+0xcc>)
 8001476:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001482:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800149c:	2307      	movs	r3, #7
 800149e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_UART_MspInit+0xd0>)
 80014aa:	f001 fc75 	bl	8002d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	37e8      	adds	r7, #232	; 0xe8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40004800 	.word	0x40004800
 80014bc:	58024400 	.word	0x58024400
 80014c0:	58020c00 	.word	0x58020c00

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler+0x4>

080014ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler+0x4>

080014d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f000 f94c 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f007 f81c 	bl	8008584 <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <_sbrk+0x64>)
 8001568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	24100000 	.word	0x24100000
 8001578:	00000400 	.word	0x00000400
 800157c:	24031030 	.word	0x24031030
 8001580:	24031180 	.word	0x24031180

08001584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001588:	4b32      	ldr	r3, [pc, #200]	; (8001654 <SystemInit+0xd0>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a31      	ldr	r2, [pc, #196]	; (8001654 <SystemInit+0xd0>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <SystemInit+0xd4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d807      	bhi.n	80015b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015a4:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <SystemInit+0xd4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 030f 	bic.w	r3, r3, #15
 80015ac:	4a2a      	ldr	r2, [pc, #168]	; (8001658 <SystemInit+0xd4>)
 80015ae:	f043 0303 	orr.w	r3, r3, #3
 80015b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <SystemInit+0xd8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a28      	ldr	r2, [pc, #160]	; (800165c <SystemInit+0xd8>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <SystemInit+0xd8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <SystemInit+0xd8>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4924      	ldr	r1, [pc, #144]	; (800165c <SystemInit+0xd8>)
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <SystemInit+0xdc>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <SystemInit+0xd4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <SystemInit+0xd4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 030f 	bic.w	r3, r3, #15
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <SystemInit+0xd4>)
 80015e8:	f043 0303 	orr.w	r3, r3, #3
 80015ec:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <SystemInit+0xd8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <SystemInit+0xd8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <SystemInit+0xd8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <SystemInit+0xd8>)
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <SystemInit+0xe0>)
 8001604:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <SystemInit+0xd8>)
 8001608:	4a17      	ldr	r2, [pc, #92]	; (8001668 <SystemInit+0xe4>)
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <SystemInit+0xd8>)
 800160e:	4a17      	ldr	r2, [pc, #92]	; (800166c <SystemInit+0xe8>)
 8001610:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <SystemInit+0xd8>)
 8001614:	2200      	movs	r2, #0
 8001616:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <SystemInit+0xd8>)
 800161a:	4a14      	ldr	r2, [pc, #80]	; (800166c <SystemInit+0xe8>)
 800161c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <SystemInit+0xd8>)
 8001620:	2200      	movs	r2, #0
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <SystemInit+0xd8>)
 8001626:	4a11      	ldr	r2, [pc, #68]	; (800166c <SystemInit+0xe8>)
 8001628:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <SystemInit+0xd8>)
 800162c:	2200      	movs	r2, #0
 800162e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <SystemInit+0xd8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a09      	ldr	r2, [pc, #36]	; (800165c <SystemInit+0xd8>)
 8001636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <SystemInit+0xd8>)
 800163e:	2200      	movs	r2, #0
 8001640:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <SystemInit+0xec>)
 8001644:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001648:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00
 8001658:	52002000 	.word	0x52002000
 800165c:	58024400 	.word	0x58024400
 8001660:	eaf6ed7f 	.word	0xeaf6ed7f
 8001664:	02020200 	.word	0x02020200
 8001668:	01ff0000 	.word	0x01ff0000
 800166c:	01010280 	.word	0x01010280
 8001670:	52004000 	.word	0x52004000

08001674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001678:	f7ff ff84 	bl	8001584 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800167e:	490d      	ldr	r1, [pc, #52]	; (80016b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001694:	4c0a      	ldr	r4, [pc, #40]	; (80016c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016a2:	f006 ff75 	bl	8008590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a6:	f7fe fff1 	bl	800068c <main>
  bx  lr
 80016aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016ac:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80016b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016b4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80016b8:	08008ff8 	.word	0x08008ff8
  ldr r2, =_sbss
 80016bc:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80016c0:	24031180 	.word	0x24031180

080016c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC_IRQHandler>
	...

080016c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ce:	2003      	movs	r0, #3
 80016d0:	f001 fb30 	bl	8002d34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80016d4:	f002 fb6c 	bl	8003db0 <HAL_RCC_GetSysClockFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_Init+0x68>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	4913      	ldr	r1, [pc, #76]	; (8001734 <HAL_Init+0x6c>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	fa22 f303 	lsr.w	r3, r2, r3
 80016f0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_Init+0x68>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <HAL_Init+0x6c>)
 80016fc:	5cd3      	ldrb	r3, [r2, r3]
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <HAL_Init+0x70>)
 800170a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <HAL_Init+0x74>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f814 	bl	8001740 <HAL_InitTick>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e002      	b.n	8001728 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001722:	f7ff fd6d 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	58024400 	.word	0x58024400
 8001734:	08008f7c 	.word	0x08008f7c
 8001738:	24000004 	.word	0x24000004
 800173c:	24000000 	.word	0x24000000

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_InitTick+0x60>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e021      	b.n	8001798 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_InitTick+0x64>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_InitTick+0x60>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fb07 	bl	8002d7e <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e00e      	b.n	8001798 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d80a      	bhi.n	8001796 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001780:	2200      	movs	r2, #0
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001788:	f001 fadf 	bl	8002d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <HAL_InitTick+0x68>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2400000c 	.word	0x2400000c
 80017a4:	24000000 	.word	0x24000000
 80017a8:	24000008 	.word	0x24000008

080017ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x20>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x24>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_IncTick+0x24>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	2400000c 	.word	0x2400000c
 80017d0:	24031034 	.word	0x24031034

080017d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_GetTick+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	24031034 	.word	0x24031034

080017ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f4:	f7ff ffee 	bl	80017d4 <HAL_GetTick>
 80017f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001804:	d005      	beq.n	8001812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_Delay+0x44>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001812:	bf00      	nop
 8001814:	f7ff ffde 	bl	80017d4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	429a      	cmp	r2, r3
 8001822:	d8f7      	bhi.n	8001814 <HAL_Delay+0x28>
  {
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2400000c 	.word	0x2400000c

08001834 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	609a      	str	r2, [r3, #8]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	609a      	str	r2, [r3, #8]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3360      	adds	r3, #96	; 0x60
 80018ae:	461a      	mov	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	430b      	orrs	r3, r1
 80018ca:	431a      	orrs	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018d0:	bf00      	nop
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	431a      	orrs	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	611a      	str	r2, [r3, #16]
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800190e:	b480      	push	{r7}
 8001910:	b087      	sub	sp, #28
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3360      	adds	r3, #96	; 0x60
 800191e:	461a      	mov	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	431a      	orrs	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	601a      	str	r2, [r3, #0]
  }
}
 8001938:	bf00      	nop
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800196a:	b480      	push	{r7}
 800196c:	b087      	sub	sp, #28
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3330      	adds	r3, #48	; 0x30
 800197a:	461a      	mov	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	4413      	add	r3, r2
 8001988:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	211f      	movs	r1, #31
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	401a      	ands	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	0e9b      	lsrs	r3, r3, #26
 80019a2:	f003 011f 	and.w	r1, r3, #31
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	431a      	orrs	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019b6:	bf00      	nop
 80019b8:	371c      	adds	r7, #28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b087      	sub	sp, #28
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3314      	adds	r3, #20
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	0e5b      	lsrs	r3, r3, #25
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	0d1b      	lsrs	r3, r3, #20
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	2107      	movs	r1, #7
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	401a      	ands	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	0d1b      	lsrs	r3, r3, #20
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	431a      	orrs	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a0c:	bf00      	nop
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a30:	43db      	mvns	r3, r3
 8001a32:	401a      	ands	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0318 	and.w	r3, r3, #24
 8001a3a:	4908      	ldr	r1, [pc, #32]	; (8001a5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a3c:	40d9      	lsrs	r1, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	400b      	ands	r3, r1
 8001a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a46:	431a      	orrs	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	000fffff 	.word	0x000fffff

08001a60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 031f 	and.w	r3, r3, #31
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6093      	str	r3, [r2, #8]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	5fffffc0 	.word	0x5fffffc0

08001abc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ad0:	d101      	bne.n	8001ad6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <LL_ADC_EnableInternalRegulator+0x24>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	6fffffc0 	.word	0x6fffffc0

08001b0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b20:	d101      	bne.n	8001b26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <LL_ADC_Enable+0x24>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	7fffffc0 	.word	0x7fffffc0

08001b5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <LL_ADC_IsEnabled+0x18>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <LL_ADC_IsEnabled+0x1a>
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <LL_ADC_REG_StartConversion+0x24>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	f043 0204 	orr.w	r2, r3, #4
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	7fffffc0 	.word	0x7fffffc0

08001bac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d101      	bne.n	8001bc4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d101      	bne.n	8001bea <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e138      	b.n	8001e84 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff fb07 	bl	8001234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff3f 	bl	8001abc <LL_ADC_IsDeepPowerDownEnabled>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d004      	beq.n	8001c4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff25 	bl	8001a98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff5a 	bl	8001b0c <LL_ADC_IsInternalRegulatorEnabled>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d114      	bne.n	8001c88 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff3e 	bl	8001ae4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c68:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <HAL_ADC_Init+0x294>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	4a88      	ldr	r2, [pc, #544]	; (8001e90 <HAL_ADC_Init+0x298>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	3301      	adds	r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c7a:	e002      	b.n	8001c82 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f9      	bne.n	8001c7c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff3d 	bl	8001b0c <LL_ADC_IsInternalRegulatorEnabled>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10d      	bne.n	8001cb4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9c:	f043 0210 	orr.w	r2, r3, #16
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	f043 0201 	orr.w	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff77 	bl	8001bac <LL_ADC_REG_IsConversionOngoing>
 8001cbe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f040 80d2 	bne.w	8001e72 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f040 80ce 	bne.w	8001e72 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cde:	f043 0202 	orr.w	r2, r3, #2
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff36 	bl	8001b5c <LL_ADC_IsEnabled>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d110      	bne.n	8001d18 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cf6:	4867      	ldr	r0, [pc, #412]	; (8001e94 <HAL_ADC_Init+0x29c>)
 8001cf8:	f7ff ff30 	bl	8001b5c <LL_ADC_IsEnabled>
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	4866      	ldr	r0, [pc, #408]	; (8001e98 <HAL_ADC_Init+0x2a0>)
 8001d00:	f7ff ff2c 	bl	8001b5c <LL_ADC_IsEnabled>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4323      	orrs	r3, r4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4619      	mov	r1, r3
 8001d12:	4862      	ldr	r0, [pc, #392]	; (8001e9c <HAL_ADC_Init+0x2a4>)
 8001d14:	f7ff fd8e 	bl	8001834 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	7d5b      	ldrb	r3, [r3, #21]
 8001d1c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d22:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001d28:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7f1b      	ldrb	r3, [r3, #28]
 8001d2e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7f1b      	ldrb	r3, [r3, #28]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d106      	bne.n	8001d4a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	045b      	lsls	r3, r3, #17
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <HAL_ADC_Init+0x2a8>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	69b9      	ldr	r1, [r7, #24]
 8001d76:	430b      	orrs	r3, r1
 8001d78:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff14 	bl	8001bac <LL_ADC_REG_IsConversionOngoing>
 8001d84:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff21 	bl	8001bd2 <LL_ADC_INJ_IsConversionOngoing>
 8001d90:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d14a      	bne.n	8001e2e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d147      	bne.n	8001e2e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7d1b      	ldrb	r3, [r3, #20]
 8001da2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <HAL_ADC_Init+0x2ac>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d11b      	bne.n	8001e02 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <HAL_ADC_Init+0x2b0>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dde:	3a01      	subs	r2, #1
 8001de0:	0411      	lsls	r1, r2, #16
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001de6:	4311      	orrs	r1, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dec:	4311      	orrs	r1, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001df2:	430a      	orrs	r2, r1
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	611a      	str	r2, [r3, #16]
 8001e00:	e007      	b.n	8001e12 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fd41 	bl	80028b0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d10c      	bne.n	8001e50 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	f023 010f 	bic.w	r1, r3, #15
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	1e5a      	subs	r2, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e4e:	e007      	b.n	8001e60 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 020f 	bic.w	r2, r2, #15
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e64:	f023 0303 	bic.w	r3, r3, #3
 8001e68:	f043 0201 	orr.w	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
 8001e70:	e007      	b.n	8001e82 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	f043 0210 	orr.w	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e82:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3724      	adds	r7, #36	; 0x24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd90      	pop	{r4, r7, pc}
 8001e8c:	24000000 	.word	0x24000000
 8001e90:	053e2d63 	.word	0x053e2d63
 8001e94:	40022000 	.word	0x40022000
 8001e98:	40022100 	.word	0x40022100
 8001e9c:	40022300 	.word	0x40022300
 8001ea0:	fff0c003 	.word	0xfff0c003
 8001ea4:	ffffbffc 	.word	0xffffbffc
 8001ea8:	fc00f81e 	.word	0xfc00f81e

08001eac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eb4:	4856      	ldr	r0, [pc, #344]	; (8002010 <HAL_ADC_Start+0x164>)
 8001eb6:	f7ff fdd3 	bl	8001a60 <LL_ADC_GetMultimode>
 8001eba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fe73 	bl	8001bac <LL_ADC_REG_IsConversionOngoing>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f040 809a 	bne.w	8002002 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_Start+0x30>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e095      	b.n	8002008 <HAL_ADC_Start+0x15c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fc67 	bl	80027b8 <ADC_Enable>
 8001eea:	4603      	mov	r3, r0
 8001eec:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 8081 	bne.w	8001ff8 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001efa:	4b46      	ldr	r3, [pc, #280]	; (8002014 <HAL_ADC_Start+0x168>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a43      	ldr	r2, [pc, #268]	; (8002018 <HAL_ADC_Start+0x16c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d002      	beq.n	8001f16 <HAL_ADC_Start+0x6a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	e000      	b.n	8001f18 <HAL_ADC_Start+0x6c>
 8001f16:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_ADC_Start+0x170>)
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d002      	beq.n	8001f26 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d105      	bne.n	8001f32 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f3e:	d106      	bne.n	8001f4e <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	f023 0206 	bic.w	r2, r3, #6
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f4c:	e002      	b.n	8001f54 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	221c      	movs	r2, #28
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a2b      	ldr	r2, [pc, #172]	; (8002018 <HAL_ADC_Start+0x16c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d002      	beq.n	8001f74 <HAL_ADC_Start+0xc8>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	e000      	b.n	8001f76 <HAL_ADC_Start+0xca>
 8001f74:	4b29      	ldr	r3, [pc, #164]	; (800201c <HAL_ADC_Start+0x170>)
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d008      	beq.n	8001f90 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d002      	beq.n	8001f90 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b09      	cmp	r3, #9
 8001f8e:	d114      	bne.n	8001fba <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fde6 	bl	8001b84 <LL_ADC_REG_StartConversion>
 8001fb8:	e025      	b.n	8002006 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a13      	ldr	r2, [pc, #76]	; (8002018 <HAL_ADC_Start+0x16c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d002      	beq.n	8001fd6 <HAL_ADC_Start+0x12a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	e000      	b.n	8001fd8 <HAL_ADC_Start+0x12c>
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_ADC_Start+0x170>)
 8001fd8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00f      	beq.n	8002006 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ff6:	e006      	b.n	8002006 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002000:	e001      	b.n	8002006 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002002:	2302      	movs	r3, #2
 8002004:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002006:	7dfb      	ldrb	r3, [r7, #23]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40022300 	.word	0x40022300
 8002014:	fffff0fe 	.word	0xfffff0fe
 8002018:	40022100 	.word	0x40022100
 800201c:	40022000 	.word	0x40022000

08002020 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800202a:	4866      	ldr	r0, [pc, #408]	; (80021c4 <HAL_ADC_PollForConversion+0x1a4>)
 800202c:	f7ff fd18 	bl	8001a60 <LL_ADC_GetMultimode>
 8002030:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b08      	cmp	r3, #8
 8002038:	d102      	bne.n	8002040 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800203a:	2308      	movs	r3, #8
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	e02a      	b.n	8002096 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d002      	beq.n	8002052 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b09      	cmp	r3, #9
 8002050:	d111      	bne.n	8002076 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0a4      	b.n	80021ba <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002070:	2304      	movs	r3, #4
 8002072:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002074:	e00f      	b.n	8002096 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002076:	4853      	ldr	r0, [pc, #332]	; (80021c4 <HAL_ADC_PollForConversion+0x1a4>)
 8002078:	f7ff fd00 	bl	8001a7c <LL_ADC_GetMultiDMATransfer>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	f043 0220 	orr.w	r2, r3, #32
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e093      	b.n	80021ba <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002092:	2304      	movs	r3, #4
 8002094:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002096:	f7ff fb9d 	bl	80017d4 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800209c:	e021      	b.n	80020e2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a4:	d01d      	beq.n	80020e2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80020a6:	f7ff fb95 	bl	80017d4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d302      	bcc.n	80020bc <HAL_ADC_PollForConversion+0x9c>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d112      	bne.n	80020e2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10b      	bne.n	80020e2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	f043 0204 	orr.w	r2, r3, #4
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e06b      	b.n	80021ba <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0d6      	beq.n	800209e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fc1f 	bl	8001944 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01c      	beq.n	8002146 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7d5b      	ldrb	r3, [r3, #21]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d118      	bne.n	8002146 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b08      	cmp	r3, #8
 8002120:	d111      	bne.n	8002146 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d105      	bne.n	8002146 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	f043 0201 	orr.w	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_ADC_PollForConversion+0x1a8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d002      	beq.n	8002156 <HAL_ADC_PollForConversion+0x136>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	e000      	b.n	8002158 <HAL_ADC_PollForConversion+0x138>
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_ADC_PollForConversion+0x1ac>)
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	4293      	cmp	r3, r2
 800215e:	d008      	beq.n	8002172 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b05      	cmp	r3, #5
 800216a:	d002      	beq.n	8002172 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b09      	cmp	r3, #9
 8002170:	d104      	bne.n	800217c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	e00c      	b.n	8002196 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <HAL_ADC_PollForConversion+0x1a8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d002      	beq.n	800218c <HAL_ADC_PollForConversion+0x16c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	e000      	b.n	800218e <HAL_ADC_PollForConversion+0x16e>
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_ADC_PollForConversion+0x1ac>)
 800218e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d104      	bne.n	80021a6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2208      	movs	r2, #8
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e008      	b.n	80021b8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d103      	bne.n	80021b8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	220c      	movs	r2, #12
 80021b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40022300 	.word	0x40022300
 80021c8:	40022100 	.word	0x40022100
 80021cc:	40022000 	.word	0x40022000

080021d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b0a1      	sub	sp, #132	; 0x84
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a9a      	ldr	r2, [pc, #616]	; (8002470 <HAL_ADC_ConfigChannel+0x284>)
 8002206:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x2a>
 8002212:	2302      	movs	r3, #2
 8002214:	e2bc      	b.n	8002790 <HAL_ADC_ConfigChannel+0x5a4>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fcc2 	bl	8001bac <LL_ADC_REG_IsConversionOngoing>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 82a1 	bne.w	8002772 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002238:	2b00      	cmp	r3, #0
 800223a:	d108      	bne.n	800224e <HAL_ADC_ConfigChannel+0x62>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0e9b      	lsrs	r3, r3, #26
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	2201      	movs	r2, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	e016      	b.n	800227c <HAL_ADC_ConfigChannel+0x90>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800225c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800225e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002266:	2320      	movs	r3, #32
 8002268:	e003      	b.n	8002272 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800226a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2201      	movs	r2, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	69d1      	ldr	r1, [r2, #28]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	430b      	orrs	r3, r1
 8002288:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	f7ff fb67 	bl	800196a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fc83 	bl	8001bac <LL_ADC_REG_IsConversionOngoing>
 80022a6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fc90 	bl	8001bd2 <LL_ADC_INJ_IsConversionOngoing>
 80022b2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 80a0 	bne.w	80023fc <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 809c 	bne.w	80023fc <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6819      	ldr	r1, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	461a      	mov	r2, r3
 80022d2:	f7ff fb76 	bl	80019c2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10b      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x110>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	e00a      	b.n	8002312 <HAL_ADC_ConfigChannel+0x126>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d027      	beq.n	800236c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6919      	ldr	r1, [r3, #16]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800232a:	f7ff fab7 	bl	800189c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6919      	ldr	r1, [r3, #16]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	7e5b      	ldrb	r3, [r3, #25]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d102      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x158>
 800233e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002342:	e000      	b.n	8002346 <HAL_ADC_ConfigChannel+0x15a>
 8002344:	2300      	movs	r3, #0
 8002346:	461a      	mov	r2, r3
 8002348:	f7ff fae1 	bl	800190e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6919      	ldr	r1, [r3, #16]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	7e1b      	ldrb	r3, [r3, #24]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d102      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x176>
 800235c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002360:	e000      	b.n	8002364 <HAL_ADC_ConfigChannel+0x178>
 8002362:	2300      	movs	r3, #0
 8002364:	461a      	mov	r2, r3
 8002366:	f7ff fab9 	bl	80018dc <LL_ADC_SetDataRightShift>
 800236a:	e047      	b.n	80023fc <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	069b      	lsls	r3, r3, #26
 800237c:	429a      	cmp	r2, r3
 800237e:	d107      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800238e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002396:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	069b      	lsls	r3, r3, #26
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023b2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d107      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023d6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	069b      	lsls	r3, r3, #26
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d107      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023fa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fbab 	bl	8001b5c <LL_ADC_IsEnabled>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	f040 81bb 	bne.w	8002784 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	461a      	mov	r2, r3
 800241c:	f7ff fafc 	bl	8001a18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a12      	ldr	r2, [pc, #72]	; (8002470 <HAL_ADC_ConfigChannel+0x284>)
 8002426:	4293      	cmp	r3, r2
 8002428:	f040 8130 	bne.w	800268c <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10b      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x268>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0e9b      	lsrs	r3, r3, #26
 8002442:	3301      	adds	r3, #1
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2b09      	cmp	r3, #9
 800244a:	bf94      	ite	ls
 800244c:	2301      	movls	r3, #1
 800244e:	2300      	movhi	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	e01b      	b.n	800248c <HAL_ADC_ConfigChannel+0x2a0>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002464:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d103      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e005      	b.n	800247c <HAL_ADC_ConfigChannel+0x290>
 8002470:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3301      	adds	r3, #1
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	2b09      	cmp	r3, #9
 8002484:	bf94      	ite	ls
 8002486:	2301      	movls	r3, #1
 8002488:	2300      	movhi	r3, #0
 800248a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800248c:	2b00      	cmp	r3, #0
 800248e:	d079      	beq.n	8002584 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x2c0>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	0e9b      	lsrs	r3, r3, #26
 80024a2:	3301      	adds	r3, #1
 80024a4:	069b      	lsls	r3, r3, #26
 80024a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024aa:	e015      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x2ec>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80024ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80024be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80024c4:	2320      	movs	r3, #32
 80024c6:	e003      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80024c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	069b      	lsls	r3, r3, #26
 80024d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x30c>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	3301      	adds	r3, #1
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2101      	movs	r1, #1
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	e017      	b.n	8002528 <HAL_ADC_ConfigChannel+0x33c>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002508:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800250a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e003      	b.n	800251c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	3301      	adds	r3, #1
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	ea42 0103 	orr.w	r1, r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <HAL_ADC_ConfigChannel+0x362>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0e9b      	lsrs	r3, r3, #26
 800253e:	3301      	adds	r3, #1
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	051b      	lsls	r3, r3, #20
 800254c:	e018      	b.n	8002580 <HAL_ADC_ConfigChannel+0x394>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e003      	b.n	8002572 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002580:	430b      	orrs	r3, r1
 8002582:	e07e      	b.n	8002682 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x3b4>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	3301      	adds	r3, #1
 8002598:	069b      	lsls	r3, r3, #26
 800259a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259e:	e015      	b.n	80025cc <HAL_ADC_ConfigChannel+0x3e0>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e003      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80025bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	069b      	lsls	r3, r3, #26
 80025c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x400>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	3301      	adds	r3, #1
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	e017      	b.n	800261c <HAL_ADC_ConfigChannel+0x430>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	61bb      	str	r3, [r7, #24]
  return result;
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002604:	2320      	movs	r3, #32
 8002606:	e003      	b.n	8002610 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	3301      	adds	r3, #1
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	ea42 0103 	orr.w	r1, r2, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10d      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x45c>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0e9b      	lsrs	r3, r3, #26
 8002632:	3301      	adds	r3, #1
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	3b1e      	subs	r3, #30
 8002640:	051b      	lsls	r3, r3, #20
 8002642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002646:	e01b      	b.n	8002680 <HAL_ADC_ConfigChannel+0x494>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	60fb      	str	r3, [r7, #12]
  return result;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002660:	2320      	movs	r3, #32
 8002662:	e003      	b.n	800266c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f003 021f 	and.w	r2, r3, #31
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	3b1e      	subs	r3, #30
 800267a:	051b      	lsls	r3, r3, #20
 800267c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002680:	430b      	orrs	r3, r1
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	6892      	ldr	r2, [r2, #8]
 8002686:	4619      	mov	r1, r3
 8002688:	f7ff f99b 	bl	80019c2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	da77      	bge.n	8002784 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002694:	4840      	ldr	r0, [pc, #256]	; (8002798 <HAL_ADC_ConfigChannel+0x5ac>)
 8002696:	f7ff f8f3 	bl	8001880 <LL_ADC_GetCommonPathInternalCh>
 800269a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800269c:	483f      	ldr	r0, [pc, #252]	; (800279c <HAL_ADC_ConfigChannel+0x5b0>)
 800269e:	f7ff fa5d 	bl	8001b5c <LL_ADC_IsEnabled>
 80026a2:	4604      	mov	r4, r0
 80026a4:	483e      	ldr	r0, [pc, #248]	; (80027a0 <HAL_ADC_ConfigChannel+0x5b4>)
 80026a6:	f7ff fa59 	bl	8001b5c <LL_ADC_IsEnabled>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4323      	orrs	r3, r4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d155      	bne.n	800275e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a3b      	ldr	r2, [pc, #236]	; (80027a4 <HAL_ADC_ConfigChannel+0x5b8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d122      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x516>
 80026bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d11d      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a35      	ldr	r2, [pc, #212]	; (80027a0 <HAL_ADC_ConfigChannel+0x5b4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d159      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026d6:	4619      	mov	r1, r3
 80026d8:	482f      	ldr	r0, [pc, #188]	; (8002798 <HAL_ADC_ConfigChannel+0x5ac>)
 80026da:	f7ff f8be 	bl	800185a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026de:	4b32      	ldr	r3, [pc, #200]	; (80027a8 <HAL_ADC_ConfigChannel+0x5bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	099b      	lsrs	r3, r3, #6
 80026e4:	4a31      	ldr	r2, [pc, #196]	; (80027ac <HAL_ADC_ConfigChannel+0x5c0>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	3301      	adds	r3, #1
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026f2:	e002      	b.n	80026fa <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f9      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002700:	e040      	b.n	8002784 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2a      	ldr	r2, [pc, #168]	; (80027b0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d111      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x544>
 800270c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10c      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a21      	ldr	r2, [pc, #132]	; (80027a0 <HAL_ADC_ConfigChannel+0x5b4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d131      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002726:	4619      	mov	r1, r3
 8002728:	481b      	ldr	r0, [pc, #108]	; (8002798 <HAL_ADC_ConfigChannel+0x5ac>)
 800272a:	f7ff f896 	bl	800185a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800272e:	e029      	b.n	8002784 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d124      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x598>
 800273a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d11f      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <HAL_ADC_ConfigChannel+0x5b4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d11a      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800274e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002754:	4619      	mov	r1, r3
 8002756:	4810      	ldr	r0, [pc, #64]	; (8002798 <HAL_ADC_ConfigChannel+0x5ac>)
 8002758:	f7ff f87f 	bl	800185a <LL_ADC_SetCommonPathInternalCh>
 800275c:	e012      	b.n	8002784 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	f043 0220 	orr.w	r2, r3, #32
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002770:	e008      	b.n	8002784 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f043 0220 	orr.w	r2, r3, #32
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800278c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002790:	4618      	mov	r0, r3
 8002792:	3784      	adds	r7, #132	; 0x84
 8002794:	46bd      	mov	sp, r7
 8002796:	bd90      	pop	{r4, r7, pc}
 8002798:	40022300 	.word	0x40022300
 800279c:	40022000 	.word	0x40022000
 80027a0:	40022100 	.word	0x40022100
 80027a4:	cb840000 	.word	0xcb840000
 80027a8:	24000000 	.word	0x24000000
 80027ac:	053e2d63 	.word	0x053e2d63
 80027b0:	bac04000 	.word	0xbac04000
 80027b4:	cfb80000 	.word	0xcfb80000

080027b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff f9c9 	bl	8001b5c <LL_ADC_IsEnabled>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d161      	bne.n	8002894 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <ADC_Enable+0xe8>)
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	f043 0210 	orr.w	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ee:	f043 0201 	orr.w	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e04d      	b.n	8002896 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff f998 	bl	8001b34 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002804:	f7fe ffe6 	bl	80017d4 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800280a:	4826      	ldr	r0, [pc, #152]	; (80028a4 <ADC_Enable+0xec>)
 800280c:	f7ff f928 	bl	8001a60 <LL_ADC_GetMultimode>
 8002810:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <ADC_Enable+0xf0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d002      	beq.n	8002822 <ADC_Enable+0x6a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	e000      	b.n	8002824 <ADC_Enable+0x6c>
 8002822:	4b22      	ldr	r3, [pc, #136]	; (80028ac <ADC_Enable+0xf4>)
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	4293      	cmp	r3, r2
 800282a:	d02c      	beq.n	8002886 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d130      	bne.n	8002894 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002832:	e028      	b.n	8002886 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff f98f 	bl	8001b5c <LL_ADC_IsEnabled>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d104      	bne.n	800284e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff f973 	bl	8001b34 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800284e:	f7fe ffc1 	bl	80017d4 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d914      	bls.n	8002886 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d00d      	beq.n	8002886 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f043 0210 	orr.w	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e007      	b.n	8002896 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d1cf      	bne.n	8002834 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	8000003f 	.word	0x8000003f
 80028a4:	40022300 	.word	0x40022300
 80028a8:	40022100 	.word	0x40022100
 80028ac:	40022000 	.word	0x40022000

080028b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80028b8:	4b60      	ldr	r3, [pc, #384]	; (8002a3c <ADC_ConfigureBoostMode+0x18c>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01c      	beq.n	80028fe <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80028c4:	f001 fbee 	bl	80040a4 <HAL_RCC_GetHCLKFreq>
 80028c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028d2:	d010      	beq.n	80028f6 <ADC_ConfigureBoostMode+0x46>
 80028d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028d8:	d873      	bhi.n	80029c2 <ADC_ConfigureBoostMode+0x112>
 80028da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028de:	d002      	beq.n	80028e6 <ADC_ConfigureBoostMode+0x36>
 80028e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028e4:	d16d      	bne.n	80029c2 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	0c1b      	lsrs	r3, r3, #16
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f2:	60fb      	str	r3, [r7, #12]
        break;
 80028f4:	e068      	b.n	80029c8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	60fb      	str	r3, [r7, #12]
        break;
 80028fc:	e064      	b.n	80029c8 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80028fe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	f002 fde7 	bl	80054d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800290a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002914:	d051      	beq.n	80029ba <ADC_ConfigureBoostMode+0x10a>
 8002916:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800291a:	d854      	bhi.n	80029c6 <ADC_ConfigureBoostMode+0x116>
 800291c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002920:	d047      	beq.n	80029b2 <ADC_ConfigureBoostMode+0x102>
 8002922:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002926:	d84e      	bhi.n	80029c6 <ADC_ConfigureBoostMode+0x116>
 8002928:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800292c:	d03d      	beq.n	80029aa <ADC_ConfigureBoostMode+0xfa>
 800292e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002932:	d848      	bhi.n	80029c6 <ADC_ConfigureBoostMode+0x116>
 8002934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002938:	d033      	beq.n	80029a2 <ADC_ConfigureBoostMode+0xf2>
 800293a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800293e:	d842      	bhi.n	80029c6 <ADC_ConfigureBoostMode+0x116>
 8002940:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002944:	d029      	beq.n	800299a <ADC_ConfigureBoostMode+0xea>
 8002946:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800294a:	d83c      	bhi.n	80029c6 <ADC_ConfigureBoostMode+0x116>
 800294c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002950:	d01a      	beq.n	8002988 <ADC_ConfigureBoostMode+0xd8>
 8002952:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002956:	d836      	bhi.n	80029c6 <ADC_ConfigureBoostMode+0x116>
 8002958:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800295c:	d014      	beq.n	8002988 <ADC_ConfigureBoostMode+0xd8>
 800295e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002962:	d830      	bhi.n	80029c6 <ADC_ConfigureBoostMode+0x116>
 8002964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002968:	d00e      	beq.n	8002988 <ADC_ConfigureBoostMode+0xd8>
 800296a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800296e:	d82a      	bhi.n	80029c6 <ADC_ConfigureBoostMode+0x116>
 8002970:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002974:	d008      	beq.n	8002988 <ADC_ConfigureBoostMode+0xd8>
 8002976:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800297a:	d824      	bhi.n	80029c6 <ADC_ConfigureBoostMode+0x116>
 800297c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002980:	d002      	beq.n	8002988 <ADC_ConfigureBoostMode+0xd8>
 8002982:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002986:	d11e      	bne.n	80029c6 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0c9b      	lsrs	r3, r3, #18
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	60fb      	str	r3, [r7, #12]
        break;
 8002998:	e016      	b.n	80029c8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	60fb      	str	r3, [r7, #12]
        break;
 80029a0:	e012      	b.n	80029c8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	60fb      	str	r3, [r7, #12]
        break;
 80029a8:	e00e      	b.n	80029c8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	60fb      	str	r3, [r7, #12]
        break;
 80029b0:	e00a      	b.n	80029c8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	09db      	lsrs	r3, r3, #7
 80029b6:	60fb      	str	r3, [r7, #12]
        break;
 80029b8:	e006      	b.n	80029c8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	60fb      	str	r3, [r7, #12]
        break;
 80029c0:	e002      	b.n	80029c8 <ADC_ConfigureBoostMode+0x118>
        break;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80029c6:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <ADC_ConfigureBoostMode+0x190>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d808      	bhi.n	80029e8 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029e4:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80029e6:	e025      	b.n	8002a34 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <ADC_ConfigureBoostMode+0x194>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d80a      	bhi.n	8002a06 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	e016      	b.n	8002a34 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4a0f      	ldr	r2, [pc, #60]	; (8002a48 <ADC_ConfigureBoostMode+0x198>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d80a      	bhi.n	8002a24 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a20:	609a      	str	r2, [r3, #8]
}
 8002a22:	e007      	b.n	8002a34 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002a32:	609a      	str	r2, [r3, #8]
}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40022300 	.word	0x40022300
 8002a40:	005f5e10 	.word	0x005f5e10
 8002a44:	00bebc20 	.word	0x00bebc20
 8002a48:	017d7840 	.word	0x017d7840

08002a4c <LL_ADC_IsEnabled>:
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <LL_ADC_IsEnabled+0x18>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <LL_ADC_IsEnabled+0x1a>
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d101      	bne.n	8002a8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b09f      	sub	sp, #124	; 0x7c
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e080      	b.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a3d      	ldr	r2, [pc, #244]	; (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d102      	bne.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ad0:	4b3c      	ldr	r3, [pc, #240]	; (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	e001      	b.n	8002ada <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10b      	bne.n	8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e05f      	b.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ffb9 	bl	8002a72 <LL_ADC_REG_IsConversionOngoing>
 8002b00:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ffb3 	bl	8002a72 <LL_ADC_REG_IsConversionOngoing>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d141      	bne.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d13e      	bne.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b18:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002b1a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d020      	beq.n	8002b66 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b34:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b36:	4822      	ldr	r0, [pc, #136]	; (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002b38:	f7ff ff88 	bl	8002a4c <LL_ADC_IsEnabled>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	4821      	ldr	r0, [pc, #132]	; (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002b40:	f7ff ff84 	bl	8002a4c <LL_ADC_IsEnabled>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4323      	orrs	r3, r4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d12e      	bne.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	6811      	ldr	r1, [r2, #0]
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	6892      	ldr	r2, [r2, #8]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b62:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b64:	e021      	b.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b70:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b72:	4813      	ldr	r0, [pc, #76]	; (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002b74:	f7ff ff6a 	bl	8002a4c <LL_ADC_IsEnabled>
 8002b78:	4604      	mov	r4, r0
 8002b7a:	4812      	ldr	r0, [pc, #72]	; (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002b7c:	f7ff ff66 	bl	8002a4c <LL_ADC_IsEnabled>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4323      	orrs	r3, r4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d110      	bne.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b92:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b94:	e009      	b.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	f043 0220 	orr.w	r2, r3, #32
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ba8:	e000      	b.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002baa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bb4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	377c      	adds	r7, #124	; 0x7c
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd90      	pop	{r4, r7, pc}
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	40022100 	.word	0x40022100
 8002bc8:	40022300 	.word	0x40022300
 8002bcc:	fffff0e0 	.word	0xfffff0e0

08002bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <__NVIC_SetPriorityGrouping+0x40>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bec:	4013      	ands	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfe:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <__NVIC_SetPriorityGrouping+0x40>)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	60d3      	str	r3, [r2, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00
 8002c14:	05fa0000 	.word	0x05fa0000

08002c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <__NVIC_GetPriorityGrouping+0x18>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	f003 0307 	and.w	r3, r3, #7
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	db0a      	blt.n	8002c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	490c      	ldr	r1, [pc, #48]	; (8002c80 <__NVIC_SetPriority+0x4c>)
 8002c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	440b      	add	r3, r1
 8002c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c5c:	e00a      	b.n	8002c74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4908      	ldr	r1, [pc, #32]	; (8002c84 <__NVIC_SetPriority+0x50>)
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	440b      	add	r3, r1
 8002c72:	761a      	strb	r2, [r3, #24]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000e100 	.word	0xe000e100
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	bf28      	it	cs
 8002ca6:	2304      	movcs	r3, #4
 8002ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d902      	bls.n	8002cb8 <NVIC_EncodePriority+0x30>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3b03      	subs	r3, #3
 8002cb6:	e000      	b.n	8002cba <NVIC_EncodePriority+0x32>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	401a      	ands	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	4313      	orrs	r3, r2
         );
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	; 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d00:	d301      	bcc.n	8002d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d02:	2301      	movs	r3, #1
 8002d04:	e00f      	b.n	8002d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <SysTick_Config+0x40>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0e:	210f      	movs	r1, #15
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d14:	f7ff ff8e 	bl	8002c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <SysTick_Config+0x40>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <SysTick_Config+0x40>)
 8002d20:	2207      	movs	r2, #7
 8002d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	e000e010 	.word	0xe000e010

08002d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ff47 	bl	8002bd0 <__NVIC_SetPriorityGrouping>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d58:	f7ff ff5e 	bl	8002c18 <__NVIC_GetPriorityGrouping>
 8002d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7ff ff90 	bl	8002c88 <NVIC_EncodePriority>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff5f 	bl	8002c34 <__NVIC_SetPriority>
}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ffb2 	bl	8002cf0 <SysTick_Config>
 8002d8c:	4603      	mov	r3, r0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002da6:	4b89      	ldr	r3, [pc, #548]	; (8002fcc <HAL_GPIO_Init+0x234>)
 8002da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002daa:	e194      	b.n	80030d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	2101      	movs	r1, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8186 	beq.w	80030d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d005      	beq.n	8002ddc <HAL_GPIO_Init+0x44>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d130      	bne.n	8002e3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	2203      	movs	r2, #3
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e12:	2201      	movs	r2, #1
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	f003 0201 	and.w	r2, r3, #1
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d017      	beq.n	8002e7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	2203      	movs	r2, #3
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d123      	bne.n	8002ece <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	08da      	lsrs	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3208      	adds	r2, #8
 8002e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	08da      	lsrs	r2, r3, #3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3208      	adds	r2, #8
 8002ec8:	69b9      	ldr	r1, [r7, #24]
 8002eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	2203      	movs	r2, #3
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0203 	and.w	r2, r3, #3
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80e0 	beq.w	80030d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f10:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_GPIO_Init+0x238>)
 8002f12:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002f16:	4a2e      	ldr	r2, [pc, #184]	; (8002fd0 <HAL_GPIO_Init+0x238>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002f20:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_GPIO_Init+0x238>)
 8002f22:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f2e:	4a29      	ldr	r2, [pc, #164]	; (8002fd4 <HAL_GPIO_Init+0x23c>)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	089b      	lsrs	r3, r3, #2
 8002f34:	3302      	adds	r3, #2
 8002f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	220f      	movs	r2, #15
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <HAL_GPIO_Init+0x240>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d052      	beq.n	8003000 <HAL_GPIO_Init+0x268>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <HAL_GPIO_Init+0x244>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d031      	beq.n	8002fc6 <HAL_GPIO_Init+0x22e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <HAL_GPIO_Init+0x248>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d02b      	beq.n	8002fc2 <HAL_GPIO_Init+0x22a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <HAL_GPIO_Init+0x24c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d025      	beq.n	8002fbe <HAL_GPIO_Init+0x226>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <HAL_GPIO_Init+0x250>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d01f      	beq.n	8002fba <HAL_GPIO_Init+0x222>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <HAL_GPIO_Init+0x254>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d019      	beq.n	8002fb6 <HAL_GPIO_Init+0x21e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <HAL_GPIO_Init+0x258>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_GPIO_Init+0x21a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <HAL_GPIO_Init+0x25c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00d      	beq.n	8002fae <HAL_GPIO_Init+0x216>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_GPIO_Init+0x260>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <HAL_GPIO_Init+0x212>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <HAL_GPIO_Init+0x264>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_GPIO_Init+0x20e>
 8002fa2:	2309      	movs	r3, #9
 8002fa4:	e02d      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fa6:	230a      	movs	r3, #10
 8002fa8:	e02b      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002faa:	2308      	movs	r3, #8
 8002fac:	e029      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fae:	2307      	movs	r3, #7
 8002fb0:	e027      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fb2:	2306      	movs	r3, #6
 8002fb4:	e025      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fb6:	2305      	movs	r3, #5
 8002fb8:	e023      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fba:	2304      	movs	r3, #4
 8002fbc:	e021      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e01f      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e01d      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e01b      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fca:	bf00      	nop
 8002fcc:	58000080 	.word	0x58000080
 8002fd0:	58024400 	.word	0x58024400
 8002fd4:	58000400 	.word	0x58000400
 8002fd8:	58020000 	.word	0x58020000
 8002fdc:	58020400 	.word	0x58020400
 8002fe0:	58020800 	.word	0x58020800
 8002fe4:	58020c00 	.word	0x58020c00
 8002fe8:	58021000 	.word	0x58021000
 8002fec:	58021400 	.word	0x58021400
 8002ff0:	58021800 	.word	0x58021800
 8002ff4:	58021c00 	.word	0x58021c00
 8002ff8:	58022000 	.word	0x58022000
 8002ffc:	58022400 	.word	0x58022400
 8003000:	2300      	movs	r3, #0
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	f002 0203 	and.w	r2, r2, #3
 8003008:	0092      	lsls	r2, r2, #2
 800300a:	4093      	lsls	r3, r2
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003012:	4938      	ldr	r1, [pc, #224]	; (80030f4 <HAL_GPIO_Init+0x35c>)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	3302      	adds	r3, #2
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	3301      	adds	r3, #1
 80030d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f47f ae63 	bne.w	8002dac <HAL_GPIO_Init+0x14>
  }
}
 80030e6:	bf00      	nop
 80030e8:	bf00      	nop
 80030ea:	3724      	adds	r7, #36	; 0x24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	58000400 	.word	0x58000400

080030f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
 8003104:	4613      	mov	r3, r2
 8003106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003108:	787b      	ldrb	r3, [r7, #1]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800310e:	887a      	ldrh	r2, [r7, #2]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003114:	e003      	b.n	800311e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003116:	887b      	ldrh	r3, [r7, #2]
 8003118:	041a      	lsls	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	619a      	str	r2, [r3, #24]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003134:	4b29      	ldr	r3, [pc, #164]	; (80031dc <HAL_PWREx_ConfigSupply+0xb0>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	2b06      	cmp	r3, #6
 800313e:	d00a      	beq.n	8003156 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003140:	4b26      	ldr	r3, [pc, #152]	; (80031dc <HAL_PWREx_ConfigSupply+0xb0>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	d001      	beq.n	8003152 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e040      	b.n	80031d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e03e      	b.n	80031d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003156:	4b21      	ldr	r3, [pc, #132]	; (80031dc <HAL_PWREx_ConfigSupply+0xb0>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800315e:	491f      	ldr	r1, [pc, #124]	; (80031dc <HAL_PWREx_ConfigSupply+0xb0>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4313      	orrs	r3, r2
 8003164:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003166:	f7fe fb35 	bl	80017d4 <HAL_GetTick>
 800316a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800316c:	e009      	b.n	8003182 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800316e:	f7fe fb31 	bl	80017d4 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800317c:	d901      	bls.n	8003182 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e028      	b.n	80031d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003182:	4b16      	ldr	r3, [pc, #88]	; (80031dc <HAL_PWREx_ConfigSupply+0xb0>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800318a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318e:	d1ee      	bne.n	800316e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b1e      	cmp	r3, #30
 8003194:	d008      	beq.n	80031a8 <HAL_PWREx_ConfigSupply+0x7c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b2e      	cmp	r3, #46	; 0x2e
 800319a:	d005      	beq.n	80031a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b1d      	cmp	r3, #29
 80031a0:	d002      	beq.n	80031a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b2d      	cmp	r3, #45	; 0x2d
 80031a6:	d114      	bne.n	80031d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80031a8:	f7fe fb14 	bl	80017d4 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031ae:	e009      	b.n	80031c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031b0:	f7fe fb10 	bl	80017d4 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031be:	d901      	bls.n	80031c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e007      	b.n	80031d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_PWREx_ConfigSupply+0xb0>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d0:	d1ee      	bne.n	80031b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	58024800 	.word	0x58024800

080031e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08c      	sub	sp, #48	; 0x30
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d102      	bne.n	80031f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f000 bc1f 	b.w	8003a32 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80b3 	beq.w	8003368 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003202:	4b95      	ldr	r3, [pc, #596]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800320c:	4b92      	ldr	r3, [pc, #584]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	2b10      	cmp	r3, #16
 8003216:	d007      	beq.n	8003228 <HAL_RCC_OscConfig+0x48>
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321a:	2b18      	cmp	r3, #24
 800321c:	d112      	bne.n	8003244 <HAL_RCC_OscConfig+0x64>
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d10d      	bne.n	8003244 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	4b8b      	ldr	r3, [pc, #556]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8098 	beq.w	8003366 <HAL_RCC_OscConfig+0x186>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 8093 	bne.w	8003366 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e3f6      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324c:	d106      	bne.n	800325c <HAL_RCC_OscConfig+0x7c>
 800324e:	4b82      	ldr	r3, [pc, #520]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a81      	ldr	r2, [pc, #516]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e058      	b.n	800330e <HAL_RCC_OscConfig+0x12e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d112      	bne.n	800328a <HAL_RCC_OscConfig+0xaa>
 8003264:	4b7c      	ldr	r3, [pc, #496]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a7b      	ldr	r2, [pc, #492]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 800326a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b79      	ldr	r3, [pc, #484]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a78      	ldr	r2, [pc, #480]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003276:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a75      	ldr	r2, [pc, #468]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e041      	b.n	800330e <HAL_RCC_OscConfig+0x12e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003292:	d112      	bne.n	80032ba <HAL_RCC_OscConfig+0xda>
 8003294:	4b70      	ldr	r3, [pc, #448]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6f      	ldr	r2, [pc, #444]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 800329a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b6d      	ldr	r3, [pc, #436]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a6c      	ldr	r2, [pc, #432]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	4b6a      	ldr	r3, [pc, #424]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a69      	ldr	r2, [pc, #420]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	e029      	b.n	800330e <HAL_RCC_OscConfig+0x12e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80032c2:	d112      	bne.n	80032ea <HAL_RCC_OscConfig+0x10a>
 80032c4:	4b64      	ldr	r3, [pc, #400]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a63      	ldr	r2, [pc, #396]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b61      	ldr	r3, [pc, #388]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a60      	ldr	r2, [pc, #384]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b5e      	ldr	r3, [pc, #376]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a5d      	ldr	r2, [pc, #372]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	e011      	b.n	800330e <HAL_RCC_OscConfig+0x12e>
 80032ea:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a5a      	ldr	r2, [pc, #360]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	4b58      	ldr	r3, [pc, #352]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a57      	ldr	r2, [pc, #348]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	4b55      	ldr	r3, [pc, #340]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a54      	ldr	r2, [pc, #336]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003308:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800330c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d013      	beq.n	800333e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7fe fa5d 	bl	80017d4 <HAL_GetTick>
 800331a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331e:	f7fe fa59 	bl	80017d4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b64      	cmp	r3, #100	; 0x64
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e380      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003330:	4b49      	ldr	r3, [pc, #292]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x13e>
 800333c:	e014      	b.n	8003368 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fe fa49 	bl	80017d4 <HAL_GetTick>
 8003342:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003346:	f7fe fa45 	bl	80017d4 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b64      	cmp	r3, #100	; 0x64
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e36c      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003358:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f0      	bne.n	8003346 <HAL_RCC_OscConfig+0x166>
 8003364:	e000      	b.n	8003368 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003366:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 808c 	beq.w	800348e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003376:	4b38      	ldr	r3, [pc, #224]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800337e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003380:	4b35      	ldr	r3, [pc, #212]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_RCC_OscConfig+0x1bc>
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	2b18      	cmp	r3, #24
 8003390:	d137      	bne.n	8003402 <HAL_RCC_OscConfig+0x222>
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d132      	bne.n	8003402 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339c:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_OscConfig+0x1d4>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e33e      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033b4:	4b28      	ldr	r3, [pc, #160]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 0219 	bic.w	r2, r3, #25
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4925      	ldr	r1, [pc, #148]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fe fa05 	bl	80017d4 <HAL_GetTick>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ce:	f7fe fa01 	bl	80017d4 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e328      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	4917      	ldr	r1, [pc, #92]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003400:	e045      	b.n	800348e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d028      	beq.n	800345c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 0219 	bic.w	r2, r3, #25
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	4910      	ldr	r1, [pc, #64]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe f9da 	bl	80017d4 <HAL_GetTick>
 8003420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003424:	f7fe f9d6 	bl	80017d4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e2fd      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	061b      	lsls	r3, r3, #24
 8003450:	4901      	ldr	r1, [pc, #4]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
 8003456:	e01a      	b.n	800348e <HAL_RCC_OscConfig+0x2ae>
 8003458:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345c:	4b97      	ldr	r3, [pc, #604]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a96      	ldr	r2, [pc, #600]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe f9b4 	bl	80017d4 <HAL_GetTick>
 800346c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003470:	f7fe f9b0 	bl	80017d4 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e2d7      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003482:	4b8e      	ldr	r3, [pc, #568]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d06a      	beq.n	8003570 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800349a:	4b88      	ldr	r3, [pc, #544]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034a4:	4b85      	ldr	r3, [pc, #532]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d007      	beq.n	80034c0 <HAL_RCC_OscConfig+0x2e0>
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2b18      	cmp	r3, #24
 80034b4:	d11b      	bne.n	80034ee <HAL_RCC_OscConfig+0x30e>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d116      	bne.n	80034ee <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034c0:	4b7e      	ldr	r3, [pc, #504]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_OscConfig+0x2f8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b80      	cmp	r3, #128	; 0x80
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e2ac      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034d8:	4b78      	ldr	r3, [pc, #480]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	061b      	lsls	r3, r3, #24
 80034e6:	4975      	ldr	r1, [pc, #468]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034ec:	e040      	b.n	8003570 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d023      	beq.n	800353e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034f6:	4b71      	ldr	r3, [pc, #452]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a70      	ldr	r2, [pc, #448]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 80034fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fe f967 	bl	80017d4 <HAL_GetTick>
 8003506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800350a:	f7fe f963 	bl	80017d4 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e28a      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800351c:	4b67      	ldr	r3, [pc, #412]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003528:	4b64      	ldr	r3, [pc, #400]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	4961      	ldr	r1, [pc, #388]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 8003538:	4313      	orrs	r3, r2
 800353a:	60cb      	str	r3, [r1, #12]
 800353c:	e018      	b.n	8003570 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800353e:	4b5f      	ldr	r3, [pc, #380]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a5e      	ldr	r2, [pc, #376]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 8003544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7fe f943 	bl	80017d4 <HAL_GetTick>
 800354e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003552:	f7fe f93f 	bl	80017d4 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e266      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003564:	4b55      	ldr	r3, [pc, #340]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1f0      	bne.n	8003552 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d036      	beq.n	80035ea <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d019      	beq.n	80035b8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003584:	4b4d      	ldr	r3, [pc, #308]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 8003586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003588:	4a4c      	ldr	r2, [pc, #304]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fe f920 	bl	80017d4 <HAL_GetTick>
 8003594:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003598:	f7fe f91c 	bl	80017d4 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e243      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035aa:	4b44      	ldr	r3, [pc, #272]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 80035ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x3b8>
 80035b6:	e018      	b.n	80035ea <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b8:	4b40      	ldr	r3, [pc, #256]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 80035ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035bc:	4a3f      	ldr	r2, [pc, #252]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c4:	f7fe f906 	bl	80017d4 <HAL_GetTick>
 80035c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035cc:	f7fe f902 	bl	80017d4 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e229      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035de:	4b37      	ldr	r3, [pc, #220]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 80035e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d036      	beq.n	8003664 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d019      	beq.n	8003632 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035fe:	4b2f      	ldr	r3, [pc, #188]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2e      	ldr	r2, [pc, #184]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 8003604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003608:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800360a:	f7fe f8e3 	bl	80017d4 <HAL_GetTick>
 800360e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003612:	f7fe f8df 	bl	80017d4 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e206      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003624:	4b25      	ldr	r3, [pc, #148]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x432>
 8003630:	e018      	b.n	8003664 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003632:	4b22      	ldr	r3, [pc, #136]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a21      	ldr	r2, [pc, #132]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 8003638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800363c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800363e:	f7fe f8c9 	bl	80017d4 <HAL_GetTick>
 8003642:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003646:	f7fe f8c5 	bl	80017d4 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e1ec      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003658:	4b18      	ldr	r3, [pc, #96]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1f0      	bne.n	8003646 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80af 	beq.w	80037d0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003672:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <HAL_RCC_OscConfig+0x4e0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <HAL_RCC_OscConfig+0x4e0>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800367e:	f7fe f8a9 	bl	80017d4 <HAL_GetTick>
 8003682:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003686:	f7fe f8a5 	bl	80017d4 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b64      	cmp	r3, #100	; 0x64
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1cc      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_OscConfig+0x4e0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d10b      	bne.n	80036c4 <HAL_RCC_OscConfig+0x4e4>
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	4a02      	ldr	r2, [pc, #8]	; (80036bc <HAL_RCC_OscConfig+0x4dc>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6713      	str	r3, [r2, #112]	; 0x70
 80036b8:	e05b      	b.n	8003772 <HAL_RCC_OscConfig+0x592>
 80036ba:	bf00      	nop
 80036bc:	58024400 	.word	0x58024400
 80036c0:	58024800 	.word	0x58024800
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d112      	bne.n	80036f2 <HAL_RCC_OscConfig+0x512>
 80036cc:	4b9d      	ldr	r3, [pc, #628]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	4a9c      	ldr	r2, [pc, #624]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	6713      	str	r3, [r2, #112]	; 0x70
 80036d8:	4b9a      	ldr	r3, [pc, #616]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	4a99      	ldr	r2, [pc, #612]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80036de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e2:	6713      	str	r3, [r2, #112]	; 0x70
 80036e4:	4b97      	ldr	r3, [pc, #604]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e8:	4a96      	ldr	r2, [pc, #600]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80036ea:	f023 0304 	bic.w	r3, r3, #4
 80036ee:	6713      	str	r3, [r2, #112]	; 0x70
 80036f0:	e03f      	b.n	8003772 <HAL_RCC_OscConfig+0x592>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b05      	cmp	r3, #5
 80036f8:	d112      	bne.n	8003720 <HAL_RCC_OscConfig+0x540>
 80036fa:	4b92      	ldr	r3, [pc, #584]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	4a91      	ldr	r2, [pc, #580]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003700:	f043 0304 	orr.w	r3, r3, #4
 8003704:	6713      	str	r3, [r2, #112]	; 0x70
 8003706:	4b8f      	ldr	r3, [pc, #572]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	4a8e      	ldr	r2, [pc, #568]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 800370c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003710:	6713      	str	r3, [r2, #112]	; 0x70
 8003712:	4b8c      	ldr	r3, [pc, #560]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	4a8b      	ldr	r2, [pc, #556]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6713      	str	r3, [r2, #112]	; 0x70
 800371e:	e028      	b.n	8003772 <HAL_RCC_OscConfig+0x592>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b85      	cmp	r3, #133	; 0x85
 8003726:	d112      	bne.n	800374e <HAL_RCC_OscConfig+0x56e>
 8003728:	4b86      	ldr	r3, [pc, #536]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	4a85      	ldr	r2, [pc, #532]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 800372e:	f043 0304 	orr.w	r3, r3, #4
 8003732:	6713      	str	r3, [r2, #112]	; 0x70
 8003734:	4b83      	ldr	r3, [pc, #524]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	4a82      	ldr	r2, [pc, #520]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 800373a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800373e:	6713      	str	r3, [r2, #112]	; 0x70
 8003740:	4b80      	ldr	r3, [pc, #512]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003744:	4a7f      	ldr	r2, [pc, #508]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6713      	str	r3, [r2, #112]	; 0x70
 800374c:	e011      	b.n	8003772 <HAL_RCC_OscConfig+0x592>
 800374e:	4b7d      	ldr	r3, [pc, #500]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a7c      	ldr	r2, [pc, #496]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
 800375a:	4b7a      	ldr	r3, [pc, #488]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	4a79      	ldr	r2, [pc, #484]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003760:	f023 0304 	bic.w	r3, r3, #4
 8003764:	6713      	str	r3, [r2, #112]	; 0x70
 8003766:	4b77      	ldr	r3, [pc, #476]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	4a76      	ldr	r2, [pc, #472]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 800376c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003770:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d015      	beq.n	80037a6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377a:	f7fe f82b 	bl	80017d4 <HAL_GetTick>
 800377e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003780:	e00a      	b.n	8003798 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003782:	f7fe f827 	bl	80017d4 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003790:	4293      	cmp	r3, r2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e14c      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003798:	4b6a      	ldr	r3, [pc, #424]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0ee      	beq.n	8003782 <HAL_RCC_OscConfig+0x5a2>
 80037a4:	e014      	b.n	80037d0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7fe f815 	bl	80017d4 <HAL_GetTick>
 80037aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ae:	f7fe f811 	bl	80017d4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e136      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037c4:	4b5f      	ldr	r3, [pc, #380]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1ee      	bne.n	80037ae <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 812b 	beq.w	8003a30 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80037da:	4b5a      	ldr	r3, [pc, #360]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037e2:	2b18      	cmp	r3, #24
 80037e4:	f000 80bb 	beq.w	800395e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	f040 8095 	bne.w	800391c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f2:	4b54      	ldr	r3, [pc, #336]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a53      	ldr	r2, [pc, #332]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80037f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fd ffe9 	bl	80017d4 <HAL_GetTick>
 8003802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003806:	f7fd ffe5 	bl	80017d4 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e10c      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003818:	4b4a      	ldr	r3, [pc, #296]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f0      	bne.n	8003806 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003824:	4b47      	ldr	r3, [pc, #284]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003828:	4b47      	ldr	r3, [pc, #284]	; (8003948 <HAL_RCC_OscConfig+0x768>)
 800382a:	4013      	ands	r3, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	430a      	orrs	r2, r1
 8003838:	4942      	ldr	r1, [pc, #264]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 800383a:	4313      	orrs	r3, r2
 800383c:	628b      	str	r3, [r1, #40]	; 0x28
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	3b01      	subs	r3, #1
 8003844:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	3b01      	subs	r3, #1
 800384e:	025b      	lsls	r3, r3, #9
 8003850:	b29b      	uxth	r3, r3
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	3b01      	subs	r3, #1
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	3b01      	subs	r3, #1
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800386e:	4935      	ldr	r1, [pc, #212]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003870:	4313      	orrs	r3, r2
 8003872:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003874:	4b33      	ldr	r3, [pc, #204]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	4a32      	ldr	r2, [pc, #200]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003880:	4b30      	ldr	r3, [pc, #192]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003884:	4b31      	ldr	r3, [pc, #196]	; (800394c <HAL_RCC_OscConfig+0x76c>)
 8003886:	4013      	ands	r3, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800388c:	00d2      	lsls	r2, r2, #3
 800388e:	492d      	ldr	r1, [pc, #180]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003890:	4313      	orrs	r3, r2
 8003892:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003894:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	f023 020c 	bic.w	r2, r3, #12
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	4928      	ldr	r1, [pc, #160]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038a6:	4b27      	ldr	r3, [pc, #156]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	f023 0202 	bic.w	r2, r3, #2
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	4924      	ldr	r1, [pc, #144]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038b8:	4b22      	ldr	r3, [pc, #136]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	4a21      	ldr	r2, [pc, #132]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80038be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c4:	4b1f      	ldr	r3, [pc, #124]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	4a1e      	ldr	r2, [pc, #120]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80038ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038d0:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80038d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80038dc:	4b19      	ldr	r3, [pc, #100]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	4a18      	ldr	r2, [pc, #96]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e8:	4b16      	ldr	r3, [pc, #88]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a15      	ldr	r2, [pc, #84]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 80038ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fd ff6e 	bl	80017d4 <HAL_GetTick>
 80038f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fd ff6a 	bl	80017d4 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e091      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x71c>
 800391a:	e089      	b.n	8003a30 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a08      	ldr	r2, [pc, #32]	; (8003944 <HAL_RCC_OscConfig+0x764>)
 8003922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fd ff54 	bl	80017d4 <HAL_GetTick>
 800392c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800392e:	e00f      	b.n	8003950 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7fd ff50 	bl	80017d4 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d908      	bls.n	8003950 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e077      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
 8003942:	bf00      	nop
 8003944:	58024400 	.word	0x58024400
 8003948:	fffffc0c 	.word	0xfffffc0c
 800394c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003950:	4b3a      	ldr	r3, [pc, #232]	; (8003a3c <HAL_RCC_OscConfig+0x85c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e9      	bne.n	8003930 <HAL_RCC_OscConfig+0x750>
 800395c:	e068      	b.n	8003a30 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800395e:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <HAL_RCC_OscConfig+0x85c>)
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003964:	4b35      	ldr	r3, [pc, #212]	; (8003a3c <HAL_RCC_OscConfig+0x85c>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	2b01      	cmp	r3, #1
 8003970:	d031      	beq.n	80039d6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f003 0203 	and.w	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d12a      	bne.n	80039d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d122      	bne.n	80039d6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d11a      	bne.n	80039d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	0a5b      	lsrs	r3, r3, #9
 80039a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d111      	bne.n	80039d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	0c1b      	lsrs	r3, r3, #16
 80039b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d108      	bne.n	80039d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	0e1b      	lsrs	r3, r3, #24
 80039c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d001      	beq.n	80039da <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e02b      	b.n	8003a32 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80039da:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <HAL_RCC_OscConfig+0x85c>)
 80039dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039de:	08db      	lsrs	r3, r3, #3
 80039e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039e4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d01f      	beq.n	8003a30 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80039f0:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_RCC_OscConfig+0x85c>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	4a11      	ldr	r2, [pc, #68]	; (8003a3c <HAL_RCC_OscConfig+0x85c>)
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039fc:	f7fd feea 	bl	80017d4 <HAL_GetTick>
 8003a00:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003a02:	bf00      	nop
 8003a04:	f7fd fee6 	bl	80017d4 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d0f9      	beq.n	8003a04 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_RCC_OscConfig+0x85c>)
 8003a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_RCC_OscConfig+0x860>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a1c:	00d2      	lsls	r2, r2, #3
 8003a1e:	4907      	ldr	r1, [pc, #28]	; (8003a3c <HAL_RCC_OscConfig+0x85c>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_RCC_OscConfig+0x85c>)
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <HAL_RCC_OscConfig+0x85c>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3730      	adds	r7, #48	; 0x30
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	ffff0007 	.word	0xffff0007

08003a44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e19c      	b.n	8003d92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a58:	4b8a      	ldr	r3, [pc, #552]	; (8003c84 <HAL_RCC_ClockConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d910      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b87      	ldr	r3, [pc, #540]	; (8003c84 <HAL_RCC_ClockConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 020f 	bic.w	r2, r3, #15
 8003a6e:	4985      	ldr	r1, [pc, #532]	; (8003c84 <HAL_RCC_ClockConfig+0x240>)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b83      	ldr	r3, [pc, #524]	; (8003c84 <HAL_RCC_ClockConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e184      	b.n	8003d92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	4b7b      	ldr	r3, [pc, #492]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d908      	bls.n	8003ab6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003aa4:	4b78      	ldr	r3, [pc, #480]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	4975      	ldr	r1, [pc, #468]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d010      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	4b70      	ldr	r3, [pc, #448]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d908      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ad2:	4b6d      	ldr	r3, [pc, #436]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	496a      	ldr	r1, [pc, #424]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d010      	beq.n	8003b12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	4b64      	ldr	r3, [pc, #400]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d908      	bls.n	8003b12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b00:	4b61      	ldr	r3, [pc, #388]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	495e      	ldr	r1, [pc, #376]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d010      	beq.n	8003b40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	4b59      	ldr	r3, [pc, #356]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d908      	bls.n	8003b40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b2e:	4b56      	ldr	r3, [pc, #344]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	4953      	ldr	r1, [pc, #332]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d010      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	4b4d      	ldr	r3, [pc, #308]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d908      	bls.n	8003b6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b5c:	4b4a      	ldr	r3, [pc, #296]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f023 020f 	bic.w	r2, r3, #15
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4947      	ldr	r1, [pc, #284]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d055      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b7a:	4b43      	ldr	r3, [pc, #268]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4940      	ldr	r1, [pc, #256]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b94:	4b3c      	ldr	r3, [pc, #240]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d121      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0f6      	b.n	8003d92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d107      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bac:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d115      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0ea      	b.n	8003d92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bc4:	4b30      	ldr	r3, [pc, #192]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0de      	b.n	8003d92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bd4:	4b2c      	ldr	r3, [pc, #176]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0d6      	b.n	8003d92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003be4:	4b28      	ldr	r3, [pc, #160]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f023 0207 	bic.w	r2, r3, #7
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4925      	ldr	r1, [pc, #148]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf6:	f7fd fded 	bl	80017d4 <HAL_GetTick>
 8003bfa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfe:	f7fd fde9 	bl	80017d4 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e0be      	b.n	8003d92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c14:	4b1c      	ldr	r3, [pc, #112]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d1eb      	bne.n	8003bfe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d010      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d208      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c42:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f023 020f 	bic.w	r2, r3, #15
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	490e      	ldr	r1, [pc, #56]	; (8003c88 <HAL_RCC_ClockConfig+0x244>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_ClockConfig+0x240>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d214      	bcs.n	8003c8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <HAL_RCC_ClockConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 020f 	bic.w	r2, r3, #15
 8003c6a:	4906      	ldr	r1, [pc, #24]	; (8003c84 <HAL_RCC_ClockConfig+0x240>)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <HAL_RCC_ClockConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e086      	b.n	8003d92 <HAL_RCC_ClockConfig+0x34e>
 8003c84:	52002000 	.word	0x52002000
 8003c88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d010      	beq.n	8003cba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	4b3f      	ldr	r3, [pc, #252]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d208      	bcs.n	8003cba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ca8:	4b3c      	ldr	r3, [pc, #240]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	4939      	ldr	r1, [pc, #228]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d010      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	4b34      	ldr	r3, [pc, #208]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d208      	bcs.n	8003ce8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cd6:	4b31      	ldr	r3, [pc, #196]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	492e      	ldr	r1, [pc, #184]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d010      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699a      	ldr	r2, [r3, #24]
 8003cf8:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d208      	bcs.n	8003d16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d04:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	4922      	ldr	r1, [pc, #136]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d010      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d208      	bcs.n	8003d44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d32:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4917      	ldr	r1, [pc, #92]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003d44:	f000 f834 	bl	8003db0 <HAL_RCC_GetSysClockFreq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	4912      	ldr	r1, [pc, #72]	; (8003da0 <HAL_RCC_ClockConfig+0x35c>)
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d60:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d62:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <HAL_RCC_ClockConfig+0x358>)
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <HAL_RCC_ClockConfig+0x35c>)
 8003d6c:	5cd3      	ldrb	r3, [r2, r3]
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
 8003d78:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <HAL_RCC_ClockConfig+0x360>)
 8003d7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d7c:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <HAL_RCC_ClockConfig+0x364>)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <HAL_RCC_ClockConfig+0x368>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fd fcda 	bl	8001740 <HAL_InitTick>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	58024400 	.word	0x58024400
 8003da0:	08008f7c 	.word	0x08008f7c
 8003da4:	24000004 	.word	0x24000004
 8003da8:	24000000 	.word	0x24000000
 8003dac:	24000008 	.word	0x24000008

08003db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b089      	sub	sp, #36	; 0x24
 8003db4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db6:	4bb3      	ldr	r3, [pc, #716]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dbe:	2b18      	cmp	r3, #24
 8003dc0:	f200 8155 	bhi.w	800406e <HAL_RCC_GetSysClockFreq+0x2be>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <HAL_RCC_GetSysClockFreq+0x1c>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003e31 	.word	0x08003e31
 8003dd0:	0800406f 	.word	0x0800406f
 8003dd4:	0800406f 	.word	0x0800406f
 8003dd8:	0800406f 	.word	0x0800406f
 8003ddc:	0800406f 	.word	0x0800406f
 8003de0:	0800406f 	.word	0x0800406f
 8003de4:	0800406f 	.word	0x0800406f
 8003de8:	0800406f 	.word	0x0800406f
 8003dec:	08003e57 	.word	0x08003e57
 8003df0:	0800406f 	.word	0x0800406f
 8003df4:	0800406f 	.word	0x0800406f
 8003df8:	0800406f 	.word	0x0800406f
 8003dfc:	0800406f 	.word	0x0800406f
 8003e00:	0800406f 	.word	0x0800406f
 8003e04:	0800406f 	.word	0x0800406f
 8003e08:	0800406f 	.word	0x0800406f
 8003e0c:	08003e5d 	.word	0x08003e5d
 8003e10:	0800406f 	.word	0x0800406f
 8003e14:	0800406f 	.word	0x0800406f
 8003e18:	0800406f 	.word	0x0800406f
 8003e1c:	0800406f 	.word	0x0800406f
 8003e20:	0800406f 	.word	0x0800406f
 8003e24:	0800406f 	.word	0x0800406f
 8003e28:	0800406f 	.word	0x0800406f
 8003e2c:	08003e63 	.word	0x08003e63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e30:	4b94      	ldr	r3, [pc, #592]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e3c:	4b91      	ldr	r3, [pc, #580]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	08db      	lsrs	r3, r3, #3
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	4a90      	ldr	r2, [pc, #576]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003e4e:	e111      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e50:	4b8d      	ldr	r3, [pc, #564]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e52:	61bb      	str	r3, [r7, #24]
      break;
 8003e54:	e10e      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003e56:	4b8d      	ldr	r3, [pc, #564]	; (800408c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e58:	61bb      	str	r3, [r7, #24]
      break;
 8003e5a:	e10b      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003e5c:	4b8c      	ldr	r3, [pc, #560]	; (8004090 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e5e:	61bb      	str	r3, [r7, #24]
      break;
 8003e60:	e108      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e62:	4b88      	ldr	r3, [pc, #544]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003e6c:	4b85      	ldr	r3, [pc, #532]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e78:	4b82      	ldr	r3, [pc, #520]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e82:	4b80      	ldr	r3, [pc, #512]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	08db      	lsrs	r3, r3, #3
 8003e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80e1 	beq.w	8004068 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	f000 8083 	beq.w	8003fb4 <HAL_RCC_GetSysClockFreq+0x204>
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	f200 80a1 	bhi.w	8003ff8 <HAL_RCC_GetSysClockFreq+0x248>
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x114>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d056      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ec2:	e099      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ec4:	4b6f      	ldr	r3, [pc, #444]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02d      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ed0:	4b6c      	ldr	r3, [pc, #432]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	08db      	lsrs	r3, r3, #3
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	4a6b      	ldr	r2, [pc, #428]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	ee07 3a90 	vmov	s15, r3
 8003ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efa:	4b62      	ldr	r3, [pc, #392]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003f2a:	e087      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f36:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004098 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3e:	4b51      	ldr	r3, [pc, #324]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f52:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f6e:	e065      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800409c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f82:	4b40      	ldr	r3, [pc, #256]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fb2:	e043      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fbe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80040a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc6:	4b2f      	ldr	r3, [pc, #188]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fda:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ff6:	e021      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004002:	eddf 6a26 	vldr	s13, [pc, #152]	; 800409c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800400a:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401a:	ed97 6a02 	vldr	s12, [r7, #8]
 800401e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800402e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004036:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800403a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800403c:	4b11      	ldr	r3, [pc, #68]	; (8004084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	0a5b      	lsrs	r3, r3, #9
 8004042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004046:	3301      	adds	r3, #1
 8004048:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	ee07 3a90 	vmov	s15, r3
 8004050:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004054:	edd7 6a07 	vldr	s13, [r7, #28]
 8004058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800405c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004060:	ee17 3a90 	vmov	r3, s15
 8004064:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004066:	e005      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	61bb      	str	r3, [r7, #24]
      break;
 800406c:	e002      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004070:	61bb      	str	r3, [r7, #24]
      break;
 8004072:	bf00      	nop
  }

  return sysclockfreq;
 8004074:	69bb      	ldr	r3, [r7, #24]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3724      	adds	r7, #36	; 0x24
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	58024400 	.word	0x58024400
 8004088:	03d09000 	.word	0x03d09000
 800408c:	003d0900 	.word	0x003d0900
 8004090:	007a1200 	.word	0x007a1200
 8004094:	46000000 	.word	0x46000000
 8004098:	4c742400 	.word	0x4c742400
 800409c:	4a742400 	.word	0x4a742400
 80040a0:	4af42400 	.word	0x4af42400

080040a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80040aa:	f7ff fe81 	bl	8003db0 <HAL_RCC_GetSysClockFreq>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	0a1b      	lsrs	r3, r3, #8
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	490f      	ldr	r1, [pc, #60]	; (80040f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80040bc:	5ccb      	ldrb	r3, [r1, r3]
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	fa22 f303 	lsr.w	r3, r2, r3
 80040c6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80040d2:	5cd3      	ldrb	r3, [r2, r3]
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	fa22 f303 	lsr.w	r3, r2, r3
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <HAL_RCC_GetHCLKFreq+0x58>)
 80040e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040e2:	4a07      	ldr	r2, [pc, #28]	; (8004100 <HAL_RCC_GetHCLKFreq+0x5c>)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <HAL_RCC_GetHCLKFreq+0x58>)
 80040ea:	681b      	ldr	r3, [r3, #0]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	58024400 	.word	0x58024400
 80040f8:	08008f7c 	.word	0x08008f7c
 80040fc:	24000004 	.word	0x24000004
 8004100:	24000000 	.word	0x24000000

08004104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004108:	f7ff ffcc 	bl	80040a4 <HAL_RCC_GetHCLKFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	4904      	ldr	r1, [pc, #16]	; (800412c <HAL_RCC_GetPCLK1Freq+0x28>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}
 8004128:	58024400 	.word	0x58024400
 800412c:	08008f7c 	.word	0x08008f7c

08004130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004134:	f7ff ffb6 	bl	80040a4 <HAL_RCC_GetHCLKFreq>
 8004138:	4602      	mov	r2, r0
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	4904      	ldr	r1, [pc, #16]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004146:	5ccb      	ldrb	r3, [r1, r3]
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004150:	4618      	mov	r0, r3
 8004152:	bd80      	pop	{r7, pc}
 8004154:	58024400 	.word	0x58024400
 8004158:	08008f7c 	.word	0x08008f7c

0800415c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800415c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004160:	b0c8      	sub	sp, #288	; 0x120
 8004162:	af00      	add	r7, sp, #0
 8004164:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004168:	2300      	movs	r3, #0
 800416a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800416e:	2300      	movs	r3, #0
 8004170:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004180:	2500      	movs	r5, #0
 8004182:	ea54 0305 	orrs.w	r3, r4, r5
 8004186:	d049      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800418c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004192:	d02f      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004194:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004198:	d828      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800419a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800419e:	d01a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80041a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a4:	d822      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80041aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ae:	d007      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041b0:	e01c      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b2:	4ba7      	ldr	r3, [pc, #668]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	4aa6      	ldr	r2, [pc, #664]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041be:	e01a      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041c4:	3308      	adds	r3, #8
 80041c6:	2102      	movs	r1, #2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f002 fa6d 	bl	80066a8 <RCCEx_PLL2_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041d4:	e00f      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041da:	3328      	adds	r3, #40	; 0x28
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f002 fb14 	bl	800680c <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041ea:	e004      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041f2:	e000      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80041f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10a      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80041fe:	4b94      	ldr	r3, [pc, #592]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004202:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420c:	4a90      	ldr	r2, [pc, #576]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800420e:	430b      	orrs	r3, r1
 8004210:	6513      	str	r3, [r2, #80]	; 0x50
 8004212:	e003      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004214:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004218:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800421c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004228:	f04f 0900 	mov.w	r9, #0
 800422c:	ea58 0309 	orrs.w	r3, r8, r9
 8004230:	d047      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004238:	2b04      	cmp	r3, #4
 800423a:	d82a      	bhi.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004259 	.word	0x08004259
 8004248:	08004267 	.word	0x08004267
 800424c:	0800427d 	.word	0x0800427d
 8004250:	0800429b 	.word	0x0800429b
 8004254:	0800429b 	.word	0x0800429b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004258:	4b7d      	ldr	r3, [pc, #500]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	4a7c      	ldr	r2, [pc, #496]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800425e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004264:	e01a      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800426a:	3308      	adds	r3, #8
 800426c:	2100      	movs	r1, #0
 800426e:	4618      	mov	r0, r3
 8004270:	f002 fa1a 	bl	80066a8 <RCCEx_PLL2_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800427a:	e00f      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800427c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004280:	3328      	adds	r3, #40	; 0x28
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f002 fac1 	bl	800680c <RCCEx_PLL3_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004290:	e004      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004298:	e000      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800429a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a4:	4b6a      	ldr	r3, [pc, #424]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a8:	f023 0107 	bic.w	r1, r3, #7
 80042ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	4a67      	ldr	r2, [pc, #412]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6513      	str	r3, [r2, #80]	; 0x50
 80042b8:	e003      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80042c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80042ce:	f04f 0b00 	mov.w	fp, #0
 80042d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80042d6:	d054      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80042d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80042e2:	d036      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80042e4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80042e8:	d82f      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80042ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ee:	d032      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80042f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f4:	d829      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80042f6:	2bc0      	cmp	r3, #192	; 0xc0
 80042f8:	d02f      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80042fa:	2bc0      	cmp	r3, #192	; 0xc0
 80042fc:	d825      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80042fe:	2b80      	cmp	r3, #128	; 0x80
 8004300:	d018      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004302:	2b80      	cmp	r3, #128	; 0x80
 8004304:	d821      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800430a:	2b40      	cmp	r3, #64	; 0x40
 800430c:	d007      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800430e:	e01c      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004310:	4b4f      	ldr	r3, [pc, #316]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	4a4e      	ldr	r2, [pc, #312]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800431a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800431c:	e01e      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004322:	3308      	adds	r3, #8
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f002 f9be 	bl	80066a8 <RCCEx_PLL2_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004332:	e013      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004338:	3328      	adds	r3, #40	; 0x28
 800433a:	2100      	movs	r1, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f002 fa65 	bl	800680c <RCCEx_PLL3_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004348:	e008      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004350:	e004      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004352:	bf00      	nop
 8004354:	e002      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004356:	bf00      	nop
 8004358:	e000      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800435a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004364:	4b3a      	ldr	r3, [pc, #232]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004368:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800436c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004372:	4a37      	ldr	r2, [pc, #220]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004374:	430b      	orrs	r3, r1
 8004376:	6513      	str	r3, [r2, #80]	; 0x50
 8004378:	e003      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800437e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800438e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004392:	2300      	movs	r3, #0
 8004394:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004398:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800439c:	460b      	mov	r3, r1
 800439e:	4313      	orrs	r3, r2
 80043a0:	d05c      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80043a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80043ac:	d03b      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80043ae:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80043b2:	d834      	bhi.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80043b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b8:	d037      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80043ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043be:	d82e      	bhi.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80043c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043c4:	d033      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80043c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043ca:	d828      	bhi.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80043cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d0:	d01a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80043d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d6:	d822      	bhi.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e0:	d007      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80043e2:	e01c      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e4:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	4a19      	ldr	r2, [pc, #100]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80043f0:	e01e      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f6:	3308      	adds	r3, #8
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f002 f954 	bl	80066a8 <RCCEx_PLL2_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004406:	e013      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800440c:	3328      	adds	r3, #40	; 0x28
 800440e:	2100      	movs	r1, #0
 8004410:	4618      	mov	r0, r3
 8004412:	f002 f9fb 	bl	800680c <RCCEx_PLL3_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800441c:	e008      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004424:	e004      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004426:	bf00      	nop
 8004428:	e002      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800442a:	bf00      	nop
 800442c:	e000      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800442e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004430:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10d      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800443a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004446:	4a02      	ldr	r2, [pc, #8]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004448:	430b      	orrs	r3, r1
 800444a:	6513      	str	r3, [r2, #80]	; 0x50
 800444c:	e006      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800444e:	bf00      	nop
 8004450:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004454:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004458:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004468:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800446c:	2300      	movs	r3, #0
 800446e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004472:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004476:	460b      	mov	r3, r1
 8004478:	4313      	orrs	r3, r2
 800447a:	d03a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800447c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004482:	2b30      	cmp	r3, #48	; 0x30
 8004484:	d01f      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004486:	2b30      	cmp	r3, #48	; 0x30
 8004488:	d819      	bhi.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x362>
 800448a:	2b20      	cmp	r3, #32
 800448c:	d00c      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800448e:	2b20      	cmp	r3, #32
 8004490:	d815      	bhi.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004492:	2b00      	cmp	r3, #0
 8004494:	d019      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004496:	2b10      	cmp	r3, #16
 8004498:	d111      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800449a:	4bae      	ldr	r3, [pc, #696]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	4aad      	ldr	r2, [pc, #692]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80044a6:	e011      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ac:	3308      	adds	r3, #8
 80044ae:	2102      	movs	r1, #2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f002 f8f9 	bl	80066a8 <RCCEx_PLL2_Config>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80044bc:	e006      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044c4:	e002      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80044c6:	bf00      	nop
 80044c8:	e000      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80044ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80044d4:	4b9f      	ldr	r3, [pc, #636]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80044dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	4a9c      	ldr	r2, [pc, #624]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044e4:	430b      	orrs	r3, r1
 80044e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044e8:	e003      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80044f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80044fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004502:	2300      	movs	r3, #0
 8004504:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004508:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800450c:	460b      	mov	r3, r1
 800450e:	4313      	orrs	r3, r2
 8004510:	d051      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800451c:	d035      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800451e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004522:	d82e      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004524:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004528:	d031      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800452a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800452e:	d828      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004534:	d01a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453a:	d822      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004544:	d007      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004546:	e01c      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004548:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	4a81      	ldr	r2, [pc, #516]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800454e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004554:	e01c      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455a:	3308      	adds	r3, #8
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f002 f8a2 	bl	80066a8 <RCCEx_PLL2_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800456a:	e011      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800456c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004570:	3328      	adds	r3, #40	; 0x28
 8004572:	2100      	movs	r1, #0
 8004574:	4618      	mov	r0, r3
 8004576:	f002 f949 	bl	800680c <RCCEx_PLL3_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004580:	e006      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004588:	e002      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800458a:	bf00      	nop
 800458c:	e000      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800458e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004590:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004598:	4b6e      	ldr	r3, [pc, #440]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800459a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80045a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a6:	4a6b      	ldr	r2, [pc, #428]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6513      	str	r3, [r2, #80]	; 0x50
 80045ac:	e003      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80045b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80045c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045c6:	2300      	movs	r3, #0
 80045c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80045cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80045d0:	460b      	mov	r3, r1
 80045d2:	4313      	orrs	r3, r2
 80045d4:	d053      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80045d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e0:	d033      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80045e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e6:	d82c      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80045e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045ec:	d02f      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80045ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045f2:	d826      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80045f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045f8:	d02b      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80045fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045fe:	d820      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004604:	d012      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800460a:	d81a      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d022      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004614:	d115      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800461a:	3308      	adds	r3, #8
 800461c:	2101      	movs	r1, #1
 800461e:	4618      	mov	r0, r3
 8004620:	f002 f842 	bl	80066a8 <RCCEx_PLL2_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800462a:	e015      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800462c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004630:	3328      	adds	r3, #40	; 0x28
 8004632:	2101      	movs	r1, #1
 8004634:	4618      	mov	r0, r3
 8004636:	f002 f8e9 	bl	800680c <RCCEx_PLL3_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004640:	e00a      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004648:	e006      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800464a:	bf00      	nop
 800464c:	e004      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800464e:	bf00      	nop
 8004650:	e002      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004658:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004660:	4b3c      	ldr	r3, [pc, #240]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004664:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800466c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800466e:	4a39      	ldr	r2, [pc, #228]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004670:	430b      	orrs	r3, r1
 8004672:	6513      	str	r3, [r2, #80]	; 0x50
 8004674:	e003      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004676:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800467a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800467e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800468a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004694:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004698:	460b      	mov	r3, r1
 800469a:	4313      	orrs	r3, r2
 800469c:	d060      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800469e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80046aa:	d039      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80046ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80046b0:	d832      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80046b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046b6:	d035      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80046b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046bc:	d82c      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c2:	d031      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d826      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80046ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046ce:	d02d      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80046d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046d4:	d820      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80046d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046da:	d012      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80046dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e0:	d81a      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d024      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80046e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ea:	d115      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f0:	3308      	adds	r3, #8
 80046f2:	2101      	movs	r1, #1
 80046f4:	4618      	mov	r0, r3
 80046f6:	f001 ffd7 	bl	80066a8 <RCCEx_PLL2_Config>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004700:	e017      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004706:	3328      	adds	r3, #40	; 0x28
 8004708:	2101      	movs	r1, #1
 800470a:	4618      	mov	r0, r3
 800470c:	f002 f87e 	bl	800680c <RCCEx_PLL3_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004716:	e00c      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800471e:	e008      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004720:	bf00      	nop
 8004722:	e006      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004724:	bf00      	nop
 8004726:	e004      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004728:	bf00      	nop
 800472a:	e002      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800472c:	bf00      	nop
 800472e:	e000      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004732:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10e      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800473a:	4b06      	ldr	r3, [pc, #24]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004746:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800474a:	4a02      	ldr	r2, [pc, #8]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800474c:	430b      	orrs	r3, r1
 800474e:	6593      	str	r3, [r2, #88]	; 0x58
 8004750:	e006      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004752:	bf00      	nop
 8004754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800475c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800476c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004770:	2300      	movs	r3, #0
 8004772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800477a:	460b      	mov	r3, r1
 800477c:	4313      	orrs	r3, r2
 800477e:	d037      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800478a:	d00e      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800478c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004790:	d816      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004792:	2b00      	cmp	r3, #0
 8004794:	d018      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479a:	d111      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800479c:	4bc4      	ldr	r3, [pc, #784]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	4ac3      	ldr	r2, [pc, #780]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80047a8:	e00f      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ae:	3308      	adds	r3, #8
 80047b0:	2101      	movs	r1, #1
 80047b2:	4618      	mov	r0, r3
 80047b4:	f001 ff78 	bl	80066a8 <RCCEx_PLL2_Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80047be:	e004      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80047c6:	e000      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80047c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047d2:	4bb7      	ldr	r3, [pc, #732]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80047da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047e0:	4ab3      	ldr	r2, [pc, #716]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047e2:	430b      	orrs	r3, r1
 80047e4:	6513      	str	r3, [r2, #80]	; 0x50
 80047e6:	e003      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80047f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80047fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004800:	2300      	movs	r3, #0
 8004802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004806:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800480a:	460b      	mov	r3, r1
 800480c:	4313      	orrs	r3, r2
 800480e:	d039      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004816:	2b03      	cmp	r3, #3
 8004818:	d81c      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800481a:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	0800485d 	.word	0x0800485d
 8004824:	08004831 	.word	0x08004831
 8004828:	0800483f 	.word	0x0800483f
 800482c:	0800485d 	.word	0x0800485d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004830:	4b9f      	ldr	r3, [pc, #636]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	4a9e      	ldr	r2, [pc, #632]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800483a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800483c:	e00f      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800483e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004842:	3308      	adds	r3, #8
 8004844:	2102      	movs	r1, #2
 8004846:	4618      	mov	r0, r3
 8004848:	f001 ff2e 	bl	80066a8 <RCCEx_PLL2_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004852:	e004      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800485a:	e000      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800485c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800485e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004866:	4b92      	ldr	r3, [pc, #584]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486a:	f023 0103 	bic.w	r1, r3, #3
 800486e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004874:	4a8e      	ldr	r2, [pc, #568]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004876:	430b      	orrs	r3, r1
 8004878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800487a:	e003      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004880:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004894:	2300      	movs	r3, #0
 8004896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800489a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800489e:	460b      	mov	r3, r1
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f000 8099 	beq.w	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048a6:	4b83      	ldr	r3, [pc, #524]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a82      	ldr	r2, [pc, #520]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80048ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048b2:	f7fc ff8f 	bl	80017d4 <HAL_GetTick>
 80048b6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048ba:	e00b      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048bc:	f7fc ff8a 	bl	80017d4 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b64      	cmp	r3, #100	; 0x64
 80048ca:	d903      	bls.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80048d2:	e005      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048d4:	4b77      	ldr	r3, [pc, #476]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0ed      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80048e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d173      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80048e8:	4b71      	ldr	r3, [pc, #452]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048f4:	4053      	eors	r3, r2
 80048f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d015      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048fe:	4b6c      	ldr	r3, [pc, #432]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004906:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800490a:	4b69      	ldr	r3, [pc, #420]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	4a68      	ldr	r2, [pc, #416]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004914:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004916:	4b66      	ldr	r3, [pc, #408]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	4a65      	ldr	r2, [pc, #404]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800491c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004920:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004922:	4a63      	ldr	r2, [pc, #396]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004928:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800492a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004936:	d118      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fc ff4c 	bl	80017d4 <HAL_GetTick>
 800493c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004940:	e00d      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fc ff47 	bl	80017d4 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800494c:	1ad2      	subs	r2, r2, r3
 800494e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004952:	429a      	cmp	r2, r3
 8004954:	d903      	bls.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800495c:	e005      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800495e:	4b54      	ldr	r3, [pc, #336]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0eb      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800496a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800496e:	2b00      	cmp	r3, #0
 8004970:	d129      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004976:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800497a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004982:	d10e      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004984:	4b4a      	ldr	r3, [pc, #296]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800498c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004994:	091a      	lsrs	r2, r3, #4
 8004996:	4b48      	ldr	r3, [pc, #288]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004998:	4013      	ands	r3, r2
 800499a:	4a45      	ldr	r2, [pc, #276]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800499c:	430b      	orrs	r3, r1
 800499e:	6113      	str	r3, [r2, #16]
 80049a0:	e005      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 80049a2:	4b43      	ldr	r3, [pc, #268]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	4a42      	ldr	r2, [pc, #264]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049ac:	6113      	str	r3, [r2, #16]
 80049ae:	4b40      	ldr	r3, [pc, #256]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80049b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049be:	4a3c      	ldr	r2, [pc, #240]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049c0:	430b      	orrs	r3, r1
 80049c2:	6713      	str	r3, [r2, #112]	; 0x70
 80049c4:	e008      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80049ce:	e003      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80049d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	f002 0301 	and.w	r3, r2, #1
 80049e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049e8:	2300      	movs	r3, #0
 80049ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f000 8090 	beq.w	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80049fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a02:	2b28      	cmp	r3, #40	; 0x28
 8004a04:	d870      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004af1 	.word	0x08004af1
 8004a10:	08004ae9 	.word	0x08004ae9
 8004a14:	08004ae9 	.word	0x08004ae9
 8004a18:	08004ae9 	.word	0x08004ae9
 8004a1c:	08004ae9 	.word	0x08004ae9
 8004a20:	08004ae9 	.word	0x08004ae9
 8004a24:	08004ae9 	.word	0x08004ae9
 8004a28:	08004ae9 	.word	0x08004ae9
 8004a2c:	08004abd 	.word	0x08004abd
 8004a30:	08004ae9 	.word	0x08004ae9
 8004a34:	08004ae9 	.word	0x08004ae9
 8004a38:	08004ae9 	.word	0x08004ae9
 8004a3c:	08004ae9 	.word	0x08004ae9
 8004a40:	08004ae9 	.word	0x08004ae9
 8004a44:	08004ae9 	.word	0x08004ae9
 8004a48:	08004ae9 	.word	0x08004ae9
 8004a4c:	08004ad3 	.word	0x08004ad3
 8004a50:	08004ae9 	.word	0x08004ae9
 8004a54:	08004ae9 	.word	0x08004ae9
 8004a58:	08004ae9 	.word	0x08004ae9
 8004a5c:	08004ae9 	.word	0x08004ae9
 8004a60:	08004ae9 	.word	0x08004ae9
 8004a64:	08004ae9 	.word	0x08004ae9
 8004a68:	08004ae9 	.word	0x08004ae9
 8004a6c:	08004af1 	.word	0x08004af1
 8004a70:	08004ae9 	.word	0x08004ae9
 8004a74:	08004ae9 	.word	0x08004ae9
 8004a78:	08004ae9 	.word	0x08004ae9
 8004a7c:	08004ae9 	.word	0x08004ae9
 8004a80:	08004ae9 	.word	0x08004ae9
 8004a84:	08004ae9 	.word	0x08004ae9
 8004a88:	08004ae9 	.word	0x08004ae9
 8004a8c:	08004af1 	.word	0x08004af1
 8004a90:	08004ae9 	.word	0x08004ae9
 8004a94:	08004ae9 	.word	0x08004ae9
 8004a98:	08004ae9 	.word	0x08004ae9
 8004a9c:	08004ae9 	.word	0x08004ae9
 8004aa0:	08004ae9 	.word	0x08004ae9
 8004aa4:	08004ae9 	.word	0x08004ae9
 8004aa8:	08004ae9 	.word	0x08004ae9
 8004aac:	08004af1 	.word	0x08004af1
 8004ab0:	58024400 	.word	0x58024400
 8004ab4:	58024800 	.word	0x58024800
 8004ab8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac0:	3308      	adds	r3, #8
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f001 fdef 	bl	80066a8 <RCCEx_PLL2_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004ad0:	e00f      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad6:	3328      	adds	r3, #40	; 0x28
 8004ad8:	2101      	movs	r1, #1
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 fe96 	bl	800680c <RCCEx_PLL3_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004ae6:	e004      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004aee:	e000      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10b      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004afa:	4bc0      	ldr	r3, [pc, #768]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b0a:	4abc      	ldr	r2, [pc, #752]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6553      	str	r3, [r2, #84]	; 0x54
 8004b10:	e003      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b16:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f002 0302 	and.w	r3, r2, #2
 8004b26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b30:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004b34:	460b      	mov	r3, r1
 8004b36:	4313      	orrs	r3, r2
 8004b38:	d043      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b42:	2b05      	cmp	r3, #5
 8004b44:	d824      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004b46:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4c:	08004b99 	.word	0x08004b99
 8004b50:	08004b65 	.word	0x08004b65
 8004b54:	08004b7b 	.word	0x08004b7b
 8004b58:	08004b99 	.word	0x08004b99
 8004b5c:	08004b99 	.word	0x08004b99
 8004b60:	08004b99 	.word	0x08004b99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b68:	3308      	adds	r3, #8
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f001 fd9b 	bl	80066a8 <RCCEx_PLL2_Config>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b78:	e00f      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b7e:	3328      	adds	r3, #40	; 0x28
 8004b80:	2101      	movs	r1, #1
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 fe42 	bl	800680c <RCCEx_PLL3_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b8e:	e004      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b96:	e000      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10b      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ba2:	4b96      	ldr	r3, [pc, #600]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	f023 0107 	bic.w	r1, r3, #7
 8004baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb2:	4a92      	ldr	r2, [pc, #584]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	6553      	str	r3, [r2, #84]	; 0x54
 8004bb8:	e003      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bbe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	f002 0304 	and.w	r3, r2, #4
 8004bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bd8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4313      	orrs	r3, r2
 8004be0:	d043      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	d824      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004bee:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c41 	.word	0x08004c41
 8004bf8:	08004c0d 	.word	0x08004c0d
 8004bfc:	08004c23 	.word	0x08004c23
 8004c00:	08004c41 	.word	0x08004c41
 8004c04:	08004c41 	.word	0x08004c41
 8004c08:	08004c41 	.word	0x08004c41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c10:	3308      	adds	r3, #8
 8004c12:	2101      	movs	r1, #1
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 fd47 	bl	80066a8 <RCCEx_PLL2_Config>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c20:	e00f      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c26:	3328      	adds	r3, #40	; 0x28
 8004c28:	2101      	movs	r1, #1
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 fdee 	bl	800680c <RCCEx_PLL3_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c36:	e004      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c3e:	e000      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c4a:	4b6c      	ldr	r3, [pc, #432]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4e:	f023 0107 	bic.w	r1, r3, #7
 8004c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c5a:	4a68      	ldr	r2, [pc, #416]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c60:	e003      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	f002 0320 	and.w	r3, r2, #32
 8004c76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c84:	460b      	mov	r3, r1
 8004c86:	4313      	orrs	r3, r2
 8004c88:	d055      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c96:	d033      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c9c:	d82c      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca2:	d02f      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca8:	d826      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004caa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cae:	d02b      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004cb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cb4:	d820      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cba:	d012      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cc0:	d81a      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d022      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cca:	d115      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 fce7 	bl	80066a8 <RCCEx_PLL2_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ce0:	e015      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce6:	3328      	adds	r3, #40	; 0x28
 8004ce8:	2102      	movs	r1, #2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f001 fd8e 	bl	800680c <RCCEx_PLL3_Config>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004cf6:	e00a      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004cfe:	e006      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004d00:	bf00      	nop
 8004d02:	e004      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004d04:	bf00      	nop
 8004d06:	e002      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004d08:	bf00      	nop
 8004d0a:	e000      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10b      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d16:	4b39      	ldr	r3, [pc, #228]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d26:	4a35      	ldr	r2, [pc, #212]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6553      	str	r3, [r2, #84]	; 0x54
 8004d2c:	e003      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d46:	2300      	movs	r3, #0
 8004d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4313      	orrs	r3, r2
 8004d54:	d058      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d62:	d033      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004d64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d68:	d82c      	bhi.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6e:	d02f      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d74:	d826      	bhi.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d7a:	d02b      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004d7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d80:	d820      	bhi.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d86:	d012      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8c:	d81a      	bhi.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d022      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d96:	d115      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	2100      	movs	r1, #0
 8004da0:	4618      	mov	r0, r3
 8004da2:	f001 fc81 	bl	80066a8 <RCCEx_PLL2_Config>
 8004da6:	4603      	mov	r3, r0
 8004da8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004dac:	e015      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db2:	3328      	adds	r3, #40	; 0x28
 8004db4:	2102      	movs	r1, #2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f001 fd28 	bl	800680c <RCCEx_PLL3_Config>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004dc2:	e00a      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004dca:	e006      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004dcc:	bf00      	nop
 8004dce:	e004      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004dd0:	bf00      	nop
 8004dd2:	e002      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004dd4:	bf00      	nop
 8004dd6:	e000      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10e      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004df2:	4a02      	ldr	r2, [pc, #8]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6593      	str	r3, [r2, #88]	; 0x58
 8004df8:	e006      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004dfa:	bf00      	nop
 8004dfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004e22:	460b      	mov	r3, r1
 8004e24:	4313      	orrs	r3, r2
 8004e26:	d055      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e34:	d033      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004e36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e3a:	d82c      	bhi.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e40:	d02f      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e46:	d826      	bhi.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004e48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e4c:	d02b      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004e4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e52:	d820      	bhi.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e58:	d012      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e5e:	d81a      	bhi.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d022      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e68:	d115      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6e:	3308      	adds	r3, #8
 8004e70:	2100      	movs	r1, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	f001 fc18 	bl	80066a8 <RCCEx_PLL2_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e7e:	e015      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e84:	3328      	adds	r3, #40	; 0x28
 8004e86:	2102      	movs	r1, #2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f001 fcbf 	bl	800680c <RCCEx_PLL3_Config>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e94:	e00a      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e9c:	e006      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004e9e:	bf00      	nop
 8004ea0:	e004      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004ea2:	bf00      	nop
 8004ea4:	e002      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004ea6:	bf00      	nop
 8004ea8:	e000      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10b      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004eb4:	4ba1      	ldr	r3, [pc, #644]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ec4:	4a9d      	ldr	r2, [pc, #628]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8004eca:	e003      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ecc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ed0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f002 0308 	and.w	r3, r2, #8
 8004ee0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004eea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	d01e      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f06:	3328      	adds	r3, #40	; 0x28
 8004f08:	2102      	movs	r1, #2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f001 fc7e 	bl	800680c <RCCEx_PLL3_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004f1c:	4b87      	ldr	r3, [pc, #540]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f2c:	4a83      	ldr	r2, [pc, #524]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	f002 0310 	and.w	r3, r2, #16
 8004f3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f42:	2300      	movs	r3, #0
 8004f44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	d01e      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f5e:	d10c      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f64:	3328      	adds	r3, #40	; 0x28
 8004f66:	2102      	movs	r1, #2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f001 fc4f 	bl	800680c <RCCEx_PLL3_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f7a:	4b70      	ldr	r3, [pc, #448]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f8a:	4a6c      	ldr	r2, [pc, #432]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004f9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fa6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004faa:	460b      	mov	r3, r1
 8004fac:	4313      	orrs	r3, r2
 8004fae:	d03e      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fbc:	d022      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fc2:	d81b      	bhi.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fcc:	d00b      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004fce:	e015      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 fb65 	bl	80066a8 <RCCEx_PLL2_Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004fe4:	e00f      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fea:	3328      	adds	r3, #40	; 0x28
 8004fec:	2102      	movs	r1, #2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f001 fc0c 	bl	800680c <RCCEx_PLL3_Config>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ffa:	e004      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005002:	e000      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005006:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10b      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800500e:	4b4b      	ldr	r3, [pc, #300]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005012:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800501e:	4a47      	ldr	r2, [pc, #284]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005020:	430b      	orrs	r3, r1
 8005022:	6593      	str	r3, [r2, #88]	; 0x58
 8005024:	e003      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005026:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800502a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800502e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800503a:	67bb      	str	r3, [r7, #120]	; 0x78
 800503c:	2300      	movs	r3, #0
 800503e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005040:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005044:	460b      	mov	r3, r1
 8005046:	4313      	orrs	r3, r2
 8005048:	d03b      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800504a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005056:	d01f      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005058:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800505c:	d818      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800505e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005062:	d003      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005064:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005068:	d007      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800506a:	e011      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800506c:	4b33      	ldr	r3, [pc, #204]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	4a32      	ldr	r2, [pc, #200]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005078:	e00f      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800507a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800507e:	3328      	adds	r3, #40	; 0x28
 8005080:	2101      	movs	r1, #1
 8005082:	4618      	mov	r0, r3
 8005084:	f001 fbc2 	bl	800680c <RCCEx_PLL3_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800508e:	e004      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005096:	e000      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050a2:	4b26      	ldr	r3, [pc, #152]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80050aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b2:	4a22      	ldr	r2, [pc, #136]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6553      	str	r3, [r2, #84]	; 0x54
 80050b8:	e003      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80050c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80050ce:	673b      	str	r3, [r7, #112]	; 0x70
 80050d0:	2300      	movs	r3, #0
 80050d2:	677b      	str	r3, [r7, #116]	; 0x74
 80050d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80050d8:	460b      	mov	r3, r1
 80050da:	4313      	orrs	r3, r2
 80050dc:	d034      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80050de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80050e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ec:	d007      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80050ee:	e011      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050f0:	4b12      	ldr	r3, [pc, #72]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	4a11      	ldr	r2, [pc, #68]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050fc:	e00e      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005102:	3308      	adds	r3, #8
 8005104:	2102      	movs	r1, #2
 8005106:	4618      	mov	r0, r3
 8005108:	f001 face 	bl	80066a8 <RCCEx_PLL2_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005112:	e003      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800511a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800511c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10d      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005128:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800512c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005132:	4a02      	ldr	r2, [pc, #8]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005134:	430b      	orrs	r3, r1
 8005136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005138:	e006      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800513a:	bf00      	nop
 800513c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005140:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005144:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005154:	66bb      	str	r3, [r7, #104]	; 0x68
 8005156:	2300      	movs	r3, #0
 8005158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800515a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800515e:	460b      	mov	r3, r1
 8005160:	4313      	orrs	r3, r2
 8005162:	d00c      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005168:	3328      	adds	r3, #40	; 0x28
 800516a:	2102      	movs	r1, #2
 800516c:	4618      	mov	r0, r3
 800516e:	f001 fb4d 	bl	800680c <RCCEx_PLL3_Config>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800517e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800518a:	663b      	str	r3, [r7, #96]	; 0x60
 800518c:	2300      	movs	r3, #0
 800518e:	667b      	str	r3, [r7, #100]	; 0x64
 8005190:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005194:	460b      	mov	r3, r1
 8005196:	4313      	orrs	r3, r2
 8005198:	d038      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800519a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051a6:	d018      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80051a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ac:	d811      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80051ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b2:	d014      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80051b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b8:	d80b      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d011      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80051be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c2:	d106      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c4:	4bc3      	ldr	r3, [pc, #780]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	4ac2      	ldr	r2, [pc, #776]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80051d0:	e008      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80051d8:	e004      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80051da:	bf00      	nop
 80051dc:	e002      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80051de:	bf00      	nop
 80051e0:	e000      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80051e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10b      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051ec:	4bb9      	ldr	r3, [pc, #740]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fc:	4ab5      	ldr	r2, [pc, #724]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051fe:	430b      	orrs	r3, r1
 8005200:	6553      	str	r3, [r2, #84]	; 0x54
 8005202:	e003      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005204:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005208:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800520c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005218:	65bb      	str	r3, [r7, #88]	; 0x58
 800521a:	2300      	movs	r3, #0
 800521c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800521e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005222:	460b      	mov	r3, r1
 8005224:	4313      	orrs	r3, r2
 8005226:	d009      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005228:	4baa      	ldr	r3, [pc, #680]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800522a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005236:	4aa7      	ldr	r2, [pc, #668]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005238:	430b      	orrs	r3, r1
 800523a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800523c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005248:	653b      	str	r3, [r7, #80]	; 0x50
 800524a:	2300      	movs	r3, #0
 800524c:	657b      	str	r3, [r7, #84]	; 0x54
 800524e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005252:	460b      	mov	r3, r1
 8005254:	4313      	orrs	r3, r2
 8005256:	d009      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005258:	4b9e      	ldr	r3, [pc, #632]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800525a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005266:	4a9b      	ldr	r2, [pc, #620]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005268:	430b      	orrs	r3, r1
 800526a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800526c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005278:	64bb      	str	r3, [r7, #72]	; 0x48
 800527a:	2300      	movs	r3, #0
 800527c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800527e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005282:	460b      	mov	r3, r1
 8005284:	4313      	orrs	r3, r2
 8005286:	d009      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005288:	4b92      	ldr	r3, [pc, #584]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800528a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8005290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005296:	4a8f      	ldr	r2, [pc, #572]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005298:	430b      	orrs	r3, r1
 800529a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800529c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80052a8:	643b      	str	r3, [r7, #64]	; 0x40
 80052aa:	2300      	movs	r3, #0
 80052ac:	647b      	str	r3, [r7, #68]	; 0x44
 80052ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80052b2:	460b      	mov	r3, r1
 80052b4:	4313      	orrs	r3, r2
 80052b6:	d00e      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052b8:	4b86      	ldr	r3, [pc, #536]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	4a85      	ldr	r2, [pc, #532]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052c2:	6113      	str	r3, [r2, #16]
 80052c4:	4b83      	ldr	r3, [pc, #524]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052c6:	6919      	ldr	r1, [r3, #16]
 80052c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80052d0:	4a80      	ldr	r2, [pc, #512]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052d2:	430b      	orrs	r3, r1
 80052d4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80052d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80052e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80052e4:	2300      	movs	r3, #0
 80052e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80052ec:	460b      	mov	r3, r1
 80052ee:	4313      	orrs	r3, r2
 80052f0:	d009      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80052f2:	4b78      	ldr	r3, [pc, #480]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80052fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005300:	4a74      	ldr	r2, [pc, #464]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005302:	430b      	orrs	r3, r1
 8005304:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005312:	633b      	str	r3, [r7, #48]	; 0x30
 8005314:	2300      	movs	r3, #0
 8005316:	637b      	str	r3, [r7, #52]	; 0x34
 8005318:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800531c:	460b      	mov	r3, r1
 800531e:	4313      	orrs	r3, r2
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005322:	4b6c      	ldr	r3, [pc, #432]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800532a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800532e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005332:	4a68      	ldr	r2, [pc, #416]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005334:	430b      	orrs	r3, r1
 8005336:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	2100      	movs	r1, #0
 8005342:	62b9      	str	r1, [r7, #40]	; 0x28
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800534e:	460b      	mov	r3, r1
 8005350:	4313      	orrs	r3, r2
 8005352:	d011      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005354:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005358:	3308      	adds	r3, #8
 800535a:	2100      	movs	r1, #0
 800535c:	4618      	mov	r0, r3
 800535e:	f001 f9a3 	bl	80066a8 <RCCEx_PLL2_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005368:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005374:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	2100      	movs	r1, #0
 8005382:	6239      	str	r1, [r7, #32]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
 800538a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800538e:	460b      	mov	r3, r1
 8005390:	4313      	orrs	r3, r2
 8005392:	d011      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005398:	3308      	adds	r3, #8
 800539a:	2101      	movs	r1, #1
 800539c:	4618      	mov	r0, r3
 800539e:	f001 f983 	bl	80066a8 <RCCEx_PLL2_Config>
 80053a2:	4603      	mov	r3, r0
 80053a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80053a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80053b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	2100      	movs	r1, #0
 80053c2:	61b9      	str	r1, [r7, #24]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80053ce:	460b      	mov	r3, r1
 80053d0:	4313      	orrs	r3, r2
 80053d2:	d011      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d8:	3308      	adds	r3, #8
 80053da:	2102      	movs	r1, #2
 80053dc:	4618      	mov	r0, r3
 80053de:	f001 f963 	bl	80066a8 <RCCEx_PLL2_Config>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80053e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80053f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	2100      	movs	r1, #0
 8005402:	6139      	str	r1, [r7, #16]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800540e:	460b      	mov	r3, r1
 8005410:	4313      	orrs	r3, r2
 8005412:	d011      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005418:	3328      	adds	r3, #40	; 0x28
 800541a:	2100      	movs	r1, #0
 800541c:	4618      	mov	r0, r3
 800541e:	f001 f9f5 	bl	800680c <RCCEx_PLL3_Config>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8005428:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005430:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005434:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	2100      	movs	r1, #0
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800544e:	460b      	mov	r3, r1
 8005450:	4313      	orrs	r3, r2
 8005452:	d011      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005458:	3328      	adds	r3, #40	; 0x28
 800545a:	2101      	movs	r1, #1
 800545c:	4618      	mov	r0, r3
 800545e:	f001 f9d5 	bl	800680c <RCCEx_PLL3_Config>
 8005462:	4603      	mov	r3, r0
 8005464:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005468:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005474:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	2100      	movs	r1, #0
 8005482:	6039      	str	r1, [r7, #0]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	607b      	str	r3, [r7, #4]
 800548a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800548e:	460b      	mov	r3, r1
 8005490:	4313      	orrs	r3, r2
 8005492:	d011      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005498:	3328      	adds	r3, #40	; 0x28
 800549a:	2102      	movs	r1, #2
 800549c:	4618      	mov	r0, r3
 800549e:	f001 f9b5 	bl	800680c <RCCEx_PLL3_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80054a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80054b8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e000      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80054cc:	46bd      	mov	sp, r7
 80054ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d2:	bf00      	nop
 80054d4:	58024400 	.word	0x58024400

080054d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b090      	sub	sp, #64	; 0x40
 80054dc:	af00      	add	r7, sp, #0
 80054de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80054e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80054ea:	430b      	orrs	r3, r1
 80054ec:	f040 8094 	bne.w	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80054f0:	4b97      	ldr	r3, [pc, #604]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	f200 8087 	bhi.w	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005502:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	0800551d 	.word	0x0800551d
 800550c:	08005545 	.word	0x08005545
 8005510:	0800556d 	.word	0x0800556d
 8005514:	08005609 	.word	0x08005609
 8005518:	08005595 	.word	0x08005595
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800551c:	4b8c      	ldr	r3, [pc, #560]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005528:	d108      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800552a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800552e:	4618      	mov	r0, r3
 8005530:	f000 ff68 	bl	8006404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005538:	f000 bc97 	b.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005540:	f000 bc93 	b.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005544:	4b82      	ldr	r3, [pc, #520]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800554c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005550:	d108      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005552:	f107 0318 	add.w	r3, r7, #24
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fcac 	bl	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005560:	f000 bc83 	b.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005568:	f000 bc7f 	b.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800556c:	4b78      	ldr	r3, [pc, #480]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005578:	d108      	bne.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800557a:	f107 030c 	add.w	r3, r7, #12
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fdec 	bl	800615c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005588:	f000 bc6f 	b.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005590:	f000 bc6b 	b.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005594:	4b6e      	ldr	r3, [pc, #440]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005598:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800559c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800559e:	4b6c      	ldr	r3, [pc, #432]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d10c      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80055aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d109      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055b0:	4b67      	ldr	r3, [pc, #412]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	08db      	lsrs	r3, r3, #3
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	4a66      	ldr	r2, [pc, #408]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c2:	e01f      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055c4:	4b62      	ldr	r3, [pc, #392]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d0:	d106      	bne.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80055d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055d8:	d102      	bne.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80055da:	4b5f      	ldr	r3, [pc, #380]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80055dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055de:	e011      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055e0:	4b5b      	ldr	r3, [pc, #364]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ec:	d106      	bne.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055f4:	d102      	bne.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055f6:	4b59      	ldr	r3, [pc, #356]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055fa:	e003      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005600:	f000 bc33 	b.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005604:	f000 bc31 	b.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005608:	4b55      	ldr	r3, [pc, #340]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800560c:	f000 bc2d 	b.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005614:	f000 bc29 	b.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800561c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005620:	430b      	orrs	r3, r1
 8005622:	f040 809f 	bne.w	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8005626:	4b4a      	ldr	r3, [pc, #296]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800562e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005636:	d04d      	beq.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563e:	f200 8084 	bhi.w	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	2bc0      	cmp	r3, #192	; 0xc0
 8005646:	d07d      	beq.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	2bc0      	cmp	r3, #192	; 0xc0
 800564c:	d87d      	bhi.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	2b80      	cmp	r3, #128	; 0x80
 8005652:	d02d      	beq.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	2b80      	cmp	r3, #128	; 0x80
 8005658:	d877      	bhi.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	2b40      	cmp	r3, #64	; 0x40
 8005664:	d012      	beq.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005666:	e070      	b.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005668:	4b39      	ldr	r3, [pc, #228]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005674:	d107      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fec2 	bl	8006404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005684:	e3f1      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005686:	2300      	movs	r3, #0
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800568a:	e3ee      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800568c:	4b30      	ldr	r3, [pc, #192]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005698:	d107      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800569a:	f107 0318 	add.w	r3, r7, #24
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fc08 	bl	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056a8:	e3df      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ae:	e3dc      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056b0:	4b27      	ldr	r3, [pc, #156]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056bc:	d107      	bne.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056be:	f107 030c 	add.w	r3, r7, #12
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fd4a 	bl	800615c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056cc:	e3cd      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d2:	e3ca      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056d4:	4b1e      	ldr	r3, [pc, #120]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80056d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056de:	4b1c      	ldr	r3, [pc, #112]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d10c      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80056ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056f0:	4b17      	ldr	r3, [pc, #92]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	08db      	lsrs	r3, r3, #3
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	4a16      	ldr	r2, [pc, #88]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80056fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005702:	e01e      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005704:	4b12      	ldr	r3, [pc, #72]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005710:	d106      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005714:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005718:	d102      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800571c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800571e:	e010      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005728:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800572c:	d106      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800572e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005734:	d102      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005736:	4b09      	ldr	r3, [pc, #36]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800573a:	e002      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005740:	e393      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005742:	e392      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005744:	4b06      	ldr	r3, [pc, #24]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005748:	e38f      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800574e:	e38c      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005750:	58024400 	.word	0x58024400
 8005754:	03d09000 	.word	0x03d09000
 8005758:	003d0900 	.word	0x003d0900
 800575c:	007a1200 	.word	0x007a1200
 8005760:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005768:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800576c:	430b      	orrs	r3, r1
 800576e:	f040 809c 	bne.w	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8005772:	4b9e      	ldr	r3, [pc, #632]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005776:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800577a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005782:	d054      	beq.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578a:	f200 808b 	bhi.w	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005794:	f000 8083 	beq.w	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800579e:	f200 8081 	bhi.w	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a8:	d02f      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b0:	d878      	bhi.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057be:	d012      	beq.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80057c0:	e070      	b.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057c2:	4b8a      	ldr	r3, [pc, #552]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057ce:	d107      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fe15 	bl	8006404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057de:	e344      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057e4:	e341      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057e6:	4b81      	ldr	r3, [pc, #516]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057f2:	d107      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057f4:	f107 0318 	add.w	r3, r7, #24
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fb5b 	bl	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005802:	e332      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005808:	e32f      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800580a:	4b78      	ldr	r3, [pc, #480]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005816:	d107      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005818:	f107 030c 	add.w	r3, r7, #12
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fc9d 	bl	800615c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005826:	e320      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800582c:	e31d      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800582e:	4b6f      	ldr	r3, [pc, #444]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005832:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005836:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005838:	4b6c      	ldr	r3, [pc, #432]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b04      	cmp	r3, #4
 8005842:	d10c      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005846:	2b00      	cmp	r3, #0
 8005848:	d109      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800584a:	4b68      	ldr	r3, [pc, #416]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	08db      	lsrs	r3, r3, #3
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	4a66      	ldr	r2, [pc, #408]	; (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005856:	fa22 f303 	lsr.w	r3, r2, r3
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800585c:	e01e      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800585e:	4b63      	ldr	r3, [pc, #396]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586a:	d106      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800586c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005872:	d102      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005874:	4b5f      	ldr	r3, [pc, #380]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005878:	e010      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800587a:	4b5c      	ldr	r3, [pc, #368]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005882:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005886:	d106      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800588e:	d102      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005890:	4b59      	ldr	r3, [pc, #356]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005894:	e002      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800589a:	e2e6      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800589c:	e2e5      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800589e:	4b57      	ldr	r3, [pc, #348]	; (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a2:	e2e2      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a8:	e2df      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80058aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80058b2:	430b      	orrs	r3, r1
 80058b4:	f040 80a7 	bne.w	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80058b8:	4b4c      	ldr	r3, [pc, #304]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80058ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80058c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058c8:	d055      	beq.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058d0:	f200 8096 	bhi.w	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058da:	f000 8084 	beq.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058e4:	f200 808c 	bhi.w	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ee:	d030      	beq.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f6:	f200 8083 	bhi.w	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d004      	beq.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005906:	d012      	beq.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8005908:	e07a      	b.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800590a:	4b38      	ldr	r3, [pc, #224]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005912:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005916:	d107      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fd71 	bl	8006404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005926:	e2a0      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800592c:	e29d      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800592e:	4b2f      	ldr	r3, [pc, #188]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800593a:	d107      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800593c:	f107 0318 	add.w	r3, r7, #24
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fab7 	bl	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800594a:	e28e      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005950:	e28b      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005952:	4b26      	ldr	r3, [pc, #152]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800595a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800595e:	d107      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fbf9 	bl	800615c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800596e:	e27c      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005974:	e279      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005976:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800597e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005980:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b04      	cmp	r3, #4
 800598a:	d10c      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800598c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005992:	4b16      	ldr	r3, [pc, #88]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	08db      	lsrs	r3, r3, #3
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	4a14      	ldr	r2, [pc, #80]	; (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800599e:	fa22 f303 	lsr.w	r3, r2, r3
 80059a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059a4:	e01e      	b.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059a6:	4b11      	ldr	r3, [pc, #68]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b2:	d106      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80059b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ba:	d102      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80059bc:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80059be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c0:	e010      	b.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059c2:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ce:	d106      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80059d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059d6:	d102      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059d8:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80059da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059dc:	e002      	b.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80059e2:	e242      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80059e4:	e241      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80059e6:	4b05      	ldr	r3, [pc, #20]	; (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80059e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059ea:	e23e      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80059ec:	58024400 	.word	0x58024400
 80059f0:	03d09000 	.word	0x03d09000
 80059f4:	003d0900 	.word	0x003d0900
 80059f8:	007a1200 	.word	0x007a1200
 80059fc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a04:	e231      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a0a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	f040 8085 	bne.w	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005a14:	4b9c      	ldr	r3, [pc, #624]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a18:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005a1c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a24:	d06b      	beq.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a2c:	d874      	bhi.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a34:	d056      	beq.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a3c:	d86c      	bhi.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a44:	d03b      	beq.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8005a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a4c:	d864      	bhi.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a54:	d021      	beq.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a5c:	d85c      	bhi.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6a:	d004      	beq.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8005a6c:	e054      	b.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005a6e:	f7fe fb49 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 8005a72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a74:	e1f9      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a76:	4b84      	ldr	r3, [pc, #528]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a82:	d107      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a84:	f107 0318 	add.w	r3, r7, #24
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 fa13 	bl	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a92:	e1ea      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a98:	e1e7      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a9a:	4b7b      	ldr	r3, [pc, #492]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aa6:	d107      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aa8:	f107 030c 	add.w	r3, r7, #12
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fb55 	bl	800615c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ab6:	e1d8      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005abc:	e1d5      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005abe:	4b72      	ldr	r3, [pc, #456]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d109      	bne.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aca:	4b6f      	ldr	r3, [pc, #444]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	08db      	lsrs	r3, r3, #3
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	4a6d      	ldr	r2, [pc, #436]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005adc:	e1c5      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ae2:	e1c2      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ae4:	4b68      	ldr	r3, [pc, #416]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af0:	d102      	bne.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8005af2:	4b67      	ldr	r3, [pc, #412]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005af6:	e1b8      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005afc:	e1b5      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005afe:	4b62      	ldr	r3, [pc, #392]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b0a:	d102      	bne.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8005b0c:	4b61      	ldr	r3, [pc, #388]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b10:	e1ab      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b16:	e1a8      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b1c:	e1a5      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b22:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005b26:	430b      	orrs	r3, r1
 8005b28:	d173      	bne.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005b2a:	4b57      	ldr	r3, [pc, #348]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b32:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b3a:	d02f      	beq.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b42:	d863      	bhi.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d004      	beq.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b50:	d012      	beq.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8005b52:	e05b      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b54:	4b4c      	ldr	r3, [pc, #304]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b60:	d107      	bne.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b62:	f107 0318 	add.w	r3, r7, #24
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f9a4 	bl	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b70:	e17b      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b72:	2300      	movs	r3, #0
 8005b74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b76:	e178      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b78:	4b43      	ldr	r3, [pc, #268]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b84:	d107      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b86:	f107 030c 	add.w	r3, r7, #12
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fae6 	bl	800615c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b94:	e169      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b9a:	e166      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b9c:	4b3a      	ldr	r3, [pc, #232]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ba4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ba6:	4b38      	ldr	r3, [pc, #224]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d10c      	bne.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d109      	bne.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bb8:	4b33      	ldr	r3, [pc, #204]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	08db      	lsrs	r3, r3, #3
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	4a32      	ldr	r2, [pc, #200]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bca:	e01e      	b.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bcc:	4b2e      	ldr	r3, [pc, #184]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd8:	d106      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8005bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005be0:	d102      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005be2:	4b2b      	ldr	r3, [pc, #172]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be6:	e010      	b.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005be8:	4b27      	ldr	r3, [pc, #156]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bf4:	d106      	bne.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bfc:	d102      	bne.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005bfe:	4b25      	ldr	r3, [pc, #148]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c02:	e002      	b.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005c08:	e12f      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005c0a:	e12e      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c10:	e12b      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c16:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	d13c      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005c1e:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c26:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c34:	d012      	beq.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8005c36:	e023      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c38:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c44:	d107      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fbda 	bl	8006404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c54:	e109      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c5a:	e106      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c68:	d107      	bne.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c6a:	f107 0318 	add.w	r3, r7, #24
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 f920 	bl	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c78:	e0f7      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c7e:	e0f4      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c84:	e0f1      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005c86:	bf00      	nop
 8005c88:	58024400 	.word	0x58024400
 8005c8c:	03d09000 	.word	0x03d09000
 8005c90:	003d0900 	.word	0x003d0900
 8005c94:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c9c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	f040 8091 	bne.w	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005ca6:	4b73      	ldr	r3, [pc, #460]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005caa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005cae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005cb6:	f000 8081 	beq.w	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005cc0:	d87f      	bhi.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cc8:	d06b      	beq.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cd0:	d877      	bhi.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd8:	d056      	beq.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce0:	d86f      	bhi.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ce8:	d03b      	beq.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cf0:	d867      	bhi.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf8:	d021      	beq.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d00:	d85f      	bhi.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d004      	beq.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d0e:	d004      	beq.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005d10:	e057      	b.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005d12:	f000 f8b9 	bl	8005e88 <HAL_RCCEx_GetD3PCLK1Freq>
 8005d16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d18:	e0a7      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d1a:	4b56      	ldr	r3, [pc, #344]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d26:	d107      	bne.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d28:	f107 0318 	add.w	r3, r7, #24
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 f8c1 	bl	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d36:	e098      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d3c:	e095      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d3e:	4b4d      	ldr	r3, [pc, #308]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d4a:	d107      	bne.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d4c:	f107 030c 	add.w	r3, r7, #12
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fa03 	bl	800615c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d5a:	e086      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d60:	e083      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d62:	4b44      	ldr	r3, [pc, #272]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d109      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d6e:	4b41      	ldr	r3, [pc, #260]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	08db      	lsrs	r3, r3, #3
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	4a3f      	ldr	r2, [pc, #252]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d80:	e073      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d86:	e070      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005d88:	4b3a      	ldr	r3, [pc, #232]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d94:	d102      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8005d96:	4b39      	ldr	r3, [pc, #228]	; (8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8005d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d9a:	e066      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005da0:	e063      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005da2:	4b34      	ldr	r3, [pc, #208]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dae:	d102      	bne.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8005db0:	4b33      	ldr	r3, [pc, #204]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005db4:	e059      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dba:	e056      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005dbc:	4b31      	ldr	r3, [pc, #196]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dc0:	e053      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dc6:	e050      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dcc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	d148      	bne.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005dd4:	4b27      	ldr	r3, [pc, #156]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ddc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005de4:	d02a      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dec:	d838      	bhi.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8005df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dfa:	d00d      	beq.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005dfc:	e030      	b.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005dfe:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e0a:	d102      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8005e0c:	4b1c      	ldr	r3, [pc, #112]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e10:	e02b      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e16:	e028      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e18:	4b16      	ldr	r3, [pc, #88]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e24:	d107      	bne.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 faea 	bl	8006404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e34:	e019      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e3a:	e016      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e3c:	4b0d      	ldr	r3, [pc, #52]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e48:	d107      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e4a:	f107 0318 	add.w	r3, r7, #24
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 f830 	bl	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e58:	e007      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e5e:	e004      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e64:	e001      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3740      	adds	r7, #64	; 0x40
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	58024400 	.word	0x58024400
 8005e78:	03d09000 	.word	0x03d09000
 8005e7c:	003d0900 	.word	0x003d0900
 8005e80:	007a1200 	.word	0x007a1200
 8005e84:	00bb8000 	.word	0x00bb8000

08005e88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005e8c:	f7fe f90a 	bl	80040a4 <HAL_RCC_GetHCLKFreq>
 8005e90:	4602      	mov	r2, r0
 8005e92:	4b06      	ldr	r3, [pc, #24]	; (8005eac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	091b      	lsrs	r3, r3, #4
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	4904      	ldr	r1, [pc, #16]	; (8005eb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	58024400 	.word	0x58024400
 8005eb0:	08008f7c 	.word	0x08008f7c

08005eb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b089      	sub	sp, #36	; 0x24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ebc:	4ba1      	ldr	r3, [pc, #644]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	f003 0303 	and.w	r3, r3, #3
 8005ec4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005ec6:	4b9f      	ldr	r3, [pc, #636]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	0b1b      	lsrs	r3, r3, #12
 8005ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ed0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ed2:	4b9c      	ldr	r3, [pc, #624]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	091b      	lsrs	r3, r3, #4
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005ede:	4b99      	ldr	r3, [pc, #612]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee2:	08db      	lsrs	r3, r3, #3
 8005ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8111 	beq.w	8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	f000 8083 	beq.w	8006010 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	f200 80a1 	bhi.w	8006054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d056      	beq.n	8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005f1e:	e099      	b.n	8006054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f20:	4b88      	ldr	r3, [pc, #544]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d02d      	beq.n	8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f2c:	4b85      	ldr	r3, [pc, #532]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	08db      	lsrs	r3, r3, #3
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	4a84      	ldr	r2, [pc, #528]	; (8006148 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	ee07 3a90 	vmov	s15, r3
 8005f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f56:	4b7b      	ldr	r3, [pc, #492]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800614c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f86:	e087      	b.n	8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006150 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9a:	4b6a      	ldr	r3, [pc, #424]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800614c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fca:	e065      	b.n	8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fde:	4b59      	ldr	r3, [pc, #356]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ff2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800614c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800600e:	e043      	b.n	8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800601e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006022:	4b48      	ldr	r3, [pc, #288]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006032:	ed97 6a03 	vldr	s12, [r7, #12]
 8006036:	eddf 5a45 	vldr	s11, [pc, #276]	; 800614c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800603a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006052:	e021      	b.n	8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006066:	4b37      	ldr	r3, [pc, #220]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006076:	ed97 6a03 	vldr	s12, [r7, #12]
 800607a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800614c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800607e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800608a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006096:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006098:	4b2a      	ldr	r3, [pc, #168]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	0a5b      	lsrs	r3, r3, #9
 800609e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060be:	ee17 2a90 	vmov	r2, s15
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80060c6:	4b1f      	ldr	r3, [pc, #124]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	0c1b      	lsrs	r3, r3, #16
 80060cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ec:	ee17 2a90 	vmov	r2, s15
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80060f4:	4b13      	ldr	r3, [pc, #76]	; (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	0e1b      	lsrs	r3, r3, #24
 80060fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800610a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800610e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800611a:	ee17 2a90 	vmov	r2, s15
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006122:	e008      	b.n	8006136 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	609a      	str	r2, [r3, #8]
}
 8006136:	bf00      	nop
 8006138:	3724      	adds	r7, #36	; 0x24
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	58024400 	.word	0x58024400
 8006148:	03d09000 	.word	0x03d09000
 800614c:	46000000 	.word	0x46000000
 8006150:	4c742400 	.word	0x4c742400
 8006154:	4a742400 	.word	0x4a742400
 8006158:	4af42400 	.word	0x4af42400

0800615c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800615c:	b480      	push	{r7}
 800615e:	b089      	sub	sp, #36	; 0x24
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006164:	4ba1      	ldr	r3, [pc, #644]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	f003 0303 	and.w	r3, r3, #3
 800616c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800616e:	4b9f      	ldr	r3, [pc, #636]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	0d1b      	lsrs	r3, r3, #20
 8006174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006178:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800617a:	4b9c      	ldr	r3, [pc, #624]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	0a1b      	lsrs	r3, r3, #8
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006186:	4b99      	ldr	r3, [pc, #612]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618a:	08db      	lsrs	r3, r3, #3
 800618c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	fb02 f303 	mul.w	r3, r2, r3
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8111 	beq.w	80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	f000 8083 	beq.w	80062b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	f200 80a1 	bhi.w	80062fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d056      	beq.n	8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80061c6:	e099      	b.n	80062fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061c8:	4b88      	ldr	r3, [pc, #544]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d02d      	beq.n	8006230 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061d4:	4b85      	ldr	r3, [pc, #532]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	08db      	lsrs	r3, r3, #3
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	4a84      	ldr	r2, [pc, #528]	; (80063f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80061e0:	fa22 f303 	lsr.w	r3, r2, r3
 80061e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	ee07 3a90 	vmov	s15, r3
 80061ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061fe:	4b7b      	ldr	r3, [pc, #492]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800620e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006212:	eddf 5a78 	vldr	s11, [pc, #480]	; 80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800621a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800621e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800622e:	e087      	b.n	8006340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800623e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006242:	4b6a      	ldr	r3, [pc, #424]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006252:	ed97 6a03 	vldr	s12, [r7, #12]
 8006256:	eddf 5a67 	vldr	s11, [pc, #412]	; 80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800625a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800625e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006272:	e065      	b.n	8006340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80063fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006286:	4b59      	ldr	r3, [pc, #356]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006296:	ed97 6a03 	vldr	s12, [r7, #12]
 800629a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800629e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062b6:	e043      	b.n	8006340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80062c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ca:	4b48      	ldr	r3, [pc, #288]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062da:	ed97 6a03 	vldr	s12, [r7, #12]
 80062de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062fa:	e021      	b.n	8006340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006306:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80063fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800630a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800630e:	4b37      	ldr	r3, [pc, #220]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006322:	eddf 5a34 	vldr	s11, [pc, #208]	; 80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800632a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800632e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800633e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006340:	4b2a      	ldr	r3, [pc, #168]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006344:	0a5b      	lsrs	r3, r3, #9
 8006346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800635a:	edd7 6a07 	vldr	s13, [r7, #28]
 800635e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006366:	ee17 2a90 	vmov	r2, s15
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800636e:	4b1f      	ldr	r3, [pc, #124]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	0c1b      	lsrs	r3, r3, #16
 8006374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006378:	ee07 3a90 	vmov	s15, r3
 800637c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006384:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006388:	edd7 6a07 	vldr	s13, [r7, #28]
 800638c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006394:	ee17 2a90 	vmov	r2, s15
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800639c:	4b13      	ldr	r3, [pc, #76]	; (80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	0e1b      	lsrs	r3, r3, #24
 80063a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80063ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063c2:	ee17 2a90 	vmov	r2, s15
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80063ca:	e008      	b.n	80063de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	609a      	str	r2, [r3, #8]
}
 80063de:	bf00      	nop
 80063e0:	3724      	adds	r7, #36	; 0x24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	58024400 	.word	0x58024400
 80063f0:	03d09000 	.word	0x03d09000
 80063f4:	46000000 	.word	0x46000000
 80063f8:	4c742400 	.word	0x4c742400
 80063fc:	4a742400 	.word	0x4a742400
 8006400:	4af42400 	.word	0x4af42400

08006404 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006404:	b480      	push	{r7}
 8006406:	b089      	sub	sp, #36	; 0x24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800640c:	4ba0      	ldr	r3, [pc, #640]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006416:	4b9e      	ldr	r3, [pc, #632]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	091b      	lsrs	r3, r3, #4
 800641c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006420:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006422:	4b9b      	ldr	r3, [pc, #620]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800642c:	4b98      	ldr	r3, [pc, #608]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800642e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006430:	08db      	lsrs	r3, r3, #3
 8006432:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	fb02 f303 	mul.w	r3, r2, r3
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006444:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 8111 	beq.w	8006672 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	2b02      	cmp	r3, #2
 8006454:	f000 8083 	beq.w	800655e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	2b02      	cmp	r3, #2
 800645c:	f200 80a1 	bhi.w	80065a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d056      	beq.n	800651a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800646c:	e099      	b.n	80065a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800646e:	4b88      	ldr	r3, [pc, #544]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d02d      	beq.n	80064d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800647a:	4b85      	ldr	r3, [pc, #532]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	08db      	lsrs	r3, r3, #3
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	4a83      	ldr	r2, [pc, #524]	; (8006694 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006486:	fa22 f303 	lsr.w	r3, r2, r3
 800648a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	ee07 3a90 	vmov	s15, r3
 800649c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064a4:	4b7a      	ldr	r3, [pc, #488]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ac:	ee07 3a90 	vmov	s15, r3
 80064b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80064b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80064bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064d4:	e087      	b.n	80065e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	ee07 3a90 	vmov	s15, r3
 80064dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800669c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80064e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e8:	4b69      	ldr	r3, [pc, #420]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f0:	ee07 3a90 	vmov	s15, r3
 80064f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80064fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006500:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006508:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800650c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006514:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006518:	e065      	b.n	80065e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	ee07 3a90 	vmov	s15, r3
 8006520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006524:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80066a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800652c:	4b58      	ldr	r3, [pc, #352]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800652e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006534:	ee07 3a90 	vmov	s15, r3
 8006538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800653c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006540:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006544:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006548:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800654c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006558:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800655c:	e043      	b.n	80065e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	ee07 3a90 	vmov	s15, r3
 8006564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006568:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80066a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800656c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006570:	4b47      	ldr	r3, [pc, #284]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006578:	ee07 3a90 	vmov	s15, r3
 800657c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006580:	ed97 6a03 	vldr	s12, [r7, #12]
 8006584:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006588:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006590:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065a0:	e021      	b.n	80065e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	ee07 3a90 	vmov	s15, r3
 80065a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800669c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80065b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b4:	4b36      	ldr	r3, [pc, #216]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065bc:	ee07 3a90 	vmov	s15, r3
 80065c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80065c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80065e6:	4b2a      	ldr	r3, [pc, #168]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ea:	0a5b      	lsrs	r3, r3, #9
 80065ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f0:	ee07 3a90 	vmov	s15, r3
 80065f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006600:	edd7 6a07 	vldr	s13, [r7, #28]
 8006604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800660c:	ee17 2a90 	vmov	r2, s15
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006614:	4b1e      	ldr	r3, [pc, #120]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	0c1b      	lsrs	r3, r3, #16
 800661a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800662a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800662e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800663a:	ee17 2a90 	vmov	r2, s15
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006642:	4b13      	ldr	r3, [pc, #76]	; (8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	0e1b      	lsrs	r3, r3, #24
 8006648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800664c:	ee07 3a90 	vmov	s15, r3
 8006650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006658:	ee37 7a87 	vadd.f32	s14, s15, s14
 800665c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006668:	ee17 2a90 	vmov	r2, s15
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006670:	e008      	b.n	8006684 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	609a      	str	r2, [r3, #8]
}
 8006684:	bf00      	nop
 8006686:	3724      	adds	r7, #36	; 0x24
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	58024400 	.word	0x58024400
 8006694:	03d09000 	.word	0x03d09000
 8006698:	46000000 	.word	0x46000000
 800669c:	4c742400 	.word	0x4c742400
 80066a0:	4a742400 	.word	0x4a742400
 80066a4:	4af42400 	.word	0x4af42400

080066a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066b6:	4b53      	ldr	r3, [pc, #332]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d101      	bne.n	80066c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e099      	b.n	80067fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80066c6:	4b4f      	ldr	r3, [pc, #316]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a4e      	ldr	r2, [pc, #312]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 80066cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066d2:	f7fb f87f 	bl	80017d4 <HAL_GetTick>
 80066d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066d8:	e008      	b.n	80066ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80066da:	f7fb f87b 	bl	80017d4 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e086      	b.n	80067fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066ec:	4b45      	ldr	r3, [pc, #276]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1f0      	bne.n	80066da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80066f8:	4b42      	ldr	r3, [pc, #264]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	031b      	lsls	r3, r3, #12
 8006706:	493f      	ldr	r1, [pc, #252]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 8006708:	4313      	orrs	r3, r2
 800670a:	628b      	str	r3, [r1, #40]	; 0x28
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	3b01      	subs	r3, #1
 8006712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	3b01      	subs	r3, #1
 800671c:	025b      	lsls	r3, r3, #9
 800671e:	b29b      	uxth	r3, r3
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	3b01      	subs	r3, #1
 8006728:	041b      	lsls	r3, r3, #16
 800672a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	3b01      	subs	r3, #1
 8006736:	061b      	lsls	r3, r3, #24
 8006738:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800673c:	4931      	ldr	r1, [pc, #196]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 800673e:	4313      	orrs	r3, r2
 8006740:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006742:	4b30      	ldr	r3, [pc, #192]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	492d      	ldr	r1, [pc, #180]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 8006750:	4313      	orrs	r3, r2
 8006752:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006754:	4b2b      	ldr	r3, [pc, #172]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	f023 0220 	bic.w	r2, r3, #32
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	4928      	ldr	r1, [pc, #160]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 8006762:	4313      	orrs	r3, r2
 8006764:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006766:	4b27      	ldr	r3, [pc, #156]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	4a26      	ldr	r2, [pc, #152]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 800676c:	f023 0310 	bic.w	r3, r3, #16
 8006770:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006772:	4b24      	ldr	r3, [pc, #144]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 8006774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006776:	4b24      	ldr	r3, [pc, #144]	; (8006808 <RCCEx_PLL2_Config+0x160>)
 8006778:	4013      	ands	r3, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	69d2      	ldr	r2, [r2, #28]
 800677e:	00d2      	lsls	r2, r2, #3
 8006780:	4920      	ldr	r1, [pc, #128]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 8006782:	4313      	orrs	r3, r2
 8006784:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006786:	4b1f      	ldr	r3, [pc, #124]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	4a1e      	ldr	r2, [pc, #120]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 800678c:	f043 0310 	orr.w	r3, r3, #16
 8006790:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006798:	4b1a      	ldr	r3, [pc, #104]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	4a19      	ldr	r2, [pc, #100]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 800679e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067a4:	e00f      	b.n	80067c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d106      	bne.n	80067ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80067ac:	4b15      	ldr	r3, [pc, #84]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	4a14      	ldr	r2, [pc, #80]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 80067b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067b8:	e005      	b.n	80067c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80067ba:	4b12      	ldr	r3, [pc, #72]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067be:	4a11      	ldr	r2, [pc, #68]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 80067c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80067c6:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a0e      	ldr	r2, [pc, #56]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 80067cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d2:	f7fa ffff 	bl	80017d4 <HAL_GetTick>
 80067d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067d8:	e008      	b.n	80067ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067da:	f7fa fffb 	bl	80017d4 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e006      	b.n	80067fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <RCCEx_PLL2_Config+0x15c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0f0      	beq.n	80067da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	58024400 	.word	0x58024400
 8006808:	ffff0007 	.word	0xffff0007

0800680c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800681a:	4b53      	ldr	r3, [pc, #332]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	2b03      	cmp	r3, #3
 8006824:	d101      	bne.n	800682a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e099      	b.n	800695e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800682a:	4b4f      	ldr	r3, [pc, #316]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a4e      	ldr	r2, [pc, #312]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 8006830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006836:	f7fa ffcd 	bl	80017d4 <HAL_GetTick>
 800683a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800683c:	e008      	b.n	8006850 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800683e:	f7fa ffc9 	bl	80017d4 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d901      	bls.n	8006850 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e086      	b.n	800695e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006850:	4b45      	ldr	r3, [pc, #276]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f0      	bne.n	800683e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800685c:	4b42      	ldr	r3, [pc, #264]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	051b      	lsls	r3, r3, #20
 800686a:	493f      	ldr	r1, [pc, #252]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 800686c:	4313      	orrs	r3, r2
 800686e:	628b      	str	r3, [r1, #40]	; 0x28
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	3b01      	subs	r3, #1
 8006876:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	3b01      	subs	r3, #1
 8006880:	025b      	lsls	r3, r3, #9
 8006882:	b29b      	uxth	r3, r3
 8006884:	431a      	orrs	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	3b01      	subs	r3, #1
 800688c:	041b      	lsls	r3, r3, #16
 800688e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	3b01      	subs	r3, #1
 800689a:	061b      	lsls	r3, r3, #24
 800689c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068a0:	4931      	ldr	r1, [pc, #196]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80068a6:	4b30      	ldr	r3, [pc, #192]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	492d      	ldr	r1, [pc, #180]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80068b8:	4b2b      	ldr	r3, [pc, #172]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	4928      	ldr	r1, [pc, #160]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80068ca:	4b27      	ldr	r3, [pc, #156]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 80068cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ce:	4a26      	ldr	r2, [pc, #152]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 80068d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80068d6:	4b24      	ldr	r3, [pc, #144]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 80068d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068da:	4b24      	ldr	r3, [pc, #144]	; (800696c <RCCEx_PLL3_Config+0x160>)
 80068dc:	4013      	ands	r3, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	69d2      	ldr	r2, [r2, #28]
 80068e2:	00d2      	lsls	r2, r2, #3
 80068e4:	4920      	ldr	r1, [pc, #128]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80068ea:	4b1f      	ldr	r3, [pc, #124]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ee:	4a1e      	ldr	r2, [pc, #120]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 80068f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d106      	bne.n	800690a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80068fc:	4b1a      	ldr	r3, [pc, #104]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	4a19      	ldr	r2, [pc, #100]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 8006902:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006906:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006908:	e00f      	b.n	800692a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d106      	bne.n	800691e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006910:	4b15      	ldr	r3, [pc, #84]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	4a14      	ldr	r2, [pc, #80]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 8006916:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800691a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800691c:	e005      	b.n	800692a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800691e:	4b12      	ldr	r3, [pc, #72]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 8006920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006922:	4a11      	ldr	r2, [pc, #68]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 8006924:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006928:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800692a:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a0e      	ldr	r2, [pc, #56]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 8006930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006936:	f7fa ff4d 	bl	80017d4 <HAL_GetTick>
 800693a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800693c:	e008      	b.n	8006950 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800693e:	f7fa ff49 	bl	80017d4 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e006      	b.n	800695e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006950:	4b05      	ldr	r3, [pc, #20]	; (8006968 <RCCEx_PLL3_Config+0x15c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0f0      	beq.n	800693e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	58024400 	.word	0x58024400
 800696c:	ffff0007 	.word	0xffff0007

08006970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e049      	b.n	8006a16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fa fd08 	bl	80013ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3304      	adds	r3, #4
 80069ac:	4619      	mov	r1, r3
 80069ae:	4610      	mov	r0, r2
 80069b0:	f000 fa0a 	bl	8006dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d001      	beq.n	8006a38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e04c      	b.n	8006ad2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a26      	ldr	r2, [pc, #152]	; (8006ae0 <HAL_TIM_Base_Start+0xc0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d022      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a52:	d01d      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a22      	ldr	r2, [pc, #136]	; (8006ae4 <HAL_TIM_Base_Start+0xc4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d018      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <HAL_TIM_Base_Start+0xc8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d013      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1f      	ldr	r2, [pc, #124]	; (8006aec <HAL_TIM_Base_Start+0xcc>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00e      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1e      	ldr	r2, [pc, #120]	; (8006af0 <HAL_TIM_Base_Start+0xd0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d009      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1c      	ldr	r2, [pc, #112]	; (8006af4 <HAL_TIM_Base_Start+0xd4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d004      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <HAL_TIM_Base_Start+0xd8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d115      	bne.n	8006abc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	4b19      	ldr	r3, [pc, #100]	; (8006afc <HAL_TIM_Base_Start+0xdc>)
 8006a98:	4013      	ands	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b06      	cmp	r3, #6
 8006aa0:	d015      	beq.n	8006ace <HAL_TIM_Base_Start+0xae>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa8:	d011      	beq.n	8006ace <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f042 0201 	orr.w	r2, r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aba:	e008      	b.n	8006ace <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	e000      	b.n	8006ad0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ace:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40010000 	.word	0x40010000
 8006ae4:	40000400 	.word	0x40000400
 8006ae8:	40000800 	.word	0x40000800
 8006aec:	40000c00 	.word	0x40000c00
 8006af0:	40010400 	.word	0x40010400
 8006af4:	40001800 	.word	0x40001800
 8006af8:	40014000 	.word	0x40014000
 8006afc:	00010007 	.word	0x00010007

08006b00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0201 	bic.w	r2, r2, #1
 8006b16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10f      	bne.n	8006b48 <HAL_TIM_Base_Stop_IT+0x48>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6a1a      	ldr	r2, [r3, #32]
 8006b2e:	f240 4344 	movw	r3, #1092	; 0x444
 8006b32:	4013      	ands	r3, r2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d107      	bne.n	8006b48 <HAL_TIM_Base_Stop_IT+0x48>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0201 	bic.w	r2, r2, #1
 8006b46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
	...

08006b60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e08f      	b.n	8006c94 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7fa fbc5 	bl	8001318 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2202      	movs	r2, #2
 8006b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6899      	ldr	r1, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	4b3e      	ldr	r3, [pc, #248]	; (8006c9c <HAL_TIM_Encoder_Init+0x13c>)
 8006ba2:	400b      	ands	r3, r1
 8006ba4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	3304      	adds	r3, #4
 8006bae:	4619      	mov	r1, r3
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	f000 f909 	bl	8006dc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4b31      	ldr	r3, [pc, #196]	; (8006ca0 <HAL_TIM_Encoder_Init+0x140>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	4313      	orrs	r3, r2
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4b2b      	ldr	r3, [pc, #172]	; (8006ca4 <HAL_TIM_Encoder_Init+0x144>)
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <HAL_TIM_Encoder_Init+0x148>)
 8006bfe:	4013      	ands	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	011a      	lsls	r2, r3, #4
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	031b      	lsls	r3, r3, #12
 8006c20:	4313      	orrs	r3, r2
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006c2e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006c36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	4313      	orrs	r3, r2
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	fffebff8 	.word	0xfffebff8
 8006ca0:	fffffcfc 	.word	0xfffffcfc
 8006ca4:	fffff3f3 	.word	0xfffff3f3
 8006ca8:	ffff0f0f 	.word	0xffff0f0f

08006cac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ccc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cd4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d110      	bne.n	8006cfe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d102      	bne.n	8006ce8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ce2:	7b7b      	ldrb	r3, [r7, #13]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d001      	beq.n	8006cec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e069      	b.n	8006dc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cfc:	e031      	b.n	8006d62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d110      	bne.n	8006d26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d102      	bne.n	8006d10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d0a:	7b3b      	ldrb	r3, [r7, #12]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d001      	beq.n	8006d14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e055      	b.n	8006dc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d24:	e01d      	b.n	8006d62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d108      	bne.n	8006d3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d105      	bne.n	8006d3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d32:	7b7b      	ldrb	r3, [r7, #13]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d102      	bne.n	8006d3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d38:	7b3b      	ldrb	r3, [r7, #12]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d001      	beq.n	8006d42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e03e      	b.n	8006dc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2202      	movs	r2, #2
 8006d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_TIM_Encoder_Start+0xc4>
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d008      	beq.n	8006d80 <HAL_TIM_Encoder_Start+0xd4>
 8006d6e:	e00f      	b.n	8006d90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2201      	movs	r2, #1
 8006d76:	2100      	movs	r1, #0
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 f8bf 	bl	8006efc <TIM_CCxChannelCmd>
      break;
 8006d7e:	e016      	b.n	8006dae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2201      	movs	r2, #1
 8006d86:	2104      	movs	r1, #4
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 f8b7 	bl	8006efc <TIM_CCxChannelCmd>
      break;
 8006d8e:	e00e      	b.n	8006dae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2201      	movs	r2, #1
 8006d96:	2100      	movs	r1, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f8af 	bl	8006efc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2201      	movs	r2, #1
 8006da4:	2104      	movs	r1, #4
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 f8a8 	bl	8006efc <TIM_CCxChannelCmd>
      break;
 8006dac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0201 	orr.w	r2, r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a40      	ldr	r2, [pc, #256]	; (8006edc <TIM_Base_SetConfig+0x114>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d013      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de6:	d00f      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a3d      	ldr	r2, [pc, #244]	; (8006ee0 <TIM_Base_SetConfig+0x118>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d00b      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a3c      	ldr	r2, [pc, #240]	; (8006ee4 <TIM_Base_SetConfig+0x11c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d007      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a3b      	ldr	r2, [pc, #236]	; (8006ee8 <TIM_Base_SetConfig+0x120>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d003      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a3a      	ldr	r2, [pc, #232]	; (8006eec <TIM_Base_SetConfig+0x124>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d108      	bne.n	8006e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a2f      	ldr	r2, [pc, #188]	; (8006edc <TIM_Base_SetConfig+0x114>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d01f      	beq.n	8006e62 <TIM_Base_SetConfig+0x9a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e28:	d01b      	beq.n	8006e62 <TIM_Base_SetConfig+0x9a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a2c      	ldr	r2, [pc, #176]	; (8006ee0 <TIM_Base_SetConfig+0x118>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d017      	beq.n	8006e62 <TIM_Base_SetConfig+0x9a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a2b      	ldr	r2, [pc, #172]	; (8006ee4 <TIM_Base_SetConfig+0x11c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d013      	beq.n	8006e62 <TIM_Base_SetConfig+0x9a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a2a      	ldr	r2, [pc, #168]	; (8006ee8 <TIM_Base_SetConfig+0x120>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00f      	beq.n	8006e62 <TIM_Base_SetConfig+0x9a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a29      	ldr	r2, [pc, #164]	; (8006eec <TIM_Base_SetConfig+0x124>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00b      	beq.n	8006e62 <TIM_Base_SetConfig+0x9a>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a28      	ldr	r2, [pc, #160]	; (8006ef0 <TIM_Base_SetConfig+0x128>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d007      	beq.n	8006e62 <TIM_Base_SetConfig+0x9a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a27      	ldr	r2, [pc, #156]	; (8006ef4 <TIM_Base_SetConfig+0x12c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d003      	beq.n	8006e62 <TIM_Base_SetConfig+0x9a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a26      	ldr	r2, [pc, #152]	; (8006ef8 <TIM_Base_SetConfig+0x130>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d108      	bne.n	8006e74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a10      	ldr	r2, [pc, #64]	; (8006edc <TIM_Base_SetConfig+0x114>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00f      	beq.n	8006ec0 <TIM_Base_SetConfig+0xf8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a12      	ldr	r2, [pc, #72]	; (8006eec <TIM_Base_SetConfig+0x124>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00b      	beq.n	8006ec0 <TIM_Base_SetConfig+0xf8>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a11      	ldr	r2, [pc, #68]	; (8006ef0 <TIM_Base_SetConfig+0x128>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d007      	beq.n	8006ec0 <TIM_Base_SetConfig+0xf8>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a10      	ldr	r2, [pc, #64]	; (8006ef4 <TIM_Base_SetConfig+0x12c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d003      	beq.n	8006ec0 <TIM_Base_SetConfig+0xf8>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a0f      	ldr	r2, [pc, #60]	; (8006ef8 <TIM_Base_SetConfig+0x130>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d103      	bne.n	8006ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	615a      	str	r2, [r3, #20]
}
 8006ece:	bf00      	nop
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	40000400 	.word	0x40000400
 8006ee4:	40000800 	.word	0x40000800
 8006ee8:	40000c00 	.word	0x40000c00
 8006eec:	40010400 	.word	0x40010400
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40014400 	.word	0x40014400
 8006ef8:	40014800 	.word	0x40014800

08006efc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	2201      	movs	r2, #1
 8006f10:	fa02 f303 	lsl.w	r3, r2, r3
 8006f14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1a      	ldr	r2, [r3, #32]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	401a      	ands	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a1a      	ldr	r2, [r3, #32]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 031f 	and.w	r3, r3, #31
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	fa01 f303 	lsl.w	r3, r1, r3
 8006f34:	431a      	orrs	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	621a      	str	r2, [r3, #32]
}
 8006f3a:	bf00      	nop
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e06d      	b.n	800703c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a30      	ldr	r2, [pc, #192]	; (8007048 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a2f      	ldr	r2, [pc, #188]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d108      	bne.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a20      	ldr	r2, [pc, #128]	; (8007048 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d022      	beq.n	8007010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd2:	d01d      	beq.n	8007010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1d      	ldr	r2, [pc, #116]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d018      	beq.n	8007010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1c      	ldr	r2, [pc, #112]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d013      	beq.n	8007010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1a      	ldr	r2, [pc, #104]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00e      	beq.n	8007010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a15      	ldr	r2, [pc, #84]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d009      	beq.n	8007010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a16      	ldr	r2, [pc, #88]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d004      	beq.n	8007010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a15      	ldr	r2, [pc, #84]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d10c      	bne.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007016:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	4313      	orrs	r3, r2
 8007020:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	40010000 	.word	0x40010000
 800704c:	40010400 	.word	0x40010400
 8007050:	40000400 	.word	0x40000400
 8007054:	40000800 	.word	0x40000800
 8007058:	40000c00 	.word	0x40000c00
 800705c:	40001800 	.word	0x40001800
 8007060:	40014000 	.word	0x40014000

08007064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e042      	b.n	80070fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707c:	2b00      	cmp	r3, #0
 800707e:	d106      	bne.n	800708e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7fa f9b1 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2224      	movs	r2, #36	; 0x24
 8007092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f8ba 	bl	8007220 <UART_SetConfig>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e022      	b.n	80070fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 ff1a 	bl	8007ef8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0201 	orr.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 ffa1 	bl	800803c <UART_CheckIdleState>
 80070fa:	4603      	mov	r3, r0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08a      	sub	sp, #40	; 0x28
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	4613      	mov	r3, r2
 8007112:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800711a:	2b20      	cmp	r3, #32
 800711c:	d17b      	bne.n	8007216 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <HAL_UART_Transmit+0x26>
 8007124:	88fb      	ldrh	r3, [r7, #6]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e074      	b.n	8007218 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2221      	movs	r2, #33	; 0x21
 800713a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800713e:	f7fa fb49 	bl	80017d4 <HAL_GetTick>
 8007142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	88fa      	ldrh	r2, [r7, #6]
 8007148:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	88fa      	ldrh	r2, [r7, #6]
 8007150:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715c:	d108      	bne.n	8007170 <HAL_UART_Transmit+0x6c>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d104      	bne.n	8007170 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007166:	2300      	movs	r3, #0
 8007168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	61bb      	str	r3, [r7, #24]
 800716e:	e003      	b.n	8007178 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007174:	2300      	movs	r3, #0
 8007176:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007178:	e030      	b.n	80071dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2200      	movs	r2, #0
 8007182:	2180      	movs	r1, #128	; 0x80
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f001 f803 	bl	8008190 <UART_WaitOnFlagUntilTimeout>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2220      	movs	r2, #32
 8007194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e03d      	b.n	8007218 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10b      	bne.n	80071ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	3302      	adds	r3, #2
 80071b6:	61bb      	str	r3, [r7, #24]
 80071b8:	e007      	b.n	80071ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	781a      	ldrb	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	3301      	adds	r3, #1
 80071c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1c8      	bne.n	800717a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2200      	movs	r2, #0
 80071f0:	2140      	movs	r1, #64	; 0x40
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 ffcc 	bl	8008190 <UART_WaitOnFlagUntilTimeout>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d005      	beq.n	800720a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e006      	b.n	8007218 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2220      	movs	r2, #32
 800720e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	e000      	b.n	8007218 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007216:	2302      	movs	r3, #2
  }
}
 8007218:	4618      	mov	r0, r3
 800721a:	3720      	adds	r7, #32
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007224:	b092      	sub	sp, #72	; 0x48
 8007226:	af00      	add	r7, sp, #0
 8007228:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	431a      	orrs	r2, r3
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	431a      	orrs	r2, r3
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	4313      	orrs	r3, r2
 8007246:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	4bbe      	ldr	r3, [pc, #760]	; (8007548 <UART_SetConfig+0x328>)
 8007250:	4013      	ands	r3, r2
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	6812      	ldr	r2, [r2, #0]
 8007256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007258:	430b      	orrs	r3, r1
 800725a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4ab3      	ldr	r2, [pc, #716]	; (800754c <UART_SetConfig+0x32c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d004      	beq.n	800728c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007288:	4313      	orrs	r3, r2
 800728a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	4baf      	ldr	r3, [pc, #700]	; (8007550 <UART_SetConfig+0x330>)
 8007294:	4013      	ands	r3, r2
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	6812      	ldr	r2, [r2, #0]
 800729a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800729c:	430b      	orrs	r3, r1
 800729e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	f023 010f 	bic.w	r1, r3, #15
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4aa6      	ldr	r2, [pc, #664]	; (8007554 <UART_SetConfig+0x334>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d177      	bne.n	80073b0 <UART_SetConfig+0x190>
 80072c0:	4ba5      	ldr	r3, [pc, #660]	; (8007558 <UART_SetConfig+0x338>)
 80072c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072c8:	2b28      	cmp	r3, #40	; 0x28
 80072ca:	d86d      	bhi.n	80073a8 <UART_SetConfig+0x188>
 80072cc:	a201      	add	r2, pc, #4	; (adr r2, 80072d4 <UART_SetConfig+0xb4>)
 80072ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d2:	bf00      	nop
 80072d4:	08007379 	.word	0x08007379
 80072d8:	080073a9 	.word	0x080073a9
 80072dc:	080073a9 	.word	0x080073a9
 80072e0:	080073a9 	.word	0x080073a9
 80072e4:	080073a9 	.word	0x080073a9
 80072e8:	080073a9 	.word	0x080073a9
 80072ec:	080073a9 	.word	0x080073a9
 80072f0:	080073a9 	.word	0x080073a9
 80072f4:	08007381 	.word	0x08007381
 80072f8:	080073a9 	.word	0x080073a9
 80072fc:	080073a9 	.word	0x080073a9
 8007300:	080073a9 	.word	0x080073a9
 8007304:	080073a9 	.word	0x080073a9
 8007308:	080073a9 	.word	0x080073a9
 800730c:	080073a9 	.word	0x080073a9
 8007310:	080073a9 	.word	0x080073a9
 8007314:	08007389 	.word	0x08007389
 8007318:	080073a9 	.word	0x080073a9
 800731c:	080073a9 	.word	0x080073a9
 8007320:	080073a9 	.word	0x080073a9
 8007324:	080073a9 	.word	0x080073a9
 8007328:	080073a9 	.word	0x080073a9
 800732c:	080073a9 	.word	0x080073a9
 8007330:	080073a9 	.word	0x080073a9
 8007334:	08007391 	.word	0x08007391
 8007338:	080073a9 	.word	0x080073a9
 800733c:	080073a9 	.word	0x080073a9
 8007340:	080073a9 	.word	0x080073a9
 8007344:	080073a9 	.word	0x080073a9
 8007348:	080073a9 	.word	0x080073a9
 800734c:	080073a9 	.word	0x080073a9
 8007350:	080073a9 	.word	0x080073a9
 8007354:	08007399 	.word	0x08007399
 8007358:	080073a9 	.word	0x080073a9
 800735c:	080073a9 	.word	0x080073a9
 8007360:	080073a9 	.word	0x080073a9
 8007364:	080073a9 	.word	0x080073a9
 8007368:	080073a9 	.word	0x080073a9
 800736c:	080073a9 	.word	0x080073a9
 8007370:	080073a9 	.word	0x080073a9
 8007374:	080073a1 	.word	0x080073a1
 8007378:	2301      	movs	r3, #1
 800737a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800737e:	e326      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007380:	2304      	movs	r3, #4
 8007382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007386:	e322      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007388:	2308      	movs	r3, #8
 800738a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800738e:	e31e      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007390:	2310      	movs	r3, #16
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007396:	e31a      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007398:	2320      	movs	r3, #32
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739e:	e316      	b.n	80079ce <UART_SetConfig+0x7ae>
 80073a0:	2340      	movs	r3, #64	; 0x40
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a6:	e312      	b.n	80079ce <UART_SetConfig+0x7ae>
 80073a8:	2380      	movs	r3, #128	; 0x80
 80073aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ae:	e30e      	b.n	80079ce <UART_SetConfig+0x7ae>
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a69      	ldr	r2, [pc, #420]	; (800755c <UART_SetConfig+0x33c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d130      	bne.n	800741c <UART_SetConfig+0x1fc>
 80073ba:	4b67      	ldr	r3, [pc, #412]	; (8007558 <UART_SetConfig+0x338>)
 80073bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073be:	f003 0307 	and.w	r3, r3, #7
 80073c2:	2b05      	cmp	r3, #5
 80073c4:	d826      	bhi.n	8007414 <UART_SetConfig+0x1f4>
 80073c6:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <UART_SetConfig+0x1ac>)
 80073c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073cc:	080073e5 	.word	0x080073e5
 80073d0:	080073ed 	.word	0x080073ed
 80073d4:	080073f5 	.word	0x080073f5
 80073d8:	080073fd 	.word	0x080073fd
 80073dc:	08007405 	.word	0x08007405
 80073e0:	0800740d 	.word	0x0800740d
 80073e4:	2300      	movs	r3, #0
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ea:	e2f0      	b.n	80079ce <UART_SetConfig+0x7ae>
 80073ec:	2304      	movs	r3, #4
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f2:	e2ec      	b.n	80079ce <UART_SetConfig+0x7ae>
 80073f4:	2308      	movs	r3, #8
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fa:	e2e8      	b.n	80079ce <UART_SetConfig+0x7ae>
 80073fc:	2310      	movs	r3, #16
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007402:	e2e4      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007404:	2320      	movs	r3, #32
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740a:	e2e0      	b.n	80079ce <UART_SetConfig+0x7ae>
 800740c:	2340      	movs	r3, #64	; 0x40
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007412:	e2dc      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007414:	2380      	movs	r3, #128	; 0x80
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741a:	e2d8      	b.n	80079ce <UART_SetConfig+0x7ae>
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a4f      	ldr	r2, [pc, #316]	; (8007560 <UART_SetConfig+0x340>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d130      	bne.n	8007488 <UART_SetConfig+0x268>
 8007426:	4b4c      	ldr	r3, [pc, #304]	; (8007558 <UART_SetConfig+0x338>)
 8007428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	2b05      	cmp	r3, #5
 8007430:	d826      	bhi.n	8007480 <UART_SetConfig+0x260>
 8007432:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <UART_SetConfig+0x218>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	08007451 	.word	0x08007451
 800743c:	08007459 	.word	0x08007459
 8007440:	08007461 	.word	0x08007461
 8007444:	08007469 	.word	0x08007469
 8007448:	08007471 	.word	0x08007471
 800744c:	08007479 	.word	0x08007479
 8007450:	2300      	movs	r3, #0
 8007452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007456:	e2ba      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007458:	2304      	movs	r3, #4
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745e:	e2b6      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007460:	2308      	movs	r3, #8
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007466:	e2b2      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007468:	2310      	movs	r3, #16
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746e:	e2ae      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007470:	2320      	movs	r3, #32
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007476:	e2aa      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007478:	2340      	movs	r3, #64	; 0x40
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747e:	e2a6      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007480:	2380      	movs	r3, #128	; 0x80
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007486:	e2a2      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a35      	ldr	r2, [pc, #212]	; (8007564 <UART_SetConfig+0x344>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d130      	bne.n	80074f4 <UART_SetConfig+0x2d4>
 8007492:	4b31      	ldr	r3, [pc, #196]	; (8007558 <UART_SetConfig+0x338>)
 8007494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	2b05      	cmp	r3, #5
 800749c:	d826      	bhi.n	80074ec <UART_SetConfig+0x2cc>
 800749e:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <UART_SetConfig+0x284>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	080074bd 	.word	0x080074bd
 80074a8:	080074c5 	.word	0x080074c5
 80074ac:	080074cd 	.word	0x080074cd
 80074b0:	080074d5 	.word	0x080074d5
 80074b4:	080074dd 	.word	0x080074dd
 80074b8:	080074e5 	.word	0x080074e5
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c2:	e284      	b.n	80079ce <UART_SetConfig+0x7ae>
 80074c4:	2304      	movs	r3, #4
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ca:	e280      	b.n	80079ce <UART_SetConfig+0x7ae>
 80074cc:	2308      	movs	r3, #8
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d2:	e27c      	b.n	80079ce <UART_SetConfig+0x7ae>
 80074d4:	2310      	movs	r3, #16
 80074d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074da:	e278      	b.n	80079ce <UART_SetConfig+0x7ae>
 80074dc:	2320      	movs	r3, #32
 80074de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e2:	e274      	b.n	80079ce <UART_SetConfig+0x7ae>
 80074e4:	2340      	movs	r3, #64	; 0x40
 80074e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ea:	e270      	b.n	80079ce <UART_SetConfig+0x7ae>
 80074ec:	2380      	movs	r3, #128	; 0x80
 80074ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074f2:	e26c      	b.n	80079ce <UART_SetConfig+0x7ae>
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a1b      	ldr	r2, [pc, #108]	; (8007568 <UART_SetConfig+0x348>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d142      	bne.n	8007584 <UART_SetConfig+0x364>
 80074fe:	4b16      	ldr	r3, [pc, #88]	; (8007558 <UART_SetConfig+0x338>)
 8007500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	2b05      	cmp	r3, #5
 8007508:	d838      	bhi.n	800757c <UART_SetConfig+0x35c>
 800750a:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <UART_SetConfig+0x2f0>)
 800750c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007510:	08007529 	.word	0x08007529
 8007514:	08007531 	.word	0x08007531
 8007518:	08007539 	.word	0x08007539
 800751c:	08007541 	.word	0x08007541
 8007520:	0800756d 	.word	0x0800756d
 8007524:	08007575 	.word	0x08007575
 8007528:	2300      	movs	r3, #0
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752e:	e24e      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007530:	2304      	movs	r3, #4
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007536:	e24a      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007538:	2308      	movs	r3, #8
 800753a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800753e:	e246      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007540:	2310      	movs	r3, #16
 8007542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007546:	e242      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007548:	cfff69f3 	.word	0xcfff69f3
 800754c:	58000c00 	.word	0x58000c00
 8007550:	11fff4ff 	.word	0x11fff4ff
 8007554:	40011000 	.word	0x40011000
 8007558:	58024400 	.word	0x58024400
 800755c:	40004400 	.word	0x40004400
 8007560:	40004800 	.word	0x40004800
 8007564:	40004c00 	.word	0x40004c00
 8007568:	40005000 	.word	0x40005000
 800756c:	2320      	movs	r3, #32
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007572:	e22c      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007574:	2340      	movs	r3, #64	; 0x40
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757a:	e228      	b.n	80079ce <UART_SetConfig+0x7ae>
 800757c:	2380      	movs	r3, #128	; 0x80
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007582:	e224      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4ab1      	ldr	r2, [pc, #708]	; (8007850 <UART_SetConfig+0x630>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d176      	bne.n	800767c <UART_SetConfig+0x45c>
 800758e:	4bb1      	ldr	r3, [pc, #708]	; (8007854 <UART_SetConfig+0x634>)
 8007590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007596:	2b28      	cmp	r3, #40	; 0x28
 8007598:	d86c      	bhi.n	8007674 <UART_SetConfig+0x454>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <UART_SetConfig+0x380>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	08007645 	.word	0x08007645
 80075a4:	08007675 	.word	0x08007675
 80075a8:	08007675 	.word	0x08007675
 80075ac:	08007675 	.word	0x08007675
 80075b0:	08007675 	.word	0x08007675
 80075b4:	08007675 	.word	0x08007675
 80075b8:	08007675 	.word	0x08007675
 80075bc:	08007675 	.word	0x08007675
 80075c0:	0800764d 	.word	0x0800764d
 80075c4:	08007675 	.word	0x08007675
 80075c8:	08007675 	.word	0x08007675
 80075cc:	08007675 	.word	0x08007675
 80075d0:	08007675 	.word	0x08007675
 80075d4:	08007675 	.word	0x08007675
 80075d8:	08007675 	.word	0x08007675
 80075dc:	08007675 	.word	0x08007675
 80075e0:	08007655 	.word	0x08007655
 80075e4:	08007675 	.word	0x08007675
 80075e8:	08007675 	.word	0x08007675
 80075ec:	08007675 	.word	0x08007675
 80075f0:	08007675 	.word	0x08007675
 80075f4:	08007675 	.word	0x08007675
 80075f8:	08007675 	.word	0x08007675
 80075fc:	08007675 	.word	0x08007675
 8007600:	0800765d 	.word	0x0800765d
 8007604:	08007675 	.word	0x08007675
 8007608:	08007675 	.word	0x08007675
 800760c:	08007675 	.word	0x08007675
 8007610:	08007675 	.word	0x08007675
 8007614:	08007675 	.word	0x08007675
 8007618:	08007675 	.word	0x08007675
 800761c:	08007675 	.word	0x08007675
 8007620:	08007665 	.word	0x08007665
 8007624:	08007675 	.word	0x08007675
 8007628:	08007675 	.word	0x08007675
 800762c:	08007675 	.word	0x08007675
 8007630:	08007675 	.word	0x08007675
 8007634:	08007675 	.word	0x08007675
 8007638:	08007675 	.word	0x08007675
 800763c:	08007675 	.word	0x08007675
 8007640:	0800766d 	.word	0x0800766d
 8007644:	2301      	movs	r3, #1
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764a:	e1c0      	b.n	80079ce <UART_SetConfig+0x7ae>
 800764c:	2304      	movs	r3, #4
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007652:	e1bc      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007654:	2308      	movs	r3, #8
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765a:	e1b8      	b.n	80079ce <UART_SetConfig+0x7ae>
 800765c:	2310      	movs	r3, #16
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007662:	e1b4      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007664:	2320      	movs	r3, #32
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766a:	e1b0      	b.n	80079ce <UART_SetConfig+0x7ae>
 800766c:	2340      	movs	r3, #64	; 0x40
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007672:	e1ac      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767a:	e1a8      	b.n	80079ce <UART_SetConfig+0x7ae>
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a75      	ldr	r2, [pc, #468]	; (8007858 <UART_SetConfig+0x638>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d130      	bne.n	80076e8 <UART_SetConfig+0x4c8>
 8007686:	4b73      	ldr	r3, [pc, #460]	; (8007854 <UART_SetConfig+0x634>)
 8007688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768a:	f003 0307 	and.w	r3, r3, #7
 800768e:	2b05      	cmp	r3, #5
 8007690:	d826      	bhi.n	80076e0 <UART_SetConfig+0x4c0>
 8007692:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <UART_SetConfig+0x478>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	080076b1 	.word	0x080076b1
 800769c:	080076b9 	.word	0x080076b9
 80076a0:	080076c1 	.word	0x080076c1
 80076a4:	080076c9 	.word	0x080076c9
 80076a8:	080076d1 	.word	0x080076d1
 80076ac:	080076d9 	.word	0x080076d9
 80076b0:	2300      	movs	r3, #0
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076b6:	e18a      	b.n	80079ce <UART_SetConfig+0x7ae>
 80076b8:	2304      	movs	r3, #4
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076be:	e186      	b.n	80079ce <UART_SetConfig+0x7ae>
 80076c0:	2308      	movs	r3, #8
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c6:	e182      	b.n	80079ce <UART_SetConfig+0x7ae>
 80076c8:	2310      	movs	r3, #16
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ce:	e17e      	b.n	80079ce <UART_SetConfig+0x7ae>
 80076d0:	2320      	movs	r3, #32
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d6:	e17a      	b.n	80079ce <UART_SetConfig+0x7ae>
 80076d8:	2340      	movs	r3, #64	; 0x40
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076de:	e176      	b.n	80079ce <UART_SetConfig+0x7ae>
 80076e0:	2380      	movs	r3, #128	; 0x80
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e6:	e172      	b.n	80079ce <UART_SetConfig+0x7ae>
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a5b      	ldr	r2, [pc, #364]	; (800785c <UART_SetConfig+0x63c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d130      	bne.n	8007754 <UART_SetConfig+0x534>
 80076f2:	4b58      	ldr	r3, [pc, #352]	; (8007854 <UART_SetConfig+0x634>)
 80076f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	2b05      	cmp	r3, #5
 80076fc:	d826      	bhi.n	800774c <UART_SetConfig+0x52c>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <UART_SetConfig+0x4e4>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	0800771d 	.word	0x0800771d
 8007708:	08007725 	.word	0x08007725
 800770c:	0800772d 	.word	0x0800772d
 8007710:	08007735 	.word	0x08007735
 8007714:	0800773d 	.word	0x0800773d
 8007718:	08007745 	.word	0x08007745
 800771c:	2300      	movs	r3, #0
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007722:	e154      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007724:	2304      	movs	r3, #4
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772a:	e150      	b.n	80079ce <UART_SetConfig+0x7ae>
 800772c:	2308      	movs	r3, #8
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007732:	e14c      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007734:	2310      	movs	r3, #16
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800773a:	e148      	b.n	80079ce <UART_SetConfig+0x7ae>
 800773c:	2320      	movs	r3, #32
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007742:	e144      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007744:	2340      	movs	r3, #64	; 0x40
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774a:	e140      	b.n	80079ce <UART_SetConfig+0x7ae>
 800774c:	2380      	movs	r3, #128	; 0x80
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007752:	e13c      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a41      	ldr	r2, [pc, #260]	; (8007860 <UART_SetConfig+0x640>)
 800775a:	4293      	cmp	r3, r2
 800775c:	f040 8082 	bne.w	8007864 <UART_SetConfig+0x644>
 8007760:	4b3c      	ldr	r3, [pc, #240]	; (8007854 <UART_SetConfig+0x634>)
 8007762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007768:	2b28      	cmp	r3, #40	; 0x28
 800776a:	d86d      	bhi.n	8007848 <UART_SetConfig+0x628>
 800776c:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <UART_SetConfig+0x554>)
 800776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007772:	bf00      	nop
 8007774:	08007819 	.word	0x08007819
 8007778:	08007849 	.word	0x08007849
 800777c:	08007849 	.word	0x08007849
 8007780:	08007849 	.word	0x08007849
 8007784:	08007849 	.word	0x08007849
 8007788:	08007849 	.word	0x08007849
 800778c:	08007849 	.word	0x08007849
 8007790:	08007849 	.word	0x08007849
 8007794:	08007821 	.word	0x08007821
 8007798:	08007849 	.word	0x08007849
 800779c:	08007849 	.word	0x08007849
 80077a0:	08007849 	.word	0x08007849
 80077a4:	08007849 	.word	0x08007849
 80077a8:	08007849 	.word	0x08007849
 80077ac:	08007849 	.word	0x08007849
 80077b0:	08007849 	.word	0x08007849
 80077b4:	08007829 	.word	0x08007829
 80077b8:	08007849 	.word	0x08007849
 80077bc:	08007849 	.word	0x08007849
 80077c0:	08007849 	.word	0x08007849
 80077c4:	08007849 	.word	0x08007849
 80077c8:	08007849 	.word	0x08007849
 80077cc:	08007849 	.word	0x08007849
 80077d0:	08007849 	.word	0x08007849
 80077d4:	08007831 	.word	0x08007831
 80077d8:	08007849 	.word	0x08007849
 80077dc:	08007849 	.word	0x08007849
 80077e0:	08007849 	.word	0x08007849
 80077e4:	08007849 	.word	0x08007849
 80077e8:	08007849 	.word	0x08007849
 80077ec:	08007849 	.word	0x08007849
 80077f0:	08007849 	.word	0x08007849
 80077f4:	08007839 	.word	0x08007839
 80077f8:	08007849 	.word	0x08007849
 80077fc:	08007849 	.word	0x08007849
 8007800:	08007849 	.word	0x08007849
 8007804:	08007849 	.word	0x08007849
 8007808:	08007849 	.word	0x08007849
 800780c:	08007849 	.word	0x08007849
 8007810:	08007849 	.word	0x08007849
 8007814:	08007841 	.word	0x08007841
 8007818:	2301      	movs	r3, #1
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800781e:	e0d6      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007826:	e0d2      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800782e:	e0ce      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007836:	e0ca      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007838:	2320      	movs	r3, #32
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783e:	e0c6      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007840:	2340      	movs	r3, #64	; 0x40
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007846:	e0c2      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007848:	2380      	movs	r3, #128	; 0x80
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784e:	e0be      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007850:	40011400 	.word	0x40011400
 8007854:	58024400 	.word	0x58024400
 8007858:	40007800 	.word	0x40007800
 800785c:	40007c00 	.word	0x40007c00
 8007860:	40011800 	.word	0x40011800
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4aad      	ldr	r2, [pc, #692]	; (8007b20 <UART_SetConfig+0x900>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d176      	bne.n	800795c <UART_SetConfig+0x73c>
 800786e:	4bad      	ldr	r3, [pc, #692]	; (8007b24 <UART_SetConfig+0x904>)
 8007870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007876:	2b28      	cmp	r3, #40	; 0x28
 8007878:	d86c      	bhi.n	8007954 <UART_SetConfig+0x734>
 800787a:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <UART_SetConfig+0x660>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	08007925 	.word	0x08007925
 8007884:	08007955 	.word	0x08007955
 8007888:	08007955 	.word	0x08007955
 800788c:	08007955 	.word	0x08007955
 8007890:	08007955 	.word	0x08007955
 8007894:	08007955 	.word	0x08007955
 8007898:	08007955 	.word	0x08007955
 800789c:	08007955 	.word	0x08007955
 80078a0:	0800792d 	.word	0x0800792d
 80078a4:	08007955 	.word	0x08007955
 80078a8:	08007955 	.word	0x08007955
 80078ac:	08007955 	.word	0x08007955
 80078b0:	08007955 	.word	0x08007955
 80078b4:	08007955 	.word	0x08007955
 80078b8:	08007955 	.word	0x08007955
 80078bc:	08007955 	.word	0x08007955
 80078c0:	08007935 	.word	0x08007935
 80078c4:	08007955 	.word	0x08007955
 80078c8:	08007955 	.word	0x08007955
 80078cc:	08007955 	.word	0x08007955
 80078d0:	08007955 	.word	0x08007955
 80078d4:	08007955 	.word	0x08007955
 80078d8:	08007955 	.word	0x08007955
 80078dc:	08007955 	.word	0x08007955
 80078e0:	0800793d 	.word	0x0800793d
 80078e4:	08007955 	.word	0x08007955
 80078e8:	08007955 	.word	0x08007955
 80078ec:	08007955 	.word	0x08007955
 80078f0:	08007955 	.word	0x08007955
 80078f4:	08007955 	.word	0x08007955
 80078f8:	08007955 	.word	0x08007955
 80078fc:	08007955 	.word	0x08007955
 8007900:	08007945 	.word	0x08007945
 8007904:	08007955 	.word	0x08007955
 8007908:	08007955 	.word	0x08007955
 800790c:	08007955 	.word	0x08007955
 8007910:	08007955 	.word	0x08007955
 8007914:	08007955 	.word	0x08007955
 8007918:	08007955 	.word	0x08007955
 800791c:	08007955 	.word	0x08007955
 8007920:	0800794d 	.word	0x0800794d
 8007924:	2301      	movs	r3, #1
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800792a:	e050      	b.n	80079ce <UART_SetConfig+0x7ae>
 800792c:	2304      	movs	r3, #4
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007932:	e04c      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007934:	2308      	movs	r3, #8
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793a:	e048      	b.n	80079ce <UART_SetConfig+0x7ae>
 800793c:	2310      	movs	r3, #16
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007942:	e044      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007944:	2320      	movs	r3, #32
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794a:	e040      	b.n	80079ce <UART_SetConfig+0x7ae>
 800794c:	2340      	movs	r3, #64	; 0x40
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007952:	e03c      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007954:	2380      	movs	r3, #128	; 0x80
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795a:	e038      	b.n	80079ce <UART_SetConfig+0x7ae>
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a71      	ldr	r2, [pc, #452]	; (8007b28 <UART_SetConfig+0x908>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d130      	bne.n	80079c8 <UART_SetConfig+0x7a8>
 8007966:	4b6f      	ldr	r3, [pc, #444]	; (8007b24 <UART_SetConfig+0x904>)
 8007968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	2b05      	cmp	r3, #5
 8007970:	d826      	bhi.n	80079c0 <UART_SetConfig+0x7a0>
 8007972:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <UART_SetConfig+0x758>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	08007991 	.word	0x08007991
 800797c:	08007999 	.word	0x08007999
 8007980:	080079a1 	.word	0x080079a1
 8007984:	080079a9 	.word	0x080079a9
 8007988:	080079b1 	.word	0x080079b1
 800798c:	080079b9 	.word	0x080079b9
 8007990:	2302      	movs	r3, #2
 8007992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007996:	e01a      	b.n	80079ce <UART_SetConfig+0x7ae>
 8007998:	2304      	movs	r3, #4
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799e:	e016      	b.n	80079ce <UART_SetConfig+0x7ae>
 80079a0:	2308      	movs	r3, #8
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a6:	e012      	b.n	80079ce <UART_SetConfig+0x7ae>
 80079a8:	2310      	movs	r3, #16
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ae:	e00e      	b.n	80079ce <UART_SetConfig+0x7ae>
 80079b0:	2320      	movs	r3, #32
 80079b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079b6:	e00a      	b.n	80079ce <UART_SetConfig+0x7ae>
 80079b8:	2340      	movs	r3, #64	; 0x40
 80079ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079be:	e006      	b.n	80079ce <UART_SetConfig+0x7ae>
 80079c0:	2380      	movs	r3, #128	; 0x80
 80079c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c6:	e002      	b.n	80079ce <UART_SetConfig+0x7ae>
 80079c8:	2380      	movs	r3, #128	; 0x80
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a55      	ldr	r2, [pc, #340]	; (8007b28 <UART_SetConfig+0x908>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	f040 80f8 	bne.w	8007bca <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80079de:	2b20      	cmp	r3, #32
 80079e0:	dc46      	bgt.n	8007a70 <UART_SetConfig+0x850>
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	db75      	blt.n	8007ad2 <UART_SetConfig+0x8b2>
 80079e6:	3b02      	subs	r3, #2
 80079e8:	2b1e      	cmp	r3, #30
 80079ea:	d872      	bhi.n	8007ad2 <UART_SetConfig+0x8b2>
 80079ec:	a201      	add	r2, pc, #4	; (adr r2, 80079f4 <UART_SetConfig+0x7d4>)
 80079ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f2:	bf00      	nop
 80079f4:	08007a77 	.word	0x08007a77
 80079f8:	08007ad3 	.word	0x08007ad3
 80079fc:	08007a7f 	.word	0x08007a7f
 8007a00:	08007ad3 	.word	0x08007ad3
 8007a04:	08007ad3 	.word	0x08007ad3
 8007a08:	08007ad3 	.word	0x08007ad3
 8007a0c:	08007a8f 	.word	0x08007a8f
 8007a10:	08007ad3 	.word	0x08007ad3
 8007a14:	08007ad3 	.word	0x08007ad3
 8007a18:	08007ad3 	.word	0x08007ad3
 8007a1c:	08007ad3 	.word	0x08007ad3
 8007a20:	08007ad3 	.word	0x08007ad3
 8007a24:	08007ad3 	.word	0x08007ad3
 8007a28:	08007ad3 	.word	0x08007ad3
 8007a2c:	08007a9f 	.word	0x08007a9f
 8007a30:	08007ad3 	.word	0x08007ad3
 8007a34:	08007ad3 	.word	0x08007ad3
 8007a38:	08007ad3 	.word	0x08007ad3
 8007a3c:	08007ad3 	.word	0x08007ad3
 8007a40:	08007ad3 	.word	0x08007ad3
 8007a44:	08007ad3 	.word	0x08007ad3
 8007a48:	08007ad3 	.word	0x08007ad3
 8007a4c:	08007ad3 	.word	0x08007ad3
 8007a50:	08007ad3 	.word	0x08007ad3
 8007a54:	08007ad3 	.word	0x08007ad3
 8007a58:	08007ad3 	.word	0x08007ad3
 8007a5c:	08007ad3 	.word	0x08007ad3
 8007a60:	08007ad3 	.word	0x08007ad3
 8007a64:	08007ad3 	.word	0x08007ad3
 8007a68:	08007ad3 	.word	0x08007ad3
 8007a6c:	08007ac5 	.word	0x08007ac5
 8007a70:	2b40      	cmp	r3, #64	; 0x40
 8007a72:	d02a      	beq.n	8007aca <UART_SetConfig+0x8aa>
 8007a74:	e02d      	b.n	8007ad2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a76:	f7fe fa07 	bl	8005e88 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a7c:	e02f      	b.n	8007ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fe fa16 	bl	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a8c:	e027      	b.n	8007ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a8e:	f107 0318 	add.w	r3, r7, #24
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fe fb62 	bl	800615c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a9c:	e01f      	b.n	8007ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a9e:	4b21      	ldr	r3, [pc, #132]	; (8007b24 <UART_SetConfig+0x904>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d009      	beq.n	8007abe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007aaa:	4b1e      	ldr	r3, [pc, #120]	; (8007b24 <UART_SetConfig+0x904>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	08db      	lsrs	r3, r3, #3
 8007ab0:	f003 0303 	and.w	r3, r3, #3
 8007ab4:	4a1d      	ldr	r2, [pc, #116]	; (8007b2c <UART_SetConfig+0x90c>)
 8007ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007abc:	e00f      	b.n	8007ade <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007abe:	4b1b      	ldr	r3, [pc, #108]	; (8007b2c <UART_SetConfig+0x90c>)
 8007ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ac2:	e00c      	b.n	8007ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ac4:	4b1a      	ldr	r3, [pc, #104]	; (8007b30 <UART_SetConfig+0x910>)
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ac8:	e009      	b.n	8007ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ad0:	e005      	b.n	8007ade <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007adc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 81ee 	beq.w	8007ec2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	4a12      	ldr	r2, [pc, #72]	; (8007b34 <UART_SetConfig+0x914>)
 8007aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007af0:	461a      	mov	r2, r3
 8007af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007af8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	4613      	mov	r3, r2
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	4413      	add	r3, r2
 8007b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d305      	bcc.n	8007b16 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d910      	bls.n	8007b38 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b1c:	e1d1      	b.n	8007ec2 <UART_SetConfig+0xca2>
 8007b1e:	bf00      	nop
 8007b20:	40011c00 	.word	0x40011c00
 8007b24:	58024400 	.word	0x58024400
 8007b28:	58000c00 	.word	0x58000c00
 8007b2c:	03d09000 	.word	0x03d09000
 8007b30:	003d0900 	.word	0x003d0900
 8007b34:	08008f8c 	.word	0x08008f8c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	60bb      	str	r3, [r7, #8]
 8007b3e:	60fa      	str	r2, [r7, #12]
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	4ac0      	ldr	r2, [pc, #768]	; (8007e48 <UART_SetConfig+0xc28>)
 8007b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	603b      	str	r3, [r7, #0]
 8007b50:	607a      	str	r2, [r7, #4]
 8007b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b5a:	f7f8 fc19 	bl	8000390 <__aeabi_uldivmod>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	4610      	mov	r0, r2
 8007b64:	4619      	mov	r1, r3
 8007b66:	f04f 0200 	mov.w	r2, #0
 8007b6a:	f04f 0300 	mov.w	r3, #0
 8007b6e:	020b      	lsls	r3, r1, #8
 8007b70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b74:	0202      	lsls	r2, r0, #8
 8007b76:	6979      	ldr	r1, [r7, #20]
 8007b78:	6849      	ldr	r1, [r1, #4]
 8007b7a:	0849      	lsrs	r1, r1, #1
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	4605      	mov	r5, r0
 8007b82:	eb12 0804 	adds.w	r8, r2, r4
 8007b86:	eb43 0905 	adc.w	r9, r3, r5
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	469a      	mov	sl, r3
 8007b92:	4693      	mov	fp, r2
 8007b94:	4652      	mov	r2, sl
 8007b96:	465b      	mov	r3, fp
 8007b98:	4640      	mov	r0, r8
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	f7f8 fbf8 	bl	8000390 <__aeabi_uldivmod>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bae:	d308      	bcc.n	8007bc2 <UART_SetConfig+0x9a2>
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bb6:	d204      	bcs.n	8007bc2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bbe:	60da      	str	r2, [r3, #12]
 8007bc0:	e17f      	b.n	8007ec2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007bc8:	e17b      	b.n	8007ec2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bd2:	f040 80bd 	bne.w	8007d50 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007bd6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	dc48      	bgt.n	8007c70 <UART_SetConfig+0xa50>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	db7b      	blt.n	8007cda <UART_SetConfig+0xaba>
 8007be2:	2b20      	cmp	r3, #32
 8007be4:	d879      	bhi.n	8007cda <UART_SetConfig+0xaba>
 8007be6:	a201      	add	r2, pc, #4	; (adr r2, 8007bec <UART_SetConfig+0x9cc>)
 8007be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bec:	08007c77 	.word	0x08007c77
 8007bf0:	08007c7f 	.word	0x08007c7f
 8007bf4:	08007cdb 	.word	0x08007cdb
 8007bf8:	08007cdb 	.word	0x08007cdb
 8007bfc:	08007c87 	.word	0x08007c87
 8007c00:	08007cdb 	.word	0x08007cdb
 8007c04:	08007cdb 	.word	0x08007cdb
 8007c08:	08007cdb 	.word	0x08007cdb
 8007c0c:	08007c97 	.word	0x08007c97
 8007c10:	08007cdb 	.word	0x08007cdb
 8007c14:	08007cdb 	.word	0x08007cdb
 8007c18:	08007cdb 	.word	0x08007cdb
 8007c1c:	08007cdb 	.word	0x08007cdb
 8007c20:	08007cdb 	.word	0x08007cdb
 8007c24:	08007cdb 	.word	0x08007cdb
 8007c28:	08007cdb 	.word	0x08007cdb
 8007c2c:	08007ca7 	.word	0x08007ca7
 8007c30:	08007cdb 	.word	0x08007cdb
 8007c34:	08007cdb 	.word	0x08007cdb
 8007c38:	08007cdb 	.word	0x08007cdb
 8007c3c:	08007cdb 	.word	0x08007cdb
 8007c40:	08007cdb 	.word	0x08007cdb
 8007c44:	08007cdb 	.word	0x08007cdb
 8007c48:	08007cdb 	.word	0x08007cdb
 8007c4c:	08007cdb 	.word	0x08007cdb
 8007c50:	08007cdb 	.word	0x08007cdb
 8007c54:	08007cdb 	.word	0x08007cdb
 8007c58:	08007cdb 	.word	0x08007cdb
 8007c5c:	08007cdb 	.word	0x08007cdb
 8007c60:	08007cdb 	.word	0x08007cdb
 8007c64:	08007cdb 	.word	0x08007cdb
 8007c68:	08007cdb 	.word	0x08007cdb
 8007c6c:	08007ccd 	.word	0x08007ccd
 8007c70:	2b40      	cmp	r3, #64	; 0x40
 8007c72:	d02e      	beq.n	8007cd2 <UART_SetConfig+0xab2>
 8007c74:	e031      	b.n	8007cda <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c76:	f7fc fa45 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 8007c7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c7c:	e033      	b.n	8007ce6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c7e:	f7fc fa57 	bl	8004130 <HAL_RCC_GetPCLK2Freq>
 8007c82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c84:	e02f      	b.n	8007ce6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe f912 	bl	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c94:	e027      	b.n	8007ce6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c96:	f107 0318 	add.w	r3, r7, #24
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fa5e 	bl	800615c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ca4:	e01f      	b.n	8007ce6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ca6:	4b69      	ldr	r3, [pc, #420]	; (8007e4c <UART_SetConfig+0xc2c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0320 	and.w	r3, r3, #32
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d009      	beq.n	8007cc6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cb2:	4b66      	ldr	r3, [pc, #408]	; (8007e4c <UART_SetConfig+0xc2c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	08db      	lsrs	r3, r3, #3
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	4a64      	ldr	r2, [pc, #400]	; (8007e50 <UART_SetConfig+0xc30>)
 8007cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cc4:	e00f      	b.n	8007ce6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007cc6:	4b62      	ldr	r3, [pc, #392]	; (8007e50 <UART_SetConfig+0xc30>)
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cca:	e00c      	b.n	8007ce6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ccc:	4b61      	ldr	r3, [pc, #388]	; (8007e54 <UART_SetConfig+0xc34>)
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd0:	e009      	b.n	8007ce6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd8:	e005      	b.n	8007ce6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 80ea 	beq.w	8007ec2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	4a55      	ldr	r2, [pc, #340]	; (8007e48 <UART_SetConfig+0xc28>)
 8007cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d00:	005a      	lsls	r2, r3, #1
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	085b      	lsrs	r3, r3, #1
 8007d08:	441a      	add	r2, r3
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d12:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	2b0f      	cmp	r3, #15
 8007d18:	d916      	bls.n	8007d48 <UART_SetConfig+0xb28>
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d20:	d212      	bcs.n	8007d48 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	f023 030f 	bic.w	r3, r3, #15
 8007d2a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	085b      	lsrs	r3, r3, #1
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007d44:	60da      	str	r2, [r3, #12]
 8007d46:	e0bc      	b.n	8007ec2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d4e:	e0b8      	b.n	8007ec2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d54:	2b20      	cmp	r3, #32
 8007d56:	dc4b      	bgt.n	8007df0 <UART_SetConfig+0xbd0>
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f2c0 8087 	blt.w	8007e6c <UART_SetConfig+0xc4c>
 8007d5e:	2b20      	cmp	r3, #32
 8007d60:	f200 8084 	bhi.w	8007e6c <UART_SetConfig+0xc4c>
 8007d64:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <UART_SetConfig+0xb4c>)
 8007d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6a:	bf00      	nop
 8007d6c:	08007df7 	.word	0x08007df7
 8007d70:	08007dff 	.word	0x08007dff
 8007d74:	08007e6d 	.word	0x08007e6d
 8007d78:	08007e6d 	.word	0x08007e6d
 8007d7c:	08007e07 	.word	0x08007e07
 8007d80:	08007e6d 	.word	0x08007e6d
 8007d84:	08007e6d 	.word	0x08007e6d
 8007d88:	08007e6d 	.word	0x08007e6d
 8007d8c:	08007e17 	.word	0x08007e17
 8007d90:	08007e6d 	.word	0x08007e6d
 8007d94:	08007e6d 	.word	0x08007e6d
 8007d98:	08007e6d 	.word	0x08007e6d
 8007d9c:	08007e6d 	.word	0x08007e6d
 8007da0:	08007e6d 	.word	0x08007e6d
 8007da4:	08007e6d 	.word	0x08007e6d
 8007da8:	08007e6d 	.word	0x08007e6d
 8007dac:	08007e27 	.word	0x08007e27
 8007db0:	08007e6d 	.word	0x08007e6d
 8007db4:	08007e6d 	.word	0x08007e6d
 8007db8:	08007e6d 	.word	0x08007e6d
 8007dbc:	08007e6d 	.word	0x08007e6d
 8007dc0:	08007e6d 	.word	0x08007e6d
 8007dc4:	08007e6d 	.word	0x08007e6d
 8007dc8:	08007e6d 	.word	0x08007e6d
 8007dcc:	08007e6d 	.word	0x08007e6d
 8007dd0:	08007e6d 	.word	0x08007e6d
 8007dd4:	08007e6d 	.word	0x08007e6d
 8007dd8:	08007e6d 	.word	0x08007e6d
 8007ddc:	08007e6d 	.word	0x08007e6d
 8007de0:	08007e6d 	.word	0x08007e6d
 8007de4:	08007e6d 	.word	0x08007e6d
 8007de8:	08007e6d 	.word	0x08007e6d
 8007dec:	08007e5f 	.word	0x08007e5f
 8007df0:	2b40      	cmp	r3, #64	; 0x40
 8007df2:	d037      	beq.n	8007e64 <UART_SetConfig+0xc44>
 8007df4:	e03a      	b.n	8007e6c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007df6:	f7fc f985 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 8007dfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007dfc:	e03c      	b.n	8007e78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dfe:	f7fc f997 	bl	8004130 <HAL_RCC_GetPCLK2Freq>
 8007e02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e04:	e038      	b.n	8007e78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe f852 	bl	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e14:	e030      	b.n	8007e78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e16:	f107 0318 	add.w	r3, r7, #24
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe f99e 	bl	800615c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e24:	e028      	b.n	8007e78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e26:	4b09      	ldr	r3, [pc, #36]	; (8007e4c <UART_SetConfig+0xc2c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0320 	and.w	r3, r3, #32
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d012      	beq.n	8007e58 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e32:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <UART_SetConfig+0xc2c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	08db      	lsrs	r3, r3, #3
 8007e38:	f003 0303 	and.w	r3, r3, #3
 8007e3c:	4a04      	ldr	r2, [pc, #16]	; (8007e50 <UART_SetConfig+0xc30>)
 8007e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e44:	e018      	b.n	8007e78 <UART_SetConfig+0xc58>
 8007e46:	bf00      	nop
 8007e48:	08008f8c 	.word	0x08008f8c
 8007e4c:	58024400 	.word	0x58024400
 8007e50:	03d09000 	.word	0x03d09000
 8007e54:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007e58:	4b24      	ldr	r3, [pc, #144]	; (8007eec <UART_SetConfig+0xccc>)
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e5c:	e00c      	b.n	8007e78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e5e:	4b24      	ldr	r3, [pc, #144]	; (8007ef0 <UART_SetConfig+0xcd0>)
 8007e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e62:	e009      	b.n	8007e78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e6a:	e005      	b.n	8007e78 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e76:	bf00      	nop
    }

    if (pclk != 0U)
 8007e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d021      	beq.n	8007ec2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	4a1c      	ldr	r2, [pc, #112]	; (8007ef4 <UART_SetConfig+0xcd4>)
 8007e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	085b      	lsrs	r3, r3, #1
 8007e96:	441a      	add	r2, r3
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea4:	2b0f      	cmp	r3, #15
 8007ea6:	d909      	bls.n	8007ebc <UART_SetConfig+0xc9c>
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eae:	d205      	bcs.n	8007ebc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60da      	str	r2, [r3, #12]
 8007eba:	e002      	b.n	8007ec2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2200      	movs	r2, #0
 8007edc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007ede:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3748      	adds	r7, #72	; 0x48
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eec:	03d09000 	.word	0x03d09000
 8007ef0:	003d0900 	.word	0x003d0900
 8007ef4:	08008f8c 	.word	0x08008f8c

08007ef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00a      	beq.n	8007f22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00a      	beq.n	8007f66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6a:	f003 0308 	and.w	r3, r3, #8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	430a      	orrs	r2, r1
 8007f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8c:	f003 0310 	and.w	r3, r3, #16
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00a      	beq.n	8007faa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	f003 0320 	and.w	r3, r3, #32
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01a      	beq.n	800800e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ff6:	d10a      	bne.n	800800e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	605a      	str	r2, [r3, #4]
  }
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b098      	sub	sp, #96	; 0x60
 8008040:	af02      	add	r7, sp, #8
 8008042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800804c:	f7f9 fbc2 	bl	80017d4 <HAL_GetTick>
 8008050:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0308 	and.w	r3, r3, #8
 800805c:	2b08      	cmp	r3, #8
 800805e:	d12f      	bne.n	80080c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008060:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008068:	2200      	movs	r2, #0
 800806a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f88e 	bl	8008190 <UART_WaitOnFlagUntilTimeout>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d022      	beq.n	80080c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	e853 3f00 	ldrex	r3, [r3]
 8008086:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800808a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800808e:	653b      	str	r3, [r7, #80]	; 0x50
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	461a      	mov	r2, r3
 8008096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008098:	647b      	str	r3, [r7, #68]	; 0x44
 800809a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800809e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080a0:	e841 2300 	strex	r3, r2, [r1]
 80080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1e6      	bne.n	800807a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e063      	b.n	8008188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0304 	and.w	r3, r3, #4
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d149      	bne.n	8008162 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080d6:	2200      	movs	r2, #0
 80080d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f857 	bl	8008190 <UART_WaitOnFlagUntilTimeout>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d03c      	beq.n	8008162 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	e853 3f00 	ldrex	r3, [r3]
 80080f4:	623b      	str	r3, [r7, #32]
   return(result);
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008106:	633b      	str	r3, [r7, #48]	; 0x30
 8008108:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800810c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810e:	e841 2300 	strex	r3, r2, [r1]
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e6      	bne.n	80080e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3308      	adds	r3, #8
 8008120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	e853 3f00 	ldrex	r3, [r3]
 8008128:	60fb      	str	r3, [r7, #12]
   return(result);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f023 0301 	bic.w	r3, r3, #1
 8008130:	64bb      	str	r3, [r7, #72]	; 0x48
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3308      	adds	r3, #8
 8008138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800813a:	61fa      	str	r2, [r7, #28]
 800813c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	69b9      	ldr	r1, [r7, #24]
 8008140:	69fa      	ldr	r2, [r7, #28]
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	617b      	str	r3, [r7, #20]
   return(result);
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e5      	bne.n	800811a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e012      	b.n	8008188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2220      	movs	r2, #32
 8008166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2220      	movs	r2, #32
 800816e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3758      	adds	r7, #88	; 0x58
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	603b      	str	r3, [r7, #0]
 800819c:	4613      	mov	r3, r2
 800819e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081a0:	e049      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081a8:	d045      	beq.n	8008236 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081aa:	f7f9 fb13 	bl	80017d4 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d302      	bcc.n	80081c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e048      	b.n	8008256 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0304 	and.w	r3, r3, #4
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d031      	beq.n	8008236 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	f003 0308 	and.w	r3, r3, #8
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d110      	bne.n	8008202 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2208      	movs	r2, #8
 80081e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f839 	bl	8008260 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2208      	movs	r2, #8
 80081f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e029      	b.n	8008256 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	69db      	ldr	r3, [r3, #28]
 8008208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800820c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008210:	d111      	bne.n	8008236 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800821a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 f81f 	bl	8008260 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2220      	movs	r2, #32
 8008226:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e00f      	b.n	8008256 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	69da      	ldr	r2, [r3, #28]
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	4013      	ands	r3, r2
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	429a      	cmp	r2, r3
 8008244:	bf0c      	ite	eq
 8008246:	2301      	moveq	r3, #1
 8008248:	2300      	movne	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	461a      	mov	r2, r3
 800824e:	79fb      	ldrb	r3, [r7, #7]
 8008250:	429a      	cmp	r2, r3
 8008252:	d0a6      	beq.n	80081a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008260:	b480      	push	{r7}
 8008262:	b095      	sub	sp, #84	; 0x54
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800827c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008286:	643b      	str	r3, [r7, #64]	; 0x40
 8008288:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800828c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e6      	bne.n	8008268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3308      	adds	r3, #8
 80082a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	4b1e      	ldr	r3, [pc, #120]	; (8008328 <UART_EndRxTransfer+0xc8>)
 80082ae:	4013      	ands	r3, r2
 80082b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3308      	adds	r3, #8
 80082b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082c2:	e841 2300 	strex	r3, r2, [r1]
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1e5      	bne.n	800829a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d118      	bne.n	8008308 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f023 0310 	bic.w	r3, r3, #16
 80082ea:	647b      	str	r3, [r7, #68]	; 0x44
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082f4:	61bb      	str	r3, [r7, #24]
 80082f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6979      	ldr	r1, [r7, #20]
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	613b      	str	r3, [r7, #16]
   return(result);
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e6      	bne.n	80082d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2220      	movs	r2, #32
 800830c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800831c:	bf00      	nop
 800831e:	3754      	adds	r7, #84	; 0x54
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	effffffe 	.word	0xeffffffe

0800832c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800833a:	2b01      	cmp	r3, #1
 800833c:	d101      	bne.n	8008342 <HAL_UARTEx_DisableFifoMode+0x16>
 800833e:	2302      	movs	r3, #2
 8008340:	e027      	b.n	8008392 <HAL_UARTEx_DisableFifoMode+0x66>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2224      	movs	r2, #36	; 0x24
 800834e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 0201 	bic.w	r2, r2, #1
 8008368:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008370:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2220      	movs	r2, #32
 8008384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e02d      	b.n	8008412 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2224      	movs	r2, #36	; 0x24
 80083c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f850 	bl	8008498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800842a:	2b01      	cmp	r3, #1
 800842c:	d101      	bne.n	8008432 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800842e:	2302      	movs	r3, #2
 8008430:	e02d      	b.n	800848e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2224      	movs	r2, #36	; 0x24
 800843e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 0201 	bic.w	r2, r2, #1
 8008458:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f812 	bl	8008498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d108      	bne.n	80084ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084b8:	e031      	b.n	800851e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084ba:	2310      	movs	r3, #16
 80084bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084be:	2310      	movs	r3, #16
 80084c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	0e5b      	lsrs	r3, r3, #25
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f003 0307 	and.w	r3, r3, #7
 80084d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	0f5b      	lsrs	r3, r3, #29
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f003 0307 	and.w	r3, r3, #7
 80084e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	7b3a      	ldrb	r2, [r7, #12]
 80084e6:	4911      	ldr	r1, [pc, #68]	; (800852c <UARTEx_SetNbDataToProcess+0x94>)
 80084e8:	5c8a      	ldrb	r2, [r1, r2]
 80084ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084ee:	7b3a      	ldrb	r2, [r7, #12]
 80084f0:	490f      	ldr	r1, [pc, #60]	; (8008530 <UARTEx_SetNbDataToProcess+0x98>)
 80084f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	7b7a      	ldrb	r2, [r7, #13]
 8008504:	4909      	ldr	r1, [pc, #36]	; (800852c <UARTEx_SetNbDataToProcess+0x94>)
 8008506:	5c8a      	ldrb	r2, [r1, r2]
 8008508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800850c:	7b7a      	ldrb	r2, [r7, #13]
 800850e:	4908      	ldr	r1, [pc, #32]	; (8008530 <UARTEx_SetNbDataToProcess+0x98>)
 8008510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008512:	fb93 f3f2 	sdiv	r3, r3, r2
 8008516:	b29a      	uxth	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800851e:	bf00      	nop
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	08008fa4 	.word	0x08008fa4
 8008530:	08008fac 	.word	0x08008fac

08008534 <siprintf>:
 8008534:	b40e      	push	{r1, r2, r3}
 8008536:	b500      	push	{lr}
 8008538:	b09c      	sub	sp, #112	; 0x70
 800853a:	ab1d      	add	r3, sp, #116	; 0x74
 800853c:	9002      	str	r0, [sp, #8]
 800853e:	9006      	str	r0, [sp, #24]
 8008540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008544:	4809      	ldr	r0, [pc, #36]	; (800856c <siprintf+0x38>)
 8008546:	9107      	str	r1, [sp, #28]
 8008548:	9104      	str	r1, [sp, #16]
 800854a:	4909      	ldr	r1, [pc, #36]	; (8008570 <siprintf+0x3c>)
 800854c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008550:	9105      	str	r1, [sp, #20]
 8008552:	6800      	ldr	r0, [r0, #0]
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	a902      	add	r1, sp, #8
 8008558:	f000 f992 	bl	8008880 <_svfiprintf_r>
 800855c:	9b02      	ldr	r3, [sp, #8]
 800855e:	2200      	movs	r2, #0
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	b01c      	add	sp, #112	; 0x70
 8008564:	f85d eb04 	ldr.w	lr, [sp], #4
 8008568:	b003      	add	sp, #12
 800856a:	4770      	bx	lr
 800856c:	2400005c 	.word	0x2400005c
 8008570:	ffff0208 	.word	0xffff0208

08008574 <memset>:
 8008574:	4402      	add	r2, r0
 8008576:	4603      	mov	r3, r0
 8008578:	4293      	cmp	r3, r2
 800857a:	d100      	bne.n	800857e <memset+0xa>
 800857c:	4770      	bx	lr
 800857e:	f803 1b01 	strb.w	r1, [r3], #1
 8008582:	e7f9      	b.n	8008578 <memset+0x4>

08008584 <__errno>:
 8008584:	4b01      	ldr	r3, [pc, #4]	; (800858c <__errno+0x8>)
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	2400005c 	.word	0x2400005c

08008590 <__libc_init_array>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	4d0d      	ldr	r5, [pc, #52]	; (80085c8 <__libc_init_array+0x38>)
 8008594:	4c0d      	ldr	r4, [pc, #52]	; (80085cc <__libc_init_array+0x3c>)
 8008596:	1b64      	subs	r4, r4, r5
 8008598:	10a4      	asrs	r4, r4, #2
 800859a:	2600      	movs	r6, #0
 800859c:	42a6      	cmp	r6, r4
 800859e:	d109      	bne.n	80085b4 <__libc_init_array+0x24>
 80085a0:	4d0b      	ldr	r5, [pc, #44]	; (80085d0 <__libc_init_array+0x40>)
 80085a2:	4c0c      	ldr	r4, [pc, #48]	; (80085d4 <__libc_init_array+0x44>)
 80085a4:	f000 fc6a 	bl	8008e7c <_init>
 80085a8:	1b64      	subs	r4, r4, r5
 80085aa:	10a4      	asrs	r4, r4, #2
 80085ac:	2600      	movs	r6, #0
 80085ae:	42a6      	cmp	r6, r4
 80085b0:	d105      	bne.n	80085be <__libc_init_array+0x2e>
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b8:	4798      	blx	r3
 80085ba:	3601      	adds	r6, #1
 80085bc:	e7ee      	b.n	800859c <__libc_init_array+0xc>
 80085be:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c2:	4798      	blx	r3
 80085c4:	3601      	adds	r6, #1
 80085c6:	e7f2      	b.n	80085ae <__libc_init_array+0x1e>
 80085c8:	08008ff0 	.word	0x08008ff0
 80085cc:	08008ff0 	.word	0x08008ff0
 80085d0:	08008ff0 	.word	0x08008ff0
 80085d4:	08008ff4 	.word	0x08008ff4

080085d8 <__retarget_lock_acquire_recursive>:
 80085d8:	4770      	bx	lr

080085da <__retarget_lock_release_recursive>:
 80085da:	4770      	bx	lr

080085dc <_free_r>:
 80085dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085de:	2900      	cmp	r1, #0
 80085e0:	d044      	beq.n	800866c <_free_r+0x90>
 80085e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e6:	9001      	str	r0, [sp, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f1a1 0404 	sub.w	r4, r1, #4
 80085ee:	bfb8      	it	lt
 80085f0:	18e4      	addlt	r4, r4, r3
 80085f2:	f000 f8df 	bl	80087b4 <__malloc_lock>
 80085f6:	4a1e      	ldr	r2, [pc, #120]	; (8008670 <_free_r+0x94>)
 80085f8:	9801      	ldr	r0, [sp, #4]
 80085fa:	6813      	ldr	r3, [r2, #0]
 80085fc:	b933      	cbnz	r3, 800860c <_free_r+0x30>
 80085fe:	6063      	str	r3, [r4, #4]
 8008600:	6014      	str	r4, [r2, #0]
 8008602:	b003      	add	sp, #12
 8008604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008608:	f000 b8da 	b.w	80087c0 <__malloc_unlock>
 800860c:	42a3      	cmp	r3, r4
 800860e:	d908      	bls.n	8008622 <_free_r+0x46>
 8008610:	6825      	ldr	r5, [r4, #0]
 8008612:	1961      	adds	r1, r4, r5
 8008614:	428b      	cmp	r3, r1
 8008616:	bf01      	itttt	eq
 8008618:	6819      	ldreq	r1, [r3, #0]
 800861a:	685b      	ldreq	r3, [r3, #4]
 800861c:	1949      	addeq	r1, r1, r5
 800861e:	6021      	streq	r1, [r4, #0]
 8008620:	e7ed      	b.n	80085fe <_free_r+0x22>
 8008622:	461a      	mov	r2, r3
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	b10b      	cbz	r3, 800862c <_free_r+0x50>
 8008628:	42a3      	cmp	r3, r4
 800862a:	d9fa      	bls.n	8008622 <_free_r+0x46>
 800862c:	6811      	ldr	r1, [r2, #0]
 800862e:	1855      	adds	r5, r2, r1
 8008630:	42a5      	cmp	r5, r4
 8008632:	d10b      	bne.n	800864c <_free_r+0x70>
 8008634:	6824      	ldr	r4, [r4, #0]
 8008636:	4421      	add	r1, r4
 8008638:	1854      	adds	r4, r2, r1
 800863a:	42a3      	cmp	r3, r4
 800863c:	6011      	str	r1, [r2, #0]
 800863e:	d1e0      	bne.n	8008602 <_free_r+0x26>
 8008640:	681c      	ldr	r4, [r3, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	6053      	str	r3, [r2, #4]
 8008646:	440c      	add	r4, r1
 8008648:	6014      	str	r4, [r2, #0]
 800864a:	e7da      	b.n	8008602 <_free_r+0x26>
 800864c:	d902      	bls.n	8008654 <_free_r+0x78>
 800864e:	230c      	movs	r3, #12
 8008650:	6003      	str	r3, [r0, #0]
 8008652:	e7d6      	b.n	8008602 <_free_r+0x26>
 8008654:	6825      	ldr	r5, [r4, #0]
 8008656:	1961      	adds	r1, r4, r5
 8008658:	428b      	cmp	r3, r1
 800865a:	bf04      	itt	eq
 800865c:	6819      	ldreq	r1, [r3, #0]
 800865e:	685b      	ldreq	r3, [r3, #4]
 8008660:	6063      	str	r3, [r4, #4]
 8008662:	bf04      	itt	eq
 8008664:	1949      	addeq	r1, r1, r5
 8008666:	6021      	streq	r1, [r4, #0]
 8008668:	6054      	str	r4, [r2, #4]
 800866a:	e7ca      	b.n	8008602 <_free_r+0x26>
 800866c:	b003      	add	sp, #12
 800866e:	bd30      	pop	{r4, r5, pc}
 8008670:	24031178 	.word	0x24031178

08008674 <sbrk_aligned>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	4e0e      	ldr	r6, [pc, #56]	; (80086b0 <sbrk_aligned+0x3c>)
 8008678:	460c      	mov	r4, r1
 800867a:	6831      	ldr	r1, [r6, #0]
 800867c:	4605      	mov	r5, r0
 800867e:	b911      	cbnz	r1, 8008686 <sbrk_aligned+0x12>
 8008680:	f000 fba6 	bl	8008dd0 <_sbrk_r>
 8008684:	6030      	str	r0, [r6, #0]
 8008686:	4621      	mov	r1, r4
 8008688:	4628      	mov	r0, r5
 800868a:	f000 fba1 	bl	8008dd0 <_sbrk_r>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	d00a      	beq.n	80086a8 <sbrk_aligned+0x34>
 8008692:	1cc4      	adds	r4, r0, #3
 8008694:	f024 0403 	bic.w	r4, r4, #3
 8008698:	42a0      	cmp	r0, r4
 800869a:	d007      	beq.n	80086ac <sbrk_aligned+0x38>
 800869c:	1a21      	subs	r1, r4, r0
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 fb96 	bl	8008dd0 <_sbrk_r>
 80086a4:	3001      	adds	r0, #1
 80086a6:	d101      	bne.n	80086ac <sbrk_aligned+0x38>
 80086a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80086ac:	4620      	mov	r0, r4
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
 80086b0:	2403117c 	.word	0x2403117c

080086b4 <_malloc_r>:
 80086b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b8:	1ccd      	adds	r5, r1, #3
 80086ba:	f025 0503 	bic.w	r5, r5, #3
 80086be:	3508      	adds	r5, #8
 80086c0:	2d0c      	cmp	r5, #12
 80086c2:	bf38      	it	cc
 80086c4:	250c      	movcc	r5, #12
 80086c6:	2d00      	cmp	r5, #0
 80086c8:	4607      	mov	r7, r0
 80086ca:	db01      	blt.n	80086d0 <_malloc_r+0x1c>
 80086cc:	42a9      	cmp	r1, r5
 80086ce:	d905      	bls.n	80086dc <_malloc_r+0x28>
 80086d0:	230c      	movs	r3, #12
 80086d2:	603b      	str	r3, [r7, #0]
 80086d4:	2600      	movs	r6, #0
 80086d6:	4630      	mov	r0, r6
 80086d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087b0 <_malloc_r+0xfc>
 80086e0:	f000 f868 	bl	80087b4 <__malloc_lock>
 80086e4:	f8d8 3000 	ldr.w	r3, [r8]
 80086e8:	461c      	mov	r4, r3
 80086ea:	bb5c      	cbnz	r4, 8008744 <_malloc_r+0x90>
 80086ec:	4629      	mov	r1, r5
 80086ee:	4638      	mov	r0, r7
 80086f0:	f7ff ffc0 	bl	8008674 <sbrk_aligned>
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	4604      	mov	r4, r0
 80086f8:	d155      	bne.n	80087a6 <_malloc_r+0xf2>
 80086fa:	f8d8 4000 	ldr.w	r4, [r8]
 80086fe:	4626      	mov	r6, r4
 8008700:	2e00      	cmp	r6, #0
 8008702:	d145      	bne.n	8008790 <_malloc_r+0xdc>
 8008704:	2c00      	cmp	r4, #0
 8008706:	d048      	beq.n	800879a <_malloc_r+0xe6>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	4631      	mov	r1, r6
 800870c:	4638      	mov	r0, r7
 800870e:	eb04 0903 	add.w	r9, r4, r3
 8008712:	f000 fb5d 	bl	8008dd0 <_sbrk_r>
 8008716:	4581      	cmp	r9, r0
 8008718:	d13f      	bne.n	800879a <_malloc_r+0xe6>
 800871a:	6821      	ldr	r1, [r4, #0]
 800871c:	1a6d      	subs	r5, r5, r1
 800871e:	4629      	mov	r1, r5
 8008720:	4638      	mov	r0, r7
 8008722:	f7ff ffa7 	bl	8008674 <sbrk_aligned>
 8008726:	3001      	adds	r0, #1
 8008728:	d037      	beq.n	800879a <_malloc_r+0xe6>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	442b      	add	r3, r5
 800872e:	6023      	str	r3, [r4, #0]
 8008730:	f8d8 3000 	ldr.w	r3, [r8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d038      	beq.n	80087aa <_malloc_r+0xf6>
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	42a2      	cmp	r2, r4
 800873c:	d12b      	bne.n	8008796 <_malloc_r+0xe2>
 800873e:	2200      	movs	r2, #0
 8008740:	605a      	str	r2, [r3, #4]
 8008742:	e00f      	b.n	8008764 <_malloc_r+0xb0>
 8008744:	6822      	ldr	r2, [r4, #0]
 8008746:	1b52      	subs	r2, r2, r5
 8008748:	d41f      	bmi.n	800878a <_malloc_r+0xd6>
 800874a:	2a0b      	cmp	r2, #11
 800874c:	d917      	bls.n	800877e <_malloc_r+0xca>
 800874e:	1961      	adds	r1, r4, r5
 8008750:	42a3      	cmp	r3, r4
 8008752:	6025      	str	r5, [r4, #0]
 8008754:	bf18      	it	ne
 8008756:	6059      	strne	r1, [r3, #4]
 8008758:	6863      	ldr	r3, [r4, #4]
 800875a:	bf08      	it	eq
 800875c:	f8c8 1000 	streq.w	r1, [r8]
 8008760:	5162      	str	r2, [r4, r5]
 8008762:	604b      	str	r3, [r1, #4]
 8008764:	4638      	mov	r0, r7
 8008766:	f104 060b 	add.w	r6, r4, #11
 800876a:	f000 f829 	bl	80087c0 <__malloc_unlock>
 800876e:	f026 0607 	bic.w	r6, r6, #7
 8008772:	1d23      	adds	r3, r4, #4
 8008774:	1af2      	subs	r2, r6, r3
 8008776:	d0ae      	beq.n	80086d6 <_malloc_r+0x22>
 8008778:	1b9b      	subs	r3, r3, r6
 800877a:	50a3      	str	r3, [r4, r2]
 800877c:	e7ab      	b.n	80086d6 <_malloc_r+0x22>
 800877e:	42a3      	cmp	r3, r4
 8008780:	6862      	ldr	r2, [r4, #4]
 8008782:	d1dd      	bne.n	8008740 <_malloc_r+0x8c>
 8008784:	f8c8 2000 	str.w	r2, [r8]
 8008788:	e7ec      	b.n	8008764 <_malloc_r+0xb0>
 800878a:	4623      	mov	r3, r4
 800878c:	6864      	ldr	r4, [r4, #4]
 800878e:	e7ac      	b.n	80086ea <_malloc_r+0x36>
 8008790:	4634      	mov	r4, r6
 8008792:	6876      	ldr	r6, [r6, #4]
 8008794:	e7b4      	b.n	8008700 <_malloc_r+0x4c>
 8008796:	4613      	mov	r3, r2
 8008798:	e7cc      	b.n	8008734 <_malloc_r+0x80>
 800879a:	230c      	movs	r3, #12
 800879c:	603b      	str	r3, [r7, #0]
 800879e:	4638      	mov	r0, r7
 80087a0:	f000 f80e 	bl	80087c0 <__malloc_unlock>
 80087a4:	e797      	b.n	80086d6 <_malloc_r+0x22>
 80087a6:	6025      	str	r5, [r4, #0]
 80087a8:	e7dc      	b.n	8008764 <_malloc_r+0xb0>
 80087aa:	605b      	str	r3, [r3, #4]
 80087ac:	deff      	udf	#255	; 0xff
 80087ae:	bf00      	nop
 80087b0:	24031178 	.word	0x24031178

080087b4 <__malloc_lock>:
 80087b4:	4801      	ldr	r0, [pc, #4]	; (80087bc <__malloc_lock+0x8>)
 80087b6:	f7ff bf0f 	b.w	80085d8 <__retarget_lock_acquire_recursive>
 80087ba:	bf00      	nop
 80087bc:	24031174 	.word	0x24031174

080087c0 <__malloc_unlock>:
 80087c0:	4801      	ldr	r0, [pc, #4]	; (80087c8 <__malloc_unlock+0x8>)
 80087c2:	f7ff bf0a 	b.w	80085da <__retarget_lock_release_recursive>
 80087c6:	bf00      	nop
 80087c8:	24031174 	.word	0x24031174

080087cc <__ssputs_r>:
 80087cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087d0:	688e      	ldr	r6, [r1, #8]
 80087d2:	461f      	mov	r7, r3
 80087d4:	42be      	cmp	r6, r7
 80087d6:	680b      	ldr	r3, [r1, #0]
 80087d8:	4682      	mov	sl, r0
 80087da:	460c      	mov	r4, r1
 80087dc:	4690      	mov	r8, r2
 80087de:	d82c      	bhi.n	800883a <__ssputs_r+0x6e>
 80087e0:	898a      	ldrh	r2, [r1, #12]
 80087e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087e6:	d026      	beq.n	8008836 <__ssputs_r+0x6a>
 80087e8:	6965      	ldr	r5, [r4, #20]
 80087ea:	6909      	ldr	r1, [r1, #16]
 80087ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087f0:	eba3 0901 	sub.w	r9, r3, r1
 80087f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087f8:	1c7b      	adds	r3, r7, #1
 80087fa:	444b      	add	r3, r9
 80087fc:	106d      	asrs	r5, r5, #1
 80087fe:	429d      	cmp	r5, r3
 8008800:	bf38      	it	cc
 8008802:	461d      	movcc	r5, r3
 8008804:	0553      	lsls	r3, r2, #21
 8008806:	d527      	bpl.n	8008858 <__ssputs_r+0x8c>
 8008808:	4629      	mov	r1, r5
 800880a:	f7ff ff53 	bl	80086b4 <_malloc_r>
 800880e:	4606      	mov	r6, r0
 8008810:	b360      	cbz	r0, 800886c <__ssputs_r+0xa0>
 8008812:	6921      	ldr	r1, [r4, #16]
 8008814:	464a      	mov	r2, r9
 8008816:	f000 faeb 	bl	8008df0 <memcpy>
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008824:	81a3      	strh	r3, [r4, #12]
 8008826:	6126      	str	r6, [r4, #16]
 8008828:	6165      	str	r5, [r4, #20]
 800882a:	444e      	add	r6, r9
 800882c:	eba5 0509 	sub.w	r5, r5, r9
 8008830:	6026      	str	r6, [r4, #0]
 8008832:	60a5      	str	r5, [r4, #8]
 8008834:	463e      	mov	r6, r7
 8008836:	42be      	cmp	r6, r7
 8008838:	d900      	bls.n	800883c <__ssputs_r+0x70>
 800883a:	463e      	mov	r6, r7
 800883c:	6820      	ldr	r0, [r4, #0]
 800883e:	4632      	mov	r2, r6
 8008840:	4641      	mov	r1, r8
 8008842:	f000 faab 	bl	8008d9c <memmove>
 8008846:	68a3      	ldr	r3, [r4, #8]
 8008848:	1b9b      	subs	r3, r3, r6
 800884a:	60a3      	str	r3, [r4, #8]
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	4433      	add	r3, r6
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	2000      	movs	r0, #0
 8008854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008858:	462a      	mov	r2, r5
 800885a:	f000 fad7 	bl	8008e0c <_realloc_r>
 800885e:	4606      	mov	r6, r0
 8008860:	2800      	cmp	r0, #0
 8008862:	d1e0      	bne.n	8008826 <__ssputs_r+0x5a>
 8008864:	6921      	ldr	r1, [r4, #16]
 8008866:	4650      	mov	r0, sl
 8008868:	f7ff feb8 	bl	80085dc <_free_r>
 800886c:	230c      	movs	r3, #12
 800886e:	f8ca 3000 	str.w	r3, [sl]
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008878:	81a3      	strh	r3, [r4, #12]
 800887a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800887e:	e7e9      	b.n	8008854 <__ssputs_r+0x88>

08008880 <_svfiprintf_r>:
 8008880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	4698      	mov	r8, r3
 8008886:	898b      	ldrh	r3, [r1, #12]
 8008888:	061b      	lsls	r3, r3, #24
 800888a:	b09d      	sub	sp, #116	; 0x74
 800888c:	4607      	mov	r7, r0
 800888e:	460d      	mov	r5, r1
 8008890:	4614      	mov	r4, r2
 8008892:	d50e      	bpl.n	80088b2 <_svfiprintf_r+0x32>
 8008894:	690b      	ldr	r3, [r1, #16]
 8008896:	b963      	cbnz	r3, 80088b2 <_svfiprintf_r+0x32>
 8008898:	2140      	movs	r1, #64	; 0x40
 800889a:	f7ff ff0b 	bl	80086b4 <_malloc_r>
 800889e:	6028      	str	r0, [r5, #0]
 80088a0:	6128      	str	r0, [r5, #16]
 80088a2:	b920      	cbnz	r0, 80088ae <_svfiprintf_r+0x2e>
 80088a4:	230c      	movs	r3, #12
 80088a6:	603b      	str	r3, [r7, #0]
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088ac:	e0d0      	b.n	8008a50 <_svfiprintf_r+0x1d0>
 80088ae:	2340      	movs	r3, #64	; 0x40
 80088b0:	616b      	str	r3, [r5, #20]
 80088b2:	2300      	movs	r3, #0
 80088b4:	9309      	str	r3, [sp, #36]	; 0x24
 80088b6:	2320      	movs	r3, #32
 80088b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80088c0:	2330      	movs	r3, #48	; 0x30
 80088c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a68 <_svfiprintf_r+0x1e8>
 80088c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088ca:	f04f 0901 	mov.w	r9, #1
 80088ce:	4623      	mov	r3, r4
 80088d0:	469a      	mov	sl, r3
 80088d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088d6:	b10a      	cbz	r2, 80088dc <_svfiprintf_r+0x5c>
 80088d8:	2a25      	cmp	r2, #37	; 0x25
 80088da:	d1f9      	bne.n	80088d0 <_svfiprintf_r+0x50>
 80088dc:	ebba 0b04 	subs.w	fp, sl, r4
 80088e0:	d00b      	beq.n	80088fa <_svfiprintf_r+0x7a>
 80088e2:	465b      	mov	r3, fp
 80088e4:	4622      	mov	r2, r4
 80088e6:	4629      	mov	r1, r5
 80088e8:	4638      	mov	r0, r7
 80088ea:	f7ff ff6f 	bl	80087cc <__ssputs_r>
 80088ee:	3001      	adds	r0, #1
 80088f0:	f000 80a9 	beq.w	8008a46 <_svfiprintf_r+0x1c6>
 80088f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088f6:	445a      	add	r2, fp
 80088f8:	9209      	str	r2, [sp, #36]	; 0x24
 80088fa:	f89a 3000 	ldrb.w	r3, [sl]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 80a1 	beq.w	8008a46 <_svfiprintf_r+0x1c6>
 8008904:	2300      	movs	r3, #0
 8008906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800890a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800890e:	f10a 0a01 	add.w	sl, sl, #1
 8008912:	9304      	str	r3, [sp, #16]
 8008914:	9307      	str	r3, [sp, #28]
 8008916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800891a:	931a      	str	r3, [sp, #104]	; 0x68
 800891c:	4654      	mov	r4, sl
 800891e:	2205      	movs	r2, #5
 8008920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008924:	4850      	ldr	r0, [pc, #320]	; (8008a68 <_svfiprintf_r+0x1e8>)
 8008926:	f7f7 fce3 	bl	80002f0 <memchr>
 800892a:	9a04      	ldr	r2, [sp, #16]
 800892c:	b9d8      	cbnz	r0, 8008966 <_svfiprintf_r+0xe6>
 800892e:	06d0      	lsls	r0, r2, #27
 8008930:	bf44      	itt	mi
 8008932:	2320      	movmi	r3, #32
 8008934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008938:	0711      	lsls	r1, r2, #28
 800893a:	bf44      	itt	mi
 800893c:	232b      	movmi	r3, #43	; 0x2b
 800893e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008942:	f89a 3000 	ldrb.w	r3, [sl]
 8008946:	2b2a      	cmp	r3, #42	; 0x2a
 8008948:	d015      	beq.n	8008976 <_svfiprintf_r+0xf6>
 800894a:	9a07      	ldr	r2, [sp, #28]
 800894c:	4654      	mov	r4, sl
 800894e:	2000      	movs	r0, #0
 8008950:	f04f 0c0a 	mov.w	ip, #10
 8008954:	4621      	mov	r1, r4
 8008956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800895a:	3b30      	subs	r3, #48	; 0x30
 800895c:	2b09      	cmp	r3, #9
 800895e:	d94d      	bls.n	80089fc <_svfiprintf_r+0x17c>
 8008960:	b1b0      	cbz	r0, 8008990 <_svfiprintf_r+0x110>
 8008962:	9207      	str	r2, [sp, #28]
 8008964:	e014      	b.n	8008990 <_svfiprintf_r+0x110>
 8008966:	eba0 0308 	sub.w	r3, r0, r8
 800896a:	fa09 f303 	lsl.w	r3, r9, r3
 800896e:	4313      	orrs	r3, r2
 8008970:	9304      	str	r3, [sp, #16]
 8008972:	46a2      	mov	sl, r4
 8008974:	e7d2      	b.n	800891c <_svfiprintf_r+0x9c>
 8008976:	9b03      	ldr	r3, [sp, #12]
 8008978:	1d19      	adds	r1, r3, #4
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	9103      	str	r1, [sp, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	bfbb      	ittet	lt
 8008982:	425b      	neglt	r3, r3
 8008984:	f042 0202 	orrlt.w	r2, r2, #2
 8008988:	9307      	strge	r3, [sp, #28]
 800898a:	9307      	strlt	r3, [sp, #28]
 800898c:	bfb8      	it	lt
 800898e:	9204      	strlt	r2, [sp, #16]
 8008990:	7823      	ldrb	r3, [r4, #0]
 8008992:	2b2e      	cmp	r3, #46	; 0x2e
 8008994:	d10c      	bne.n	80089b0 <_svfiprintf_r+0x130>
 8008996:	7863      	ldrb	r3, [r4, #1]
 8008998:	2b2a      	cmp	r3, #42	; 0x2a
 800899a:	d134      	bne.n	8008a06 <_svfiprintf_r+0x186>
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	1d1a      	adds	r2, r3, #4
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	9203      	str	r2, [sp, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	bfb8      	it	lt
 80089a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80089ac:	3402      	adds	r4, #2
 80089ae:	9305      	str	r3, [sp, #20]
 80089b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008a78 <_svfiprintf_r+0x1f8>
 80089b4:	7821      	ldrb	r1, [r4, #0]
 80089b6:	2203      	movs	r2, #3
 80089b8:	4650      	mov	r0, sl
 80089ba:	f7f7 fc99 	bl	80002f0 <memchr>
 80089be:	b138      	cbz	r0, 80089d0 <_svfiprintf_r+0x150>
 80089c0:	9b04      	ldr	r3, [sp, #16]
 80089c2:	eba0 000a 	sub.w	r0, r0, sl
 80089c6:	2240      	movs	r2, #64	; 0x40
 80089c8:	4082      	lsls	r2, r0
 80089ca:	4313      	orrs	r3, r2
 80089cc:	3401      	adds	r4, #1
 80089ce:	9304      	str	r3, [sp, #16]
 80089d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d4:	4825      	ldr	r0, [pc, #148]	; (8008a6c <_svfiprintf_r+0x1ec>)
 80089d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089da:	2206      	movs	r2, #6
 80089dc:	f7f7 fc88 	bl	80002f0 <memchr>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d038      	beq.n	8008a56 <_svfiprintf_r+0x1d6>
 80089e4:	4b22      	ldr	r3, [pc, #136]	; (8008a70 <_svfiprintf_r+0x1f0>)
 80089e6:	bb1b      	cbnz	r3, 8008a30 <_svfiprintf_r+0x1b0>
 80089e8:	9b03      	ldr	r3, [sp, #12]
 80089ea:	3307      	adds	r3, #7
 80089ec:	f023 0307 	bic.w	r3, r3, #7
 80089f0:	3308      	adds	r3, #8
 80089f2:	9303      	str	r3, [sp, #12]
 80089f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f6:	4433      	add	r3, r6
 80089f8:	9309      	str	r3, [sp, #36]	; 0x24
 80089fa:	e768      	b.n	80088ce <_svfiprintf_r+0x4e>
 80089fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a00:	460c      	mov	r4, r1
 8008a02:	2001      	movs	r0, #1
 8008a04:	e7a6      	b.n	8008954 <_svfiprintf_r+0xd4>
 8008a06:	2300      	movs	r3, #0
 8008a08:	3401      	adds	r4, #1
 8008a0a:	9305      	str	r3, [sp, #20]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	f04f 0c0a 	mov.w	ip, #10
 8008a12:	4620      	mov	r0, r4
 8008a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a18:	3a30      	subs	r2, #48	; 0x30
 8008a1a:	2a09      	cmp	r2, #9
 8008a1c:	d903      	bls.n	8008a26 <_svfiprintf_r+0x1a6>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0c6      	beq.n	80089b0 <_svfiprintf_r+0x130>
 8008a22:	9105      	str	r1, [sp, #20]
 8008a24:	e7c4      	b.n	80089b0 <_svfiprintf_r+0x130>
 8008a26:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e7f0      	b.n	8008a12 <_svfiprintf_r+0x192>
 8008a30:	ab03      	add	r3, sp, #12
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	462a      	mov	r2, r5
 8008a36:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <_svfiprintf_r+0x1f4>)
 8008a38:	a904      	add	r1, sp, #16
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	f3af 8000 	nop.w
 8008a40:	1c42      	adds	r2, r0, #1
 8008a42:	4606      	mov	r6, r0
 8008a44:	d1d6      	bne.n	80089f4 <_svfiprintf_r+0x174>
 8008a46:	89ab      	ldrh	r3, [r5, #12]
 8008a48:	065b      	lsls	r3, r3, #25
 8008a4a:	f53f af2d 	bmi.w	80088a8 <_svfiprintf_r+0x28>
 8008a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a50:	b01d      	add	sp, #116	; 0x74
 8008a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a56:	ab03      	add	r3, sp, #12
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	462a      	mov	r2, r5
 8008a5c:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <_svfiprintf_r+0x1f4>)
 8008a5e:	a904      	add	r1, sp, #16
 8008a60:	4638      	mov	r0, r7
 8008a62:	f000 f879 	bl	8008b58 <_printf_i>
 8008a66:	e7eb      	b.n	8008a40 <_svfiprintf_r+0x1c0>
 8008a68:	08008fb4 	.word	0x08008fb4
 8008a6c:	08008fbe 	.word	0x08008fbe
 8008a70:	00000000 	.word	0x00000000
 8008a74:	080087cd 	.word	0x080087cd
 8008a78:	08008fba 	.word	0x08008fba

08008a7c <_printf_common>:
 8008a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a80:	4616      	mov	r6, r2
 8008a82:	4699      	mov	r9, r3
 8008a84:	688a      	ldr	r2, [r1, #8]
 8008a86:	690b      	ldr	r3, [r1, #16]
 8008a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	bfb8      	it	lt
 8008a90:	4613      	movlt	r3, r2
 8008a92:	6033      	str	r3, [r6, #0]
 8008a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a98:	4607      	mov	r7, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	b10a      	cbz	r2, 8008aa2 <_printf_common+0x26>
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	6033      	str	r3, [r6, #0]
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	0699      	lsls	r1, r3, #26
 8008aa6:	bf42      	ittt	mi
 8008aa8:	6833      	ldrmi	r3, [r6, #0]
 8008aaa:	3302      	addmi	r3, #2
 8008aac:	6033      	strmi	r3, [r6, #0]
 8008aae:	6825      	ldr	r5, [r4, #0]
 8008ab0:	f015 0506 	ands.w	r5, r5, #6
 8008ab4:	d106      	bne.n	8008ac4 <_printf_common+0x48>
 8008ab6:	f104 0a19 	add.w	sl, r4, #25
 8008aba:	68e3      	ldr	r3, [r4, #12]
 8008abc:	6832      	ldr	r2, [r6, #0]
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	dc26      	bgt.n	8008b12 <_printf_common+0x96>
 8008ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ac8:	1e13      	subs	r3, r2, #0
 8008aca:	6822      	ldr	r2, [r4, #0]
 8008acc:	bf18      	it	ne
 8008ace:	2301      	movne	r3, #1
 8008ad0:	0692      	lsls	r2, r2, #26
 8008ad2:	d42b      	bmi.n	8008b2c <_printf_common+0xb0>
 8008ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ad8:	4649      	mov	r1, r9
 8008ada:	4638      	mov	r0, r7
 8008adc:	47c0      	blx	r8
 8008ade:	3001      	adds	r0, #1
 8008ae0:	d01e      	beq.n	8008b20 <_printf_common+0xa4>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	6922      	ldr	r2, [r4, #16]
 8008ae6:	f003 0306 	and.w	r3, r3, #6
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	bf02      	ittt	eq
 8008aee:	68e5      	ldreq	r5, [r4, #12]
 8008af0:	6833      	ldreq	r3, [r6, #0]
 8008af2:	1aed      	subeq	r5, r5, r3
 8008af4:	68a3      	ldr	r3, [r4, #8]
 8008af6:	bf0c      	ite	eq
 8008af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008afc:	2500      	movne	r5, #0
 8008afe:	4293      	cmp	r3, r2
 8008b00:	bfc4      	itt	gt
 8008b02:	1a9b      	subgt	r3, r3, r2
 8008b04:	18ed      	addgt	r5, r5, r3
 8008b06:	2600      	movs	r6, #0
 8008b08:	341a      	adds	r4, #26
 8008b0a:	42b5      	cmp	r5, r6
 8008b0c:	d11a      	bne.n	8008b44 <_printf_common+0xc8>
 8008b0e:	2000      	movs	r0, #0
 8008b10:	e008      	b.n	8008b24 <_printf_common+0xa8>
 8008b12:	2301      	movs	r3, #1
 8008b14:	4652      	mov	r2, sl
 8008b16:	4649      	mov	r1, r9
 8008b18:	4638      	mov	r0, r7
 8008b1a:	47c0      	blx	r8
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d103      	bne.n	8008b28 <_printf_common+0xac>
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b28:	3501      	adds	r5, #1
 8008b2a:	e7c6      	b.n	8008aba <_printf_common+0x3e>
 8008b2c:	18e1      	adds	r1, r4, r3
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	2030      	movs	r0, #48	; 0x30
 8008b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b36:	4422      	add	r2, r4
 8008b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b40:	3302      	adds	r3, #2
 8008b42:	e7c7      	b.n	8008ad4 <_printf_common+0x58>
 8008b44:	2301      	movs	r3, #1
 8008b46:	4622      	mov	r2, r4
 8008b48:	4649      	mov	r1, r9
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	47c0      	blx	r8
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d0e6      	beq.n	8008b20 <_printf_common+0xa4>
 8008b52:	3601      	adds	r6, #1
 8008b54:	e7d9      	b.n	8008b0a <_printf_common+0x8e>
	...

08008b58 <_printf_i>:
 8008b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b5c:	7e0f      	ldrb	r7, [r1, #24]
 8008b5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b60:	2f78      	cmp	r7, #120	; 0x78
 8008b62:	4691      	mov	r9, r2
 8008b64:	4680      	mov	r8, r0
 8008b66:	460c      	mov	r4, r1
 8008b68:	469a      	mov	sl, r3
 8008b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b6e:	d807      	bhi.n	8008b80 <_printf_i+0x28>
 8008b70:	2f62      	cmp	r7, #98	; 0x62
 8008b72:	d80a      	bhi.n	8008b8a <_printf_i+0x32>
 8008b74:	2f00      	cmp	r7, #0
 8008b76:	f000 80d4 	beq.w	8008d22 <_printf_i+0x1ca>
 8008b7a:	2f58      	cmp	r7, #88	; 0x58
 8008b7c:	f000 80c0 	beq.w	8008d00 <_printf_i+0x1a8>
 8008b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b88:	e03a      	b.n	8008c00 <_printf_i+0xa8>
 8008b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b8e:	2b15      	cmp	r3, #21
 8008b90:	d8f6      	bhi.n	8008b80 <_printf_i+0x28>
 8008b92:	a101      	add	r1, pc, #4	; (adr r1, 8008b98 <_printf_i+0x40>)
 8008b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b98:	08008bf1 	.word	0x08008bf1
 8008b9c:	08008c05 	.word	0x08008c05
 8008ba0:	08008b81 	.word	0x08008b81
 8008ba4:	08008b81 	.word	0x08008b81
 8008ba8:	08008b81 	.word	0x08008b81
 8008bac:	08008b81 	.word	0x08008b81
 8008bb0:	08008c05 	.word	0x08008c05
 8008bb4:	08008b81 	.word	0x08008b81
 8008bb8:	08008b81 	.word	0x08008b81
 8008bbc:	08008b81 	.word	0x08008b81
 8008bc0:	08008b81 	.word	0x08008b81
 8008bc4:	08008d09 	.word	0x08008d09
 8008bc8:	08008c31 	.word	0x08008c31
 8008bcc:	08008cc3 	.word	0x08008cc3
 8008bd0:	08008b81 	.word	0x08008b81
 8008bd4:	08008b81 	.word	0x08008b81
 8008bd8:	08008d2b 	.word	0x08008d2b
 8008bdc:	08008b81 	.word	0x08008b81
 8008be0:	08008c31 	.word	0x08008c31
 8008be4:	08008b81 	.word	0x08008b81
 8008be8:	08008b81 	.word	0x08008b81
 8008bec:	08008ccb 	.word	0x08008ccb
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	1d1a      	adds	r2, r3, #4
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	602a      	str	r2, [r5, #0]
 8008bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c00:	2301      	movs	r3, #1
 8008c02:	e09f      	b.n	8008d44 <_printf_i+0x1ec>
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	0607      	lsls	r7, r0, #24
 8008c0a:	f103 0104 	add.w	r1, r3, #4
 8008c0e:	6029      	str	r1, [r5, #0]
 8008c10:	d501      	bpl.n	8008c16 <_printf_i+0xbe>
 8008c12:	681e      	ldr	r6, [r3, #0]
 8008c14:	e003      	b.n	8008c1e <_printf_i+0xc6>
 8008c16:	0646      	lsls	r6, r0, #25
 8008c18:	d5fb      	bpl.n	8008c12 <_printf_i+0xba>
 8008c1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c1e:	2e00      	cmp	r6, #0
 8008c20:	da03      	bge.n	8008c2a <_printf_i+0xd2>
 8008c22:	232d      	movs	r3, #45	; 0x2d
 8008c24:	4276      	negs	r6, r6
 8008c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c2a:	485a      	ldr	r0, [pc, #360]	; (8008d94 <_printf_i+0x23c>)
 8008c2c:	230a      	movs	r3, #10
 8008c2e:	e012      	b.n	8008c56 <_printf_i+0xfe>
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	6820      	ldr	r0, [r4, #0]
 8008c34:	1d19      	adds	r1, r3, #4
 8008c36:	6029      	str	r1, [r5, #0]
 8008c38:	0605      	lsls	r5, r0, #24
 8008c3a:	d501      	bpl.n	8008c40 <_printf_i+0xe8>
 8008c3c:	681e      	ldr	r6, [r3, #0]
 8008c3e:	e002      	b.n	8008c46 <_printf_i+0xee>
 8008c40:	0641      	lsls	r1, r0, #25
 8008c42:	d5fb      	bpl.n	8008c3c <_printf_i+0xe4>
 8008c44:	881e      	ldrh	r6, [r3, #0]
 8008c46:	4853      	ldr	r0, [pc, #332]	; (8008d94 <_printf_i+0x23c>)
 8008c48:	2f6f      	cmp	r7, #111	; 0x6f
 8008c4a:	bf0c      	ite	eq
 8008c4c:	2308      	moveq	r3, #8
 8008c4e:	230a      	movne	r3, #10
 8008c50:	2100      	movs	r1, #0
 8008c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c56:	6865      	ldr	r5, [r4, #4]
 8008c58:	60a5      	str	r5, [r4, #8]
 8008c5a:	2d00      	cmp	r5, #0
 8008c5c:	bfa2      	ittt	ge
 8008c5e:	6821      	ldrge	r1, [r4, #0]
 8008c60:	f021 0104 	bicge.w	r1, r1, #4
 8008c64:	6021      	strge	r1, [r4, #0]
 8008c66:	b90e      	cbnz	r6, 8008c6c <_printf_i+0x114>
 8008c68:	2d00      	cmp	r5, #0
 8008c6a:	d04b      	beq.n	8008d04 <_printf_i+0x1ac>
 8008c6c:	4615      	mov	r5, r2
 8008c6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c72:	fb03 6711 	mls	r7, r3, r1, r6
 8008c76:	5dc7      	ldrb	r7, [r0, r7]
 8008c78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c7c:	4637      	mov	r7, r6
 8008c7e:	42bb      	cmp	r3, r7
 8008c80:	460e      	mov	r6, r1
 8008c82:	d9f4      	bls.n	8008c6e <_printf_i+0x116>
 8008c84:	2b08      	cmp	r3, #8
 8008c86:	d10b      	bne.n	8008ca0 <_printf_i+0x148>
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	07de      	lsls	r6, r3, #31
 8008c8c:	d508      	bpl.n	8008ca0 <_printf_i+0x148>
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	6861      	ldr	r1, [r4, #4]
 8008c92:	4299      	cmp	r1, r3
 8008c94:	bfde      	ittt	le
 8008c96:	2330      	movle	r3, #48	; 0x30
 8008c98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008ca0:	1b52      	subs	r2, r2, r5
 8008ca2:	6122      	str	r2, [r4, #16]
 8008ca4:	f8cd a000 	str.w	sl, [sp]
 8008ca8:	464b      	mov	r3, r9
 8008caa:	aa03      	add	r2, sp, #12
 8008cac:	4621      	mov	r1, r4
 8008cae:	4640      	mov	r0, r8
 8008cb0:	f7ff fee4 	bl	8008a7c <_printf_common>
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d14a      	bne.n	8008d4e <_printf_i+0x1f6>
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cbc:	b004      	add	sp, #16
 8008cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	f043 0320 	orr.w	r3, r3, #32
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	4833      	ldr	r0, [pc, #204]	; (8008d98 <_printf_i+0x240>)
 8008ccc:	2778      	movs	r7, #120	; 0x78
 8008cce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	6829      	ldr	r1, [r5, #0]
 8008cd6:	061f      	lsls	r7, r3, #24
 8008cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cdc:	d402      	bmi.n	8008ce4 <_printf_i+0x18c>
 8008cde:	065f      	lsls	r7, r3, #25
 8008ce0:	bf48      	it	mi
 8008ce2:	b2b6      	uxthmi	r6, r6
 8008ce4:	07df      	lsls	r7, r3, #31
 8008ce6:	bf48      	it	mi
 8008ce8:	f043 0320 	orrmi.w	r3, r3, #32
 8008cec:	6029      	str	r1, [r5, #0]
 8008cee:	bf48      	it	mi
 8008cf0:	6023      	strmi	r3, [r4, #0]
 8008cf2:	b91e      	cbnz	r6, 8008cfc <_printf_i+0x1a4>
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	f023 0320 	bic.w	r3, r3, #32
 8008cfa:	6023      	str	r3, [r4, #0]
 8008cfc:	2310      	movs	r3, #16
 8008cfe:	e7a7      	b.n	8008c50 <_printf_i+0xf8>
 8008d00:	4824      	ldr	r0, [pc, #144]	; (8008d94 <_printf_i+0x23c>)
 8008d02:	e7e4      	b.n	8008cce <_printf_i+0x176>
 8008d04:	4615      	mov	r5, r2
 8008d06:	e7bd      	b.n	8008c84 <_printf_i+0x12c>
 8008d08:	682b      	ldr	r3, [r5, #0]
 8008d0a:	6826      	ldr	r6, [r4, #0]
 8008d0c:	6961      	ldr	r1, [r4, #20]
 8008d0e:	1d18      	adds	r0, r3, #4
 8008d10:	6028      	str	r0, [r5, #0]
 8008d12:	0635      	lsls	r5, r6, #24
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	d501      	bpl.n	8008d1c <_printf_i+0x1c4>
 8008d18:	6019      	str	r1, [r3, #0]
 8008d1a:	e002      	b.n	8008d22 <_printf_i+0x1ca>
 8008d1c:	0670      	lsls	r0, r6, #25
 8008d1e:	d5fb      	bpl.n	8008d18 <_printf_i+0x1c0>
 8008d20:	8019      	strh	r1, [r3, #0]
 8008d22:	2300      	movs	r3, #0
 8008d24:	6123      	str	r3, [r4, #16]
 8008d26:	4615      	mov	r5, r2
 8008d28:	e7bc      	b.n	8008ca4 <_printf_i+0x14c>
 8008d2a:	682b      	ldr	r3, [r5, #0]
 8008d2c:	1d1a      	adds	r2, r3, #4
 8008d2e:	602a      	str	r2, [r5, #0]
 8008d30:	681d      	ldr	r5, [r3, #0]
 8008d32:	6862      	ldr	r2, [r4, #4]
 8008d34:	2100      	movs	r1, #0
 8008d36:	4628      	mov	r0, r5
 8008d38:	f7f7 fada 	bl	80002f0 <memchr>
 8008d3c:	b108      	cbz	r0, 8008d42 <_printf_i+0x1ea>
 8008d3e:	1b40      	subs	r0, r0, r5
 8008d40:	6060      	str	r0, [r4, #4]
 8008d42:	6863      	ldr	r3, [r4, #4]
 8008d44:	6123      	str	r3, [r4, #16]
 8008d46:	2300      	movs	r3, #0
 8008d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d4c:	e7aa      	b.n	8008ca4 <_printf_i+0x14c>
 8008d4e:	6923      	ldr	r3, [r4, #16]
 8008d50:	462a      	mov	r2, r5
 8008d52:	4649      	mov	r1, r9
 8008d54:	4640      	mov	r0, r8
 8008d56:	47d0      	blx	sl
 8008d58:	3001      	adds	r0, #1
 8008d5a:	d0ad      	beq.n	8008cb8 <_printf_i+0x160>
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	079b      	lsls	r3, r3, #30
 8008d60:	d413      	bmi.n	8008d8a <_printf_i+0x232>
 8008d62:	68e0      	ldr	r0, [r4, #12]
 8008d64:	9b03      	ldr	r3, [sp, #12]
 8008d66:	4298      	cmp	r0, r3
 8008d68:	bfb8      	it	lt
 8008d6a:	4618      	movlt	r0, r3
 8008d6c:	e7a6      	b.n	8008cbc <_printf_i+0x164>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	4632      	mov	r2, r6
 8008d72:	4649      	mov	r1, r9
 8008d74:	4640      	mov	r0, r8
 8008d76:	47d0      	blx	sl
 8008d78:	3001      	adds	r0, #1
 8008d7a:	d09d      	beq.n	8008cb8 <_printf_i+0x160>
 8008d7c:	3501      	adds	r5, #1
 8008d7e:	68e3      	ldr	r3, [r4, #12]
 8008d80:	9903      	ldr	r1, [sp, #12]
 8008d82:	1a5b      	subs	r3, r3, r1
 8008d84:	42ab      	cmp	r3, r5
 8008d86:	dcf2      	bgt.n	8008d6e <_printf_i+0x216>
 8008d88:	e7eb      	b.n	8008d62 <_printf_i+0x20a>
 8008d8a:	2500      	movs	r5, #0
 8008d8c:	f104 0619 	add.w	r6, r4, #25
 8008d90:	e7f5      	b.n	8008d7e <_printf_i+0x226>
 8008d92:	bf00      	nop
 8008d94:	08008fc5 	.word	0x08008fc5
 8008d98:	08008fd6 	.word	0x08008fd6

08008d9c <memmove>:
 8008d9c:	4288      	cmp	r0, r1
 8008d9e:	b510      	push	{r4, lr}
 8008da0:	eb01 0402 	add.w	r4, r1, r2
 8008da4:	d902      	bls.n	8008dac <memmove+0x10>
 8008da6:	4284      	cmp	r4, r0
 8008da8:	4623      	mov	r3, r4
 8008daa:	d807      	bhi.n	8008dbc <memmove+0x20>
 8008dac:	1e43      	subs	r3, r0, #1
 8008dae:	42a1      	cmp	r1, r4
 8008db0:	d008      	beq.n	8008dc4 <memmove+0x28>
 8008db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008db6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dba:	e7f8      	b.n	8008dae <memmove+0x12>
 8008dbc:	4402      	add	r2, r0
 8008dbe:	4601      	mov	r1, r0
 8008dc0:	428a      	cmp	r2, r1
 8008dc2:	d100      	bne.n	8008dc6 <memmove+0x2a>
 8008dc4:	bd10      	pop	{r4, pc}
 8008dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dce:	e7f7      	b.n	8008dc0 <memmove+0x24>

08008dd0 <_sbrk_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4d06      	ldr	r5, [pc, #24]	; (8008dec <_sbrk_r+0x1c>)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	4608      	mov	r0, r1
 8008dda:	602b      	str	r3, [r5, #0]
 8008ddc:	f7f8 fb9c 	bl	8001518 <_sbrk>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d102      	bne.n	8008dea <_sbrk_r+0x1a>
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	b103      	cbz	r3, 8008dea <_sbrk_r+0x1a>
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	24031170 	.word	0x24031170

08008df0 <memcpy>:
 8008df0:	440a      	add	r2, r1
 8008df2:	4291      	cmp	r1, r2
 8008df4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008df8:	d100      	bne.n	8008dfc <memcpy+0xc>
 8008dfa:	4770      	bx	lr
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e06:	4291      	cmp	r1, r2
 8008e08:	d1f9      	bne.n	8008dfe <memcpy+0xe>
 8008e0a:	bd10      	pop	{r4, pc}

08008e0c <_realloc_r>:
 8008e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e10:	4680      	mov	r8, r0
 8008e12:	4614      	mov	r4, r2
 8008e14:	460e      	mov	r6, r1
 8008e16:	b921      	cbnz	r1, 8008e22 <_realloc_r+0x16>
 8008e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	f7ff bc49 	b.w	80086b4 <_malloc_r>
 8008e22:	b92a      	cbnz	r2, 8008e30 <_realloc_r+0x24>
 8008e24:	f7ff fbda 	bl	80085dc <_free_r>
 8008e28:	4625      	mov	r5, r4
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e30:	f000 f81b 	bl	8008e6a <_malloc_usable_size_r>
 8008e34:	4284      	cmp	r4, r0
 8008e36:	4607      	mov	r7, r0
 8008e38:	d802      	bhi.n	8008e40 <_realloc_r+0x34>
 8008e3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e3e:	d812      	bhi.n	8008e66 <_realloc_r+0x5a>
 8008e40:	4621      	mov	r1, r4
 8008e42:	4640      	mov	r0, r8
 8008e44:	f7ff fc36 	bl	80086b4 <_malloc_r>
 8008e48:	4605      	mov	r5, r0
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d0ed      	beq.n	8008e2a <_realloc_r+0x1e>
 8008e4e:	42bc      	cmp	r4, r7
 8008e50:	4622      	mov	r2, r4
 8008e52:	4631      	mov	r1, r6
 8008e54:	bf28      	it	cs
 8008e56:	463a      	movcs	r2, r7
 8008e58:	f7ff ffca 	bl	8008df0 <memcpy>
 8008e5c:	4631      	mov	r1, r6
 8008e5e:	4640      	mov	r0, r8
 8008e60:	f7ff fbbc 	bl	80085dc <_free_r>
 8008e64:	e7e1      	b.n	8008e2a <_realloc_r+0x1e>
 8008e66:	4635      	mov	r5, r6
 8008e68:	e7df      	b.n	8008e2a <_realloc_r+0x1e>

08008e6a <_malloc_usable_size_r>:
 8008e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e6e:	1f18      	subs	r0, r3, #4
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	bfbc      	itt	lt
 8008e74:	580b      	ldrlt	r3, [r1, r0]
 8008e76:	18c0      	addlt	r0, r0, r3
 8008e78:	4770      	bx	lr
	...

08008e7c <_init>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	bf00      	nop
 8008e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e82:	bc08      	pop	{r3}
 8008e84:	469e      	mov	lr, r3
 8008e86:	4770      	bx	lr

08008e88 <_fini>:
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	bf00      	nop
 8008e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e8e:	bc08      	pop	{r3}
 8008e90:	469e      	mov	lr, r3
 8008e92:	4770      	bx	lr
