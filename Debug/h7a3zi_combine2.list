
h7a3zi_combine2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000909c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800934c  0800934c  0000a34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009424  08009424  0000a424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800942c  0800942c  0000a42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009430  08009430  0000a430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08009434  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000310f8  24000060  08009494  0000b060  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24031158  08009494  0000b158  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019a93  00000000  00000000  0000b08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cb0  00000000  00000000  00024b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001490  00000000  00000000  000277d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000100d  00000000  00000000  00028c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032d06  00000000  00000000  00029c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000195cf  00000000  00000000  0005c97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015391f  00000000  00000000  00075f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c9869  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005dc8  00000000  00000000  001c98ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  001cf674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009334 	.word	0x08009334

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	08009334 	.word	0x08009334

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000684:	f001 f8e4 	bl	8001850 <HAL_Init>
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f86c 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fa54 	bl	8000b38 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000690:	f000 f9fe 	bl	8000a90 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000694:	f000 fa48 	bl	8000b28 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 8000698:	f000 f8da 	bl	8000850 <MX_ADC1_Init>
  MX_TIM16_Init();
 800069c:	f000 f9aa 	bl	80009f4 <MX_TIM16_Init>
  MX_TIM17_Init();
 80006a0:	f000 f9d0 	bl	8000a44 <MX_TIM17_Init>
  MX_TIM3_Init();
 80006a4:	f000 f94c 	bl	8000940 <MX_TIM3_Init>
  //  Stepper

  /////////////////START/////////////////////////

  // pump on
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2120      	movs	r1, #32
 80006ac:	4827      	ldr	r0, [pc, #156]	@ (800074c <main+0xcc>)
 80006ae:	f002 fe13 	bl	80032d8 <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 80006b2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006b6:	f001 f95d 	bl	8001974 <HAL_Delay>


  measure(&Meas);
 80006ba:	4825      	ldr	r0, [pc, #148]	@ (8000750 <main+0xd0>)
 80006bc:	f000 fb80 	bl	8000dc0 <measure>
  // uart_transmit_analog();
  analyse(&Meas);
 80006c0:	4823      	ldr	r0, [pc, #140]	@ (8000750 <main+0xd0>)
 80006c2:	f000 fc33 	bl	8000f2c <analyse>
  // uart_transmit_digital();
  uart_transmit_info();
 80006c6:	f000 fd1d 	bl	8001104 <uart_transmit_info>
  while (Meas.bad == true) {
 80006ca:	e02e      	b.n	800072a <main+0xaa>
    timer_counter = __HAL_TIM_GET_COUNTER(&htim3);
 80006cc:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <main+0xd4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b20      	ldr	r3, [pc, #128]	@ (8000758 <main+0xd8>)
 80006d6:	801a      	strh	r2, [r3, #0]
    update_encoder(&enc_instance, &htim3);
 80006d8:	491e      	ldr	r1, [pc, #120]	@ (8000754 <main+0xd4>)
 80006da:	4820      	ldr	r0, [pc, #128]	@ (800075c <main+0xdc>)
 80006dc:	f000 fd6c 	bl	80011b8 <update_encoder>
    encoder_position = enc_instance.position;
 80006e0:	4b1e      	ldr	r3, [pc, #120]	@ (800075c <main+0xdc>)
 80006e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80006e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000760 <main+0xe0>)
 80006e8:	601a      	str	r2, [r3, #0]

    if (encoder_position == PI/2 + PI/4 ) {
 80006ea:	f240 13bd 	movw	r3, #445	@ 0x1bd
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	da00      	bge.n	80006f4 <main+0x74>
 80006f2:	3301      	adds	r3, #1
 80006f4:	105b      	asrs	r3, r3, #1
 80006f6:	461a      	mov	r2, r3
 80006f8:	f240 13bd 	movw	r3, #445	@ 0x1bd
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	da00      	bge.n	8000702 <main+0x82>
 8000700:	3303      	adds	r3, #3
 8000702:	109b      	asrs	r3, r3, #2
 8000704:	441a      	add	r2, r3
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <main+0xe0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	429a      	cmp	r2, r3
 800070c:	d015      	beq.n	800073a <main+0xba>
      // rotate(-PI/2, encoder_position);
      break;
    }
    else {
      // rotate 90°+ 45°
      rotate(-PI/2, encoder_position);
 800070e:	f240 13bd 	movw	r3, #445	@ 0x1bd
 8000712:	2b00      	cmp	r3, #0
 8000714:	da00      	bge.n	8000718 <main+0x98>
 8000716:	3301      	adds	r3, #1
 8000718:	105b      	asrs	r3, r3, #1
 800071a:	425b      	negs	r3, r3
 800071c:	461a      	mov	r2, r3
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <main+0xe0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4619      	mov	r1, r3
 8000724:	4610      	mov	r0, r2
 8000726:	f000 fdcb 	bl	80012c0 <rotate>
  while (Meas.bad == true) {
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <main+0xd0>)
 800072c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8000730:	f893 3d50 	ldrb.w	r3, [r3, #3408]	@ 0xd50
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1c9      	bne.n	80006cc <main+0x4c>
 8000738:	e000      	b.n	800073c <main+0xbc>
      break;
 800073a:	bf00      	nop
    }
  }



  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2120      	movs	r1, #32
 8000740:	4802      	ldr	r0, [pc, #8]	@ (800074c <main+0xcc>)
 8000742:	f002 fdc9 	bl	80032d8 <HAL_GPIO_WritePin>
  // Sequence for encoder motor
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000746:	bf00      	nop
 8000748:	e7fd      	b.n	8000746 <main+0xc6>
 800074a:	bf00      	nop
 800074c:	58020000 	.word	0x58020000
 8000750:	2400007c 	.word	0x2400007c
 8000754:	24030e34 	.word	0x24030e34
 8000758:	24031004 	.word	0x24031004
 800075c:	24030fb0 	.word	0x24030fb0
 8000760:	24031000 	.word	0x24031000

08000764 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b09c      	sub	sp, #112	@ 0x70
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076e:	224c      	movs	r2, #76	@ 0x4c
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f008 f95e 	bl	8008a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2220      	movs	r2, #32
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f008 f958 	bl	8008a34 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000784:	4b30      	ldr	r3, [pc, #192]	@ (8000848 <SystemClock_Config+0xe4>)
 8000786:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800078a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800078e:	2004      	movs	r0, #4
 8000790:	f002 fdbc 	bl	800330c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000794:	2300      	movs	r3, #0
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4b2c      	ldr	r3, [pc, #176]	@ (800084c <SystemClock_Config+0xe8>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a2b      	ldr	r2, [pc, #172]	@ (800084c <SystemClock_Config+0xe8>)
 800079e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b29      	ldr	r3, [pc, #164]	@ (800084c <SystemClock_Config+0xe8>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80007b0:	bf00      	nop
 80007b2:	4b26      	ldr	r3, [pc, #152]	@ (800084c <SystemClock_Config+0xe8>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007be:	d1f8      	bne.n	80007b2 <SystemClock_Config+0x4e>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType =
 80007c0:	2321      	movs	r3, #33	@ 0x21
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
      RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007ca:	2301      	movs	r3, #1
 80007cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007da:	2318      	movs	r3, #24
 80007dc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e2:	2304      	movs	r3, #4
 80007e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ea:	230c      	movs	r3, #12
 80007ec:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 fde0 	bl	80033c0 <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xa6>
    Error_Handler();
 8000806:	f000 fcd1 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800080a:	233f      	movs	r3, #63	@ 0x3f
 800080c:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2303      	movs	r3, #3
 8000810:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2102      	movs	r1, #2
 800082e:	4618      	mov	r0, r3
 8000830:	f003 f9f8 	bl	8003c24 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xda>
    Error_Handler();
 800083a:	f000 fcb7 	bl	80011ac <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3770      	adds	r7, #112	@ 0x70
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	58024400 	.word	0x58024400
 800084c:	58024800 	.word	0x58024800

08000850 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	@ 0x28
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	615a      	str	r2, [r3, #20]
 8000872:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 8000874:	4b2f      	ldr	r3, [pc, #188]	@ (8000934 <MX_ADC1_Init+0xe4>)
 8000876:	4a30      	ldr	r2, [pc, #192]	@ (8000938 <MX_ADC1_Init+0xe8>)
 8000878:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800087a:	4b2e      	ldr	r3, [pc, #184]	@ (8000934 <MX_ADC1_Init+0xe4>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000880:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <MX_ADC1_Init+0xe4>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000886:	4b2b      	ldr	r3, [pc, #172]	@ (8000934 <MX_ADC1_Init+0xe4>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088c:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <MX_ADC1_Init+0xe4>)
 800088e:	2204      	movs	r2, #4
 8000890:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000892:	4b28      	ldr	r3, [pc, #160]	@ (8000934 <MX_ADC1_Init+0xe4>)
 8000894:	2200      	movs	r2, #0
 8000896:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000898:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <MX_ADC1_Init+0xe4>)
 800089a:	2200      	movs	r2, #0
 800089c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800089e:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <MX_ADC1_Init+0xe4>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a4:	4b23      	ldr	r3, [pc, #140]	@ (8000934 <MX_ADC1_Init+0xe4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008aa:	4b22      	ldr	r3, [pc, #136]	@ (8000934 <MX_ADC1_Init+0xe4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b0:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <MX_ADC1_Init+0xe4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <MX_ADC1_Init+0xe4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <MX_ADC1_Init+0xe4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <MX_ADC1_Init+0xe4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <MX_ADC1_Init+0xe4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80008d0:	4818      	ldr	r0, [pc, #96]	@ (8000934 <MX_ADC1_Init+0xe4>)
 80008d2:	f001 fa55 	bl	8001d80 <HAL_ADC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0x90>
    Error_Handler();
 80008dc:	f000 fc66 	bl	80011ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4812      	ldr	r0, [pc, #72]	@ (8000934 <MX_ADC1_Init+0xe4>)
 80008ec:	f002 f998 	bl	8002c20 <HAL_ADCEx_MultiModeConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ADC1_Init+0xaa>
    Error_Handler();
 80008f6:	f000 fc59 	bl	80011ac <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_15;
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <MX_ADC1_Init+0xec>)
 80008fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fe:	2306      	movs	r3, #6
 8000900:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000906:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800090a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090c:	2304      	movs	r3, #4
 800090e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_ADC1_Init+0xe4>)
 800091e:	f001 fd29 	bl	8002374 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0xdc>
    Error_Handler();
 8000928:	f000 fc40 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	@ 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	24030dd0 	.word	0x24030dd0
 8000938:	40022000 	.word	0x40022000
 800093c:	3ef08000 	.word	0x3ef08000

08000940 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	@ 0x30
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2224      	movs	r2, #36	@ 0x24
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f008 f870 	bl	8008a34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	463b      	mov	r3, r7
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800095e:	4b23      	ldr	r3, [pc, #140]	@ (80009ec <MX_TIM3_Init+0xac>)
 8000960:	4a23      	ldr	r2, [pc, #140]	@ (80009f0 <MX_TIM3_Init+0xb0>)
 8000962:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000964:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_TIM3_Init+0xac>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <MX_TIM3_Init+0xac>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000970:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <MX_TIM3_Init+0xac>)
 8000972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000976:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000978:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <MX_TIM3_Init+0xac>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <MX_TIM3_Init+0xac>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000984:	2303      	movs	r3, #3
 8000986:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000988:	2300      	movs	r3, #0
 800098a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800098c:	2301      	movs	r3, #1
 800098e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800099c:	2301      	movs	r3, #1
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	480f      	ldr	r0, [pc, #60]	@ (80009ec <MX_TIM3_Init+0xac>)
 80009b0:	f006 f9c6 	bl	8006d40 <HAL_TIM_Encoder_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0x7e>
    Error_Handler();
 80009ba:	f000 fbf7 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80009c6:	463b      	mov	r3, r7
 80009c8:	4619      	mov	r1, r3
 80009ca:	4808      	ldr	r0, [pc, #32]	@ (80009ec <MX_TIM3_Init+0xac>)
 80009cc:	f006 fcfe 	bl	80073cc <HAL_TIMEx_MasterConfigSynchronization>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM3_Init+0x9a>
    Error_Handler();
 80009d6:	f000 fbe9 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80009da:	213c      	movs	r1, #60	@ 0x3c
 80009dc:	4803      	ldr	r0, [pc, #12]	@ (80009ec <MX_TIM3_Init+0xac>)
 80009de:	f006 fa55 	bl	8006e8c <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */
}
 80009e2:	bf00      	nop
 80009e4:	3730      	adds	r7, #48	@ 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	24030e34 	.word	0x24030e34
 80009f0:	40000400 	.word	0x40000400

080009f4 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009f8:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <MX_TIM16_Init+0x48>)
 80009fa:	4a11      	ldr	r2, [pc, #68]	@ (8000a40 <MX_TIM16_Init+0x4c>)
 80009fc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600 - 1;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_TIM16_Init+0x48>)
 8000a00:	f242 527f 	movw	r2, #9599	@ 0x257f
 8000a04:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <MX_TIM16_Init+0x48>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000 - 1;
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <MX_TIM16_Init+0x48>)
 8000a0e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a12:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_TIM16_Init+0x48>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <MX_TIM16_Init+0x48>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_TIM16_Init+0x48>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_TIM16_Init+0x48>)
 8000a28:	f006 f892 	bl	8006b50 <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM16_Init+0x42>
    Error_Handler();
 8000a32:	f000 fbbb 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	24030e80 	.word	0x24030e80
 8000a40:	40014400 	.word	0x40014400

08000a44 <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_TIM17_Init+0x44>)
 8000a4a:	4a10      	ldr	r2, [pc, #64]	@ (8000a8c <MX_TIM17_Init+0x48>)
 8000a4c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_TIM17_Init+0x44>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_TIM17_Init+0x44>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_TIM17_Init+0x44>)
 8000a5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a60:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_TIM17_Init+0x44>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <MX_TIM17_Init+0x44>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_TIM17_Init+0x44>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8000a74:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <MX_TIM17_Init+0x44>)
 8000a76:	f006 f86b 	bl	8006b50 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM17_Init+0x40>
    Error_Handler();
 8000a80:	f000 fb94 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	24030ecc 	.word	0x24030ecc
 8000a8c:	40014800 	.word	0x40014800

08000a90 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a94:	4b22      	ldr	r3, [pc, #136]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000a96:	4a23      	ldr	r2, [pc, #140]	@ (8000b24 <MX_USART3_UART_Init+0x94>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000ad8:	4811      	ldr	r0, [pc, #68]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ada:	f006 fd23 	bl	8007524 <HAL_UART_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART3_UART_Init+0x58>
    Error_Handler();
 8000ae4:	f000 fb62 	bl	80011ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) !=
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480d      	ldr	r0, [pc, #52]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000aec:	f007 feb7 	bl	800885e <HAL_UARTEx_SetTxFifoThreshold>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART3_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 8000af6:	f000 fb59 	bl	80011ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) !=
 8000afa:	2100      	movs	r1, #0
 8000afc:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000afe:	f007 feec 	bl	80088da <HAL_UARTEx_SetRxFifoThreshold>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART3_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 8000b08:	f000 fb50 	bl	80011ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_USART3_UART_Init+0x90>)
 8000b0e:	f007 fe6d 	bl	80087ec <HAL_UARTEx_DisableFifoMode>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART3_UART_Init+0x8c>
    Error_Handler();
 8000b18:	f000 fb48 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	24030f18 	.word	0x24030f18
 8000b24:	40004800 	.word	0x40004800

08000b28 <MX_USB_OTG_HS_USB_Init>:
/**
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_USB_Init(void) {
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	@ 0x38
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b95      	ldr	r3, [pc, #596]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000b50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b54:	4a93      	ldr	r2, [pc, #588]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b5e:	4b91      	ldr	r3, [pc, #580]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000b60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	623b      	str	r3, [r7, #32]
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6c:	4b8d      	ldr	r3, [pc, #564]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000b6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b72:	4a8c      	ldr	r2, [pc, #560]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000b74:	f043 0320 	orr.w	r3, r3, #32
 8000b78:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b7c:	4b89      	ldr	r3, [pc, #548]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000b7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b82:	f003 0320 	and.w	r3, r3, #32
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	4b86      	ldr	r3, [pc, #536]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000b8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b90:	4a84      	ldr	r2, [pc, #528]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b96:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b9a:	4b82      	ldr	r3, [pc, #520]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000b9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba4:	61bb      	str	r3, [r7, #24]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000baa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bae:	4a7d      	ldr	r2, [pc, #500]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bb8:	4b7a      	ldr	r3, [pc, #488]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000bba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b77      	ldr	r3, [pc, #476]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000bc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bcc:	4a75      	ldr	r2, [pc, #468]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bd6:	4b73      	ldr	r3, [pc, #460]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000bd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be4:	4b6f      	ldr	r3, [pc, #444]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000be6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bea:	4a6e      	ldr	r2, [pc, #440]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000bec:	f043 0310 	orr.w	r3, r3, #16
 8000bf0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000bf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	4b68      	ldr	r3, [pc, #416]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000c04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c08:	4a66      	ldr	r2, [pc, #408]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c12:	4b64      	ldr	r3, [pc, #400]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000c14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c20:	4b60      	ldr	r3, [pc, #384]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000c22:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c26:	4a5f      	ldr	r2, [pc, #380]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c2c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c30:	4b5c      	ldr	r3, [pc, #368]	@ (8000da4 <MX_GPIO_Init+0x26c>)
 8000c32:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c44:	4858      	ldr	r0, [pc, #352]	@ (8000da8 <MX_GPIO_Init+0x270>)
 8000c46:	f002 fb47 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUMP_PA5_Pin_GPIO_Port, PUMP_PA5_Pin_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	4857      	ldr	r0, [pc, #348]	@ (8000dac <MX_GPIO_Init+0x274>)
 8000c50:	f002 fb42 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB,
 8000c54:	2200      	movs	r2, #0
 8000c56:	f244 01c1 	movw	r1, #16577	@ 0x40c1
 8000c5a:	4855      	ldr	r0, [pc, #340]	@ (8000db0 <MX_GPIO_Init+0x278>)
 8000c5c:	f002 fb3c 	bl	80032d8 <HAL_GPIO_WritePin>
                    LD1_Pin | LD3_Pin | STEPPER1_PB6_Pin_Pin | GPIO_PIN_7,
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE,
 8000c60:	2200      	movs	r2, #0
 8000c62:	f246 0102 	movw	r1, #24578	@ 0x6002
 8000c66:	4853      	ldr	r0, [pc, #332]	@ (8000db4 <MX_GPIO_Init+0x27c>)
 8000c68:	f002 fb36 	bl	80032d8 <HAL_GPIO_WritePin>
                    STEPPER3_PE13_Pin_Pin | STEPPER4_PE14_Pin_Pin | LD2_Pin,
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG,
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 41a4 	mov.w	r1, #20992	@ 0x5200
 8000c72:	4851      	ldr	r0, [pc, #324]	@ (8000db8 <MX_GPIO_Init+0x280>)
 8000c74:	f002 fb30 	bl	80032d8 <HAL_GPIO_WritePin>
                    HELP_SIGNAL_PG9_Pin_Pin | VIBROMOTOR_PG12_Pin_Pin |
                        STEPPER2_PG14_Pin_Pin,
                    GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	484b      	ldr	r0, [pc, #300]	@ (8000dbc <MX_GPIO_Init+0x284>)
 8000c8e:	f002 f973 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	483f      	ldr	r0, [pc, #252]	@ (8000da8 <MX_GPIO_Init+0x270>)
 8000cac:	f002 f964 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUMP_PA5_Pin_Pin */
  GPIO_InitStruct.Pin = PUMP_PA5_Pin_Pin;
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(PUMP_PA5_Pin_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4839      	ldr	r0, [pc, #228]	@ (8000dac <MX_GPIO_Init+0x274>)
 8000cc8:	f002 f956 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin STEPPER1_PB6_Pin_Pin PB7 */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | STEPPER1_PB6_Pin_Pin | GPIO_PIN_7;
 8000ccc:	f244 03c1 	movw	r3, #16577	@ 0x40c1
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4832      	ldr	r0, [pc, #200]	@ (8000db0 <MX_GPIO_Init+0x278>)
 8000ce6:	f002 f947 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER3_PE13_Pin_Pin STEPPER4_PE14_Pin_Pin LD2_Pin */
  GPIO_InitStruct.Pin = STEPPER3_PE13_Pin_Pin | STEPPER4_PE14_Pin_Pin | LD2_Pin;
 8000cea:	f246 0302 	movw	r3, #24578	@ 0x6002
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	482c      	ldr	r0, [pc, #176]	@ (8000db4 <MX_GPIO_Init+0x27c>)
 8000d04:	f002 f938 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d08:	2380      	movs	r3, #128	@ 0x80
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4826      	ldr	r0, [pc, #152]	@ (8000db8 <MX_GPIO_Init+0x280>)
 8000d1e:	f002 f92b 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000d22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	481d      	ldr	r0, [pc, #116]	@ (8000dac <MX_GPIO_Init+0x274>)
 8000d38:	f002 f91e 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d4e:	230a      	movs	r3, #10
 8000d50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	4814      	ldr	r0, [pc, #80]	@ (8000dac <MX_GPIO_Init+0x274>)
 8000d5a:	f002 f90d 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin | USB_FS_P_Pin;
 8000d5e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	480d      	ldr	r0, [pc, #52]	@ (8000dac <MX_GPIO_Init+0x274>)
 8000d78:	f002 f8fe 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : HELP_SIGNAL_PG9_Pin_Pin VIBROMOTOR_PG12_Pin_Pin
   * STEPPER2_PG14_Pin_Pin */
  GPIO_InitStruct.Pin =
 8000d7c:	f44f 43a4 	mov.w	r3, #20992	@ 0x5200
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
      HELP_SIGNAL_PG9_Pin_Pin | VIBROMOTOR_PG12_Pin_Pin | STEPPER2_PG14_Pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	4808      	ldr	r0, [pc, #32]	@ (8000db8 <MX_GPIO_Init+0x280>)
 8000d96:	f002 f8ef 	bl	8002f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3738      	adds	r7, #56	@ 0x38
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58021400 	.word	0x58021400
 8000dac:	58020000 	.word	0x58020000
 8000db0:	58020400 	.word	0x58020400
 8000db4:	58021000 	.word	0x58021000
 8000db8:	58021800 	.word	0x58021800
 8000dbc:	58020800 	.word	0x58020800

08000dc0 <measure>:
// calling an ISR for STEPPER
// void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
//   STEPPER_TMR_OVF_ISR(htim);
// }

void measure(struct MeasureData *s) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  const int ONESEC = 10000 - 1;
 8000dc8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8000dcc:	613b      	str	r3, [r7, #16]
  // store our counter value
  int tim_val_ms = 0; // tick is 0.1 ms
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]

  bool is_vibrating = false;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	76fb      	strb	r3, [r7, #27]
  // store our 16bit ADC reading
  uint16_t raw;
  // starting timer 16
  HAL_TIM_Base_Start(&htim16);
 8000dd6:	4852      	ldr	r0, [pc, #328]	@ (8000f20 <measure+0x160>)
 8000dd8:	f005 ff12 	bl	8006c00 <HAL_TIM_Base_Start>
  // set help signal (yellow led)
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);

  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e079      	b.n	8000ed6 <measure+0x116>

    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000de2:	7efb      	ldrb	r3, [r7, #27]
 8000de4:	f083 0301 	eor.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d035      	beq.n	8000e5a <measure+0x9a>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e02:	ed9f 5b43 	vldr	d5, [pc, #268]	@ 8000f10 <measure+0x150>
 8000e06:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e12:	db22      	blt.n	8000e5a <measure+0x9a>
        tim_val_ms < ONESEC * 0.3) {
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	ee07 3a90 	vmov	s15, r3
 8000e1a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	ee07 3a90 	vmov	s15, r3
 8000e24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e28:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8000f18 <measure+0x158>
 8000e2c:	ee27 7b05 	vmul.f64	d7, d7, d5
    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000e30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e38:	d50f      	bpl.n	8000e5a <measure+0x9a>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); // vibrator ON
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e40:	4838      	ldr	r0, [pc, #224]	@ (8000f24 <measure+0x164>)
 8000e42:	f002 fa49 	bl	80032d8 <HAL_GPIO_WritePin>
      // saving time of begin vibration
      s->t_vibr_start = i;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f8c2 3d40 	str.w	r3, [r2, #3392]	@ 0xd40
      is_vibrating = true;
 8000e54:	2301      	movs	r3, #1
 8000e56:	76fb      	strb	r3, [r7, #27]
 8000e58:	e01d      	b.n	8000e96 <measure+0xd6>
    } else if (is_vibrating && tim_val_ms >= ONESEC * 0.3) {
 8000e5a:	7efb      	ldrb	r3, [r7, #27]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d01a      	beq.n	8000e96 <measure+0xd6>
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	ee07 3a90 	vmov	s15, r3
 8000e66:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	ee07 3a90 	vmov	s15, r3
 8000e70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e74:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8000f18 <measure+0x158>
 8000e78:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e84:	db07      	blt.n	8000e96 <measure+0xd6>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); // vibrator OFF
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e8c:	4825      	ldr	r0, [pc, #148]	@ (8000f24 <measure+0x164>)
 8000e8e:	f002 fa23 	bl	80032d8 <HAL_GPIO_WritePin>
      is_vibrating = false;
 8000e92:	2300      	movs	r3, #0
 8000e94:	76fb      	strb	r3, [r7, #27]
    }

    // ADC routine
    HAL_ADC_Start(&hadc1);
 8000e96:	4824      	ldr	r0, [pc, #144]	@ (8000f28 <measure+0x168>)
 8000e98:	f001 f8cc 	bl	8002034 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ea0:	4821      	ldr	r0, [pc, #132]	@ (8000f28 <measure+0x168>)
 8000ea2:	f001 f981 	bl	80021a8 <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc1);
 8000ea6:	4820      	ldr	r0, [pc, #128]	@ (8000f28 <measure+0x168>)
 8000ea8:	f001 fa56 	bl	8002358 <HAL_ADC_GetValue>
 8000eac:	4603      	mov	r3, r0
 8000eae:	81fb      	strh	r3, [r7, #14]
    // needed to save the last iterator i
    s->t_end = i;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f8c2 3d44 	str.w	r3, [r2, #3396]	@ 0xd44
    // remember the last element of array will be 0, the counter will be
    // increased but array not filled
    s->signal[i] = raw;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	89f9      	ldrh	r1, [r7, #14]
 8000ec4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    tim_val_ms = __HAL_TIM_GET_COUNTER(&htim16);
 8000ec8:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <measure+0x160>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ece:	61fb      	str	r3, [r7, #28]
  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	db81      	blt.n	8000de2 <measure+0x22>
  }
  // stoping and reseting timer 16
  HAL_TIM_Base_Stop_IT(&htim16);
 8000ede:	4810      	ldr	r0, [pc, #64]	@ (8000f20 <measure+0x160>)
 8000ee0:	f005 fefe 	bl	8006ce0 <HAL_TIM_Base_Stop_IT>
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <measure+0x160>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	625a      	str	r2, [r3, #36]	@ 0x24
  s->pulses = 0;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c2 3d48 	str.w	r3, [r2, #3400]	@ 0xd48
  s->htime = 0;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8000f00:	461a      	mov	r2, r3
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c2 3d4c 	str.w	r3, [r2, #3404]	@ 0xd4c
  // reset help signal (yellow led)
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	9999999a 	.word	0x9999999a
 8000f14:	3fc99999 	.word	0x3fc99999
 8000f18:	33333333 	.word	0x33333333
 8000f1c:	3fd33333 	.word	0x3fd33333
 8000f20:	24030e80 	.word	0x24030e80
 8000f24:	58021800 	.word	0x58021800
 8000f28:	24030dd0 	.word	0x24030dd0

08000f2c <analyse>:

void analyse(struct MeasureData *s) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b08b      	sub	sp, #44	@ 0x2c
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  // digitalize signal v:[0,1]
  const int TRIGGER = 39718;
 8000f34:	f649 3326 	movw	r3, #39718	@ 0x9b26
 8000f38:	617b      	str	r3, [r7, #20]
  const int SCALE = 1000;
 8000f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3e:	613b      	str	r3, [r7, #16]

  for (int i = 0; i < s->t_end; i++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f44:	e015      	b.n	8000f72 <analyse+0x46>
    if (s->signal[i] < TRIGGER) { // aprox. 2V TODO change it to 1V
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4293      	cmp	r3, r2
 8000f54:	dd05      	ble.n	8000f62 <analyse+0x36>
      s->signal[i] = 0;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000f60:	e004      	b.n	8000f6c <analyse+0x40>
    } else {
      s->signal[i] = 1;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f66:	2101      	movs	r1, #1
 8000f68:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i = 0; i < s->t_end; i++) {
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6e:	3301      	adds	r3, #1
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8000f78:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	@ 0xd44
 8000f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	dbe1      	blt.n	8000f46 <analyse+0x1a>
    }
  }
  // count pulses
  for (int i = 0; i < s->t_end; i++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
 8000f86:	e02d      	b.n	8000fe4 <analyse+0xb8>
    int edge = s->signal[i + 1] - s->signal[i];
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f92:	4619      	mov	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a3a      	ldr	r2, [r7, #32]
 8000f98:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f9c:	1acb      	subs	r3, r1, r3
 8000f9e:	60fb      	str	r3, [r7, #12]
    if (edge == 1) { // count only negative pulses
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d10a      	bne.n	8000fbc <analyse+0x90>
      s->pulses++;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8000fac:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	@ 0xd48
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
 8000fb8:	f8c2 3d48 	str.w	r3, [r2, #3400]	@ 0xd48
    }
    if (s->signal[i] == 1) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a3a      	ldr	r2, [r7, #32]
 8000fc0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d10a      	bne.n	8000fde <analyse+0xb2>
      s->htime++;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8000fce:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	@ 0xd4c
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
 8000fda:	f8c2 3d4c 	str.w	r3, [r2, #3404]	@ 0xd4c
  for (int i = 0; i < s->t_end; i++) {
 8000fde:	6a3b      	ldr	r3, [r7, #32]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	623b      	str	r3, [r7, #32]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8000fea:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	@ 0xd44
 8000fee:	6a3a      	ldr	r2, [r7, #32]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dbc9      	blt.n	8000f88 <analyse+0x5c>
    }
  }
  // check if sensor has been open before vibration
  s->bad = false;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2d50 	strb.w	r2, [r3, #3408]	@ 0xd50
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	e00f      	b.n	8001026 <analyse+0xfa>
    if (s->signal[i] == 0) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d106      	bne.n	8001020 <analyse+0xf4>
      s->bad = true;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2d50 	strb.w	r2, [r3, #3408]	@ 0xd50
      break;
 800101e:	e00a      	b.n	8001036 <analyse+0x10a>
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	3301      	adds	r3, #1
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800102c:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	@ 0xd40
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	429a      	cmp	r2, r3
 8001034:	dde7      	ble.n	8001006 <analyse+0xda>
    }
  }
  // check if sensor has been open after vibration + Einschwingungszeit
  for (int i = (int)(s->t_end * 0.75); i < s->t_end; i++) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800103c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	@ 0xd44
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001048:	eeb6 6b08 	vmov.f64	d6, #104	@ 0x3f400000  0.750
 800104c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001050:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001054:	ee17 3a90 	vmov	r3, s15
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	e00f      	b.n	800107c <analyse+0x150>
    if (s->signal[i] == 0) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d106      	bne.n	8001076 <analyse+0x14a>
      s->bad = true;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2d50 	strb.w	r2, [r3, #3408]	@ 0xd50
      break;
 8001074:	e00a      	b.n	800108c <analyse+0x160>
  for (int i = (int)(s->t_end * 0.75); i < s->t_end; i++) {
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	3301      	adds	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8001082:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	@ 0xd44
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbe7      	blt.n	800105c <analyse+0x130>
    }
  }
  // check if sensor is not kurzgeschlossen all time
  if (s->pulses == 0) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8001092:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	@ 0xd48
 8001096:	2b00      	cmp	r3, #0
 8001098:	d105      	bne.n	80010a6 <analyse+0x17a>
    s->bad = true;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 2d50 	strb.w	r2, [r3, #3408]	@ 0xd50
  }
  // resolve the variables to human readable values
  s->htime = s->htime * SCALE / s->t_end;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80010ac:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	@ 0xd4c
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	fb03 f202 	mul.w	r2, r3, r2
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80010bc:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	@ 0xd44
 80010c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
 80010ca:	f8c2 3d4c 	str.w	r3, [r2, #3404]	@ 0xd4c
  s->t_vibr_start = s->t_vibr_start * SCALE / s->t_end;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80010d4:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	@ 0xd40
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	fb03 f202 	mul.w	r2, r3, r2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80010e4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	@ 0xd44
 80010e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
 80010f2:	f8c2 3d40 	str.w	r3, [r2, #3392]	@ 0xd40
}
 80010f6:	bf00      	nop
 80010f8:	372c      	adds	r7, #44	@ 0x2c
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <uart_transmit_info>:
  for (int j = 0; j < Meas.t_end; j++) {
    uart_buf_len = sprintf(uart_buf, "%d, %u \r\n", j, Meas.signal[j]);
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
  }
}
void uart_transmit_info(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Transmit extra measurement data via uart */
  uart_buf_len = sprintf(uart_buf, "Measurements  \n");
 8001108:	4921      	ldr	r1, [pc, #132]	@ (8001190 <uart_transmit_info+0x8c>)
 800110a:	4822      	ldr	r0, [pc, #136]	@ (8001194 <uart_transmit_info+0x90>)
 800110c:	f007 fc72 	bl	80089f4 <siprintf>
 8001110:	4603      	mov	r3, r0
 8001112:	4a21      	ldr	r2, [pc, #132]	@ (8001198 <uart_transmit_info+0x94>)
 8001114:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <uart_transmit_info+0x94>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29a      	uxth	r2, r3
 800111c:	2364      	movs	r3, #100	@ 0x64
 800111e:	491d      	ldr	r1, [pc, #116]	@ (8001194 <uart_transmit_info+0x90>)
 8001120:	481e      	ldr	r0, [pc, #120]	@ (800119c <uart_transmit_info+0x98>)
 8001122:	f006 fa4f 	bl	80075c4 <HAL_UART_Transmit>
  uart_buf_len = sprintf(uart_buf, "htime = %d ms; pulses = %d;   \r\n",
 8001126:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <uart_transmit_info+0x9c>)
 8001128:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800112c:	f8d3 2d4c 	ldr.w	r2, [r3, #3404]	@ 0xd4c
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <uart_transmit_info+0x9c>)
 8001132:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8001136:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	@ 0xd48
 800113a:	491a      	ldr	r1, [pc, #104]	@ (80011a4 <uart_transmit_info+0xa0>)
 800113c:	4815      	ldr	r0, [pc, #84]	@ (8001194 <uart_transmit_info+0x90>)
 800113e:	f007 fc59 	bl	80089f4 <siprintf>
 8001142:	4603      	mov	r3, r0
 8001144:	4a14      	ldr	r2, [pc, #80]	@ (8001198 <uart_transmit_info+0x94>)
 8001146:	6013      	str	r3, [r2, #0]
                         Meas.htime, Meas.pulses);
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <uart_transmit_info+0x94>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	b29a      	uxth	r2, r3
 800114e:	2364      	movs	r3, #100	@ 0x64
 8001150:	4910      	ldr	r1, [pc, #64]	@ (8001194 <uart_transmit_info+0x90>)
 8001152:	4812      	ldr	r0, [pc, #72]	@ (800119c <uart_transmit_info+0x98>)
 8001154:	f006 fa36 	bl	80075c4 <HAL_UART_Transmit>
  uart_buf_len = sprintf(uart_buf, "bad state = %d; vibr = %d ms \r\n",
                         Meas.bad, Meas.t_vibr_start);
 8001158:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <uart_transmit_info+0x9c>)
 800115a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800115e:	f893 3d50 	ldrb.w	r3, [r3, #3408]	@ 0xd50
  uart_buf_len = sprintf(uart_buf, "bad state = %d; vibr = %d ms \r\n",
 8001162:	461a      	mov	r2, r3
 8001164:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <uart_transmit_info+0x9c>)
 8001166:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800116a:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	@ 0xd40
 800116e:	490e      	ldr	r1, [pc, #56]	@ (80011a8 <uart_transmit_info+0xa4>)
 8001170:	4808      	ldr	r0, [pc, #32]	@ (8001194 <uart_transmit_info+0x90>)
 8001172:	f007 fc3f 	bl	80089f4 <siprintf>
 8001176:	4603      	mov	r3, r0
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <uart_transmit_info+0x94>)
 800117a:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <uart_transmit_info+0x94>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	b29a      	uxth	r2, r3
 8001182:	2364      	movs	r3, #100	@ 0x64
 8001184:	4903      	ldr	r1, [pc, #12]	@ (8001194 <uart_transmit_info+0x90>)
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <uart_transmit_info+0x98>)
 8001188:	f006 fa1c 	bl	80075c4 <HAL_UART_Transmit>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	08009364 	.word	0x08009364
 8001194:	24030fc8 	.word	0x24030fc8
 8001198:	24030ffc 	.word	0x24030ffc
 800119c:	24030f18 	.word	0x24030f18
 80011a0:	2400007c 	.word	0x2400007c
 80011a4:	08009374 	.word	0x08009374
 80011a8:	08009398 	.word	0x08009398

080011ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <Error_Handler+0x8>

080011b8 <update_encoder>:
#include "../Inc/motor_encoder.h"

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef*htim) {
 80011b8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	60fb      	str	r3, [r7, #12]
  static uint8_t first_time = 0;
  if (!first_time) {
 80011cc:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <update_encoder+0x104>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <update_encoder+0x2a>
    encoder_value->velocity = 0;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	801a      	strh	r2, [r3, #0]
    first_time = 1;
 80011da:	4b38      	ldr	r3, [pc, #224]	@ (80012bc <update_encoder+0x104>)
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
 80011e0:	e052      	b.n	8001288 <update_encoder+0xd0>

  } else {
    if (temp_counter == encoder_value->last_counter_value) {
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d103      	bne.n	80011f4 <update_encoder+0x3c>
      encoder_value->velocity = 0;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	801a      	strh	r2, [r3, #0]
 80011f2:	e049      	b.n	8001288 <update_encoder+0xd0>

    } else if (temp_counter > encoder_value->last_counter_value) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d922      	bls.n	8001244 <update_encoder+0x8c>
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2b10      	cmp	r3, #16
 800120a:	d110      	bne.n	800122e <update_encoder+0x76>
        encoder_value->velocity =
            -encoder_value->last_counter_value -
            (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	b29a      	uxth	r2, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001216:	b29b      	uxth	r3, r3
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	b29a      	uxth	r2, r3
            -encoder_value->last_counter_value -
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	b29b      	uxth	r3, r3
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b29b      	uxth	r3, r3
 8001226:	b21a      	sxth	r2, r3
        encoder_value->velocity =
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	801a      	strh	r2, [r3, #0]
 800122c:	e02c      	b.n	8001288 <update_encoder+0xd0>

      } else {
        encoder_value->velocity =
            temp_counter - encoder_value->last_counter_value;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	b29a      	uxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	b29b      	uxth	r3, r3
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	b29b      	uxth	r3, r3
 800123c:	b21a      	sxth	r2, r3
        encoder_value->velocity =
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	801a      	strh	r2, [r3, #0]
 8001242:	e021      	b.n	8001288 <update_encoder+0xd0>
      }

    } else {
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b10      	cmp	r3, #16
 8001250:	d10a      	bne.n	8001268 <update_encoder+0xb0>
        encoder_value->velocity =
            temp_counter - encoder_value->last_counter_value;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	b29b      	uxth	r3, r3
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	b29b      	uxth	r3, r3
 8001260:	b21a      	sxth	r2, r3
        encoder_value->velocity =
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	801a      	strh	r2, [r3, #0]
 8001266:	e00f      	b.n	8001288 <update_encoder+0xd0>
      } else {
        encoder_value->velocity =
            temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) -
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800126e:	b29a      	uxth	r2, r3
                            encoder_value->last_counter_value);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
            temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) -
 8001274:	b29b      	uxth	r3, r3
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	b29a      	uxth	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	b29b      	uxth	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	b29b      	uxth	r3, r3
 8001282:	b21a      	sxth	r2, r3
        encoder_value->velocity =
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	801a      	strh	r2, [r3, #0]
      }
    }
  }
  encoder_value->position += encoder_value->velocity;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001294:	b209      	sxth	r1, r1
 8001296:	17c8      	asrs	r0, r1, #31
 8001298:	460c      	mov	r4, r1
 800129a:	4605      	mov	r5, r0
 800129c:	eb12 0804 	adds.w	r8, r2, r4
 80012a0:	eb43 0905 	adc.w	r9, r3, r5
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9c3 8902 	strd	r8, r9, [r3, #8]
  encoder_value->last_counter_value = temp_counter;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	611a      	str	r2, [r3, #16]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80012ba:	4770      	bx	lr
 80012bc:	24031006 	.word	0x24031006

080012c0 <rotate>:
#include "../Inc/rotate.h"

void rotate(int degree, int enc_position){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  if (enc_position > degree ) {
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	dd09      	ble.n	80012e6 <rotate+0x26>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	2180      	movs	r1, #128	@ 0x80
 80012d6:	4814      	ldr	r0, [pc, #80]	@ (8001328 <rotate+0x68>)
 80012d8:	f001 fffe 	bl	80032d8 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2140      	movs	r1, #64	@ 0x40
 80012e0:	4811      	ldr	r0, [pc, #68]	@ (8001328 <rotate+0x68>)
 80012e2:	f001 fff9 	bl	80032d8 <HAL_GPIO_WritePin>
  }
  if (enc_position < degree ) {
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	da09      	bge.n	8001302 <rotate+0x42>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	480d      	ldr	r0, [pc, #52]	@ (8001328 <rotate+0x68>)
 80012f4:	f001 fff0 	bl	80032d8 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	2140      	movs	r1, #64	@ 0x40
 80012fc:	480a      	ldr	r0, [pc, #40]	@ (8001328 <rotate+0x68>)
 80012fe:	f001 ffeb 	bl	80032d8 <HAL_GPIO_WritePin>
  }
  if (enc_position == degree ) {
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	429a      	cmp	r2, r3
 8001308:	d109      	bne.n	800131e <rotate+0x5e>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2180      	movs	r1, #128	@ 0x80
 800130e:	4806      	ldr	r0, [pc, #24]	@ (8001328 <rotate+0x68>)
 8001310:	f001 ffe2 	bl	80032d8 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2140      	movs	r1, #64	@ 0x40
 8001318:	4803      	ldr	r0, [pc, #12]	@ (8001328 <rotate+0x68>)
 800131a:	f001 ffdd 	bl	80032d8 <HAL_GPIO_WritePin>
  }
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	58020400 	.word	0x58020400

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <HAL_MspInit+0x30>)
 8001334:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001338:	4a08      	ldr	r2, [pc, #32]	@ (800135c <HAL_MspInit+0x30>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <HAL_MspInit+0x30>)
 8001344:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	58024400 	.word	0x58024400

08001360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0ba      	sub	sp, #232	@ 0xe8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	22c0      	movs	r2, #192	@ 0xc0
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f007 fb57 	bl	8008a34 <memset>
  if(hadc->Instance==ADC1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a2b      	ldr	r2, [pc, #172]	@ (8001438 <HAL_ADC_MspInit+0xd8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d14f      	bne.n	8001430 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001390:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800139c:	2301      	movs	r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80013a0:	2310      	movs	r3, #16
 80013a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80013a4:	2304      	movs	r3, #4
 80013a6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013b0:	23c0      	movs	r3, #192	@ 0xc0
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 ffb8 	bl	800433c <HAL_RCCEx_PeriphCLKConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80013d2:	f7ff feeb 	bl	80011ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_ADC_MspInit+0xdc>)
 80013d8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80013dc:	4a17      	ldr	r2, [pc, #92]	@ (800143c <HAL_ADC_MspInit+0xdc>)
 80013de:	f043 0320 	orr.w	r3, r3, #32
 80013e2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <HAL_ADC_MspInit+0xdc>)
 80013e8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80013ec:	f003 0320 	and.w	r3, r3, #32
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_ADC_MspInit+0xdc>)
 80013f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013fa:	4a10      	ldr	r2, [pc, #64]	@ (800143c <HAL_ADC_MspInit+0xdc>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001404:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <HAL_ADC_MspInit+0xdc>)
 8001406:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|ANALOG_READ_PA3_Pin_Pin;
 8001412:	2309      	movs	r3, #9
 8001414:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001418:	2303      	movs	r3, #3
 800141a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001428:	4619      	mov	r1, r3
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <HAL_ADC_MspInit+0xe0>)
 800142c:	f001 fda4 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	37e8      	adds	r7, #232	@ 0xe8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40022000 	.word	0x40022000
 800143c:	58024400 	.word	0x58024400
 8001440:	58020000 	.word	0x58020000

08001444 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a1a      	ldr	r2, [pc, #104]	@ (80014cc <HAL_TIM_Encoder_MspInit+0x88>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12d      	bne.n	80014c2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001466:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001468:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800146c:	4a18      	ldr	r2, [pc, #96]	@ (80014d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001476:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001478:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001486:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800148a:	4a11      	ldr	r2, [pc, #68]	@ (80014d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001494:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001496:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = encoder1PA6_Pin|encoder2PA7_Pin;
 80014a2:	23c0      	movs	r3, #192	@ 0xc0
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014b2:	2302      	movs	r3, #2
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <HAL_TIM_Encoder_MspInit+0x90>)
 80014be:	f001 fd5b 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	@ 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40000400 	.word	0x40000400
 80014d0:	58024400 	.word	0x58024400
 80014d4:	58020000 	.word	0x58020000

080014d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a19      	ldr	r2, [pc, #100]	@ (800154c <HAL_TIM_Base_MspInit+0x74>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d10f      	bne.n	800150a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014ea:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <HAL_TIM_Base_MspInit+0x78>)
 80014ec:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80014f0:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <HAL_TIM_Base_MspInit+0x78>)
 80014f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_TIM_Base_MspInit+0x78>)
 80014fc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001508:	e01b      	b.n	8001542 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a11      	ldr	r2, [pc, #68]	@ (8001554 <HAL_TIM_Base_MspInit+0x7c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d116      	bne.n	8001542 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001514:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <HAL_TIM_Base_MspInit+0x78>)
 8001516:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800151a:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <HAL_TIM_Base_MspInit+0x78>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001520:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001524:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <HAL_TIM_Base_MspInit+0x78>)
 8001526:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800152a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2076      	movs	r0, #118	@ 0x76
 8001538:	f001 fce9 	bl	8002f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800153c:	2076      	movs	r0, #118	@ 0x76
 800153e:	f001 fd00 	bl	8002f42 <HAL_NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40014400 	.word	0x40014400
 8001550:	58024400 	.word	0x58024400
 8001554:	40014800 	.word	0x40014800

08001558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0ba      	sub	sp, #232	@ 0xe8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	22c0      	movs	r2, #192	@ 0xc0
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f007 fa5b 	bl	8008a34 <memset>
  if(huart->Instance==USART3)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a27      	ldr	r2, [pc, #156]	@ (8001620 <HAL_UART_MspInit+0xc8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d146      	bne.n	8001616 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001588:	f04f 0202 	mov.w	r2, #2
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fecc 	bl	800433c <HAL_RCCEx_PeriphCLKConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80015aa:	f7ff fdff 	bl	80011ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <HAL_UART_MspInit+0xcc>)
 80015b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001624 <HAL_UART_MspInit+0xcc>)
 80015b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ba:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80015be:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_UART_MspInit+0xcc>)
 80015c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015cc:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <HAL_UART_MspInit+0xcc>)
 80015ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015d2:	4a14      	ldr	r2, [pc, #80]	@ (8001624 <HAL_UART_MspInit+0xcc>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <HAL_UART_MspInit+0xcc>)
 80015de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001604:	2307      	movs	r3, #7
 8001606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	@ (8001628 <HAL_UART_MspInit+0xd0>)
 8001612:	f001 fcb1 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	37e8      	adds	r7, #232	@ 0xe8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40004800 	.word	0x40004800
 8001624:	58024400 	.word	0x58024400
 8001628:	58020c00 	.word	0x58020c00

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001682:	f000 f957 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <TIM17_IRQHandler+0x10>)
 8001692:	f005 fc89 	bl	8006fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	24030ecc 	.word	0x24030ecc

080016a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a8:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <_sbrk+0x5c>)
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <_sbrk+0x60>)
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <_sbrk+0x64>)
 80016be:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <_sbrk+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d207      	bcs.n	80016e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d0:	f007 f9b8 	bl	8008a44 <__errno>
 80016d4:	4603      	mov	r3, r0
 80016d6:	220c      	movs	r2, #12
 80016d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016de:	e009      	b.n	80016f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e6:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <_sbrk+0x64>)
 80016f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	24100000 	.word	0x24100000
 8001700:	00000400 	.word	0x00000400
 8001704:	24031008 	.word	0x24031008
 8001708:	24031158 	.word	0x24031158

0800170c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001710:	4b32      	ldr	r3, [pc, #200]	@ (80017dc <SystemInit+0xd0>)
 8001712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001716:	4a31      	ldr	r2, [pc, #196]	@ (80017dc <SystemInit+0xd0>)
 8001718:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800171c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001720:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <SystemInit+0xd4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 030f 	and.w	r3, r3, #15
 8001728:	2b02      	cmp	r3, #2
 800172a:	d807      	bhi.n	800173c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800172c:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <SystemInit+0xd4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 030f 	bic.w	r3, r3, #15
 8001734:	4a2a      	ldr	r2, [pc, #168]	@ (80017e0 <SystemInit+0xd4>)
 8001736:	f043 0303 	orr.w	r3, r3, #3
 800173a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800173c:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <SystemInit+0xd8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a28      	ldr	r2, [pc, #160]	@ (80017e4 <SystemInit+0xd8>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001748:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <SystemInit+0xd8>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800174e:	4b25      	ldr	r3, [pc, #148]	@ (80017e4 <SystemInit+0xd8>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4924      	ldr	r1, [pc, #144]	@ (80017e4 <SystemInit+0xd8>)
 8001754:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <SystemInit+0xdc>)
 8001756:	4013      	ands	r3, r2
 8001758:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <SystemInit+0xd4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001766:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <SystemInit+0xd4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 030f 	bic.w	r3, r3, #15
 800176e:	4a1c      	ldr	r2, [pc, #112]	@ (80017e0 <SystemInit+0xd4>)
 8001770:	f043 0303 	orr.w	r3, r3, #3
 8001774:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001776:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <SystemInit+0xd8>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <SystemInit+0xd8>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001782:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <SystemInit+0xd8>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <SystemInit+0xd8>)
 800178a:	4a18      	ldr	r2, [pc, #96]	@ (80017ec <SystemInit+0xe0>)
 800178c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <SystemInit+0xd8>)
 8001790:	4a17      	ldr	r2, [pc, #92]	@ (80017f0 <SystemInit+0xe4>)
 8001792:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001794:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <SystemInit+0xd8>)
 8001796:	4a17      	ldr	r2, [pc, #92]	@ (80017f4 <SystemInit+0xe8>)
 8001798:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <SystemInit+0xd8>)
 800179c:	2200      	movs	r2, #0
 800179e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017a0:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <SystemInit+0xd8>)
 80017a2:	4a14      	ldr	r2, [pc, #80]	@ (80017f4 <SystemInit+0xe8>)
 80017a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <SystemInit+0xd8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017ac:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <SystemInit+0xd8>)
 80017ae:	4a11      	ldr	r2, [pc, #68]	@ (80017f4 <SystemInit+0xe8>)
 80017b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <SystemInit+0xd8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <SystemInit+0xd8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a09      	ldr	r2, [pc, #36]	@ (80017e4 <SystemInit+0xd8>)
 80017be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <SystemInit+0xd8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <SystemInit+0xec>)
 80017cc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00
 80017e0:	52002000 	.word	0x52002000
 80017e4:	58024400 	.word	0x58024400
 80017e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80017ec:	02020200 	.word	0x02020200
 80017f0:	01ff0000 	.word	0x01ff0000
 80017f4:	01010280 	.word	0x01010280
 80017f8:	52004000 	.word	0x52004000

080017fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001834 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001800:	f7ff ff84 	bl	800170c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001806:	490d      	ldr	r1, [pc, #52]	@ (800183c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001808:	4a0d      	ldr	r2, [pc, #52]	@ (8001840 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800181c:	4c0a      	ldr	r4, [pc, #40]	@ (8001848 <LoopFillZerobss+0x22>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800182a:	f007 f911 	bl	8008a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182e:	f7fe ff27 	bl	8000680 <main>
  bx  lr
 8001832:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001834:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001838:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800183c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001840:	08009434 	.word	0x08009434
  ldr r2, =_sbss
 8001844:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001848:	24031158 	.word	0x24031158

0800184c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC_IRQHandler>
	...

08001850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001856:	2003      	movs	r0, #3
 8001858:	f001 fb4e 	bl	8002ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800185c:	f002 fb98 	bl	8003f90 <HAL_RCC_GetSysClockFreq>
 8001860:	4602      	mov	r2, r0
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <HAL_Init+0x68>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	4913      	ldr	r1, [pc, #76]	@ (80018bc <HAL_Init+0x6c>)
 800186e:	5ccb      	ldrb	r3, [r1, r3]
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	fa22 f303 	lsr.w	r3, r2, r3
 8001878:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <HAL_Init+0x68>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	4a0e      	ldr	r2, [pc, #56]	@ (80018bc <HAL_Init+0x6c>)
 8001884:	5cd3      	ldrb	r3, [r2, r3]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	4a0b      	ldr	r2, [pc, #44]	@ (80018c0 <HAL_Init+0x70>)
 8001892:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001894:	4a0b      	ldr	r2, [pc, #44]	@ (80018c4 <HAL_Init+0x74>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f814 	bl	80018c8 <HAL_InitTick>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e002      	b.n	80018b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018aa:	f7ff fd3f 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	58024400 	.word	0x58024400
 80018bc:	080093b8 	.word	0x080093b8
 80018c0:	24000004 	.word	0x24000004
 80018c4:	24000000 	.word	0x24000000

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018d0:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_InitTick+0x60>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e021      	b.n	8001920 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <HAL_InitTick+0x64>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <HAL_InitTick+0x60>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fb33 	bl	8002f5e <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001910:	f001 fafd 	bl	8002f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	@ (8001930 <HAL_InitTick+0x68>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2400000c 	.word	0x2400000c
 800192c:	24000000 	.word	0x24000000
 8001930:	24000008 	.word	0x24000008

08001934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <HAL_IncTick+0x20>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_IncTick+0x24>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <HAL_IncTick+0x24>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	2400000c 	.word	0x2400000c
 8001958:	2403100c 	.word	0x2403100c

0800195c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b03      	ldr	r3, [pc, #12]	@ (8001970 <HAL_GetTick+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	2403100c 	.word	0x2403100c

08001974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff ffee 	bl	800195c <HAL_GetTick>
 8001980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800198c:	d005      	beq.n	800199a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198e:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <HAL_Delay+0x44>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800199a:	bf00      	nop
 800199c:	f7ff ffde 	bl	800195c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d8f7      	bhi.n	800199c <HAL_Delay+0x28>
  {
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2400000c 	.word	0x2400000c

080019bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	609a      	str	r2, [r3, #8]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3360      	adds	r3, #96	@ 0x60
 8001a36:	461a      	mov	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	431a      	orrs	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a58:	bf00      	nop
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	431a      	orrs	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	611a      	str	r2, [r3, #16]
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b087      	sub	sp, #28
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3360      	adds	r3, #96	@ 0x60
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	601a      	str	r2, [r3, #0]
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b087      	sub	sp, #28
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3330      	adds	r3, #48	@ 0x30
 8001b02:	461a      	mov	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	4413      	add	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	211f      	movs	r1, #31
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	401a      	ands	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	f003 011f 	and.w	r1, r3, #31
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b3e:	bf00      	nop
 8001b40:	371c      	adds	r7, #28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b087      	sub	sp, #28
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3314      	adds	r3, #20
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	0e5b      	lsrs	r3, r3, #25
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	0d1b      	lsrs	r3, r3, #20
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	2107      	movs	r1, #7
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	401a      	ands	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	0d1b      	lsrs	r3, r3, #20
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b94:	bf00      	nop
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	401a      	ands	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0318 	and.w	r3, r3, #24
 8001bc2:	4908      	ldr	r1, [pc, #32]	@ (8001be4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bc4:	40d9      	lsrs	r1, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	400b      	ands	r3, r1
 8001bca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	000fffff 	.word	0x000fffff

08001be8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6093      	str	r3, [r2, #8]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	5fffffc0 	.word	0x5fffffc0

08001c44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c58:	d101      	bne.n	8001c5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	6fffffc0 	.word	0x6fffffc0

08001c94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ca8:	d101      	bne.n	8001cae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <LL_ADC_Enable+0x24>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	f043 0201 	orr.w	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	7fffffc0 	.word	0x7fffffc0

08001ce4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <LL_ADC_IsEnabled+0x18>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <LL_ADC_IsEnabled+0x1a>
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <LL_ADC_REG_StartConversion+0x24>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	f043 0204 	orr.w	r2, r3, #4
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	7fffffc0 	.word	0x7fffffc0

08001d34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d101      	bne.n	8001d4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d101      	bne.n	8001d72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b089      	sub	sp, #36	@ 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e138      	b.n	800200c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d109      	bne.n	8001dbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff fad9 	bl	8001360 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff3f 	bl	8001c44 <LL_ADC_IsDeepPowerDownEnabled>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff25 	bl	8001c20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff5a 	bl	8001c94 <LL_ADC_IsInternalRegulatorEnabled>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d114      	bne.n	8001e10 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff3e 	bl	8001c6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001df0:	4b88      	ldr	r3, [pc, #544]	@ (8002014 <HAL_ADC_Init+0x294>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	099b      	lsrs	r3, r3, #6
 8001df6:	4a88      	ldr	r2, [pc, #544]	@ (8002018 <HAL_ADC_Init+0x298>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	099b      	lsrs	r3, r3, #6
 8001dfe:	3301      	adds	r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e02:	e002      	b.n	8001e0a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f9      	bne.n	8001e04 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff3d 	bl	8001c94 <LL_ADC_IsInternalRegulatorEnabled>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10d      	bne.n	8001e3c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e24:	f043 0210 	orr.w	r2, r3, #16
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff77 	bl	8001d34 <LL_ADC_REG_IsConversionOngoing>
 8001e46:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f040 80d2 	bne.w	8001ffa <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f040 80ce 	bne.w	8001ffa <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e62:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e66:	f043 0202 	orr.w	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff36 	bl	8001ce4 <LL_ADC_IsEnabled>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d110      	bne.n	8001ea0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e7e:	4867      	ldr	r0, [pc, #412]	@ (800201c <HAL_ADC_Init+0x29c>)
 8001e80:	f7ff ff30 	bl	8001ce4 <LL_ADC_IsEnabled>
 8001e84:	4604      	mov	r4, r0
 8001e86:	4866      	ldr	r0, [pc, #408]	@ (8002020 <HAL_ADC_Init+0x2a0>)
 8001e88:	f7ff ff2c 	bl	8001ce4 <LL_ADC_IsEnabled>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4323      	orrs	r3, r4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4862      	ldr	r0, [pc, #392]	@ (8002024 <HAL_ADC_Init+0x2a4>)
 8001e9c:	f7ff fd8e 	bl	80019bc <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7d5b      	ldrb	r3, [r3, #21]
 8001ea4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eaa:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001eb0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7f1b      	ldrb	r3, [r3, #28]
 8001eb6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7f1b      	ldrb	r3, [r3, #28]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d106      	bne.n	8001ed2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	045b      	lsls	r3, r3, #17
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	4b4c      	ldr	r3, [pc, #304]	@ (8002028 <HAL_ADC_Init+0x2a8>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	69b9      	ldr	r1, [r7, #24]
 8001efe:	430b      	orrs	r3, r1
 8001f00:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff14 	bl	8001d34 <LL_ADC_REG_IsConversionOngoing>
 8001f0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff21 	bl	8001d5a <LL_ADC_INJ_IsConversionOngoing>
 8001f18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d14a      	bne.n	8001fb6 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d147      	bne.n	8001fb6 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7d1b      	ldrb	r3, [r3, #20]
 8001f2a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800202c <HAL_ADC_Init+0x2ac>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	69b9      	ldr	r1, [r7, #24]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d11b      	bne.n	8001f8a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	4b34      	ldr	r3, [pc, #208]	@ (8002030 <HAL_ADC_Init+0x2b0>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f66:	3a01      	subs	r2, #1
 8001f68:	0411      	lsls	r1, r2, #16
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f6e:	4311      	orrs	r1, r2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f74:	4311      	orrs	r1, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	611a      	str	r2, [r3, #16]
 8001f88:	e007      	b.n	8001f9a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fd41 	bl	8002a38 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	f023 010f 	bic.w	r1, r3, #15
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	1e5a      	subs	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fd6:	e007      	b.n	8001fe8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 020f 	bic.w	r2, r2, #15
 8001fe6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fec:	f023 0303 	bic.w	r3, r3, #3
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ff8:	e007      	b.n	800200a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffe:	f043 0210 	orr.w	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800200a:	7ffb      	ldrb	r3, [r7, #31]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3724      	adds	r7, #36	@ 0x24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd90      	pop	{r4, r7, pc}
 8002014:	24000000 	.word	0x24000000
 8002018:	053e2d63 	.word	0x053e2d63
 800201c:	40022000 	.word	0x40022000
 8002020:	40022100 	.word	0x40022100
 8002024:	40022300 	.word	0x40022300
 8002028:	fff0c003 	.word	0xfff0c003
 800202c:	ffffbffc 	.word	0xffffbffc
 8002030:	fc00f81e 	.word	0xfc00f81e

08002034 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800203c:	4856      	ldr	r0, [pc, #344]	@ (8002198 <HAL_ADC_Start+0x164>)
 800203e:	f7ff fdd3 	bl	8001be8 <LL_ADC_GetMultimode>
 8002042:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fe73 	bl	8001d34 <LL_ADC_REG_IsConversionOngoing>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 809a 	bne.w	800218a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_ADC_Start+0x30>
 8002060:	2302      	movs	r3, #2
 8002062:	e095      	b.n	8002190 <HAL_ADC_Start+0x15c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fc67 	bl	8002940 <ADC_Enable>
 8002072:	4603      	mov	r3, r0
 8002074:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002076:	7dfb      	ldrb	r3, [r7, #23]
 8002078:	2b00      	cmp	r3, #0
 800207a:	f040 8081 	bne.w	8002180 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002082:	4b46      	ldr	r3, [pc, #280]	@ (800219c <HAL_ADC_Start+0x168>)
 8002084:	4013      	ands	r3, r2
 8002086:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a43      	ldr	r2, [pc, #268]	@ (80021a0 <HAL_ADC_Start+0x16c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d002      	beq.n	800209e <HAL_ADC_Start+0x6a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	e000      	b.n	80020a0 <HAL_ADC_Start+0x6c>
 800209e:	4b41      	ldr	r3, [pc, #260]	@ (80021a4 <HAL_ADC_Start+0x170>)
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d002      	beq.n	80020ae <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020c6:	d106      	bne.n	80020d6 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	f023 0206 	bic.w	r2, r3, #6
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80020d4:	e002      	b.n	80020dc <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	221c      	movs	r2, #28
 80020e2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2b      	ldr	r2, [pc, #172]	@ (80021a0 <HAL_ADC_Start+0x16c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d002      	beq.n	80020fc <HAL_ADC_Start+0xc8>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	e000      	b.n	80020fe <HAL_ADC_Start+0xca>
 80020fc:	4b29      	ldr	r3, [pc, #164]	@ (80021a4 <HAL_ADC_Start+0x170>)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	4293      	cmp	r3, r2
 8002104:	d008      	beq.n	8002118 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	2b05      	cmp	r3, #5
 8002110:	d002      	beq.n	8002118 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b09      	cmp	r3, #9
 8002116:	d114      	bne.n	8002142 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800212a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800212e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fde6 	bl	8001d0c <LL_ADC_REG_StartConversion>
 8002140:	e025      	b.n	800218e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002146:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a13      	ldr	r2, [pc, #76]	@ (80021a0 <HAL_ADC_Start+0x16c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d002      	beq.n	800215e <HAL_ADC_Start+0x12a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	e000      	b.n	8002160 <HAL_ADC_Start+0x12c>
 800215e:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <HAL_ADC_Start+0x170>)
 8002160:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00f      	beq.n	800218e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002172:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002176:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	@ 0x54
 800217e:	e006      	b.n	800218e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002188:	e001      	b.n	800218e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800218a:	2302      	movs	r3, #2
 800218c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800218e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40022300 	.word	0x40022300
 800219c:	fffff0fe 	.word	0xfffff0fe
 80021a0:	40022100 	.word	0x40022100
 80021a4:	40022000 	.word	0x40022000

080021a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021b2:	4866      	ldr	r0, [pc, #408]	@ (800234c <HAL_ADC_PollForConversion+0x1a4>)
 80021b4:	f7ff fd18 	bl	8001be8 <LL_ADC_GetMultimode>
 80021b8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d102      	bne.n	80021c8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80021c2:	2308      	movs	r3, #8
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e02a      	b.n	800221e <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d002      	beq.n	80021da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2b09      	cmp	r3, #9
 80021d8:	d111      	bne.n	80021fe <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0a4      	b.n	8002342 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80021f8:	2304      	movs	r3, #4
 80021fa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80021fc:	e00f      	b.n	800221e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80021fe:	4853      	ldr	r0, [pc, #332]	@ (800234c <HAL_ADC_PollForConversion+0x1a4>)
 8002200:	f7ff fd00 	bl	8001c04 <LL_ADC_GetMultiDMATransfer>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220e:	f043 0220 	orr.w	r2, r3, #32
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e093      	b.n	8002342 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800221a:	2304      	movs	r3, #4
 800221c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800221e:	f7ff fb9d 	bl	800195c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002224:	e021      	b.n	800226a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800222c:	d01d      	beq.n	800226a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800222e:	f7ff fb95 	bl	800195c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d302      	bcc.n	8002244 <HAL_ADC_PollForConversion+0x9c>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d112      	bne.n	800226a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10b      	bne.n	800226a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002256:	f043 0204 	orr.w	r2, r3, #4
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e06b      	b.n	8002342 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0d6      	beq.n	8002226 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fc1f 	bl	8001acc <LL_ADC_REG_IsTriggerSourceSWStart>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01c      	beq.n	80022ce <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7d5b      	ldrb	r3, [r3, #21]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d118      	bne.n	80022ce <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d111      	bne.n	80022ce <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002350 <HAL_ADC_PollForConversion+0x1a8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d002      	beq.n	80022de <HAL_ADC_PollForConversion+0x136>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	e000      	b.n	80022e0 <HAL_ADC_PollForConversion+0x138>
 80022de:	4b1d      	ldr	r3, [pc, #116]	@ (8002354 <HAL_ADC_PollForConversion+0x1ac>)
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d008      	beq.n	80022fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d002      	beq.n	80022fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d104      	bne.n	8002304 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	e00c      	b.n	800231e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a11      	ldr	r2, [pc, #68]	@ (8002350 <HAL_ADC_PollForConversion+0x1a8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d002      	beq.n	8002314 <HAL_ADC_PollForConversion+0x16c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	e000      	b.n	8002316 <HAL_ADC_PollForConversion+0x16e>
 8002314:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <HAL_ADC_PollForConversion+0x1ac>)
 8002316:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d104      	bne.n	800232e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2208      	movs	r2, #8
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	e008      	b.n	8002340 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d103      	bne.n	8002340 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	220c      	movs	r2, #12
 800233e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40022300 	.word	0x40022300
 8002350:	40022100 	.word	0x40022100
 8002354:	40022000 	.word	0x40022000

08002358 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b0a1      	sub	sp, #132	@ 0x84
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a9a      	ldr	r2, [pc, #616]	@ (80025f8 <HAL_ADC_ConfigChannel+0x284>)
 800238e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_ADC_ConfigChannel+0x2a>
 800239a:	2302      	movs	r3, #2
 800239c:	e2bc      	b.n	8002918 <HAL_ADC_ConfigChannel+0x5a4>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fcc2 	bl	8001d34 <LL_ADC_REG_IsConversionOngoing>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 82a1 	bne.w	80028fa <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d108      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x62>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0e9b      	lsrs	r3, r3, #26
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	2201      	movs	r2, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	e016      	b.n	8002404 <HAL_ADC_ConfigChannel+0x90>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023e6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80023ee:	2320      	movs	r3, #32
 80023f0:	e003      	b.n	80023fa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80023f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	2201      	movs	r2, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	69d1      	ldr	r1, [r2, #28]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	430b      	orrs	r3, r1
 8002410:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	f7ff fb67 	bl	8001af2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fc83 	bl	8001d34 <LL_ADC_REG_IsConversionOngoing>
 800242e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fc90 	bl	8001d5a <LL_ADC_INJ_IsConversionOngoing>
 800243a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800243c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 80a0 	bne.w	8002584 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002444:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 809c 	bne.w	8002584 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6819      	ldr	r1, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	461a      	mov	r2, r3
 800245a:	f7ff fb76 	bl	8001b4a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10b      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x110>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	e00a      	b.n	800249a <HAL_ADC_ConfigChannel+0x126>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d027      	beq.n	80024f4 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6919      	ldr	r1, [r3, #16]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024b2:	f7ff fab7 	bl	8001a24 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6919      	ldr	r1, [r3, #16]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	7e5b      	ldrb	r3, [r3, #25]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x158>
 80024c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80024ca:	e000      	b.n	80024ce <HAL_ADC_ConfigChannel+0x15a>
 80024cc:	2300      	movs	r3, #0
 80024ce:	461a      	mov	r2, r3
 80024d0:	f7ff fae1 	bl	8001a96 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6919      	ldr	r1, [r3, #16]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	7e1b      	ldrb	r3, [r3, #24]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d102      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x176>
 80024e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024e8:	e000      	b.n	80024ec <HAL_ADC_ConfigChannel+0x178>
 80024ea:	2300      	movs	r3, #0
 80024ec:	461a      	mov	r2, r3
 80024ee:	f7ff fab9 	bl	8001a64 <LL_ADC_SetDataRightShift>
 80024f2:	e047      	b.n	8002584 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	069b      	lsls	r3, r3, #26
 8002504:	429a      	cmp	r2, r3
 8002506:	d107      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002516:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800251e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	069b      	lsls	r3, r3, #26
 8002528:	429a      	cmp	r2, r3
 800252a:	d107      	bne.n	800253c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800253a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002542:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	069b      	lsls	r3, r3, #26
 800254c:	429a      	cmp	r2, r3
 800254e:	d107      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800255e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002566:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	429a      	cmp	r2, r3
 8002572:	d107      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002582:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fbab 	bl	8001ce4 <LL_ADC_IsEnabled>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	f040 81bb 	bne.w	800290c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	461a      	mov	r2, r3
 80025a4:	f7ff fafc 	bl	8001ba0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a12      	ldr	r2, [pc, #72]	@ (80025f8 <HAL_ADC_ConfigChannel+0x284>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	f040 8130 	bne.w	8002814 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x268>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0e9b      	lsrs	r3, r3, #26
 80025ca:	3301      	adds	r3, #1
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2b09      	cmp	r3, #9
 80025d2:	bf94      	ite	ls
 80025d4:	2301      	movls	r3, #1
 80025d6:	2300      	movhi	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e01b      	b.n	8002614 <HAL_ADC_ConfigChannel+0x2a0>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80025ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80025ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d103      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80025f4:	2320      	movs	r3, #32
 80025f6:	e005      	b.n	8002604 <HAL_ADC_ConfigChannel+0x290>
 80025f8:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80025fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	2b09      	cmp	r3, #9
 800260c:	bf94      	ite	ls
 800260e:	2301      	movls	r3, #1
 8002610:	2300      	movhi	r3, #0
 8002612:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002614:	2b00      	cmp	r3, #0
 8002616:	d079      	beq.n	800270c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002620:	2b00      	cmp	r3, #0
 8002622:	d107      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x2c0>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0e9b      	lsrs	r3, r3, #26
 800262a:	3301      	adds	r3, #1
 800262c:	069b      	lsls	r3, r3, #26
 800262e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002632:	e015      	b.n	8002660 <HAL_ADC_ConfigChannel+0x2ec>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002644:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e003      	b.n	8002658 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002650:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3301      	adds	r3, #1
 800265a:	069b      	lsls	r3, r3, #26
 800265c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x30c>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	3301      	adds	r3, #1
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	2101      	movs	r1, #1
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	e017      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x33c>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800268e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002690:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002692:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	e003      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 800269c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	ea42 0103 	orr.w	r1, r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x362>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	3301      	adds	r3, #1
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	051b      	lsls	r3, r3, #20
 80026d4:	e018      	b.n	8002708 <HAL_ADC_ConfigChannel+0x394>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80026e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80026e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80026ee:	2320      	movs	r3, #32
 80026f0:	e003      	b.n	80026fa <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80026f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f4:	fab3 f383 	clz	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	3301      	adds	r3, #1
 80026fc:	f003 021f 	and.w	r2, r3, #31
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002708:	430b      	orrs	r3, r1
 800270a:	e07e      	b.n	800280a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x3b4>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0e9b      	lsrs	r3, r3, #26
 800271e:	3301      	adds	r3, #1
 8002720:	069b      	lsls	r3, r3, #26
 8002722:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002726:	e015      	b.n	8002754 <HAL_ADC_ConfigChannel+0x3e0>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800273a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002740:	2320      	movs	r3, #32
 8002742:	e003      	b.n	800274c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	3301      	adds	r3, #1
 800274e:	069b      	lsls	r3, r3, #26
 8002750:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800275c:	2b00      	cmp	r3, #0
 800275e:	d109      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x400>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	0e9b      	lsrs	r3, r3, #26
 8002766:	3301      	adds	r3, #1
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	e017      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x430>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	61bb      	str	r3, [r7, #24]
  return result;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 800278c:	2320      	movs	r3, #32
 800278e:	e003      	b.n	8002798 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	3301      	adds	r3, #1
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	2101      	movs	r1, #1
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	ea42 0103 	orr.w	r1, r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x45c>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0e9b      	lsrs	r3, r3, #26
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	3b1e      	subs	r3, #30
 80027c8:	051b      	lsls	r3, r3, #20
 80027ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ce:	e01b      	b.n	8002808 <HAL_ADC_ConfigChannel+0x494>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	60fb      	str	r3, [r7, #12]
  return result;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80027e8:	2320      	movs	r3, #32
 80027ea:	e003      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	3301      	adds	r3, #1
 80027f6:	f003 021f 	and.w	r2, r3, #31
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	3b1e      	subs	r3, #30
 8002802:	051b      	lsls	r3, r3, #20
 8002804:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002808:	430b      	orrs	r3, r1
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	6892      	ldr	r2, [r2, #8]
 800280e:	4619      	mov	r1, r3
 8002810:	f7ff f99b 	bl	8001b4a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	da77      	bge.n	800290c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800281c:	4840      	ldr	r0, [pc, #256]	@ (8002920 <HAL_ADC_ConfigChannel+0x5ac>)
 800281e:	f7ff f8f3 	bl	8001a08 <LL_ADC_GetCommonPathInternalCh>
 8002822:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002824:	483f      	ldr	r0, [pc, #252]	@ (8002924 <HAL_ADC_ConfigChannel+0x5b0>)
 8002826:	f7ff fa5d 	bl	8001ce4 <LL_ADC_IsEnabled>
 800282a:	4604      	mov	r4, r0
 800282c:	483e      	ldr	r0, [pc, #248]	@ (8002928 <HAL_ADC_ConfigChannel+0x5b4>)
 800282e:	f7ff fa59 	bl	8001ce4 <LL_ADC_IsEnabled>
 8002832:	4603      	mov	r3, r0
 8002834:	4323      	orrs	r3, r4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d155      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a3b      	ldr	r2, [pc, #236]	@ (800292c <HAL_ADC_ConfigChannel+0x5b8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d122      	bne.n	800288a <HAL_ADC_ConfigChannel+0x516>
 8002844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d11d      	bne.n	800288a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a35      	ldr	r2, [pc, #212]	@ (8002928 <HAL_ADC_ConfigChannel+0x5b4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d159      	bne.n	800290c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800285a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800285e:	4619      	mov	r1, r3
 8002860:	482f      	ldr	r0, [pc, #188]	@ (8002920 <HAL_ADC_ConfigChannel+0x5ac>)
 8002862:	f7ff f8be 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002866:	4b32      	ldr	r3, [pc, #200]	@ (8002930 <HAL_ADC_ConfigChannel+0x5bc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	4a31      	ldr	r2, [pc, #196]	@ (8002934 <HAL_ADC_ConfigChannel+0x5c0>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	099b      	lsrs	r3, r3, #6
 8002874:	3301      	adds	r3, #1
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800287a:	e002      	b.n	8002882 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	3b01      	subs	r3, #1
 8002880:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f9      	bne.n	800287c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002888:	e040      	b.n	800290c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2a      	ldr	r2, [pc, #168]	@ (8002938 <HAL_ADC_ConfigChannel+0x5c4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d111      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x544>
 8002894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a21      	ldr	r2, [pc, #132]	@ (8002928 <HAL_ADC_ConfigChannel+0x5b4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d131      	bne.n	800290c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ae:	4619      	mov	r1, r3
 80028b0:	481b      	ldr	r0, [pc, #108]	@ (8002920 <HAL_ADC_ConfigChannel+0x5ac>)
 80028b2:	f7ff f896 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b6:	e029      	b.n	800290c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1f      	ldr	r2, [pc, #124]	@ (800293c <HAL_ADC_ConfigChannel+0x5c8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d124      	bne.n	800290c <HAL_ADC_ConfigChannel+0x598>
 80028c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d11f      	bne.n	800290c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a15      	ldr	r2, [pc, #84]	@ (8002928 <HAL_ADC_ConfigChannel+0x5b4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d11a      	bne.n	800290c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028dc:	4619      	mov	r1, r3
 80028de:	4810      	ldr	r0, [pc, #64]	@ (8002920 <HAL_ADC_ConfigChannel+0x5ac>)
 80028e0:	f7ff f87f 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
 80028e4:	e012      	b.n	800290c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ea:	f043 0220 	orr.w	r2, r3, #32
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80028f8:	e008      	b.n	800290c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fe:	f043 0220 	orr.w	r2, r3, #32
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002914:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002918:	4618      	mov	r0, r3
 800291a:	3784      	adds	r7, #132	@ 0x84
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	40022300 	.word	0x40022300
 8002924:	40022000 	.word	0x40022000
 8002928:	40022100 	.word	0x40022100
 800292c:	cb840000 	.word	0xcb840000
 8002930:	24000000 	.word	0x24000000
 8002934:	053e2d63 	.word	0x053e2d63
 8002938:	bac04000 	.word	0xbac04000
 800293c:	cfb80000 	.word	0xcfb80000

08002940 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff f9c9 	bl	8001ce4 <LL_ADC_IsEnabled>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d161      	bne.n	8002a1c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	4b32      	ldr	r3, [pc, #200]	@ (8002a28 <ADC_Enable+0xe8>)
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00d      	beq.n	8002982 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296a:	f043 0210 	orr.w	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002976:	f043 0201 	orr.w	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e04d      	b.n	8002a1e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff f998 	bl	8001cbc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800298c:	f7fe ffe6 	bl	800195c <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002992:	4826      	ldr	r0, [pc, #152]	@ (8002a2c <ADC_Enable+0xec>)
 8002994:	f7ff f928 	bl	8001be8 <LL_ADC_GetMultimode>
 8002998:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a24      	ldr	r2, [pc, #144]	@ (8002a30 <ADC_Enable+0xf0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d002      	beq.n	80029aa <ADC_Enable+0x6a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	e000      	b.n	80029ac <ADC_Enable+0x6c>
 80029aa:	4b22      	ldr	r3, [pc, #136]	@ (8002a34 <ADC_Enable+0xf4>)
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d02c      	beq.n	8002a0e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d130      	bne.n	8002a1c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ba:	e028      	b.n	8002a0e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff f98f 	bl	8001ce4 <LL_ADC_IsEnabled>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff f973 	bl	8001cbc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029d6:	f7fe ffc1 	bl	800195c <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d914      	bls.n	8002a0e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d00d      	beq.n	8002a0e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f6:	f043 0210 	orr.w	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e007      	b.n	8002a1e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d1cf      	bne.n	80029bc <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	8000003f 	.word	0x8000003f
 8002a2c:	40022300 	.word	0x40022300
 8002a30:	40022100 	.word	0x40022100
 8002a34:	40022000 	.word	0x40022000

08002a38 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002a40:	4b60      	ldr	r3, [pc, #384]	@ (8002bc4 <ADC_ConfigureBoostMode+0x18c>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01c      	beq.n	8002a86 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002a4c:	f001 fc1a 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 8002a50:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a5a:	d010      	beq.n	8002a7e <ADC_ConfigureBoostMode+0x46>
 8002a5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a60:	d873      	bhi.n	8002b4a <ADC_ConfigureBoostMode+0x112>
 8002a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a66:	d002      	beq.n	8002a6e <ADC_ConfigureBoostMode+0x36>
 8002a68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a6c:	d16d      	bne.n	8002b4a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	0c1b      	lsrs	r3, r3, #16
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	60fb      	str	r3, [r7, #12]
        break;
 8002a7c:	e068      	b.n	8002b50 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	60fb      	str	r3, [r7, #12]
        break;
 8002a84:	e064      	b.n	8002b50 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002a86:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002a8a:	f04f 0100 	mov.w	r1, #0
 8002a8e:	f002 fe13 	bl	80056b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a92:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002a9c:	d051      	beq.n	8002b42 <ADC_ConfigureBoostMode+0x10a>
 8002a9e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002aa2:	d854      	bhi.n	8002b4e <ADC_ConfigureBoostMode+0x116>
 8002aa4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002aa8:	d047      	beq.n	8002b3a <ADC_ConfigureBoostMode+0x102>
 8002aaa:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002aae:	d84e      	bhi.n	8002b4e <ADC_ConfigureBoostMode+0x116>
 8002ab0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002ab4:	d03d      	beq.n	8002b32 <ADC_ConfigureBoostMode+0xfa>
 8002ab6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002aba:	d848      	bhi.n	8002b4e <ADC_ConfigureBoostMode+0x116>
 8002abc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ac0:	d033      	beq.n	8002b2a <ADC_ConfigureBoostMode+0xf2>
 8002ac2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ac6:	d842      	bhi.n	8002b4e <ADC_ConfigureBoostMode+0x116>
 8002ac8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002acc:	d029      	beq.n	8002b22 <ADC_ConfigureBoostMode+0xea>
 8002ace:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002ad2:	d83c      	bhi.n	8002b4e <ADC_ConfigureBoostMode+0x116>
 8002ad4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ad8:	d01a      	beq.n	8002b10 <ADC_ConfigureBoostMode+0xd8>
 8002ada:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ade:	d836      	bhi.n	8002b4e <ADC_ConfigureBoostMode+0x116>
 8002ae0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002ae4:	d014      	beq.n	8002b10 <ADC_ConfigureBoostMode+0xd8>
 8002ae6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002aea:	d830      	bhi.n	8002b4e <ADC_ConfigureBoostMode+0x116>
 8002aec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002af0:	d00e      	beq.n	8002b10 <ADC_ConfigureBoostMode+0xd8>
 8002af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002af6:	d82a      	bhi.n	8002b4e <ADC_ConfigureBoostMode+0x116>
 8002af8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002afc:	d008      	beq.n	8002b10 <ADC_ConfigureBoostMode+0xd8>
 8002afe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b02:	d824      	bhi.n	8002b4e <ADC_ConfigureBoostMode+0x116>
 8002b04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b08:	d002      	beq.n	8002b10 <ADC_ConfigureBoostMode+0xd8>
 8002b0a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b0e:	d11e      	bne.n	8002b4e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	0c9b      	lsrs	r3, r3, #18
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1e:	60fb      	str	r3, [r7, #12]
        break;
 8002b20:	e016      	b.n	8002b50 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	60fb      	str	r3, [r7, #12]
        break;
 8002b28:	e012      	b.n	8002b50 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	60fb      	str	r3, [r7, #12]
        break;
 8002b30:	e00e      	b.n	8002b50 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	099b      	lsrs	r3, r3, #6
 8002b36:	60fb      	str	r3, [r7, #12]
        break;
 8002b38:	e00a      	b.n	8002b50 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	09db      	lsrs	r3, r3, #7
 8002b3e:	60fb      	str	r3, [r7, #12]
        break;
 8002b40:	e006      	b.n	8002b50 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	60fb      	str	r3, [r7, #12]
        break;
 8002b48:	e002      	b.n	8002b50 <ADC_ConfigureBoostMode+0x118>
        break;
 8002b4a:	bf00      	nop
 8002b4c:	e000      	b.n	8002b50 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002b4e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc8 <ADC_ConfigureBoostMode+0x190>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d808      	bhi.n	8002b70 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b6c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002b6e:	e025      	b.n	8002bbc <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4a16      	ldr	r2, [pc, #88]	@ (8002bcc <ADC_ConfigureBoostMode+0x194>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d80a      	bhi.n	8002b8e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b8a:	609a      	str	r2, [r3, #8]
}
 8002b8c:	e016      	b.n	8002bbc <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a0f      	ldr	r2, [pc, #60]	@ (8002bd0 <ADC_ConfigureBoostMode+0x198>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d80a      	bhi.n	8002bac <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba8:	609a      	str	r2, [r3, #8]
}
 8002baa:	e007      	b.n	8002bbc <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002bba:	609a      	str	r2, [r3, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40022300 	.word	0x40022300
 8002bc8:	005f5e10 	.word	0x005f5e10
 8002bcc:	00bebc20 	.word	0x00bebc20
 8002bd0:	017d7840 	.word	0x017d7840

08002bd4 <LL_ADC_IsEnabled>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <LL_ADC_IsEnabled+0x18>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <LL_ADC_IsEnabled+0x1a>
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_ADC_REG_IsConversionOngoing>:
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d101      	bne.n	8002c12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b09f      	sub	sp, #124	@ 0x7c
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e080      	b.n	8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a3d      	ldr	r2, [pc, #244]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d102      	bne.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c58:	4b3c      	ldr	r3, [pc, #240]	@ (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	e001      	b.n	8002c62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6c:	f043 0220 	orr.w	r2, r3, #32
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e05f      	b.n	8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ffb9 	bl	8002bfa <LL_ADC_REG_IsConversionOngoing>
 8002c88:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ffb3 	bl	8002bfa <LL_ADC_REG_IsConversionOngoing>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d141      	bne.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d13e      	bne.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002ca2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cbc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cbe:	4822      	ldr	r0, [pc, #136]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002cc0:	f7ff ff88 	bl	8002bd4 <LL_ADC_IsEnabled>
 8002cc4:	4604      	mov	r4, r0
 8002cc6:	4821      	ldr	r0, [pc, #132]	@ (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002cc8:	f7ff ff84 	bl	8002bd4 <LL_ADC_IsEnabled>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4323      	orrs	r3, r4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d12e      	bne.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	6811      	ldr	r1, [r2, #0]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	6892      	ldr	r2, [r2, #8]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cea:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cec:	e021      	b.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cf8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cfa:	4813      	ldr	r0, [pc, #76]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002cfc:	f7ff ff6a 	bl	8002bd4 <LL_ADC_IsEnabled>
 8002d00:	4604      	mov	r4, r0
 8002d02:	4812      	ldr	r0, [pc, #72]	@ (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002d04:	f7ff ff66 	bl	8002bd4 <LL_ADC_IsEnabled>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4323      	orrs	r3, r4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d110      	bne.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	4b0f      	ldr	r3, [pc, #60]	@ (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d1a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d1c:	e009      	b.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d22:	f043 0220 	orr.w	r2, r3, #32
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002d30:	e000      	b.n	8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d32:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d3c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	377c      	adds	r7, #124	@ 0x7c
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd90      	pop	{r4, r7, pc}
 8002d48:	40022000 	.word	0x40022000
 8002d4c:	40022100 	.word	0x40022100
 8002d50:	40022300 	.word	0x40022300
 8002d54:	fffff0e0 	.word	0xfffff0e0

08002d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d68:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <__NVIC_SetPriorityGrouping+0x40>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d80:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d86:	4a04      	ldr	r2, [pc, #16]	@ (8002d98 <__NVIC_SetPriorityGrouping+0x40>)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	60d3      	str	r3, [r2, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00
 8002d9c:	05fa0000 	.word	0x05fa0000

08002da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da4:	4b04      	ldr	r3, [pc, #16]	@ (8002db8 <__NVIC_GetPriorityGrouping+0x18>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	f003 0307 	and.w	r3, r3, #7
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db0b      	blt.n	8002de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	4907      	ldr	r1, [pc, #28]	@ (8002df4 <__NVIC_EnableIRQ+0x38>)
 8002dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2001      	movs	r0, #1
 8002dde:	fa00 f202 	lsl.w	r2, r0, r2
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000e100 	.word	0xe000e100

08002df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	6039      	str	r1, [r7, #0]
 8002e02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	db0a      	blt.n	8002e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	490c      	ldr	r1, [pc, #48]	@ (8002e44 <__NVIC_SetPriority+0x4c>)
 8002e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e16:	0112      	lsls	r2, r2, #4
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e20:	e00a      	b.n	8002e38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4908      	ldr	r1, [pc, #32]	@ (8002e48 <__NVIC_SetPriority+0x50>)
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	3b04      	subs	r3, #4
 8002e30:	0112      	lsls	r2, r2, #4
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	440b      	add	r3, r1
 8002e36:	761a      	strb	r2, [r3, #24]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000e100 	.word	0xe000e100
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b089      	sub	sp, #36	@ 0x24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f1c3 0307 	rsb	r3, r3, #7
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	bf28      	it	cs
 8002e6a:	2304      	movcs	r3, #4
 8002e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3304      	adds	r3, #4
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d902      	bls.n	8002e7c <NVIC_EncodePriority+0x30>
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3b03      	subs	r3, #3
 8002e7a:	e000      	b.n	8002e7e <NVIC_EncodePriority+0x32>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	401a      	ands	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	43d9      	mvns	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea4:	4313      	orrs	r3, r2
         );
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3724      	adds	r7, #36	@ 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ec4:	d301      	bcc.n	8002eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00f      	b.n	8002eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <SysTick_Config+0x40>)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ed2:	210f      	movs	r1, #15
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ed8:	f7ff ff8e 	bl	8002df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002edc:	4b05      	ldr	r3, [pc, #20]	@ (8002ef4 <SysTick_Config+0x40>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ee2:	4b04      	ldr	r3, [pc, #16]	@ (8002ef4 <SysTick_Config+0x40>)
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	e000e010 	.word	0xe000e010

08002ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ff29 	bl	8002d58 <__NVIC_SetPriorityGrouping>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b086      	sub	sp, #24
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	4603      	mov	r3, r0
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f1c:	f7ff ff40 	bl	8002da0 <__NVIC_GetPriorityGrouping>
 8002f20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	6978      	ldr	r0, [r7, #20]
 8002f28:	f7ff ff90 	bl	8002e4c <NVIC_EncodePriority>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff5f 	bl	8002df8 <__NVIC_SetPriority>
}
 8002f3a:	bf00      	nop
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ff33 	bl	8002dbc <__NVIC_EnableIRQ>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ffa4 	bl	8002eb4 <SysTick_Config>
 8002f6c:	4603      	mov	r3, r0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	@ 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f86:	4b89      	ldr	r3, [pc, #548]	@ (80031ac <HAL_GPIO_Init+0x234>)
 8002f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f8a:	e194      	b.n	80032b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8186 	beq.w	80032b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d005      	beq.n	8002fbc <HAL_GPIO_Init+0x44>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d130      	bne.n	800301e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	f003 0201 	and.w	r2, r3, #1
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b03      	cmp	r3, #3
 8003028:	d017      	beq.n	800305a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	2203      	movs	r2, #3
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d123      	bne.n	80030ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	220f      	movs	r2, #15
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	69b9      	ldr	r1, [r7, #24]
 80030aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2203      	movs	r2, #3
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 0203 	and.w	r2, r3, #3
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80e0 	beq.w	80032b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f0:	4b2f      	ldr	r3, [pc, #188]	@ (80031b0 <HAL_GPIO_Init+0x238>)
 80030f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80030f6:	4a2e      	ldr	r2, [pc, #184]	@ (80031b0 <HAL_GPIO_Init+0x238>)
 80030f8:	f043 0302 	orr.w	r3, r3, #2
 80030fc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003100:	4b2b      	ldr	r3, [pc, #172]	@ (80031b0 <HAL_GPIO_Init+0x238>)
 8003102:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800310e:	4a29      	ldr	r2, [pc, #164]	@ (80031b4 <HAL_GPIO_Init+0x23c>)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3302      	adds	r3, #2
 8003116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	220f      	movs	r2, #15
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a20      	ldr	r2, [pc, #128]	@ (80031b8 <HAL_GPIO_Init+0x240>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d052      	beq.n	80031e0 <HAL_GPIO_Init+0x268>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1f      	ldr	r2, [pc, #124]	@ (80031bc <HAL_GPIO_Init+0x244>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d031      	beq.n	80031a6 <HAL_GPIO_Init+0x22e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1e      	ldr	r2, [pc, #120]	@ (80031c0 <HAL_GPIO_Init+0x248>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d02b      	beq.n	80031a2 <HAL_GPIO_Init+0x22a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a1d      	ldr	r2, [pc, #116]	@ (80031c4 <HAL_GPIO_Init+0x24c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d025      	beq.n	800319e <HAL_GPIO_Init+0x226>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1c      	ldr	r2, [pc, #112]	@ (80031c8 <HAL_GPIO_Init+0x250>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01f      	beq.n	800319a <HAL_GPIO_Init+0x222>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1b      	ldr	r2, [pc, #108]	@ (80031cc <HAL_GPIO_Init+0x254>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d019      	beq.n	8003196 <HAL_GPIO_Init+0x21e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1a      	ldr	r2, [pc, #104]	@ (80031d0 <HAL_GPIO_Init+0x258>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_GPIO_Init+0x21a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a19      	ldr	r2, [pc, #100]	@ (80031d4 <HAL_GPIO_Init+0x25c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00d      	beq.n	800318e <HAL_GPIO_Init+0x216>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a18      	ldr	r2, [pc, #96]	@ (80031d8 <HAL_GPIO_Init+0x260>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <HAL_GPIO_Init+0x212>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a17      	ldr	r2, [pc, #92]	@ (80031dc <HAL_GPIO_Init+0x264>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_GPIO_Init+0x20e>
 8003182:	2309      	movs	r3, #9
 8003184:	e02d      	b.n	80031e2 <HAL_GPIO_Init+0x26a>
 8003186:	230a      	movs	r3, #10
 8003188:	e02b      	b.n	80031e2 <HAL_GPIO_Init+0x26a>
 800318a:	2308      	movs	r3, #8
 800318c:	e029      	b.n	80031e2 <HAL_GPIO_Init+0x26a>
 800318e:	2307      	movs	r3, #7
 8003190:	e027      	b.n	80031e2 <HAL_GPIO_Init+0x26a>
 8003192:	2306      	movs	r3, #6
 8003194:	e025      	b.n	80031e2 <HAL_GPIO_Init+0x26a>
 8003196:	2305      	movs	r3, #5
 8003198:	e023      	b.n	80031e2 <HAL_GPIO_Init+0x26a>
 800319a:	2304      	movs	r3, #4
 800319c:	e021      	b.n	80031e2 <HAL_GPIO_Init+0x26a>
 800319e:	2303      	movs	r3, #3
 80031a0:	e01f      	b.n	80031e2 <HAL_GPIO_Init+0x26a>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e01d      	b.n	80031e2 <HAL_GPIO_Init+0x26a>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e01b      	b.n	80031e2 <HAL_GPIO_Init+0x26a>
 80031aa:	bf00      	nop
 80031ac:	58000080 	.word	0x58000080
 80031b0:	58024400 	.word	0x58024400
 80031b4:	58000400 	.word	0x58000400
 80031b8:	58020000 	.word	0x58020000
 80031bc:	58020400 	.word	0x58020400
 80031c0:	58020800 	.word	0x58020800
 80031c4:	58020c00 	.word	0x58020c00
 80031c8:	58021000 	.word	0x58021000
 80031cc:	58021400 	.word	0x58021400
 80031d0:	58021800 	.word	0x58021800
 80031d4:	58021c00 	.word	0x58021c00
 80031d8:	58022000 	.word	0x58022000
 80031dc:	58022400 	.word	0x58022400
 80031e0:	2300      	movs	r3, #0
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	f002 0203 	and.w	r2, r2, #3
 80031e8:	0092      	lsls	r2, r2, #2
 80031ea:	4093      	lsls	r3, r2
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031f2:	4938      	ldr	r1, [pc, #224]	@ (80032d4 <HAL_GPIO_Init+0x35c>)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	3302      	adds	r3, #2
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003226:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800322e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003254:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	43db      	mvns	r3, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4013      	ands	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	3301      	adds	r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f47f ae63 	bne.w	8002f8c <HAL_GPIO_Init+0x14>
  }
}
 80032c6:	bf00      	nop
 80032c8:	bf00      	nop
 80032ca:	3724      	adds	r7, #36	@ 0x24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	58000400 	.word	0x58000400

080032d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	807b      	strh	r3, [r7, #2]
 80032e4:	4613      	mov	r3, r2
 80032e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032e8:	787b      	ldrb	r3, [r7, #1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80032f4:	e003      	b.n	80032fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032f6:	887b      	ldrh	r3, [r7, #2]
 80032f8:	041a      	lsls	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	619a      	str	r2, [r3, #24]
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003314:	4b29      	ldr	r3, [pc, #164]	@ (80033bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	2b06      	cmp	r3, #6
 800331e:	d00a      	beq.n	8003336 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003320:	4b26      	ldr	r3, [pc, #152]	@ (80033bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d001      	beq.n	8003332 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e040      	b.n	80033b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e03e      	b.n	80033b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003336:	4b21      	ldr	r3, [pc, #132]	@ (80033bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800333e:	491f      	ldr	r1, [pc, #124]	@ (80033bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4313      	orrs	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003346:	f7fe fb09 	bl	800195c <HAL_GetTick>
 800334a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800334c:	e009      	b.n	8003362 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800334e:	f7fe fb05 	bl	800195c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800335c:	d901      	bls.n	8003362 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e028      	b.n	80033b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003362:	4b16      	ldr	r3, [pc, #88]	@ (80033bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800336a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800336e:	d1ee      	bne.n	800334e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b1e      	cmp	r3, #30
 8003374:	d008      	beq.n	8003388 <HAL_PWREx_ConfigSupply+0x7c>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b2e      	cmp	r3, #46	@ 0x2e
 800337a:	d005      	beq.n	8003388 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b1d      	cmp	r3, #29
 8003380:	d002      	beq.n	8003388 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b2d      	cmp	r3, #45	@ 0x2d
 8003386:	d114      	bne.n	80033b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003388:	f7fe fae8 	bl	800195c <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800338e:	e009      	b.n	80033a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003390:	f7fe fae4 	bl	800195c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800339e:	d901      	bls.n	80033a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e007      	b.n	80033b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80033a4:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <HAL_PWREx_ConfigSupply+0xb0>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b0:	d1ee      	bne.n	8003390 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	58024800 	.word	0x58024800

080033c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08c      	sub	sp, #48	@ 0x30
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d102      	bne.n	80033d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f000 bc1f 	b.w	8003c12 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80b3 	beq.w	8003548 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e2:	4b95      	ldr	r3, [pc, #596]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033ec:	4b92      	ldr	r3, [pc, #584]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80033ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d007      	beq.n	8003408 <HAL_RCC_OscConfig+0x48>
 80033f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fa:	2b18      	cmp	r3, #24
 80033fc:	d112      	bne.n	8003424 <HAL_RCC_OscConfig+0x64>
 80033fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d10d      	bne.n	8003424 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	4b8b      	ldr	r3, [pc, #556]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8098 	beq.w	8003546 <HAL_RCC_OscConfig+0x186>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 8093 	bne.w	8003546 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e3f6      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800342c:	d106      	bne.n	800343c <HAL_RCC_OscConfig+0x7c>
 800342e:	4b82      	ldr	r3, [pc, #520]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a81      	ldr	r2, [pc, #516]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	e058      	b.n	80034ee <HAL_RCC_OscConfig+0x12e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d112      	bne.n	800346a <HAL_RCC_OscConfig+0xaa>
 8003444:	4b7c      	ldr	r3, [pc, #496]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a7b      	ldr	r2, [pc, #492]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 800344a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b79      	ldr	r3, [pc, #484]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a78      	ldr	r2, [pc, #480]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003456:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b76      	ldr	r3, [pc, #472]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a75      	ldr	r2, [pc, #468]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	e041      	b.n	80034ee <HAL_RCC_OscConfig+0x12e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003472:	d112      	bne.n	800349a <HAL_RCC_OscConfig+0xda>
 8003474:	4b70      	ldr	r3, [pc, #448]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6f      	ldr	r2, [pc, #444]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 800347a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b6d      	ldr	r3, [pc, #436]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a6c      	ldr	r2, [pc, #432]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003486:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4b6a      	ldr	r3, [pc, #424]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a69      	ldr	r2, [pc, #420]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	e029      	b.n	80034ee <HAL_RCC_OscConfig+0x12e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80034a2:	d112      	bne.n	80034ca <HAL_RCC_OscConfig+0x10a>
 80034a4:	4b64      	ldr	r3, [pc, #400]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a63      	ldr	r2, [pc, #396]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80034aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	4b61      	ldr	r3, [pc, #388]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a60      	ldr	r2, [pc, #384]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80034b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80034c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	e011      	b.n	80034ee <HAL_RCC_OscConfig+0x12e>
 80034ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a5a      	ldr	r2, [pc, #360]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80034d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b58      	ldr	r3, [pc, #352]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a57      	ldr	r2, [pc, #348]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80034dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b55      	ldr	r3, [pc, #340]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a54      	ldr	r2, [pc, #336]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80034e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80034ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d013      	beq.n	800351e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fe fa31 	bl	800195c <HAL_GetTick>
 80034fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034fe:	f7fe fa2d 	bl	800195c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b64      	cmp	r3, #100	@ 0x64
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e380      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003510:	4b49      	ldr	r3, [pc, #292]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x13e>
 800351c:	e014      	b.n	8003548 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fe fa1d 	bl	800195c <HAL_GetTick>
 8003522:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003526:	f7fe fa19 	bl	800195c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b64      	cmp	r3, #100	@ 0x64
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e36c      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003538:	4b3f      	ldr	r3, [pc, #252]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f0      	bne.n	8003526 <HAL_RCC_OscConfig+0x166>
 8003544:	e000      	b.n	8003548 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003546:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 808c 	beq.w	800366e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003556:	4b38      	ldr	r3, [pc, #224]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800355e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003560:	4b35      	ldr	r3, [pc, #212]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003564:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <HAL_RCC_OscConfig+0x1bc>
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	2b18      	cmp	r3, #24
 8003570:	d137      	bne.n	80035e2 <HAL_RCC_OscConfig+0x222>
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d132      	bne.n	80035e2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800357c:	4b2e      	ldr	r3, [pc, #184]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_OscConfig+0x1d4>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e33e      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003594:	4b28      	ldr	r3, [pc, #160]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f023 0219 	bic.w	r2, r3, #25
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4925      	ldr	r1, [pc, #148]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a6:	f7fe f9d9 	bl	800195c <HAL_GetTick>
 80035aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ae:	f7fe f9d5 	bl	800195c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e328      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	061b      	lsls	r3, r3, #24
 80035da:	4917      	ldr	r1, [pc, #92]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e0:	e045      	b.n	800366e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d028      	beq.n	800363c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035ea:	4b13      	ldr	r3, [pc, #76]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 0219 	bic.w	r2, r3, #25
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	4910      	ldr	r1, [pc, #64]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7fe f9ae 	bl	800195c <HAL_GetTick>
 8003600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003604:	f7fe f9aa 	bl	800195c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e2fd      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003616:	4b08      	ldr	r3, [pc, #32]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003622:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	061b      	lsls	r3, r3, #24
 8003630:	4901      	ldr	r1, [pc, #4]	@ (8003638 <HAL_RCC_OscConfig+0x278>)
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]
 8003636:	e01a      	b.n	800366e <HAL_RCC_OscConfig+0x2ae>
 8003638:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363c:	4b97      	ldr	r3, [pc, #604]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a96      	ldr	r2, [pc, #600]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 8003642:	f023 0301 	bic.w	r3, r3, #1
 8003646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe f988 	bl	800195c <HAL_GetTick>
 800364c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003650:	f7fe f984 	bl	800195c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e2d7      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003662:	4b8e      	ldr	r3, [pc, #568]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d06a      	beq.n	8003750 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800367a:	4b88      	ldr	r3, [pc, #544]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003682:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003684:	4b85      	ldr	r3, [pc, #532]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d007      	beq.n	80036a0 <HAL_RCC_OscConfig+0x2e0>
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b18      	cmp	r3, #24
 8003694:	d11b      	bne.n	80036ce <HAL_RCC_OscConfig+0x30e>
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d116      	bne.n	80036ce <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036a0:	4b7e      	ldr	r3, [pc, #504]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_OscConfig+0x2f8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	2b80      	cmp	r3, #128	@ 0x80
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e2ac      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036b8:	4b78      	ldr	r3, [pc, #480]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	4975      	ldr	r1, [pc, #468]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036cc:	e040      	b.n	8003750 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d023      	beq.n	800371e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036d6:	4b71      	ldr	r3, [pc, #452]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a70      	ldr	r2, [pc, #448]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 80036dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fe f93b 	bl	800195c <HAL_GetTick>
 80036e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80036ea:	f7fe f937 	bl	800195c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e28a      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036fc:	4b67      	ldr	r3, [pc, #412]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003708:	4b64      	ldr	r3, [pc, #400]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	061b      	lsls	r3, r3, #24
 8003716:	4961      	ldr	r1, [pc, #388]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 8003718:	4313      	orrs	r3, r2
 800371a:	60cb      	str	r3, [r1, #12]
 800371c:	e018      	b.n	8003750 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800371e:	4b5f      	ldr	r3, [pc, #380]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a5e      	ldr	r2, [pc, #376]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 8003724:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fe f917 	bl	800195c <HAL_GetTick>
 800372e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003732:	f7fe f913 	bl	800195c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e266      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003744:	4b55      	ldr	r3, [pc, #340]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f0      	bne.n	8003732 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d036      	beq.n	80037ca <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d019      	beq.n	8003798 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003764:	4b4d      	ldr	r3, [pc, #308]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 8003766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003768:	4a4c      	ldr	r2, [pc, #304]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003770:	f7fe f8f4 	bl	800195c <HAL_GetTick>
 8003774:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003778:	f7fe f8f0 	bl	800195c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e243      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800378a:	4b44      	ldr	r3, [pc, #272]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 800378c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x3b8>
 8003796:	e018      	b.n	80037ca <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003798:	4b40      	ldr	r3, [pc, #256]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 800379a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379c:	4a3f      	ldr	r2, [pc, #252]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7fe f8da 	bl	800195c <HAL_GetTick>
 80037a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ac:	f7fe f8d6 	bl	800195c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e229      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037be:	4b37      	ldr	r3, [pc, #220]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 80037c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d036      	beq.n	8003844 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d019      	beq.n	8003812 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037de:	4b2f      	ldr	r3, [pc, #188]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2e      	ldr	r2, [pc, #184]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 80037e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80037e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037ea:	f7fe f8b7 	bl	800195c <HAL_GetTick>
 80037ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037f2:	f7fe f8b3 	bl	800195c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e206      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003804:	4b25      	ldr	r3, [pc, #148]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x432>
 8003810:	e018      	b.n	8003844 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003812:	4b22      	ldr	r3, [pc, #136]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a21      	ldr	r2, [pc, #132]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 8003818:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800381c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800381e:	f7fe f89d 	bl	800195c <HAL_GetTick>
 8003822:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003826:	f7fe f899 	bl	800195c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e1ec      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003838:	4b18      	ldr	r3, [pc, #96]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f0      	bne.n	8003826 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80af 	beq.w	80039b0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003852:	4b13      	ldr	r3, [pc, #76]	@ (80038a0 <HAL_RCC_OscConfig+0x4e0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a12      	ldr	r2, [pc, #72]	@ (80038a0 <HAL_RCC_OscConfig+0x4e0>)
 8003858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800385c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800385e:	f7fe f87d 	bl	800195c <HAL_GetTick>
 8003862:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003866:	f7fe f879 	bl	800195c <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b64      	cmp	r3, #100	@ 0x64
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1cc      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003878:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <HAL_RCC_OscConfig+0x4e0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d10b      	bne.n	80038a4 <HAL_RCC_OscConfig+0x4e4>
 800388c:	4b03      	ldr	r3, [pc, #12]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003890:	4a02      	ldr	r2, [pc, #8]	@ (800389c <HAL_RCC_OscConfig+0x4dc>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6713      	str	r3, [r2, #112]	@ 0x70
 8003898:	e05b      	b.n	8003952 <HAL_RCC_OscConfig+0x592>
 800389a:	bf00      	nop
 800389c:	58024400 	.word	0x58024400
 80038a0:	58024800 	.word	0x58024800
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d112      	bne.n	80038d2 <HAL_RCC_OscConfig+0x512>
 80038ac:	4b9d      	ldr	r3, [pc, #628]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b0:	4a9c      	ldr	r2, [pc, #624]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b8:	4b9a      	ldr	r3, [pc, #616]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038bc:	4a99      	ldr	r2, [pc, #612]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80038be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038c4:	4b97      	ldr	r3, [pc, #604]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c8:	4a96      	ldr	r2, [pc, #600]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80038ca:	f023 0304 	bic.w	r3, r3, #4
 80038ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d0:	e03f      	b.n	8003952 <HAL_RCC_OscConfig+0x592>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d112      	bne.n	8003900 <HAL_RCC_OscConfig+0x540>
 80038da:	4b92      	ldr	r3, [pc, #584]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038de:	4a91      	ldr	r2, [pc, #580]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80038e0:	f043 0304 	orr.w	r3, r3, #4
 80038e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e6:	4b8f      	ldr	r3, [pc, #572]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	4a8e      	ldr	r2, [pc, #568]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80038ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f2:	4b8c      	ldr	r3, [pc, #560]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f6:	4a8b      	ldr	r2, [pc, #556]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80038fe:	e028      	b.n	8003952 <HAL_RCC_OscConfig+0x592>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b85      	cmp	r3, #133	@ 0x85
 8003906:	d112      	bne.n	800392e <HAL_RCC_OscConfig+0x56e>
 8003908:	4b86      	ldr	r3, [pc, #536]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390c:	4a85      	ldr	r2, [pc, #532]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 800390e:	f043 0304 	orr.w	r3, r3, #4
 8003912:	6713      	str	r3, [r2, #112]	@ 0x70
 8003914:	4b83      	ldr	r3, [pc, #524]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003918:	4a82      	ldr	r2, [pc, #520]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 800391a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800391e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003920:	4b80      	ldr	r3, [pc, #512]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	4a7f      	ldr	r2, [pc, #508]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6713      	str	r3, [r2, #112]	@ 0x70
 800392c:	e011      	b.n	8003952 <HAL_RCC_OscConfig+0x592>
 800392e:	4b7d      	ldr	r3, [pc, #500]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003932:	4a7c      	ldr	r2, [pc, #496]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	6713      	str	r3, [r2, #112]	@ 0x70
 800393a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393e:	4a79      	ldr	r2, [pc, #484]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003940:	f023 0304 	bic.w	r3, r3, #4
 8003944:	6713      	str	r3, [r2, #112]	@ 0x70
 8003946:	4b77      	ldr	r3, [pc, #476]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394a:	4a76      	ldr	r2, [pc, #472]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 800394c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003950:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d015      	beq.n	8003986 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fd ffff 	bl	800195c <HAL_GetTick>
 800395e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003960:	e00a      	b.n	8003978 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fd fffb 	bl	800195c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e14c      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003978:	4b6a      	ldr	r3, [pc, #424]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ee      	beq.n	8003962 <HAL_RCC_OscConfig+0x5a2>
 8003984:	e014      	b.n	80039b0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fd ffe9 	bl	800195c <HAL_GetTick>
 800398a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800398c:	e00a      	b.n	80039a4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398e:	f7fd ffe5 	bl	800195c <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800399c:	4293      	cmp	r3, r2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e136      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039a4:	4b5f      	ldr	r3, [pc, #380]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ee      	bne.n	800398e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 812b 	beq.w	8003c10 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039c2:	2b18      	cmp	r3, #24
 80039c4:	f000 80bb 	beq.w	8003b3e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	f040 8095 	bne.w	8003afc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d2:	4b54      	ldr	r3, [pc, #336]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a53      	ldr	r2, [pc, #332]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80039d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039de:	f7fd ffbd 	bl	800195c <HAL_GetTick>
 80039e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e6:	f7fd ffb9 	bl	800195c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e10c      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039f8:	4b4a      	ldr	r3, [pc, #296]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f0      	bne.n	80039e6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a04:	4b47      	ldr	r3, [pc, #284]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003a06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a08:	4b47      	ldr	r3, [pc, #284]	@ (8003b28 <HAL_RCC_OscConfig+0x768>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	430a      	orrs	r2, r1
 8003a18:	4942      	ldr	r1, [pc, #264]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	628b      	str	r3, [r1, #40]	@ 0x28
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	3b01      	subs	r3, #1
 8003a24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	025b      	lsls	r3, r3, #9
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a46:	3b01      	subs	r3, #1
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003a4e:	4935      	ldr	r1, [pc, #212]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003a54:	4b33      	ldr	r3, [pc, #204]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a58:	4a32      	ldr	r2, [pc, #200]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003a5a:	f023 0301 	bic.w	r3, r3, #1
 8003a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a60:	4b30      	ldr	r3, [pc, #192]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003a62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a64:	4b31      	ldr	r3, [pc, #196]	@ (8003b2c <HAL_RCC_OscConfig+0x76c>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a6c:	00d2      	lsls	r2, r2, #3
 8003a6e:	492d      	ldr	r1, [pc, #180]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a74:	4b2b      	ldr	r3, [pc, #172]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	f023 020c 	bic.w	r2, r3, #12
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	4928      	ldr	r1, [pc, #160]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a86:	4b27      	ldr	r3, [pc, #156]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8a:	f023 0202 	bic.w	r2, r3, #2
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a92:	4924      	ldr	r1, [pc, #144]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a98:	4b22      	ldr	r3, [pc, #136]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	4a21      	ldr	r2, [pc, #132]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003ab6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003abc:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac0:	4a18      	ldr	r2, [pc, #96]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac8:	4b16      	ldr	r3, [pc, #88]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a15      	ldr	r2, [pc, #84]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fd ff42 	bl	800195c <HAL_GetTick>
 8003ad8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fd ff3e 	bl	800195c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e091      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aee:	4b0d      	ldr	r3, [pc, #52]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x71c>
 8003afa:	e089      	b.n	8003c10 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a08      	ldr	r2, [pc, #32]	@ (8003b24 <HAL_RCC_OscConfig+0x764>)
 8003b02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fd ff28 	bl	800195c <HAL_GetTick>
 8003b0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b0e:	e00f      	b.n	8003b30 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fd ff24 	bl	800195c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d908      	bls.n	8003b30 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e077      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
 8003b22:	bf00      	nop
 8003b24:	58024400 	.word	0x58024400
 8003b28:	fffffc0c 	.word	0xfffffc0c
 8003b2c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b30:	4b3a      	ldr	r3, [pc, #232]	@ (8003c1c <HAL_RCC_OscConfig+0x85c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e9      	bne.n	8003b10 <HAL_RCC_OscConfig+0x750>
 8003b3c:	e068      	b.n	8003c10 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b3e:	4b37      	ldr	r3, [pc, #220]	@ (8003c1c <HAL_RCC_OscConfig+0x85c>)
 8003b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b42:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b44:	4b35      	ldr	r3, [pc, #212]	@ (8003c1c <HAL_RCC_OscConfig+0x85c>)
 8003b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b48:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d031      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f003 0203 	and.w	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d12a      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d122      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d11a      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	0a5b      	lsrs	r3, r3, #9
 8003b84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d111      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	0c1b      	lsrs	r3, r3, #16
 8003b96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d108      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	0e1b      	lsrs	r3, r3, #24
 8003ba8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d001      	beq.n	8003bba <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e02b      	b.n	8003c12 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003bba:	4b18      	ldr	r3, [pc, #96]	@ (8003c1c <HAL_RCC_OscConfig+0x85c>)
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bbe:	08db      	lsrs	r3, r3, #3
 8003bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bc4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d01f      	beq.n	8003c10 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003bd0:	4b12      	ldr	r3, [pc, #72]	@ (8003c1c <HAL_RCC_OscConfig+0x85c>)
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	4a11      	ldr	r2, [pc, #68]	@ (8003c1c <HAL_RCC_OscConfig+0x85c>)
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bdc:	f7fd febe 	bl	800195c <HAL_GetTick>
 8003be0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003be2:	bf00      	nop
 8003be4:	f7fd feba 	bl	800195c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d0f9      	beq.n	8003be4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8003c1c <HAL_RCC_OscConfig+0x85c>)
 8003bf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <HAL_RCC_OscConfig+0x860>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003bfc:	00d2      	lsls	r2, r2, #3
 8003bfe:	4907      	ldr	r1, [pc, #28]	@ (8003c1c <HAL_RCC_OscConfig+0x85c>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003c04:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <HAL_RCC_OscConfig+0x85c>)
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	4a04      	ldr	r2, [pc, #16]	@ (8003c1c <HAL_RCC_OscConfig+0x85c>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3730      	adds	r7, #48	@ 0x30
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	58024400 	.word	0x58024400
 8003c20:	ffff0007 	.word	0xffff0007

08003c24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e19c      	b.n	8003f72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c38:	4b8a      	ldr	r3, [pc, #552]	@ (8003e64 <HAL_RCC_ClockConfig+0x240>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d910      	bls.n	8003c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c46:	4b87      	ldr	r3, [pc, #540]	@ (8003e64 <HAL_RCC_ClockConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 020f 	bic.w	r2, r3, #15
 8003c4e:	4985      	ldr	r1, [pc, #532]	@ (8003e64 <HAL_RCC_ClockConfig+0x240>)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b83      	ldr	r3, [pc, #524]	@ (8003e64 <HAL_RCC_ClockConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e184      	b.n	8003f72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d010      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	4b7b      	ldr	r3, [pc, #492]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d908      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c84:	4b78      	ldr	r3, [pc, #480]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	4975      	ldr	r1, [pc, #468]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d010      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	4b70      	ldr	r3, [pc, #448]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d908      	bls.n	8003cc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	496a      	ldr	r1, [pc, #424]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d010      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	4b64      	ldr	r3, [pc, #400]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d908      	bls.n	8003cf2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ce0:	4b61      	ldr	r3, [pc, #388]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	495e      	ldr	r1, [pc, #376]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d010      	beq.n	8003d20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	4b59      	ldr	r3, [pc, #356]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d908      	bls.n	8003d20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d0e:	4b56      	ldr	r3, [pc, #344]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	4953      	ldr	r1, [pc, #332]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d010      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	4b4d      	ldr	r3, [pc, #308]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d908      	bls.n	8003d4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f023 020f 	bic.w	r2, r3, #15
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4947      	ldr	r1, [pc, #284]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d055      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d5a:	4b43      	ldr	r3, [pc, #268]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	4940      	ldr	r1, [pc, #256]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d107      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d74:	4b3c      	ldr	r3, [pc, #240]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d121      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0f6      	b.n	8003f72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d107      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d8c:	4b36      	ldr	r3, [pc, #216]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d115      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0ea      	b.n	8003f72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d107      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003da4:	4b30      	ldr	r3, [pc, #192]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d109      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0de      	b.n	8003f72 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003db4:	4b2c      	ldr	r3, [pc, #176]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0d6      	b.n	8003f72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dc4:	4b28      	ldr	r3, [pc, #160]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f023 0207 	bic.w	r2, r3, #7
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4925      	ldr	r1, [pc, #148]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd6:	f7fd fdc1 	bl	800195c <HAL_GetTick>
 8003dda:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dde:	f7fd fdbd 	bl	800195c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0be      	b.n	8003f72 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d1eb      	bne.n	8003dde <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d010      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d208      	bcs.n	8003e34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e22:	4b11      	ldr	r3, [pc, #68]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f023 020f 	bic.w	r2, r3, #15
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	490e      	ldr	r1, [pc, #56]	@ (8003e68 <HAL_RCC_ClockConfig+0x244>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e34:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <HAL_RCC_ClockConfig+0x240>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d214      	bcs.n	8003e6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b08      	ldr	r3, [pc, #32]	@ (8003e64 <HAL_RCC_ClockConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 020f 	bic.w	r2, r3, #15
 8003e4a:	4906      	ldr	r1, [pc, #24]	@ (8003e64 <HAL_RCC_ClockConfig+0x240>)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b04      	ldr	r3, [pc, #16]	@ (8003e64 <HAL_RCC_ClockConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e086      	b.n	8003f72 <HAL_RCC_ClockConfig+0x34e>
 8003e64:	52002000 	.word	0x52002000
 8003e68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d010      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d208      	bcs.n	8003e9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e88:	4b3c      	ldr	r3, [pc, #240]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	4939      	ldr	r1, [pc, #228]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d010      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	4b34      	ldr	r3, [pc, #208]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d208      	bcs.n	8003ec8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eb6:	4b31      	ldr	r3, [pc, #196]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	492e      	ldr	r1, [pc, #184]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d010      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699a      	ldr	r2, [r3, #24]
 8003ed8:	4b28      	ldr	r3, [pc, #160]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d208      	bcs.n	8003ef6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ee4:	4b25      	ldr	r3, [pc, #148]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	4922      	ldr	r1, [pc, #136]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d010      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	4b1d      	ldr	r3, [pc, #116]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d208      	bcs.n	8003f24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f12:	4b1a      	ldr	r3, [pc, #104]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	4917      	ldr	r1, [pc, #92]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003f24:	f000 f834 	bl	8003f90 <HAL_RCC_GetSysClockFreq>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	4b14      	ldr	r3, [pc, #80]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	0a1b      	lsrs	r3, r3, #8
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	4912      	ldr	r1, [pc, #72]	@ (8003f80 <HAL_RCC_ClockConfig+0x35c>)
 8003f36:	5ccb      	ldrb	r3, [r1, r3]
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f40:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003f42:	4b0e      	ldr	r3, [pc, #56]	@ (8003f7c <HAL_RCC_ClockConfig+0x358>)
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8003f80 <HAL_RCC_ClockConfig+0x35c>)
 8003f4c:	5cd3      	ldrb	r3, [r2, r3]
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	fa22 f303 	lsr.w	r3, r2, r3
 8003f58:	4a0a      	ldr	r2, [pc, #40]	@ (8003f84 <HAL_RCC_ClockConfig+0x360>)
 8003f5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f88 <HAL_RCC_ClockConfig+0x364>)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f62:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <HAL_RCC_ClockConfig+0x368>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd fcae 	bl	80018c8 <HAL_InitTick>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	080093b8 	.word	0x080093b8
 8003f84:	24000004 	.word	0x24000004
 8003f88:	24000000 	.word	0x24000000
 8003f8c:	24000008 	.word	0x24000008

08003f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	@ 0x24
 8003f94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f96:	4bb3      	ldr	r3, [pc, #716]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f9e:	2b18      	cmp	r3, #24
 8003fa0:	f200 8155 	bhi.w	800424e <HAL_RCC_GetSysClockFreq+0x2be>
 8003fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fac <HAL_RCC_GetSysClockFreq+0x1c>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08004011 	.word	0x08004011
 8003fb0:	0800424f 	.word	0x0800424f
 8003fb4:	0800424f 	.word	0x0800424f
 8003fb8:	0800424f 	.word	0x0800424f
 8003fbc:	0800424f 	.word	0x0800424f
 8003fc0:	0800424f 	.word	0x0800424f
 8003fc4:	0800424f 	.word	0x0800424f
 8003fc8:	0800424f 	.word	0x0800424f
 8003fcc:	08004037 	.word	0x08004037
 8003fd0:	0800424f 	.word	0x0800424f
 8003fd4:	0800424f 	.word	0x0800424f
 8003fd8:	0800424f 	.word	0x0800424f
 8003fdc:	0800424f 	.word	0x0800424f
 8003fe0:	0800424f 	.word	0x0800424f
 8003fe4:	0800424f 	.word	0x0800424f
 8003fe8:	0800424f 	.word	0x0800424f
 8003fec:	0800403d 	.word	0x0800403d
 8003ff0:	0800424f 	.word	0x0800424f
 8003ff4:	0800424f 	.word	0x0800424f
 8003ff8:	0800424f 	.word	0x0800424f
 8003ffc:	0800424f 	.word	0x0800424f
 8004000:	0800424f 	.word	0x0800424f
 8004004:	0800424f 	.word	0x0800424f
 8004008:	0800424f 	.word	0x0800424f
 800400c:	08004043 	.word	0x08004043
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004010:	4b94      	ldr	r3, [pc, #592]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d009      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800401c:	4b91      	ldr	r3, [pc, #580]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	08db      	lsrs	r3, r3, #3
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	4a90      	ldr	r2, [pc, #576]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
 800402c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800402e:	e111      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004030:	4b8d      	ldr	r3, [pc, #564]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004032:	61bb      	str	r3, [r7, #24]
      break;
 8004034:	e10e      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004036:	4b8d      	ldr	r3, [pc, #564]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004038:	61bb      	str	r3, [r7, #24]
      break;
 800403a:	e10b      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800403c:	4b8c      	ldr	r3, [pc, #560]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800403e:	61bb      	str	r3, [r7, #24]
      break;
 8004040:	e108      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004042:	4b88      	ldr	r3, [pc, #544]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800404c:	4b85      	ldr	r3, [pc, #532]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800404e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004056:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004058:	4b82      	ldr	r3, [pc, #520]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004062:	4b80      	ldr	r3, [pc, #512]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004066:	08db      	lsrs	r3, r3, #3
 8004068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80e1 	beq.w	8004248 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b02      	cmp	r3, #2
 800408a:	f000 8083 	beq.w	8004194 <HAL_RCC_GetSysClockFreq+0x204>
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b02      	cmp	r3, #2
 8004092:	f200 80a1 	bhi.w	80041d8 <HAL_RCC_GetSysClockFreq+0x248>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0x114>
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d056      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x1c0>
 80040a2:	e099      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d02d      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	08db      	lsrs	r3, r3, #3
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	4a6b      	ldr	r2, [pc, #428]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
 80040c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	ee07 3a90 	vmov	s15, r3
 80040c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040da:	4b62      	ldr	r3, [pc, #392]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004274 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004106:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800410a:	e087      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004116:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004278 <HAL_RCC_GetSysClockFreq+0x2e8>
 800411a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800411e:	4b51      	ldr	r3, [pc, #324]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800412e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004132:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004274 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800413a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800413e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800414e:	e065      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800427c <HAL_RCC_GetSysClockFreq+0x2ec>
 800415e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004162:	4b40      	ldr	r3, [pc, #256]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004172:	ed97 6a02 	vldr	s12, [r7, #8]
 8004176:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004274 <HAL_RCC_GetSysClockFreq+0x2e4>
 800417a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004192:	e043      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004280 <HAL_RCC_GetSysClockFreq+0x2f0>
 80041a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80041ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004274 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041d6:	e021      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800427c <HAL_RCC_GetSysClockFreq+0x2ec>
 80041e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80041fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004274 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800420e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004216:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800421a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800421c:	4b11      	ldr	r3, [pc, #68]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004220:	0a5b      	lsrs	r3, r3, #9
 8004222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004226:	3301      	adds	r3, #1
 8004228:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	ee07 3a90 	vmov	s15, r3
 8004230:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004234:	edd7 6a07 	vldr	s13, [r7, #28]
 8004238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800423c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004240:	ee17 3a90 	vmov	r3, s15
 8004244:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004246:	e005      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]
      break;
 800424c:	e002      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800424e:	4b07      	ldr	r3, [pc, #28]	@ (800426c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004250:	61bb      	str	r3, [r7, #24]
      break;
 8004252:	bf00      	nop
  }

  return sysclockfreq;
 8004254:	69bb      	ldr	r3, [r7, #24]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3724      	adds	r7, #36	@ 0x24
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	58024400 	.word	0x58024400
 8004268:	03d09000 	.word	0x03d09000
 800426c:	003d0900 	.word	0x003d0900
 8004270:	007a1200 	.word	0x007a1200
 8004274:	46000000 	.word	0x46000000
 8004278:	4c742400 	.word	0x4c742400
 800427c:	4a742400 	.word	0x4a742400
 8004280:	4af42400 	.word	0x4af42400

08004284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800428a:	f7ff fe81 	bl	8003f90 <HAL_RCC_GetSysClockFreq>
 800428e:	4602      	mov	r2, r0
 8004290:	4b10      	ldr	r3, [pc, #64]	@ (80042d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	0a1b      	lsrs	r3, r3, #8
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	490f      	ldr	r1, [pc, #60]	@ (80042d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800429c:	5ccb      	ldrb	r3, [r1, r3]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	fa22 f303 	lsr.w	r3, r2, r3
 80042a6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80042a8:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	4a09      	ldr	r2, [pc, #36]	@ (80042d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80042b2:	5cd3      	ldrb	r3, [r2, r3]
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	fa22 f303 	lsr.w	r3, r2, r3
 80042be:	4a07      	ldr	r2, [pc, #28]	@ (80042dc <HAL_RCC_GetHCLKFreq+0x58>)
 80042c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042c2:	4a07      	ldr	r2, [pc, #28]	@ (80042e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80042c8:	4b04      	ldr	r3, [pc, #16]	@ (80042dc <HAL_RCC_GetHCLKFreq+0x58>)
 80042ca:	681b      	ldr	r3, [r3, #0]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	58024400 	.word	0x58024400
 80042d8:	080093b8 	.word	0x080093b8
 80042dc:	24000004 	.word	0x24000004
 80042e0:	24000000 	.word	0x24000000

080042e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80042e8:	f7ff ffcc 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	091b      	lsrs	r3, r3, #4
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	4904      	ldr	r1, [pc, #16]	@ (800430c <HAL_RCC_GetPCLK1Freq+0x28>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004304:	4618      	mov	r0, r3
 8004306:	bd80      	pop	{r7, pc}
 8004308:	58024400 	.word	0x58024400
 800430c:	080093b8 	.word	0x080093b8

08004310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004314:	f7ff ffb6 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 8004318:	4602      	mov	r2, r0
 800431a:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <HAL_RCC_GetPCLK2Freq+0x24>)
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	0a1b      	lsrs	r3, r3, #8
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	4904      	ldr	r1, [pc, #16]	@ (8004338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004326:	5ccb      	ldrb	r3, [r1, r3]
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	58024400 	.word	0x58024400
 8004338:	080093b8 	.word	0x080093b8

0800433c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800433c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004340:	b0c8      	sub	sp, #288	@ 0x120
 8004342:	af00      	add	r7, sp, #0
 8004344:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004348:	2300      	movs	r3, #0
 800434a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800434e:	2300      	movs	r3, #0
 8004350:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004360:	2500      	movs	r5, #0
 8004362:	ea54 0305 	orrs.w	r3, r4, r5
 8004366:	d049      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800436c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004372:	d02f      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004374:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004378:	d828      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800437a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800437e:	d01a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004380:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004384:	d822      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800438a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800438e:	d007      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004390:	e01c      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004392:	4ba7      	ldr	r3, [pc, #668]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004396:	4aa6      	ldr	r2, [pc, #664]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800439c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800439e:	e01a      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043a4:	3308      	adds	r3, #8
 80043a6:	2102      	movs	r1, #2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f002 fa6d 	bl	8006888 <RCCEx_PLL2_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043b4:	e00f      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ba:	3328      	adds	r3, #40	@ 0x28
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f002 fb14 	bl	80069ec <RCCEx_PLL3_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043ca:	e004      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80043d2:	e000      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80043d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10a      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80043de:	4b94      	ldr	r3, [pc, #592]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80043e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ec:	4a90      	ldr	r2, [pc, #576]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043ee:	430b      	orrs	r3, r1
 80043f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80043f2:	e003      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004408:	f04f 0900 	mov.w	r9, #0
 800440c:	ea58 0309 	orrs.w	r3, r8, r9
 8004410:	d047      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004418:	2b04      	cmp	r3, #4
 800441a:	d82a      	bhi.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800441c:	a201      	add	r2, pc, #4	@ (adr r2, 8004424 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004439 	.word	0x08004439
 8004428:	08004447 	.word	0x08004447
 800442c:	0800445d 	.word	0x0800445d
 8004430:	0800447b 	.word	0x0800447b
 8004434:	0800447b 	.word	0x0800447b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004438:	4b7d      	ldr	r3, [pc, #500]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	4a7c      	ldr	r2, [pc, #496]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800443e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004444:	e01a      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800444a:	3308      	adds	r3, #8
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f002 fa1a 	bl	8006888 <RCCEx_PLL2_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800445a:	e00f      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004460:	3328      	adds	r3, #40	@ 0x28
 8004462:	2100      	movs	r1, #0
 8004464:	4618      	mov	r0, r3
 8004466:	f002 fac1 	bl	80069ec <RCCEx_PLL3_Config>
 800446a:	4603      	mov	r3, r0
 800446c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004470:	e004      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004478:	e000      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800447a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004484:	4b6a      	ldr	r3, [pc, #424]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004488:	f023 0107 	bic.w	r1, r3, #7
 800448c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004492:	4a67      	ldr	r2, [pc, #412]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004494:	430b      	orrs	r3, r1
 8004496:	6513      	str	r3, [r2, #80]	@ 0x50
 8004498:	e003      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800449e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80044a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80044ae:	f04f 0b00 	mov.w	fp, #0
 80044b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80044b6:	d054      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80044b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044be:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80044c2:	d036      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80044c4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80044c8:	d82f      	bhi.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80044ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ce:	d032      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80044d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d4:	d829      	bhi.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80044d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80044d8:	d02f      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80044da:	2bc0      	cmp	r3, #192	@ 0xc0
 80044dc:	d825      	bhi.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80044de:	2b80      	cmp	r3, #128	@ 0x80
 80044e0:	d018      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80044e2:	2b80      	cmp	r3, #128	@ 0x80
 80044e4:	d821      	bhi.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80044ea:	2b40      	cmp	r3, #64	@ 0x40
 80044ec:	d007      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80044ee:	e01c      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	4a4e      	ldr	r2, [pc, #312]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80044fc:	e01e      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004502:	3308      	adds	r3, #8
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f002 f9be 	bl	8006888 <RCCEx_PLL2_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004512:	e013      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004518:	3328      	adds	r3, #40	@ 0x28
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f002 fa65 	bl	80069ec <RCCEx_PLL3_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004528:	e008      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004530:	e004      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004532:	bf00      	nop
 8004534:	e002      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004536:	bf00      	nop
 8004538:	e000      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800453a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800453c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004544:	4b3a      	ldr	r3, [pc, #232]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004548:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800454c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004552:	4a37      	ldr	r2, [pc, #220]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004554:	430b      	orrs	r3, r1
 8004556:	6513      	str	r3, [r2, #80]	@ 0x50
 8004558:	e003      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800455e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800456e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004572:	2300      	movs	r3, #0
 8004574:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004578:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800457c:	460b      	mov	r3, r1
 800457e:	4313      	orrs	r3, r2
 8004580:	d05c      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004588:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800458c:	d03b      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800458e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004592:	d834      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004598:	d037      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800459a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800459e:	d82e      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80045a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80045a4:	d033      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80045a6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80045aa:	d828      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80045ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045b0:	d01a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80045b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045b6:	d822      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80045bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045c0:	d007      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80045c2:	e01c      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	4a19      	ldr	r2, [pc, #100]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80045d0:	e01e      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045d6:	3308      	adds	r3, #8
 80045d8:	2100      	movs	r1, #0
 80045da:	4618      	mov	r0, r3
 80045dc:	f002 f954 	bl	8006888 <RCCEx_PLL2_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80045e6:	e013      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ec:	3328      	adds	r3, #40	@ 0x28
 80045ee:	2100      	movs	r1, #0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f002 f9fb 	bl	80069ec <RCCEx_PLL3_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80045fc:	e008      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004604:	e004      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004606:	bf00      	nop
 8004608:	e002      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800460a:	bf00      	nop
 800460c:	e000      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800460e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004610:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10d      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800461a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004626:	4a02      	ldr	r2, [pc, #8]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004628:	430b      	orrs	r3, r1
 800462a:	6513      	str	r3, [r2, #80]	@ 0x50
 800462c:	e006      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800462e:	bf00      	nop
 8004630:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004638:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800463c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004648:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800464c:	2300      	movs	r3, #0
 800464e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004652:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004656:	460b      	mov	r3, r1
 8004658:	4313      	orrs	r3, r2
 800465a:	d03a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800465c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	2b30      	cmp	r3, #48	@ 0x30
 8004664:	d01f      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004666:	2b30      	cmp	r3, #48	@ 0x30
 8004668:	d819      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800466a:	2b20      	cmp	r3, #32
 800466c:	d00c      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800466e:	2b20      	cmp	r3, #32
 8004670:	d815      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d019      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004676:	2b10      	cmp	r3, #16
 8004678:	d111      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800467a:	4bae      	ldr	r3, [pc, #696]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467e:	4aad      	ldr	r2, [pc, #692]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004684:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004686:	e011      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800468c:	3308      	adds	r3, #8
 800468e:	2102      	movs	r1, #2
 8004690:	4618      	mov	r0, r3
 8004692:	f002 f8f9 	bl	8006888 <RCCEx_PLL2_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800469c:	e006      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80046a4:	e002      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80046a6:	bf00      	nop
 80046a8:	e000      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80046aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80046b4:	4b9f      	ldr	r3, [pc, #636]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80046bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c2:	4a9c      	ldr	r2, [pc, #624]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046c4:	430b      	orrs	r3, r1
 80046c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046c8:	e003      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80046d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80046de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80046e2:	2300      	movs	r3, #0
 80046e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80046e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4313      	orrs	r3, r2
 80046f0:	d051      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80046f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046fc:	d035      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80046fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004702:	d82e      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004704:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004708:	d031      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800470a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800470e:	d828      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004714:	d01a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800471a:	d822      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004724:	d007      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004726:	e01c      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004728:	4b82      	ldr	r3, [pc, #520]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800472a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472c:	4a81      	ldr	r2, [pc, #516]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800472e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004732:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004734:	e01c      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800473a:	3308      	adds	r3, #8
 800473c:	2100      	movs	r1, #0
 800473e:	4618      	mov	r0, r3
 8004740:	f002 f8a2 	bl	8006888 <RCCEx_PLL2_Config>
 8004744:	4603      	mov	r3, r0
 8004746:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800474a:	e011      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800474c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004750:	3328      	adds	r3, #40	@ 0x28
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f002 f949 	bl	80069ec <RCCEx_PLL3_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004760:	e006      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004768:	e002      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800476a:	bf00      	nop
 800476c:	e000      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800476e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004770:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10a      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004778:	4b6e      	ldr	r3, [pc, #440]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800477a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800477c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004786:	4a6b      	ldr	r2, [pc, #428]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004788:	430b      	orrs	r3, r1
 800478a:	6513      	str	r3, [r2, #80]	@ 0x50
 800478c:	e003      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004792:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80047a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047a6:	2300      	movs	r3, #0
 80047a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80047ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80047b0:	460b      	mov	r3, r1
 80047b2:	4313      	orrs	r3, r2
 80047b4:	d053      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80047b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047c0:	d033      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80047c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047c6:	d82c      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80047c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047cc:	d02f      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80047ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047d2:	d826      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80047d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047d8:	d02b      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80047da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047de:	d820      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80047e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047e4:	d012      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80047e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047ea:	d81a      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d022      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f4:	d115      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047fa:	3308      	adds	r3, #8
 80047fc:	2101      	movs	r1, #1
 80047fe:	4618      	mov	r0, r3
 8004800:	f002 f842 	bl	8006888 <RCCEx_PLL2_Config>
 8004804:	4603      	mov	r3, r0
 8004806:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800480a:	e015      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800480c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004810:	3328      	adds	r3, #40	@ 0x28
 8004812:	2101      	movs	r1, #1
 8004814:	4618      	mov	r0, r3
 8004816:	f002 f8e9 	bl	80069ec <RCCEx_PLL3_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004820:	e00a      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004828:	e006      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800482a:	bf00      	nop
 800482c:	e004      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800482e:	bf00      	nop
 8004830:	e002      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004832:	bf00      	nop
 8004834:	e000      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004838:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004840:	4b3c      	ldr	r3, [pc, #240]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004844:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800484c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800484e:	4a39      	ldr	r2, [pc, #228]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004850:	430b      	orrs	r3, r1
 8004852:	6513      	str	r3, [r2, #80]	@ 0x50
 8004854:	e003      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004856:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800485a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800485e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800486a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800486e:	2300      	movs	r3, #0
 8004870:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004874:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004878:	460b      	mov	r3, r1
 800487a:	4313      	orrs	r3, r2
 800487c:	d060      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800487e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004886:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800488a:	d039      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800488c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004890:	d832      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004892:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004896:	d035      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800489c:	d82c      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800489e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a2:	d031      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80048a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a8:	d826      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80048aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048ae:	d02d      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80048b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048b4:	d820      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80048b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048ba:	d012      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80048bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048c0:	d81a      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d024      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80048c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048ca:	d115      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048d0:	3308      	adds	r3, #8
 80048d2:	2101      	movs	r1, #1
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 ffd7 	bl	8006888 <RCCEx_PLL2_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80048e0:	e017      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048e6:	3328      	adds	r3, #40	@ 0x28
 80048e8:	2101      	movs	r1, #1
 80048ea:	4618      	mov	r0, r3
 80048ec:	f002 f87e 	bl	80069ec <RCCEx_PLL3_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80048f6:	e00c      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048fe:	e008      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004900:	bf00      	nop
 8004902:	e006      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004904:	bf00      	nop
 8004906:	e004      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004908:	bf00      	nop
 800490a:	e002      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800490c:	bf00      	nop
 800490e:	e000      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004912:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10e      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800491a:	4b06      	ldr	r3, [pc, #24]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800491c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800492a:	4a02      	ldr	r2, [pc, #8]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800492c:	430b      	orrs	r3, r1
 800492e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004930:	e006      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004932:	bf00      	nop
 8004934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800493c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800494c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004950:	2300      	movs	r3, #0
 8004952:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004956:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800495a:	460b      	mov	r3, r1
 800495c:	4313      	orrs	r3, r2
 800495e:	d037      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004964:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800496a:	d00e      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800496c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004970:	d816      	bhi.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d018      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800497a:	d111      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800497c:	4bc4      	ldr	r3, [pc, #784]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	4ac3      	ldr	r2, [pc, #780]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004988:	e00f      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800498a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800498e:	3308      	adds	r3, #8
 8004990:	2101      	movs	r1, #1
 8004992:	4618      	mov	r0, r3
 8004994:	f001 ff78 	bl	8006888 <RCCEx_PLL2_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800499e:	e004      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80049a6:	e000      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80049a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049b2:	4bb7      	ldr	r3, [pc, #732]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049c0:	4ab3      	ldr	r2, [pc, #716]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049c2:	430b      	orrs	r3, r1
 80049c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80049c6:	e003      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80049d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80049dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80049e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4313      	orrs	r3, r2
 80049ee:	d039      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80049f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d81c      	bhi.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80049fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004a00 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a3d 	.word	0x08004a3d
 8004a04:	08004a11 	.word	0x08004a11
 8004a08:	08004a1f 	.word	0x08004a1f
 8004a0c:	08004a3d 	.word	0x08004a3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a10:	4b9f      	ldr	r3, [pc, #636]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a14:	4a9e      	ldr	r2, [pc, #632]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a1c:	e00f      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a22:	3308      	adds	r3, #8
 8004a24:	2102      	movs	r1, #2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 ff2e 	bl	8006888 <RCCEx_PLL2_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a32:	e004      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a3a:	e000      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a46:	4b92      	ldr	r3, [pc, #584]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a4a:	f023 0103 	bic.w	r1, r3, #3
 8004a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a54:	4a8e      	ldr	r2, [pc, #568]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a56:	430b      	orrs	r3, r1
 8004a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a5a:	e003      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004a70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a74:	2300      	movs	r3, #0
 8004a76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f000 8099 	beq.w	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a86:	4b83      	ldr	r3, [pc, #524]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a82      	ldr	r2, [pc, #520]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a92:	f7fc ff63 	bl	800195c <HAL_GetTick>
 8004a96:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9c:	f7fc ff5e 	bl	800195c <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b64      	cmp	r3, #100	@ 0x64
 8004aaa:	d903      	bls.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ab2:	e005      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ab4:	4b77      	ldr	r3, [pc, #476]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0ed      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004ac0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d173      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ac8:	4b71      	ldr	r3, [pc, #452]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004aca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ad0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ad4:	4053      	eors	r3, r2
 8004ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d015      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ade:	4b6c      	ldr	r3, [pc, #432]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004aea:	4b69      	ldr	r3, [pc, #420]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aee:	4a68      	ldr	r2, [pc, #416]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004af6:	4b66      	ldr	r3, [pc, #408]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afa:	4a65      	ldr	r2, [pc, #404]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004afc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b00:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b02:	4a63      	ldr	r2, [pc, #396]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b08:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b16:	d118      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fc ff20 	bl	800195c <HAL_GetTick>
 8004b1c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b20:	e00d      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b22:	f7fc ff1b 	bl	800195c <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004b2c:	1ad2      	subs	r2, r2, r3
 8004b2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d903      	bls.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004b3c:	e005      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b3e:	4b54      	ldr	r3, [pc, #336]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0eb      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004b4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d129      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b62:	d10e      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004b64:	4b4a      	ldr	r3, [pc, #296]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b74:	091a      	lsrs	r2, r3, #4
 8004b76:	4b48      	ldr	r3, [pc, #288]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	4a45      	ldr	r2, [pc, #276]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6113      	str	r3, [r2, #16]
 8004b80:	e005      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004b82:	4b43      	ldr	r3, [pc, #268]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	4a42      	ldr	r2, [pc, #264]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b8c:	6113      	str	r3, [r2, #16]
 8004b8e:	4b40      	ldr	r3, [pc, #256]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b90:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ba6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004baa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004bae:	e003      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f002 0301 	and.w	r3, r2, #1
 8004bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004bce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f000 8090 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004be2:	2b28      	cmp	r3, #40	@ 0x28
 8004be4:	d870      	bhi.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004be6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bec <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bec:	08004cd1 	.word	0x08004cd1
 8004bf0:	08004cc9 	.word	0x08004cc9
 8004bf4:	08004cc9 	.word	0x08004cc9
 8004bf8:	08004cc9 	.word	0x08004cc9
 8004bfc:	08004cc9 	.word	0x08004cc9
 8004c00:	08004cc9 	.word	0x08004cc9
 8004c04:	08004cc9 	.word	0x08004cc9
 8004c08:	08004cc9 	.word	0x08004cc9
 8004c0c:	08004c9d 	.word	0x08004c9d
 8004c10:	08004cc9 	.word	0x08004cc9
 8004c14:	08004cc9 	.word	0x08004cc9
 8004c18:	08004cc9 	.word	0x08004cc9
 8004c1c:	08004cc9 	.word	0x08004cc9
 8004c20:	08004cc9 	.word	0x08004cc9
 8004c24:	08004cc9 	.word	0x08004cc9
 8004c28:	08004cc9 	.word	0x08004cc9
 8004c2c:	08004cb3 	.word	0x08004cb3
 8004c30:	08004cc9 	.word	0x08004cc9
 8004c34:	08004cc9 	.word	0x08004cc9
 8004c38:	08004cc9 	.word	0x08004cc9
 8004c3c:	08004cc9 	.word	0x08004cc9
 8004c40:	08004cc9 	.word	0x08004cc9
 8004c44:	08004cc9 	.word	0x08004cc9
 8004c48:	08004cc9 	.word	0x08004cc9
 8004c4c:	08004cd1 	.word	0x08004cd1
 8004c50:	08004cc9 	.word	0x08004cc9
 8004c54:	08004cc9 	.word	0x08004cc9
 8004c58:	08004cc9 	.word	0x08004cc9
 8004c5c:	08004cc9 	.word	0x08004cc9
 8004c60:	08004cc9 	.word	0x08004cc9
 8004c64:	08004cc9 	.word	0x08004cc9
 8004c68:	08004cc9 	.word	0x08004cc9
 8004c6c:	08004cd1 	.word	0x08004cd1
 8004c70:	08004cc9 	.word	0x08004cc9
 8004c74:	08004cc9 	.word	0x08004cc9
 8004c78:	08004cc9 	.word	0x08004cc9
 8004c7c:	08004cc9 	.word	0x08004cc9
 8004c80:	08004cc9 	.word	0x08004cc9
 8004c84:	08004cc9 	.word	0x08004cc9
 8004c88:	08004cc9 	.word	0x08004cc9
 8004c8c:	08004cd1 	.word	0x08004cd1
 8004c90:	58024400 	.word	0x58024400
 8004c94:	58024800 	.word	0x58024800
 8004c98:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f001 fdef 	bl	8006888 <RCCEx_PLL2_Config>
 8004caa:	4603      	mov	r3, r0
 8004cac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004cb0:	e00f      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb6:	3328      	adds	r3, #40	@ 0x28
 8004cb8:	2101      	movs	r1, #1
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f001 fe96 	bl	80069ec <RCCEx_PLL3_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004cc6:	e004      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004cce:	e000      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10b      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004cda:	4bc0      	ldr	r3, [pc, #768]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cde:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cea:	4abc      	ldr	r2, [pc, #752]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004cec:	430b      	orrs	r3, r1
 8004cee:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cf0:	e003      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cf6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	f002 0302 	and.w	r3, r2, #2
 8004d06:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004d10:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004d14:	460b      	mov	r3, r1
 8004d16:	4313      	orrs	r3, r2
 8004d18:	d043      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d824      	bhi.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004d26:	a201      	add	r2, pc, #4	@ (adr r2, 8004d2c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d79 	.word	0x08004d79
 8004d30:	08004d45 	.word	0x08004d45
 8004d34:	08004d5b 	.word	0x08004d5b
 8004d38:	08004d79 	.word	0x08004d79
 8004d3c:	08004d79 	.word	0x08004d79
 8004d40:	08004d79 	.word	0x08004d79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d48:	3308      	adds	r3, #8
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f001 fd9b 	bl	8006888 <RCCEx_PLL2_Config>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d58:	e00f      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d5e:	3328      	adds	r3, #40	@ 0x28
 8004d60:	2101      	movs	r1, #1
 8004d62:	4618      	mov	r0, r3
 8004d64:	f001 fe42 	bl	80069ec <RCCEx_PLL3_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d6e:	e004      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d76:	e000      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10b      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d82:	4b96      	ldr	r3, [pc, #600]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d86:	f023 0107 	bic.w	r1, r3, #7
 8004d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d92:	4a92      	ldr	r2, [pc, #584]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d98:	e003      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d9e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f002 0304 	and.w	r3, r2, #4
 8004dae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004db2:	2300      	movs	r3, #0
 8004db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004db8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	d043      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dca:	2b05      	cmp	r3, #5
 8004dcc:	d824      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004dce:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004e21 	.word	0x08004e21
 8004dd8:	08004ded 	.word	0x08004ded
 8004ddc:	08004e03 	.word	0x08004e03
 8004de0:	08004e21 	.word	0x08004e21
 8004de4:	08004e21 	.word	0x08004e21
 8004de8:	08004e21 	.word	0x08004e21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004df0:	3308      	adds	r3, #8
 8004df2:	2101      	movs	r1, #1
 8004df4:	4618      	mov	r0, r3
 8004df6:	f001 fd47 	bl	8006888 <RCCEx_PLL2_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004e00:	e00f      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e06:	3328      	adds	r3, #40	@ 0x28
 8004e08:	2101      	movs	r1, #1
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f001 fdee 	bl	80069ec <RCCEx_PLL3_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004e16:	e004      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e1e:	e000      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10b      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e2a:	4b6c      	ldr	r3, [pc, #432]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2e:	f023 0107 	bic.w	r1, r3, #7
 8004e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e3a:	4a68      	ldr	r2, [pc, #416]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e40:	e003      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e46:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	f002 0320 	and.w	r3, r2, #32
 8004e56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e64:	460b      	mov	r3, r1
 8004e66:	4313      	orrs	r3, r2
 8004e68:	d055      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e76:	d033      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e7c:	d82c      	bhi.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e82:	d02f      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e88:	d826      	bhi.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004e8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e8e:	d02b      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004e90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e94:	d820      	bhi.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e9a:	d012      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004e9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ea0:	d81a      	bhi.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d022      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004ea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eaa:	d115      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 fce7 	bl	8006888 <RCCEx_PLL2_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ec0:	e015      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ec6:	3328      	adds	r3, #40	@ 0x28
 8004ec8:	2102      	movs	r1, #2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f001 fd8e 	bl	80069ec <RCCEx_PLL3_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ed6:	e00a      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ede:	e006      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004ee0:	bf00      	nop
 8004ee2:	e004      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004ee4:	bf00      	nop
 8004ee6:	e002      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10b      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ef6:	4b39      	ldr	r3, [pc, #228]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f06:	4a35      	ldr	r2, [pc, #212]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f0c:	e003      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f26:	2300      	movs	r3, #0
 8004f28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4313      	orrs	r3, r2
 8004f34:	d058      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f3e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f42:	d033      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004f44:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f48:	d82c      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f4e:	d02f      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f54:	d826      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004f56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f5a:	d02b      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004f5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f60:	d820      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004f62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f66:	d012      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f6c:	d81a      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d022      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f76:	d115      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4618      	mov	r0, r3
 8004f82:	f001 fc81 	bl	8006888 <RCCEx_PLL2_Config>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f8c:	e015      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f92:	3328      	adds	r3, #40	@ 0x28
 8004f94:	2102      	movs	r1, #2
 8004f96:	4618      	mov	r0, r3
 8004f98:	f001 fd28 	bl	80069ec <RCCEx_PLL3_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004fa2:	e00a      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004faa:	e006      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004fac:	bf00      	nop
 8004fae:	e004      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004fb0:	bf00      	nop
 8004fb2:	e002      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004fb4:	bf00      	nop
 8004fb6:	e000      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10e      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fc2:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fd2:	4a02      	ldr	r2, [pc, #8]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fd8:	e006      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004fda:	bf00      	nop
 8004fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fe4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004ff4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ffe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005002:	460b      	mov	r3, r1
 8005004:	4313      	orrs	r3, r2
 8005006:	d055      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800500c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005010:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005014:	d033      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005016:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800501a:	d82c      	bhi.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800501c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005020:	d02f      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005022:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005026:	d826      	bhi.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005028:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800502c:	d02b      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800502e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005032:	d820      	bhi.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005034:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005038:	d012      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800503a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800503e:	d81a      	bhi.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d022      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005044:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005048:	d115      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800504a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800504e:	3308      	adds	r3, #8
 8005050:	2100      	movs	r1, #0
 8005052:	4618      	mov	r0, r3
 8005054:	f001 fc18 	bl	8006888 <RCCEx_PLL2_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800505e:	e015      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005060:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005064:	3328      	adds	r3, #40	@ 0x28
 8005066:	2102      	movs	r1, #2
 8005068:	4618      	mov	r0, r3
 800506a:	f001 fcbf 	bl	80069ec <RCCEx_PLL3_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005074:	e00a      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800507c:	e006      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800507e:	bf00      	nop
 8005080:	e004      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005082:	bf00      	nop
 8005084:	e002      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005086:	bf00      	nop
 8005088:	e000      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800508a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800508c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005094:	4ba1      	ldr	r3, [pc, #644]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005098:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800509c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050a4:	4a9d      	ldr	r2, [pc, #628]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050a6:	430b      	orrs	r3, r1
 80050a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050aa:	e003      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80050b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f002 0308 	and.w	r3, r2, #8
 80050c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050c4:	2300      	movs	r3, #0
 80050c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80050ce:	460b      	mov	r3, r1
 80050d0:	4313      	orrs	r3, r2
 80050d2:	d01e      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80050d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e0:	d10c      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050e6:	3328      	adds	r3, #40	@ 0x28
 80050e8:	2102      	movs	r1, #2
 80050ea:	4618      	mov	r0, r3
 80050ec:	f001 fc7e 	bl	80069ec <RCCEx_PLL3_Config>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80050fc:	4b87      	ldr	r3, [pc, #540]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005100:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800510c:	4a83      	ldr	r2, [pc, #524]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800510e:	430b      	orrs	r3, r1
 8005110:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005112:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	f002 0310 	and.w	r3, r2, #16
 800511e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005122:	2300      	movs	r3, #0
 8005124:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005128:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800512c:	460b      	mov	r3, r1
 800512e:	4313      	orrs	r3, r2
 8005130:	d01e      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005136:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800513a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800513e:	d10c      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005144:	3328      	adds	r3, #40	@ 0x28
 8005146:	2102      	movs	r1, #2
 8005148:	4618      	mov	r0, r3
 800514a:	f001 fc4f 	bl	80069ec <RCCEx_PLL3_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800515a:	4b70      	ldr	r3, [pc, #448]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005166:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800516a:	4a6c      	ldr	r2, [pc, #432]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800516c:	430b      	orrs	r3, r1
 800516e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800517c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005180:	2300      	movs	r3, #0
 8005182:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005186:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800518a:	460b      	mov	r3, r1
 800518c:	4313      	orrs	r3, r2
 800518e:	d03e      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005194:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800519c:	d022      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800519e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051a2:	d81b      	bhi.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ac:	d00b      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80051ae:	e015      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051b4:	3308      	adds	r3, #8
 80051b6:	2100      	movs	r1, #0
 80051b8:	4618      	mov	r0, r3
 80051ba:	f001 fb65 	bl	8006888 <RCCEx_PLL2_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80051c4:	e00f      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051ca:	3328      	adds	r3, #40	@ 0x28
 80051cc:	2102      	movs	r1, #2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 fc0c 	bl	80069ec <RCCEx_PLL3_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80051da:	e004      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80051e2:	e000      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80051e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10b      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051ee:	4b4b      	ldr	r3, [pc, #300]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80051f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80051f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80051fe:	4a47      	ldr	r2, [pc, #284]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005200:	430b      	orrs	r3, r1
 8005202:	6593      	str	r3, [r2, #88]	@ 0x58
 8005204:	e003      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005206:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800520a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800520e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800521a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800521c:	2300      	movs	r3, #0
 800521e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005220:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005224:	460b      	mov	r3, r1
 8005226:	4313      	orrs	r3, r2
 8005228:	d03b      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800522a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005232:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005236:	d01f      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005238:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800523c:	d818      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800523e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005242:	d003      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005244:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005248:	d007      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800524a:	e011      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800524c:	4b33      	ldr	r3, [pc, #204]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	4a32      	ldr	r2, [pc, #200]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005258:	e00f      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800525a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800525e:	3328      	adds	r3, #40	@ 0x28
 8005260:	2101      	movs	r1, #1
 8005262:	4618      	mov	r0, r3
 8005264:	f001 fbc2 	bl	80069ec <RCCEx_PLL3_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800526e:	e004      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005276:	e000      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10b      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005282:	4b26      	ldr	r3, [pc, #152]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005286:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800528a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005292:	4a22      	ldr	r2, [pc, #136]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005294:	430b      	orrs	r3, r1
 8005296:	6553      	str	r3, [r2, #84]	@ 0x54
 8005298:	e003      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800529e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052aa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80052ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80052b0:	2300      	movs	r3, #0
 80052b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80052b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80052b8:	460b      	mov	r3, r1
 80052ba:	4313      	orrs	r3, r2
 80052bc:	d034      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80052be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80052c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052cc:	d007      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80052ce:	e011      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d0:	4b12      	ldr	r3, [pc, #72]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80052d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d4:	4a11      	ldr	r2, [pc, #68]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80052d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80052dc:	e00e      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052e2:	3308      	adds	r3, #8
 80052e4:	2102      	movs	r1, #2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 face 	bl	8006888 <RCCEx_PLL2_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80052f2:	e003      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80052fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10d      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005304:	4b05      	ldr	r3, [pc, #20]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005308:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800530c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005312:	4a02      	ldr	r2, [pc, #8]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005314:	430b      	orrs	r3, r1
 8005316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005318:	e006      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800531a:	bf00      	nop
 800531c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005320:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005324:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005336:	2300      	movs	r3, #0
 8005338:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800533a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800533e:	460b      	mov	r3, r1
 8005340:	4313      	orrs	r3, r2
 8005342:	d00c      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005348:	3328      	adds	r3, #40	@ 0x28
 800534a:	2102      	movs	r1, #2
 800534c:	4618      	mov	r0, r3
 800534e:	f001 fb4d 	bl	80069ec <RCCEx_PLL3_Config>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800535e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800536a:	663b      	str	r3, [r7, #96]	@ 0x60
 800536c:	2300      	movs	r3, #0
 800536e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005370:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005374:	460b      	mov	r3, r1
 8005376:	4313      	orrs	r3, r2
 8005378:	d038      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800537a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005382:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005386:	d018      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005388:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800538c:	d811      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800538e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005392:	d014      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005398:	d80b      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d011      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800539e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053a2:	d106      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a4:	4bc3      	ldr	r3, [pc, #780]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	4ac2      	ldr	r2, [pc, #776]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80053aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80053b0:	e008      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053b8:	e004      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80053ba:	bf00      	nop
 80053bc:	e002      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80053be:	bf00      	nop
 80053c0:	e000      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80053c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053cc:	4bb9      	ldr	r3, [pc, #740]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80053ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053dc:	4ab5      	ldr	r2, [pc, #724]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80053de:	430b      	orrs	r3, r1
 80053e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80053e2:	e003      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80053f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053fa:	2300      	movs	r3, #0
 80053fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005402:	460b      	mov	r3, r1
 8005404:	4313      	orrs	r3, r2
 8005406:	d009      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005408:	4baa      	ldr	r3, [pc, #680]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800540a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800540c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005414:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005416:	4aa7      	ldr	r2, [pc, #668]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005418:	430b      	orrs	r3, r1
 800541a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800541c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005428:	653b      	str	r3, [r7, #80]	@ 0x50
 800542a:	2300      	movs	r3, #0
 800542c:	657b      	str	r3, [r7, #84]	@ 0x54
 800542e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005432:	460b      	mov	r3, r1
 8005434:	4313      	orrs	r3, r2
 8005436:	d009      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005438:	4b9e      	ldr	r3, [pc, #632]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800543a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005446:	4a9b      	ldr	r2, [pc, #620]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005448:	430b      	orrs	r3, r1
 800544a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800544c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800545a:	2300      	movs	r3, #0
 800545c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800545e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005462:	460b      	mov	r3, r1
 8005464:	4313      	orrs	r3, r2
 8005466:	d009      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005468:	4b92      	ldr	r3, [pc, #584]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800546a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005476:	4a8f      	ldr	r2, [pc, #572]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005478:	430b      	orrs	r3, r1
 800547a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800547c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005484:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005488:	643b      	str	r3, [r7, #64]	@ 0x40
 800548a:	2300      	movs	r3, #0
 800548c:	647b      	str	r3, [r7, #68]	@ 0x44
 800548e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005492:	460b      	mov	r3, r1
 8005494:	4313      	orrs	r3, r2
 8005496:	d00e      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005498:	4b86      	ldr	r3, [pc, #536]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	4a85      	ldr	r2, [pc, #532]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800549e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80054a2:	6113      	str	r3, [r2, #16]
 80054a4:	4b83      	ldr	r3, [pc, #524]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80054a6:	6919      	ldr	r1, [r3, #16]
 80054a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80054b0:	4a80      	ldr	r2, [pc, #512]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80054b2:	430b      	orrs	r3, r1
 80054b4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80054b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80054c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054c4:	2300      	movs	r3, #0
 80054c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80054cc:	460b      	mov	r3, r1
 80054ce:	4313      	orrs	r3, r2
 80054d0:	d009      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80054d2:	4b78      	ldr	r3, [pc, #480]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80054d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80054da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e0:	4a74      	ldr	r2, [pc, #464]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80054e2:	430b      	orrs	r3, r1
 80054e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80054f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80054f4:	2300      	movs	r3, #0
 80054f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054f8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80054fc:	460b      	mov	r3, r1
 80054fe:	4313      	orrs	r3, r2
 8005500:	d00a      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005502:	4b6c      	ldr	r3, [pc, #432]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005506:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800550a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800550e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005512:	4a68      	ldr	r2, [pc, #416]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005514:	430b      	orrs	r3, r1
 8005516:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	2100      	movs	r1, #0
 8005522:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800552a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800552e:	460b      	mov	r3, r1
 8005530:	4313      	orrs	r3, r2
 8005532:	d011      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005538:	3308      	adds	r3, #8
 800553a:	2100      	movs	r1, #0
 800553c:	4618      	mov	r0, r3
 800553e:	f001 f9a3 	bl	8006888 <RCCEx_PLL2_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005548:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005550:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005554:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	2100      	movs	r1, #0
 8005562:	6239      	str	r1, [r7, #32]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24
 800556a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800556e:	460b      	mov	r3, r1
 8005570:	4313      	orrs	r3, r2
 8005572:	d011      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005578:	3308      	adds	r3, #8
 800557a:	2101      	movs	r1, #1
 800557c:	4618      	mov	r0, r3
 800557e:	f001 f983 	bl	8006888 <RCCEx_PLL2_Config>
 8005582:	4603      	mov	r3, r0
 8005584:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005588:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005590:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005594:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	2100      	movs	r1, #0
 80055a2:	61b9      	str	r1, [r7, #24]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	61fb      	str	r3, [r7, #28]
 80055aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80055ae:	460b      	mov	r3, r1
 80055b0:	4313      	orrs	r3, r2
 80055b2:	d011      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055b8:	3308      	adds	r3, #8
 80055ba:	2102      	movs	r1, #2
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 f963 	bl	8006888 <RCCEx_PLL2_Config>
 80055c2:	4603      	mov	r3, r0
 80055c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80055c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80055d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	2100      	movs	r1, #0
 80055e2:	6139      	str	r1, [r7, #16]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80055ee:	460b      	mov	r3, r1
 80055f0:	4313      	orrs	r3, r2
 80055f2:	d011      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055f8:	3328      	adds	r3, #40	@ 0x28
 80055fa:	2100      	movs	r1, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 f9f5 	bl	80069ec <RCCEx_PLL3_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005608:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005610:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005614:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	2100      	movs	r1, #0
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800562e:	460b      	mov	r3, r1
 8005630:	4313      	orrs	r3, r2
 8005632:	d011      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005638:	3328      	adds	r3, #40	@ 0x28
 800563a:	2101      	movs	r1, #1
 800563c:	4618      	mov	r0, r3
 800563e:	f001 f9d5 	bl	80069ec <RCCEx_PLL3_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005648:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005650:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005654:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	2100      	movs	r1, #0
 8005662:	6039      	str	r1, [r7, #0]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	607b      	str	r3, [r7, #4]
 800566a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800566e:	460b      	mov	r3, r1
 8005670:	4313      	orrs	r3, r2
 8005672:	d011      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005678:	3328      	adds	r3, #40	@ 0x28
 800567a:	2102      	movs	r1, #2
 800567c:	4618      	mov	r0, r3
 800567e:	f001 f9b5 	bl	80069ec <RCCEx_PLL3_Config>
 8005682:	4603      	mov	r3, r0
 8005684:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005688:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005690:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005694:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005698:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e000      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80056ac:	46bd      	mov	sp, r7
 80056ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056b2:	bf00      	nop
 80056b4:	58024400 	.word	0x58024400

080056b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b090      	sub	sp, #64	@ 0x40
 80056bc:	af00      	add	r7, sp, #0
 80056be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80056c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056c6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80056ca:	430b      	orrs	r3, r1
 80056cc:	f040 8094 	bne.w	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80056d0:	4b97      	ldr	r3, [pc, #604]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80056d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80056da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056dc:	2b04      	cmp	r3, #4
 80056de:	f200 8087 	bhi.w	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80056e2:	a201      	add	r2, pc, #4	@ (adr r2, 80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	080056fd 	.word	0x080056fd
 80056ec:	08005725 	.word	0x08005725
 80056f0:	0800574d 	.word	0x0800574d
 80056f4:	080057e9 	.word	0x080057e9
 80056f8:	08005775 	.word	0x08005775
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056fc:	4b8c      	ldr	r3, [pc, #560]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005704:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005708:	d108      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800570a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800570e:	4618      	mov	r0, r3
 8005710:	f000 ff68 	bl	80065e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005718:	f000 bc97 	b.w	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005720:	f000 bc93 	b.w	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005724:	4b82      	ldr	r3, [pc, #520]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800572c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005730:	d108      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005732:	f107 0318 	add.w	r3, r7, #24
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fcac 	bl	8006094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005740:	f000 bc83 	b.w	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005748:	f000 bc7f 	b.w	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800574c:	4b78      	ldr	r3, [pc, #480]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005758:	d108      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800575a:	f107 030c 	add.w	r3, r7, #12
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fdec 	bl	800633c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005768:	f000 bc6f 	b.w	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005770:	f000 bc6b 	b.w	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005774:	4b6e      	ldr	r3, [pc, #440]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005778:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800577c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800577e:	4b6c      	ldr	r3, [pc, #432]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b04      	cmp	r3, #4
 8005788:	d10c      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800578a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005790:	4b67      	ldr	r3, [pc, #412]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	08db      	lsrs	r3, r3, #3
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	4a66      	ldr	r2, [pc, #408]	@ (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
 80057a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057a2:	e01f      	b.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057a4:	4b62      	ldr	r3, [pc, #392]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057b0:	d106      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80057b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057b8:	d102      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80057ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80057bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057be:	e011      	b.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057c0:	4b5b      	ldr	r3, [pc, #364]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057cc:	d106      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80057ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057d4:	d102      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80057d6:	4b59      	ldr	r3, [pc, #356]	@ (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80057d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057da:	e003      	b.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80057e0:	f000 bc33 	b.w	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80057e4:	f000 bc31 	b.w	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80057e8:	4b55      	ldr	r3, [pc, #340]	@ (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80057ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057ec:	f000 bc2d 	b.w	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057f4:	f000 bc29 	b.w	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80057f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057fc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005800:	430b      	orrs	r3, r1
 8005802:	f040 809f 	bne.w	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8005806:	4b4a      	ldr	r3, [pc, #296]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800580e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005816:	d04d      	beq.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800581e:	f200 8084 	bhi.w	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	2bc0      	cmp	r3, #192	@ 0xc0
 8005826:	d07d      	beq.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	2bc0      	cmp	r3, #192	@ 0xc0
 800582c:	d87d      	bhi.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	2b80      	cmp	r3, #128	@ 0x80
 8005832:	d02d      	beq.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005836:	2b80      	cmp	r3, #128	@ 0x80
 8005838:	d877      	bhi.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005842:	2b40      	cmp	r3, #64	@ 0x40
 8005844:	d012      	beq.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005846:	e070      	b.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005848:	4b39      	ldr	r3, [pc, #228]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005854:	d107      	bne.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fec2 	bl	80065e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005864:	e3f1      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800586a:	e3ee      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800586c:	4b30      	ldr	r3, [pc, #192]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005874:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005878:	d107      	bne.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800587a:	f107 0318 	add.w	r3, r7, #24
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fc08 	bl	8006094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005888:	e3df      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800588e:	e3dc      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005890:	4b27      	ldr	r3, [pc, #156]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800589c:	d107      	bne.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800589e:	f107 030c 	add.w	r3, r7, #12
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fd4a 	bl	800633c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058ac:	e3cd      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058b2:	e3ca      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80058bc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058be:	4b1c      	ldr	r3, [pc, #112]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d10c      	bne.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80058ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d109      	bne.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058d0:	4b17      	ldr	r3, [pc, #92]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	08db      	lsrs	r3, r3, #3
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	4a16      	ldr	r2, [pc, #88]	@ (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
 80058e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058e2:	e01e      	b.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058e4:	4b12      	ldr	r3, [pc, #72]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058f0:	d106      	bne.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80058f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058f8:	d102      	bne.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80058fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80058fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058fe:	e010      	b.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005900:	4b0b      	ldr	r3, [pc, #44]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800590c:	d106      	bne.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800590e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005914:	d102      	bne.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005916:	4b09      	ldr	r3, [pc, #36]	@ (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800591a:	e002      	b.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005920:	e393      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005922:	e392      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005924:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005928:	e38f      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800592e:	e38c      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005930:	58024400 	.word	0x58024400
 8005934:	03d09000 	.word	0x03d09000
 8005938:	003d0900 	.word	0x003d0900
 800593c:	007a1200 	.word	0x007a1200
 8005940:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005948:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800594c:	430b      	orrs	r3, r1
 800594e:	f040 809c 	bne.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8005952:	4b9e      	ldr	r3, [pc, #632]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005956:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800595a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005962:	d054      	beq.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800596a:	f200 808b 	bhi.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005974:	f000 8083 	beq.w	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800597e:	f200 8081 	bhi.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005988:	d02f      	beq.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005990:	d878      	bhi.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800599e:	d012      	beq.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80059a0:	e070      	b.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059a2:	4b8a      	ldr	r3, [pc, #552]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059ae:	d107      	bne.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 fe15 	bl	80065e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059be:	e344      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059c4:	e341      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059c6:	4b81      	ldr	r3, [pc, #516]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059d2:	d107      	bne.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059d4:	f107 0318 	add.w	r3, r7, #24
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 fb5b 	bl	8006094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059e2:	e332      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059e8:	e32f      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059ea:	4b78      	ldr	r3, [pc, #480]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059f6:	d107      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059f8:	f107 030c 	add.w	r3, r7, #12
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fc9d 	bl	800633c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a06:	e320      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a0c:	e31d      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a0e:	4b6f      	ldr	r3, [pc, #444]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a16:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a18:	4b6c      	ldr	r3, [pc, #432]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d10c      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a2a:	4b68      	ldr	r3, [pc, #416]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	08db      	lsrs	r3, r3, #3
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	4a66      	ldr	r2, [pc, #408]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005a36:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a3c:	e01e      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a3e:	4b63      	ldr	r3, [pc, #396]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a4a:	d106      	bne.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a52:	d102      	bne.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a54:	4b5f      	ldr	r3, [pc, #380]	@ (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a58:	e010      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a66:	d106      	bne.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a6e:	d102      	bne.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005a70:	4b59      	ldr	r3, [pc, #356]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a74:	e002      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8005a7a:	e2e6      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005a7c:	e2e5      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a7e:	4b57      	ldr	r3, [pc, #348]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a82:	e2e2      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a88:	e2df      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a8e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005a92:	430b      	orrs	r3, r1
 8005a94:	f040 80a7 	bne.w	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005a98:	4b4c      	ldr	r3, [pc, #304]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a9c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005aa0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aa8:	d055      	beq.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ab0:	f200 8096 	bhi.w	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005aba:	f000 8084 	beq.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8005abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ac4:	f200 808c 	bhi.w	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ace:	d030      	beq.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad6:	f200 8083 	bhi.w	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d004      	beq.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae6:	d012      	beq.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8005ae8:	e07a      	b.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005aea:	4b38      	ldr	r3, [pc, #224]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005af6:	d107      	bne.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fd71 	bl	80065e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b06:	e2a0      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b0c:	e29d      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b1c:	f107 0318 	add.w	r3, r7, #24
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fab7 	bl	8006094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b2a:	e28e      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b30:	e28b      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b32:	4b26      	ldr	r3, [pc, #152]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b3e:	d107      	bne.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b40:	f107 030c 	add.w	r3, r7, #12
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fbf9 	bl	800633c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b4e:	e27c      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b54:	e279      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b56:	4b1d      	ldr	r3, [pc, #116]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b5e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b60:	4b1a      	ldr	r3, [pc, #104]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d10c      	bne.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8005b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d109      	bne.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b72:	4b16      	ldr	r3, [pc, #88]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	08db      	lsrs	r3, r3, #3
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	4a14      	ldr	r2, [pc, #80]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b84:	e01e      	b.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b86:	4b11      	ldr	r3, [pc, #68]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b92:	d106      	bne.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b9a:	d102      	bne.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ba0:	e010      	b.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005baa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bae:	d106      	bne.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bb6:	d102      	bne.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005bb8:	4b07      	ldr	r3, [pc, #28]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bbc:	e002      	b.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005bc2:	e242      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005bc4:	e241      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005bc6:	4b05      	ldr	r3, [pc, #20]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bca:	e23e      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005bcc:	58024400 	.word	0x58024400
 8005bd0:	03d09000 	.word	0x03d09000
 8005bd4:	003d0900 	.word	0x003d0900
 8005bd8:	007a1200 	.word	0x007a1200
 8005bdc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005be4:	e231      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bea:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	f040 8085 	bne.w	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005bf4:	4b9c      	ldr	r3, [pc, #624]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c04:	d06b      	beq.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c0c:	d874      	bhi.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c14:	d056      	beq.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8005c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c1c:	d86c      	bhi.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c24:	d03b      	beq.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8005c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c2c:	d864      	bhi.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c34:	d021      	beq.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8005c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c3c:	d85c      	bhi.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d004      	beq.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8005c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c4a:	d004      	beq.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8005c4c:	e054      	b.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005c4e:	f7fe fb49 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
 8005c52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c54:	e1f9      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c56:	4b84      	ldr	r3, [pc, #528]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c62:	d107      	bne.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c64:	f107 0318 	add.w	r3, r7, #24
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fa13 	bl	8006094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c72:	e1ea      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c78:	e1e7      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c7a:	4b7b      	ldr	r3, [pc, #492]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c86:	d107      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c88:	f107 030c 	add.w	r3, r7, #12
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fb55 	bl	800633c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c96:	e1d8      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c9c:	e1d5      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c9e:	4b72      	ldr	r3, [pc, #456]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d109      	bne.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005caa:	4b6f      	ldr	r3, [pc, #444]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	08db      	lsrs	r3, r3, #3
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	4a6d      	ldr	r2, [pc, #436]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cbc:	e1c5      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cc2:	e1c2      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005cc4:	4b68      	ldr	r3, [pc, #416]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cd0:	d102      	bne.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8005cd2:	4b67      	ldr	r3, [pc, #412]	@ (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cd6:	e1b8      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cdc:	e1b5      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005cde:	4b62      	ldr	r3, [pc, #392]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cea:	d102      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8005cec:	4b61      	ldr	r3, [pc, #388]	@ (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cf0:	e1ab      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cf6:	e1a8      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cfc:	e1a5      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005cfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d02:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005d06:	430b      	orrs	r3, r1
 8005d08:	d173      	bne.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005d0a:	4b57      	ldr	r3, [pc, #348]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d12:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d1a:	d02f      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d22:	d863      	bhi.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d004      	beq.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d30:	d012      	beq.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8005d32:	e05b      	b.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d34:	4b4c      	ldr	r3, [pc, #304]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d40:	d107      	bne.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d42:	f107 0318 	add.w	r3, r7, #24
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 f9a4 	bl	8006094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d50:	e17b      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d56:	e178      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d58:	4b43      	ldr	r3, [pc, #268]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d64:	d107      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d66:	f107 030c 	add.w	r3, r7, #12
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fae6 	bl	800633c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d74:	e169      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d7a:	e166      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d84:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d86:	4b38      	ldr	r3, [pc, #224]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d10c      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8005d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d98:	4b33      	ldr	r3, [pc, #204]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	08db      	lsrs	r3, r3, #3
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	4a32      	ldr	r2, [pc, #200]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005da4:	fa22 f303 	lsr.w	r3, r2, r3
 8005da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005daa:	e01e      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dac:	4b2e      	ldr	r3, [pc, #184]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005db8:	d106      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8005dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dc0:	d102      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dc6:	e010      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005dc8:	4b27      	ldr	r3, [pc, #156]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dd4:	d106      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ddc:	d102      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005dde:	4b25      	ldr	r3, [pc, #148]	@ (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005de2:	e002      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005de8:	e12f      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005dea:	e12e      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005df0:	e12b      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005df2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005df6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	d13c      	bne.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e06:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d004      	beq.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e14:	d012      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8005e16:	e023      	b.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e18:	4b13      	ldr	r3, [pc, #76]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e24:	d107      	bne.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fbda 	bl	80065e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e34:	e109      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e3a:	e106      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e48:	d107      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e4a:	f107 0318 	add.w	r3, r7, #24
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 f920 	bl	8006094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e58:	e0f7      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e5e:	e0f4      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e64:	e0f1      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005e66:	bf00      	nop
 8005e68:	58024400 	.word	0x58024400
 8005e6c:	03d09000 	.word	0x03d09000
 8005e70:	003d0900 	.word	0x003d0900
 8005e74:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e7c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005e80:	430b      	orrs	r3, r1
 8005e82:	f040 8091 	bne.w	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005e86:	4b73      	ldr	r3, [pc, #460]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005e8e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e92:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005e96:	f000 8081 	beq.w	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005ea0:	d87f      	bhi.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ea8:	d06b      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005eb0:	d877      	bhi.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb8:	d056      	beq.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec0:	d86f      	bhi.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ec8:	d03b      	beq.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ecc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ed0:	d867      	bhi.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ed8:	d021      	beq.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ee0:	d85f      	bhi.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005eee:	d004      	beq.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005ef0:	e057      	b.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005ef2:	f000 f8b9 	bl	8006068 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ef6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ef8:	e0a7      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005efa:	4b56      	ldr	r3, [pc, #344]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f06:	d107      	bne.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f08:	f107 0318 	add.w	r3, r7, #24
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 f8c1 	bl	8006094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f16:	e098      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f1c:	e095      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f1e:	4b4d      	ldr	r3, [pc, #308]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f2a:	d107      	bne.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f2c:	f107 030c 	add.w	r3, r7, #12
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 fa03 	bl	800633c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f3a:	e086      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f40:	e083      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f42:	4b44      	ldr	r3, [pc, #272]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d109      	bne.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f4e:	4b41      	ldr	r3, [pc, #260]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	08db      	lsrs	r3, r3, #3
 8005f54:	f003 0303 	and.w	r3, r3, #3
 8005f58:	4a3f      	ldr	r2, [pc, #252]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f60:	e073      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f66:	e070      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005f68:	4b3a      	ldr	r3, [pc, #232]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f74:	d102      	bne.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8005f76:	4b39      	ldr	r3, [pc, #228]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8005f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f7a:	e066      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f80:	e063      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f82:	4b34      	ldr	r3, [pc, #208]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f8e:	d102      	bne.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8005f90:	4b33      	ldr	r3, [pc, #204]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f94:	e059      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f9a:	e056      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f9c:	4b31      	ldr	r3, [pc, #196]	@ (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fa0:	e053      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fa6:	e050      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fac:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	d148      	bne.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005fb4:	4b27      	ldr	r3, [pc, #156]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005fbc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fc4:	d02a      	beq.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fcc:	d838      	bhi.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d004      	beq.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fda:	d00d      	beq.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005fdc:	e030      	b.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fde:	4b1d      	ldr	r3, [pc, #116]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fea:	d102      	bne.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8005fec:	4b1c      	ldr	r3, [pc, #112]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ff0:	e02b      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ff6:	e028      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ff8:	4b16      	ldr	r3, [pc, #88]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006000:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006004:	d107      	bne.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800600a:	4618      	mov	r0, r3
 800600c:	f000 faea 	bl	80065e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006014:	e019      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800601a:	e016      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800601c:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006024:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006028:	d107      	bne.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800602a:	f107 0318 	add.w	r3, r7, #24
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f830 	bl	8006094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006038:	e007      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800603e:	e004      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006044:	e001      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800604a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800604c:	4618      	mov	r0, r3
 800604e:	3740      	adds	r7, #64	@ 0x40
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	58024400 	.word	0x58024400
 8006058:	03d09000 	.word	0x03d09000
 800605c:	003d0900 	.word	0x003d0900
 8006060:	007a1200 	.word	0x007a1200
 8006064:	00bb8000 	.word	0x00bb8000

08006068 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800606c:	f7fe f90a 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 8006070:	4602      	mov	r2, r0
 8006072:	4b06      	ldr	r3, [pc, #24]	@ (800608c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	091b      	lsrs	r3, r3, #4
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	4904      	ldr	r1, [pc, #16]	@ (8006090 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800607e:	5ccb      	ldrb	r3, [r1, r3]
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006088:	4618      	mov	r0, r3
 800608a:	bd80      	pop	{r7, pc}
 800608c:	58024400 	.word	0x58024400
 8006090:	080093b8 	.word	0x080093b8

08006094 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006094:	b480      	push	{r7}
 8006096:	b089      	sub	sp, #36	@ 0x24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800609c:	4ba1      	ldr	r3, [pc, #644]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800609e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a0:	f003 0303 	and.w	r3, r3, #3
 80060a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80060a6:	4b9f      	ldr	r3, [pc, #636]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060aa:	0b1b      	lsrs	r3, r3, #12
 80060ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80060b2:	4b9c      	ldr	r3, [pc, #624]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b6:	091b      	lsrs	r3, r3, #4
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80060be:	4b99      	ldr	r3, [pc, #612]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c2:	08db      	lsrs	r3, r3, #3
 80060c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	fb02 f303 	mul.w	r3, r2, r3
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8111 	beq.w	8006304 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	f000 8083 	beq.w	80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	f200 80a1 	bhi.w	8006234 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d056      	beq.n	80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80060fe:	e099      	b.n	8006234 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006100:	4b88      	ldr	r3, [pc, #544]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0320 	and.w	r3, r3, #32
 8006108:	2b00      	cmp	r3, #0
 800610a:	d02d      	beq.n	8006168 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800610c:	4b85      	ldr	r3, [pc, #532]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	08db      	lsrs	r3, r3, #3
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	4a84      	ldr	r2, [pc, #528]	@ (8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006118:	fa22 f303 	lsr.w	r3, r2, r3
 800611c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	ee07 3a90 	vmov	s15, r3
 8006124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006136:	4b7b      	ldr	r3, [pc, #492]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006146:	ed97 6a03 	vldr	s12, [r7, #12]
 800614a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800632c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800614e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800615a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006162:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006166:	e087      	b.n	8006278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006172:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800617a:	4b6a      	ldr	r3, [pc, #424]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800617c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800618a:	ed97 6a03 	vldr	s12, [r7, #12]
 800618e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800632c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800619a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800619e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061aa:	e065      	b.n	8006278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061be:	4b59      	ldr	r3, [pc, #356]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80061d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800632c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ee:	e043      	b.n	8006278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80061fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006202:	4b48      	ldr	r3, [pc, #288]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006212:	ed97 6a03 	vldr	s12, [r7, #12]
 8006216:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800632c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800621a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800621e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006232:	e021      	b.n	8006278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006246:	4b37      	ldr	r3, [pc, #220]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624e:	ee07 3a90 	vmov	s15, r3
 8006252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006256:	ed97 6a03 	vldr	s12, [r7, #12]
 800625a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800632c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800625e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800626a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006276:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006278:	4b2a      	ldr	r3, [pc, #168]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800627a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627c:	0a5b      	lsrs	r3, r3, #9
 800627e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800628e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006292:	edd7 6a07 	vldr	s13, [r7, #28]
 8006296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800629a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800629e:	ee17 2a90 	vmov	r2, s15
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80062a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062b0:	ee07 3a90 	vmov	s15, r3
 80062b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062cc:	ee17 2a90 	vmov	r2, s15
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80062d4:	4b13      	ldr	r3, [pc, #76]	@ (8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d8:	0e1b      	lsrs	r3, r3, #24
 80062da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80062f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062fa:	ee17 2a90 	vmov	r2, s15
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006302:	e008      	b.n	8006316 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	609a      	str	r2, [r3, #8]
}
 8006316:	bf00      	nop
 8006318:	3724      	adds	r7, #36	@ 0x24
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	58024400 	.word	0x58024400
 8006328:	03d09000 	.word	0x03d09000
 800632c:	46000000 	.word	0x46000000
 8006330:	4c742400 	.word	0x4c742400
 8006334:	4a742400 	.word	0x4a742400
 8006338:	4af42400 	.word	0x4af42400

0800633c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800633c:	b480      	push	{r7}
 800633e:	b089      	sub	sp, #36	@ 0x24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006344:	4ba1      	ldr	r3, [pc, #644]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006348:	f003 0303 	and.w	r3, r3, #3
 800634c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800634e:	4b9f      	ldr	r3, [pc, #636]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006352:	0d1b      	lsrs	r3, r3, #20
 8006354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006358:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800635a:	4b9c      	ldr	r3, [pc, #624]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800635c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006366:	4b99      	ldr	r3, [pc, #612]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636a:	08db      	lsrs	r3, r3, #3
 800636c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	fb02 f303 	mul.w	r3, r2, r3
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8111 	beq.w	80065ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b02      	cmp	r3, #2
 800638e:	f000 8083 	beq.w	8006498 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b02      	cmp	r3, #2
 8006396:	f200 80a1 	bhi.w	80064dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d056      	beq.n	8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80063a6:	e099      	b.n	80064dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063a8:	4b88      	ldr	r3, [pc, #544]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0320 	and.w	r3, r3, #32
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d02d      	beq.n	8006410 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063b4:	4b85      	ldr	r3, [pc, #532]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	08db      	lsrs	r3, r3, #3
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	4a84      	ldr	r2, [pc, #528]	@ (80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80063c0:	fa22 f303 	lsr.w	r3, r2, r3
 80063c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	ee07 3a90 	vmov	s15, r3
 80063cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063de:	4b7b      	ldr	r3, [pc, #492]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80063f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800640a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800640e:	e087      	b.n	8006520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	ee07 3a90 	vmov	s15, r3
 8006416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800641e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006422:	4b6a      	ldr	r3, [pc, #424]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006432:	ed97 6a03 	vldr	s12, [r7, #12]
 8006436:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800643a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800643e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800644a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800644e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006452:	e065      	b.n	8006520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	ee07 3a90 	vmov	s15, r3
 800645a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006466:	4b59      	ldr	r3, [pc, #356]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800646e:	ee07 3a90 	vmov	s15, r3
 8006472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006476:	ed97 6a03 	vldr	s12, [r7, #12]
 800647a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800647e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800648a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800648e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006496:	e043      	b.n	8006520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80064a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064aa:	4b48      	ldr	r3, [pc, #288]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80064be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064da:	e021      	b.n	8006520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80064ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ee:	4b37      	ldr	r3, [pc, #220]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006502:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800650a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800650e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800651e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006520:	4b2a      	ldr	r3, [pc, #168]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006524:	0a5b      	lsrs	r3, r3, #9
 8006526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800653a:	edd7 6a07 	vldr	s13, [r7, #28]
 800653e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006546:	ee17 2a90 	vmov	r2, s15
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800654e:	4b1f      	ldr	r3, [pc, #124]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006552:	0c1b      	lsrs	r3, r3, #16
 8006554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006558:	ee07 3a90 	vmov	s15, r3
 800655c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006560:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006564:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006568:	edd7 6a07 	vldr	s13, [r7, #28]
 800656c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006574:	ee17 2a90 	vmov	r2, s15
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800657c:	4b13      	ldr	r3, [pc, #76]	@ (80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800657e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006580:	0e1b      	lsrs	r3, r3, #24
 8006582:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006596:	edd7 6a07 	vldr	s13, [r7, #28]
 800659a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800659e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a2:	ee17 2a90 	vmov	r2, s15
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065aa:	e008      	b.n	80065be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	609a      	str	r2, [r3, #8]
}
 80065be:	bf00      	nop
 80065c0:	3724      	adds	r7, #36	@ 0x24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	58024400 	.word	0x58024400
 80065d0:	03d09000 	.word	0x03d09000
 80065d4:	46000000 	.word	0x46000000
 80065d8:	4c742400 	.word	0x4c742400
 80065dc:	4a742400 	.word	0x4a742400
 80065e0:	4af42400 	.word	0x4af42400

080065e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b089      	sub	sp, #36	@ 0x24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065ec:	4ba0      	ldr	r3, [pc, #640]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80065f6:	4b9e      	ldr	r3, [pc, #632]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fa:	091b      	lsrs	r3, r3, #4
 80065fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006600:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006602:	4b9b      	ldr	r3, [pc, #620]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800660c:	4b98      	ldr	r3, [pc, #608]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800660e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006610:	08db      	lsrs	r3, r3, #3
 8006612:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	fb02 f303 	mul.w	r3, r2, r3
 800661c:	ee07 3a90 	vmov	s15, r3
 8006620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006624:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 8111 	beq.w	8006852 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	2b02      	cmp	r3, #2
 8006634:	f000 8083 	beq.w	800673e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b02      	cmp	r3, #2
 800663c:	f200 80a1 	bhi.w	8006782 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d056      	beq.n	80066fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800664c:	e099      	b.n	8006782 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800664e:	4b88      	ldr	r3, [pc, #544]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	d02d      	beq.n	80066b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800665a:	4b85      	ldr	r3, [pc, #532]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	08db      	lsrs	r3, r3, #3
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	4a83      	ldr	r2, [pc, #524]	@ (8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006666:	fa22 f303 	lsr.w	r3, r2, r3
 800666a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	ee07 3a90 	vmov	s15, r3
 8006672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	ee07 3a90 	vmov	s15, r3
 800667c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006684:	4b7a      	ldr	r3, [pc, #488]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668c:	ee07 3a90 	vmov	s15, r3
 8006690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006694:	ed97 6a03 	vldr	s12, [r7, #12]
 8006698:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006878 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800669c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80066b4:	e087      	b.n	80067c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	ee07 3a90 	vmov	s15, r3
 80066bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800687c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80066c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c8:	4b69      	ldr	r3, [pc, #420]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d0:	ee07 3a90 	vmov	s15, r3
 80066d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80066dc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006878 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066f8:	e065      	b.n	80067c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	ee07 3a90 	vmov	s15, r3
 8006700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006704:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006880 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670c:	4b58      	ldr	r3, [pc, #352]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800670e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006714:	ee07 3a90 	vmov	s15, r3
 8006718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006720:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006878 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006738:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800673c:	e043      	b.n	80067c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	ee07 3a90 	vmov	s15, r3
 8006744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006748:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006884 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800674c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006750:	4b47      	ldr	r3, [pc, #284]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006760:	ed97 6a03 	vldr	s12, [r7, #12]
 8006764:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006878 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006780:	e021      	b.n	80067c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800687c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006794:	4b36      	ldr	r3, [pc, #216]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679c:	ee07 3a90 	vmov	s15, r3
 80067a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80067a8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006878 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067c4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80067c6:	4b2a      	ldr	r3, [pc, #168]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ca:	0a5b      	lsrs	r3, r3, #9
 80067cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80067e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ec:	ee17 2a90 	vmov	r2, s15
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80067f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f8:	0c1b      	lsrs	r3, r3, #16
 80067fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800680a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800680e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800681a:	ee17 2a90 	vmov	r2, s15
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006822:	4b13      	ldr	r3, [pc, #76]	@ (8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006826:	0e1b      	lsrs	r3, r3, #24
 8006828:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800682c:	ee07 3a90 	vmov	s15, r3
 8006830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006834:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006838:	ee37 7a87 	vadd.f32	s14, s15, s14
 800683c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006848:	ee17 2a90 	vmov	r2, s15
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006850:	e008      	b.n	8006864 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	609a      	str	r2, [r3, #8]
}
 8006864:	bf00      	nop
 8006866:	3724      	adds	r7, #36	@ 0x24
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	58024400 	.word	0x58024400
 8006874:	03d09000 	.word	0x03d09000
 8006878:	46000000 	.word	0x46000000
 800687c:	4c742400 	.word	0x4c742400
 8006880:	4a742400 	.word	0x4a742400
 8006884:	4af42400 	.word	0x4af42400

08006888 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006896:	4b53      	ldr	r3, [pc, #332]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 8006898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d101      	bne.n	80068a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e099      	b.n	80069da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80068a6:	4b4f      	ldr	r3, [pc, #316]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a4e      	ldr	r2, [pc, #312]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 80068ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068b2:	f7fb f853 	bl	800195c <HAL_GetTick>
 80068b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068b8:	e008      	b.n	80068cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068ba:	f7fb f84f 	bl	800195c <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d901      	bls.n	80068cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e086      	b.n	80069da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068cc:	4b45      	ldr	r3, [pc, #276]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f0      	bne.n	80068ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80068d8:	4b42      	ldr	r3, [pc, #264]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 80068da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	031b      	lsls	r3, r3, #12
 80068e6:	493f      	ldr	r1, [pc, #252]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	025b      	lsls	r3, r3, #9
 80068fe:	b29b      	uxth	r3, r3
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	3b01      	subs	r3, #1
 8006908:	041b      	lsls	r3, r3, #16
 800690a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	3b01      	subs	r3, #1
 8006916:	061b      	lsls	r3, r3, #24
 8006918:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800691c:	4931      	ldr	r1, [pc, #196]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 800691e:	4313      	orrs	r3, r2
 8006920:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006922:	4b30      	ldr	r3, [pc, #192]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 8006924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006926:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	492d      	ldr	r1, [pc, #180]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 8006930:	4313      	orrs	r3, r2
 8006932:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006934:	4b2b      	ldr	r3, [pc, #172]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 8006936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006938:	f023 0220 	bic.w	r2, r3, #32
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	4928      	ldr	r1, [pc, #160]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 8006942:	4313      	orrs	r3, r2
 8006944:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006946:	4b27      	ldr	r3, [pc, #156]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 8006948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694a:	4a26      	ldr	r2, [pc, #152]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 800694c:	f023 0310 	bic.w	r3, r3, #16
 8006950:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006952:	4b24      	ldr	r3, [pc, #144]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 8006954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006956:	4b24      	ldr	r3, [pc, #144]	@ (80069e8 <RCCEx_PLL2_Config+0x160>)
 8006958:	4013      	ands	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	69d2      	ldr	r2, [r2, #28]
 800695e:	00d2      	lsls	r2, r2, #3
 8006960:	4920      	ldr	r1, [pc, #128]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 8006962:	4313      	orrs	r3, r2
 8006964:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006966:	4b1f      	ldr	r3, [pc, #124]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 8006968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696a:	4a1e      	ldr	r2, [pc, #120]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 800696c:	f043 0310 	orr.w	r3, r3, #16
 8006970:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d106      	bne.n	8006986 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006978:	4b1a      	ldr	r3, [pc, #104]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	4a19      	ldr	r2, [pc, #100]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 800697e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006982:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006984:	e00f      	b.n	80069a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d106      	bne.n	800699a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800698c:	4b15      	ldr	r3, [pc, #84]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 800698e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006990:	4a14      	ldr	r2, [pc, #80]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 8006992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006996:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006998:	e005      	b.n	80069a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800699a:	4b12      	ldr	r3, [pc, #72]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 800699c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699e:	4a11      	ldr	r2, [pc, #68]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 80069a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80069a6:	4b0f      	ldr	r3, [pc, #60]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a0e      	ldr	r2, [pc, #56]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 80069ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069b2:	f7fa ffd3 	bl	800195c <HAL_GetTick>
 80069b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069b8:	e008      	b.n	80069cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069ba:	f7fa ffcf 	bl	800195c <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e006      	b.n	80069da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069cc:	4b05      	ldr	r3, [pc, #20]	@ (80069e4 <RCCEx_PLL2_Config+0x15c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0f0      	beq.n	80069ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	58024400 	.word	0x58024400
 80069e8:	ffff0007 	.word	0xffff0007

080069ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069fa:	4b53      	ldr	r3, [pc, #332]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 80069fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d101      	bne.n	8006a0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e099      	b.n	8006b3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a0a:	4b4f      	ldr	r3, [pc, #316]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a4e      	ldr	r2, [pc, #312]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006a10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a16:	f7fa ffa1 	bl	800195c <HAL_GetTick>
 8006a1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a1c:	e008      	b.n	8006a30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a1e:	f7fa ff9d 	bl	800195c <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d901      	bls.n	8006a30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e086      	b.n	8006b3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a30:	4b45      	ldr	r3, [pc, #276]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f0      	bne.n	8006a1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a3c:	4b42      	ldr	r3, [pc, #264]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a40:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	051b      	lsls	r3, r3, #20
 8006a4a:	493f      	ldr	r1, [pc, #252]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	025b      	lsls	r3, r3, #9
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	041b      	lsls	r3, r3, #16
 8006a6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	061b      	lsls	r3, r3, #24
 8006a7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a80:	4931      	ldr	r1, [pc, #196]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a86:	4b30      	ldr	r3, [pc, #192]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	492d      	ldr	r1, [pc, #180]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a98:	4b2b      	ldr	r3, [pc, #172]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	4928      	ldr	r1, [pc, #160]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006aaa:	4b27      	ldr	r3, [pc, #156]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	4a26      	ldr	r2, [pc, #152]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ab6:	4b24      	ldr	r3, [pc, #144]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aba:	4b24      	ldr	r3, [pc, #144]	@ (8006b4c <RCCEx_PLL3_Config+0x160>)
 8006abc:	4013      	ands	r3, r2
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	69d2      	ldr	r2, [r2, #28]
 8006ac2:	00d2      	lsls	r2, r2, #3
 8006ac4:	4920      	ldr	r1, [pc, #128]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006aca:	4b1f      	ldr	r3, [pc, #124]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ace:	4a1e      	ldr	r2, [pc, #120]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d106      	bne.n	8006aea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006adc:	4b1a      	ldr	r3, [pc, #104]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae0:	4a19      	ldr	r2, [pc, #100]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006ae2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ae8:	e00f      	b.n	8006b0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d106      	bne.n	8006afe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006af0:	4b15      	ldr	r3, [pc, #84]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af4:	4a14      	ldr	r2, [pc, #80]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006af6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006afa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006afc:	e005      	b.n	8006b0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006afe:	4b12      	ldr	r3, [pc, #72]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b02:	4a11      	ldr	r2, [pc, #68]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006b04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b16:	f7fa ff21 	bl	800195c <HAL_GetTick>
 8006b1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b1c:	e008      	b.n	8006b30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b1e:	f7fa ff1d 	bl	800195c <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e006      	b.n	8006b3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b30:	4b05      	ldr	r3, [pc, #20]	@ (8006b48 <RCCEx_PLL3_Config+0x15c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0f0      	beq.n	8006b1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	58024400 	.word	0x58024400
 8006b4c:	ffff0007 	.word	0xffff0007

08006b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e049      	b.n	8006bf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fa fcae 	bl	80014d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	f000 fb5c 	bl	800724c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d001      	beq.n	8006c18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e04c      	b.n	8006cb2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a26      	ldr	r2, [pc, #152]	@ (8006cc0 <HAL_TIM_Base_Start+0xc0>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d022      	beq.n	8006c70 <HAL_TIM_Base_Start+0x70>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c32:	d01d      	beq.n	8006c70 <HAL_TIM_Base_Start+0x70>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a22      	ldr	r2, [pc, #136]	@ (8006cc4 <HAL_TIM_Base_Start+0xc4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d018      	beq.n	8006c70 <HAL_TIM_Base_Start+0x70>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a21      	ldr	r2, [pc, #132]	@ (8006cc8 <HAL_TIM_Base_Start+0xc8>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d013      	beq.n	8006c70 <HAL_TIM_Base_Start+0x70>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8006ccc <HAL_TIM_Base_Start+0xcc>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00e      	beq.n	8006c70 <HAL_TIM_Base_Start+0x70>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a1e      	ldr	r2, [pc, #120]	@ (8006cd0 <HAL_TIM_Base_Start+0xd0>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d009      	beq.n	8006c70 <HAL_TIM_Base_Start+0x70>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd4 <HAL_TIM_Base_Start+0xd4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d004      	beq.n	8006c70 <HAL_TIM_Base_Start+0x70>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd8 <HAL_TIM_Base_Start+0xd8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d115      	bne.n	8006c9c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	4b19      	ldr	r3, [pc, #100]	@ (8006cdc <HAL_TIM_Base_Start+0xdc>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b06      	cmp	r3, #6
 8006c80:	d015      	beq.n	8006cae <HAL_TIM_Base_Start+0xae>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c88:	d011      	beq.n	8006cae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0201 	orr.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c9a:	e008      	b.n	8006cae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e000      	b.n	8006cb0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	40000400 	.word	0x40000400
 8006cc8:	40000800 	.word	0x40000800
 8006ccc:	40000c00 	.word	0x40000c00
 8006cd0:	40010400 	.word	0x40010400
 8006cd4:	40001800 	.word	0x40001800
 8006cd8:	40014000 	.word	0x40014000
 8006cdc:	00010007 	.word	0x00010007

08006ce0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0201 	bic.w	r2, r2, #1
 8006cf6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6a1a      	ldr	r2, [r3, #32]
 8006cfe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006d02:	4013      	ands	r3, r2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10f      	bne.n	8006d28 <HAL_TIM_Base_Stop_IT+0x48>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6a1a      	ldr	r2, [r3, #32]
 8006d0e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d107      	bne.n	8006d28 <HAL_TIM_Base_Stop_IT+0x48>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0201 	bic.w	r2, r2, #1
 8006d26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
	...

08006d40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e08f      	b.n	8006e74 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d106      	bne.n	8006d6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7fa fb6b 	bl	8001444 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2202      	movs	r2, #2
 8006d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6899      	ldr	r1, [r3, #8]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	4b3e      	ldr	r3, [pc, #248]	@ (8006e7c <HAL_TIM_Encoder_Init+0x13c>)
 8006d82:	400b      	ands	r3, r1
 8006d84:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4610      	mov	r0, r2
 8006d92:	f000 fa5b 	bl	800724c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4b31      	ldr	r3, [pc, #196]	@ (8006e80 <HAL_TIM_Encoder_Init+0x140>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	021b      	lsls	r3, r3, #8
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8006e84 <HAL_TIM_Encoder_Init+0x144>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8006e88 <HAL_TIM_Encoder_Init+0x148>)
 8006dde:	4013      	ands	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	4313      	orrs	r3, r2
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	011a      	lsls	r2, r3, #4
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	031b      	lsls	r3, r3, #12
 8006e00:	4313      	orrs	r3, r2
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006e0e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006e16:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	4313      	orrs	r3, r2
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	fffebff8 	.word	0xfffebff8
 8006e80:	fffffcfc 	.word	0xfffffcfc
 8006e84:	fffff3f3 	.word	0xfffff3f3
 8006e88:	ffff0f0f 	.word	0xffff0f0f

08006e8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ea4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006eac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eb4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d110      	bne.n	8006ede <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d102      	bne.n	8006ec8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ec2:	7b7b      	ldrb	r3, [r7, #13]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d001      	beq.n	8006ecc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e069      	b.n	8006fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006edc:	e031      	b.n	8006f42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d110      	bne.n	8006f06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d102      	bne.n	8006ef0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006eea:	7b3b      	ldrb	r3, [r7, #12]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d001      	beq.n	8006ef4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e055      	b.n	8006fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f04:	e01d      	b.n	8006f42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d108      	bne.n	8006f1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d105      	bne.n	8006f1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f12:	7b7b      	ldrb	r3, [r7, #13]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d102      	bne.n	8006f1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f18:	7b3b      	ldrb	r3, [r7, #12]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d001      	beq.n	8006f22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e03e      	b.n	8006fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2202      	movs	r2, #2
 8006f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <HAL_TIM_Encoder_Start+0xc4>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d008      	beq.n	8006f60 <HAL_TIM_Encoder_Start+0xd4>
 8006f4e:	e00f      	b.n	8006f70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2201      	movs	r2, #1
 8006f56:	2100      	movs	r1, #0
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fa11 	bl	8007380 <TIM_CCxChannelCmd>
      break;
 8006f5e:	e016      	b.n	8006f8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2201      	movs	r2, #1
 8006f66:	2104      	movs	r1, #4
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fa09 	bl	8007380 <TIM_CCxChannelCmd>
      break;
 8006f6e:	e00e      	b.n	8006f8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2201      	movs	r2, #1
 8006f76:	2100      	movs	r1, #0
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fa01 	bl	8007380 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2201      	movs	r2, #1
 8006f84:	2104      	movs	r1, #4
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 f9fa 	bl	8007380 <TIM_CCxChannelCmd>
      break;
 8006f8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f042 0201 	orr.w	r2, r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d122      	bne.n	8007004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d11b      	bne.n	8007004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0202 	mvn.w	r2, #2
 8006fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f90f 	bl	800720e <HAL_TIM_IC_CaptureCallback>
 8006ff0:	e005      	b.n	8006ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f901 	bl	80071fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f912 	bl	8007222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	2b04      	cmp	r3, #4
 8007010:	d122      	bne.n	8007058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b04      	cmp	r3, #4
 800701e:	d11b      	bne.n	8007058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0204 	mvn.w	r2, #4
 8007028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2202      	movs	r2, #2
 800702e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f8e5 	bl	800720e <HAL_TIM_IC_CaptureCallback>
 8007044:	e005      	b.n	8007052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f8d7 	bl	80071fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f8e8 	bl	8007222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0308 	and.w	r3, r3, #8
 8007062:	2b08      	cmp	r3, #8
 8007064:	d122      	bne.n	80070ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b08      	cmp	r3, #8
 8007072:	d11b      	bne.n	80070ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0208 	mvn.w	r2, #8
 800707c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2204      	movs	r2, #4
 8007082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f8bb 	bl	800720e <HAL_TIM_IC_CaptureCallback>
 8007098:	e005      	b.n	80070a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f8ad 	bl	80071fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f8be 	bl	8007222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f003 0310 	and.w	r3, r3, #16
 80070b6:	2b10      	cmp	r3, #16
 80070b8:	d122      	bne.n	8007100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f003 0310 	and.w	r3, r3, #16
 80070c4:	2b10      	cmp	r3, #16
 80070c6:	d11b      	bne.n	8007100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0210 	mvn.w	r2, #16
 80070d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2208      	movs	r2, #8
 80070d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f891 	bl	800720e <HAL_TIM_IC_CaptureCallback>
 80070ec:	e005      	b.n	80070fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f883 	bl	80071fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f894 	bl	8007222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b01      	cmp	r3, #1
 800710c:	d10e      	bne.n	800712c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b01      	cmp	r3, #1
 800711a:	d107      	bne.n	800712c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0201 	mvn.w	r2, #1
 8007124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f85d 	bl	80071e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007136:	2b80      	cmp	r3, #128	@ 0x80
 8007138:	d10e      	bne.n	8007158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007144:	2b80      	cmp	r3, #128	@ 0x80
 8007146:	d107      	bne.n	8007158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f9d2 	bl	80074fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007166:	d10e      	bne.n	8007186 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007172:	2b80      	cmp	r3, #128	@ 0x80
 8007174:	d107      	bne.n	8007186 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800717e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f9c5 	bl	8007510 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007190:	2b40      	cmp	r3, #64	@ 0x40
 8007192:	d10e      	bne.n	80071b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800719e:	2b40      	cmp	r3, #64	@ 0x40
 80071a0:	d107      	bne.n	80071b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80071aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f842 	bl	8007236 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	f003 0320 	and.w	r3, r3, #32
 80071bc:	2b20      	cmp	r3, #32
 80071be:	d10e      	bne.n	80071de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d107      	bne.n	80071de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f06f 0220 	mvn.w	r2, #32
 80071d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f985 	bl	80074e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007222:	b480      	push	{r7}
 8007224:	b083      	sub	sp, #12
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800723e:	bf00      	nop
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
	...

0800724c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a40      	ldr	r2, [pc, #256]	@ (8007360 <TIM_Base_SetConfig+0x114>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d013      	beq.n	800728c <TIM_Base_SetConfig+0x40>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800726a:	d00f      	beq.n	800728c <TIM_Base_SetConfig+0x40>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a3d      	ldr	r2, [pc, #244]	@ (8007364 <TIM_Base_SetConfig+0x118>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00b      	beq.n	800728c <TIM_Base_SetConfig+0x40>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a3c      	ldr	r2, [pc, #240]	@ (8007368 <TIM_Base_SetConfig+0x11c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d007      	beq.n	800728c <TIM_Base_SetConfig+0x40>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a3b      	ldr	r2, [pc, #236]	@ (800736c <TIM_Base_SetConfig+0x120>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_Base_SetConfig+0x40>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a3a      	ldr	r2, [pc, #232]	@ (8007370 <TIM_Base_SetConfig+0x124>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d108      	bne.n	800729e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a2f      	ldr	r2, [pc, #188]	@ (8007360 <TIM_Base_SetConfig+0x114>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d01f      	beq.n	80072e6 <TIM_Base_SetConfig+0x9a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ac:	d01b      	beq.n	80072e6 <TIM_Base_SetConfig+0x9a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007364 <TIM_Base_SetConfig+0x118>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d017      	beq.n	80072e6 <TIM_Base_SetConfig+0x9a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a2b      	ldr	r2, [pc, #172]	@ (8007368 <TIM_Base_SetConfig+0x11c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d013      	beq.n	80072e6 <TIM_Base_SetConfig+0x9a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a2a      	ldr	r2, [pc, #168]	@ (800736c <TIM_Base_SetConfig+0x120>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00f      	beq.n	80072e6 <TIM_Base_SetConfig+0x9a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a29      	ldr	r2, [pc, #164]	@ (8007370 <TIM_Base_SetConfig+0x124>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00b      	beq.n	80072e6 <TIM_Base_SetConfig+0x9a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a28      	ldr	r2, [pc, #160]	@ (8007374 <TIM_Base_SetConfig+0x128>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d007      	beq.n	80072e6 <TIM_Base_SetConfig+0x9a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a27      	ldr	r2, [pc, #156]	@ (8007378 <TIM_Base_SetConfig+0x12c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d003      	beq.n	80072e6 <TIM_Base_SetConfig+0x9a>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a26      	ldr	r2, [pc, #152]	@ (800737c <TIM_Base_SetConfig+0x130>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d108      	bne.n	80072f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a10      	ldr	r2, [pc, #64]	@ (8007360 <TIM_Base_SetConfig+0x114>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00f      	beq.n	8007344 <TIM_Base_SetConfig+0xf8>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a12      	ldr	r2, [pc, #72]	@ (8007370 <TIM_Base_SetConfig+0x124>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d00b      	beq.n	8007344 <TIM_Base_SetConfig+0xf8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a11      	ldr	r2, [pc, #68]	@ (8007374 <TIM_Base_SetConfig+0x128>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d007      	beq.n	8007344 <TIM_Base_SetConfig+0xf8>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a10      	ldr	r2, [pc, #64]	@ (8007378 <TIM_Base_SetConfig+0x12c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d003      	beq.n	8007344 <TIM_Base_SetConfig+0xf8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a0f      	ldr	r2, [pc, #60]	@ (800737c <TIM_Base_SetConfig+0x130>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d103      	bne.n	800734c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	615a      	str	r2, [r3, #20]
}
 8007352:	bf00      	nop
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40010000 	.word	0x40010000
 8007364:	40000400 	.word	0x40000400
 8007368:	40000800 	.word	0x40000800
 800736c:	40000c00 	.word	0x40000c00
 8007370:	40010400 	.word	0x40010400
 8007374:	40014000 	.word	0x40014000
 8007378:	40014400 	.word	0x40014400
 800737c:	40014800 	.word	0x40014800

08007380 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f003 031f 	and.w	r3, r3, #31
 8007392:	2201      	movs	r2, #1
 8007394:	fa02 f303 	lsl.w	r3, r2, r3
 8007398:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a1a      	ldr	r2, [r3, #32]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	43db      	mvns	r3, r3
 80073a2:	401a      	ands	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a1a      	ldr	r2, [r3, #32]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f003 031f 	and.w	r3, r3, #31
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	fa01 f303 	lsl.w	r3, r1, r3
 80073b8:	431a      	orrs	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	621a      	str	r2, [r3, #32]
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
	...

080073cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e06d      	b.n	80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a30      	ldr	r2, [pc, #192]	@ (80074cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d004      	beq.n	8007418 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a2f      	ldr	r2, [pc, #188]	@ (80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d108      	bne.n	800742a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800741e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007430:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a20      	ldr	r2, [pc, #128]	@ (80074cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d022      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007456:	d01d      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1d      	ldr	r2, [pc, #116]	@ (80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d018      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1c      	ldr	r2, [pc, #112]	@ (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d013      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1a      	ldr	r2, [pc, #104]	@ (80074dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d00e      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a15      	ldr	r2, [pc, #84]	@ (80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d009      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a16      	ldr	r2, [pc, #88]	@ (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d004      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a15      	ldr	r2, [pc, #84]	@ (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d10c      	bne.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800749a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	40010000 	.word	0x40010000
 80074d0:	40010400 	.word	0x40010400
 80074d4:	40000400 	.word	0x40000400
 80074d8:	40000800 	.word	0x40000800
 80074dc:	40000c00 	.word	0x40000c00
 80074e0:	40001800 	.word	0x40001800
 80074e4:	40014000 	.word	0x40014000

080074e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e042      	b.n	80075bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800753c:	2b00      	cmp	r3, #0
 800753e:	d106      	bne.n	800754e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7fa f805 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2224      	movs	r2, #36	@ 0x24
 8007552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0201 	bic.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f8ba 	bl	80076e0 <UART_SetConfig>
 800756c:	4603      	mov	r3, r0
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e022      	b.n	80075bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 ff1a 	bl	80083b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f042 0201 	orr.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 ffa1 	bl	80084fc <UART_CheckIdleState>
 80075ba:	4603      	mov	r3, r0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08a      	sub	sp, #40	@ 0x28
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	4613      	mov	r3, r2
 80075d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075da:	2b20      	cmp	r3, #32
 80075dc:	d17b      	bne.n	80076d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <HAL_UART_Transmit+0x26>
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e074      	b.n	80076d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2221      	movs	r2, #33	@ 0x21
 80075fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075fe:	f7fa f9ad 	bl	800195c <HAL_GetTick>
 8007602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	88fa      	ldrh	r2, [r7, #6]
 8007608:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	88fa      	ldrh	r2, [r7, #6]
 8007610:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800761c:	d108      	bne.n	8007630 <HAL_UART_Transmit+0x6c>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d104      	bne.n	8007630 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007626:	2300      	movs	r3, #0
 8007628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	61bb      	str	r3, [r7, #24]
 800762e:	e003      	b.n	8007638 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007634:	2300      	movs	r3, #0
 8007636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007638:	e030      	b.n	800769c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2200      	movs	r2, #0
 8007642:	2180      	movs	r1, #128	@ 0x80
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f001 f803 	bl	8008650 <UART_WaitOnFlagUntilTimeout>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d005      	beq.n	800765c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e03d      	b.n	80076d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10b      	bne.n	800767a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007670:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	3302      	adds	r3, #2
 8007676:	61bb      	str	r3, [r7, #24]
 8007678:	e007      	b.n	800768a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	781a      	ldrb	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	3301      	adds	r3, #1
 8007688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007690:	b29b      	uxth	r3, r3
 8007692:	3b01      	subs	r3, #1
 8007694:	b29a      	uxth	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1c8      	bne.n	800763a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2200      	movs	r2, #0
 80076b0:	2140      	movs	r1, #64	@ 0x40
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 ffcc 	bl	8008650 <UART_WaitOnFlagUntilTimeout>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e006      	b.n	80076d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2220      	movs	r2, #32
 80076ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	e000      	b.n	80076d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80076d6:	2302      	movs	r3, #2
  }
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3720      	adds	r7, #32
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076e4:	b092      	sub	sp, #72	@ 0x48
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	431a      	orrs	r2, r3
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	431a      	orrs	r2, r3
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	4313      	orrs	r3, r2
 8007706:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	4bbe      	ldr	r3, [pc, #760]	@ (8007a08 <UART_SetConfig+0x328>)
 8007710:	4013      	ands	r3, r2
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	6812      	ldr	r2, [r2, #0]
 8007716:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007718:	430b      	orrs	r3, r1
 800771a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4ab3      	ldr	r2, [pc, #716]	@ (8007a0c <UART_SetConfig+0x32c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d004      	beq.n	800774c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007748:	4313      	orrs	r3, r2
 800774a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	4baf      	ldr	r3, [pc, #700]	@ (8007a10 <UART_SetConfig+0x330>)
 8007754:	4013      	ands	r3, r2
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	6812      	ldr	r2, [r2, #0]
 800775a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800775c:	430b      	orrs	r3, r1
 800775e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007766:	f023 010f 	bic.w	r1, r3, #15
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4aa6      	ldr	r2, [pc, #664]	@ (8007a14 <UART_SetConfig+0x334>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d177      	bne.n	8007870 <UART_SetConfig+0x190>
 8007780:	4ba5      	ldr	r3, [pc, #660]	@ (8007a18 <UART_SetConfig+0x338>)
 8007782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007784:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007788:	2b28      	cmp	r3, #40	@ 0x28
 800778a:	d86d      	bhi.n	8007868 <UART_SetConfig+0x188>
 800778c:	a201      	add	r2, pc, #4	@ (adr r2, 8007794 <UART_SetConfig+0xb4>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	08007839 	.word	0x08007839
 8007798:	08007869 	.word	0x08007869
 800779c:	08007869 	.word	0x08007869
 80077a0:	08007869 	.word	0x08007869
 80077a4:	08007869 	.word	0x08007869
 80077a8:	08007869 	.word	0x08007869
 80077ac:	08007869 	.word	0x08007869
 80077b0:	08007869 	.word	0x08007869
 80077b4:	08007841 	.word	0x08007841
 80077b8:	08007869 	.word	0x08007869
 80077bc:	08007869 	.word	0x08007869
 80077c0:	08007869 	.word	0x08007869
 80077c4:	08007869 	.word	0x08007869
 80077c8:	08007869 	.word	0x08007869
 80077cc:	08007869 	.word	0x08007869
 80077d0:	08007869 	.word	0x08007869
 80077d4:	08007849 	.word	0x08007849
 80077d8:	08007869 	.word	0x08007869
 80077dc:	08007869 	.word	0x08007869
 80077e0:	08007869 	.word	0x08007869
 80077e4:	08007869 	.word	0x08007869
 80077e8:	08007869 	.word	0x08007869
 80077ec:	08007869 	.word	0x08007869
 80077f0:	08007869 	.word	0x08007869
 80077f4:	08007851 	.word	0x08007851
 80077f8:	08007869 	.word	0x08007869
 80077fc:	08007869 	.word	0x08007869
 8007800:	08007869 	.word	0x08007869
 8007804:	08007869 	.word	0x08007869
 8007808:	08007869 	.word	0x08007869
 800780c:	08007869 	.word	0x08007869
 8007810:	08007869 	.word	0x08007869
 8007814:	08007859 	.word	0x08007859
 8007818:	08007869 	.word	0x08007869
 800781c:	08007869 	.word	0x08007869
 8007820:	08007869 	.word	0x08007869
 8007824:	08007869 	.word	0x08007869
 8007828:	08007869 	.word	0x08007869
 800782c:	08007869 	.word	0x08007869
 8007830:	08007869 	.word	0x08007869
 8007834:	08007861 	.word	0x08007861
 8007838:	2301      	movs	r3, #1
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e326      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007840:	2304      	movs	r3, #4
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e322      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007848:	2308      	movs	r3, #8
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e31e      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007850:	2310      	movs	r3, #16
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007856:	e31a      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007858:	2320      	movs	r3, #32
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785e:	e316      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007860:	2340      	movs	r3, #64	@ 0x40
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007866:	e312      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007868:	2380      	movs	r3, #128	@ 0x80
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786e:	e30e      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a69      	ldr	r2, [pc, #420]	@ (8007a1c <UART_SetConfig+0x33c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d130      	bne.n	80078dc <UART_SetConfig+0x1fc>
 800787a:	4b67      	ldr	r3, [pc, #412]	@ (8007a18 <UART_SetConfig+0x338>)
 800787c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	2b05      	cmp	r3, #5
 8007884:	d826      	bhi.n	80078d4 <UART_SetConfig+0x1f4>
 8007886:	a201      	add	r2, pc, #4	@ (adr r2, 800788c <UART_SetConfig+0x1ac>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	080078a5 	.word	0x080078a5
 8007890:	080078ad 	.word	0x080078ad
 8007894:	080078b5 	.word	0x080078b5
 8007898:	080078bd 	.word	0x080078bd
 800789c:	080078c5 	.word	0x080078c5
 80078a0:	080078cd 	.word	0x080078cd
 80078a4:	2300      	movs	r3, #0
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e2f0      	b.n	8007e8e <UART_SetConfig+0x7ae>
 80078ac:	2304      	movs	r3, #4
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e2ec      	b.n	8007e8e <UART_SetConfig+0x7ae>
 80078b4:	2308      	movs	r3, #8
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ba:	e2e8      	b.n	8007e8e <UART_SetConfig+0x7ae>
 80078bc:	2310      	movs	r3, #16
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c2:	e2e4      	b.n	8007e8e <UART_SetConfig+0x7ae>
 80078c4:	2320      	movs	r3, #32
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ca:	e2e0      	b.n	8007e8e <UART_SetConfig+0x7ae>
 80078cc:	2340      	movs	r3, #64	@ 0x40
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d2:	e2dc      	b.n	8007e8e <UART_SetConfig+0x7ae>
 80078d4:	2380      	movs	r3, #128	@ 0x80
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078da:	e2d8      	b.n	8007e8e <UART_SetConfig+0x7ae>
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a4f      	ldr	r2, [pc, #316]	@ (8007a20 <UART_SetConfig+0x340>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d130      	bne.n	8007948 <UART_SetConfig+0x268>
 80078e6:	4b4c      	ldr	r3, [pc, #304]	@ (8007a18 <UART_SetConfig+0x338>)
 80078e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	2b05      	cmp	r3, #5
 80078f0:	d826      	bhi.n	8007940 <UART_SetConfig+0x260>
 80078f2:	a201      	add	r2, pc, #4	@ (adr r2, 80078f8 <UART_SetConfig+0x218>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007911 	.word	0x08007911
 80078fc:	08007919 	.word	0x08007919
 8007900:	08007921 	.word	0x08007921
 8007904:	08007929 	.word	0x08007929
 8007908:	08007931 	.word	0x08007931
 800790c:	08007939 	.word	0x08007939
 8007910:	2300      	movs	r3, #0
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e2ba      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007918:	2304      	movs	r3, #4
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e2b6      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007920:	2308      	movs	r3, #8
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e2b2      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007928:	2310      	movs	r3, #16
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792e:	e2ae      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007930:	2320      	movs	r3, #32
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e2aa      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007938:	2340      	movs	r3, #64	@ 0x40
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e2a6      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007940:	2380      	movs	r3, #128	@ 0x80
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007946:	e2a2      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a35      	ldr	r2, [pc, #212]	@ (8007a24 <UART_SetConfig+0x344>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d130      	bne.n	80079b4 <UART_SetConfig+0x2d4>
 8007952:	4b31      	ldr	r3, [pc, #196]	@ (8007a18 <UART_SetConfig+0x338>)
 8007954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	2b05      	cmp	r3, #5
 800795c:	d826      	bhi.n	80079ac <UART_SetConfig+0x2cc>
 800795e:	a201      	add	r2, pc, #4	@ (adr r2, 8007964 <UART_SetConfig+0x284>)
 8007960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007964:	0800797d 	.word	0x0800797d
 8007968:	08007985 	.word	0x08007985
 800796c:	0800798d 	.word	0x0800798d
 8007970:	08007995 	.word	0x08007995
 8007974:	0800799d 	.word	0x0800799d
 8007978:	080079a5 	.word	0x080079a5
 800797c:	2300      	movs	r3, #0
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e284      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007984:	2304      	movs	r3, #4
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e280      	b.n	8007e8e <UART_SetConfig+0x7ae>
 800798c:	2308      	movs	r3, #8
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e27c      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007994:	2310      	movs	r3, #16
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e278      	b.n	8007e8e <UART_SetConfig+0x7ae>
 800799c:	2320      	movs	r3, #32
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e274      	b.n	8007e8e <UART_SetConfig+0x7ae>
 80079a4:	2340      	movs	r3, #64	@ 0x40
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e270      	b.n	8007e8e <UART_SetConfig+0x7ae>
 80079ac:	2380      	movs	r3, #128	@ 0x80
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b2:	e26c      	b.n	8007e8e <UART_SetConfig+0x7ae>
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a1b      	ldr	r2, [pc, #108]	@ (8007a28 <UART_SetConfig+0x348>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d142      	bne.n	8007a44 <UART_SetConfig+0x364>
 80079be:	4b16      	ldr	r3, [pc, #88]	@ (8007a18 <UART_SetConfig+0x338>)
 80079c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	2b05      	cmp	r3, #5
 80079c8:	d838      	bhi.n	8007a3c <UART_SetConfig+0x35c>
 80079ca:	a201      	add	r2, pc, #4	@ (adr r2, 80079d0 <UART_SetConfig+0x2f0>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	080079e9 	.word	0x080079e9
 80079d4:	080079f1 	.word	0x080079f1
 80079d8:	080079f9 	.word	0x080079f9
 80079dc:	08007a01 	.word	0x08007a01
 80079e0:	08007a2d 	.word	0x08007a2d
 80079e4:	08007a35 	.word	0x08007a35
 80079e8:	2300      	movs	r3, #0
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e24e      	b.n	8007e8e <UART_SetConfig+0x7ae>
 80079f0:	2304      	movs	r3, #4
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e24a      	b.n	8007e8e <UART_SetConfig+0x7ae>
 80079f8:	2308      	movs	r3, #8
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fe:	e246      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007a00:	2310      	movs	r3, #16
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a06:	e242      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007a08:	cfff69f3 	.word	0xcfff69f3
 8007a0c:	58000c00 	.word	0x58000c00
 8007a10:	11fff4ff 	.word	0x11fff4ff
 8007a14:	40011000 	.word	0x40011000
 8007a18:	58024400 	.word	0x58024400
 8007a1c:	40004400 	.word	0x40004400
 8007a20:	40004800 	.word	0x40004800
 8007a24:	40004c00 	.word	0x40004c00
 8007a28:	40005000 	.word	0x40005000
 8007a2c:	2320      	movs	r3, #32
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a32:	e22c      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007a34:	2340      	movs	r3, #64	@ 0x40
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3a:	e228      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007a3c:	2380      	movs	r3, #128	@ 0x80
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a42:	e224      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4ab1      	ldr	r2, [pc, #708]	@ (8007d10 <UART_SetConfig+0x630>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d176      	bne.n	8007b3c <UART_SetConfig+0x45c>
 8007a4e:	4bb1      	ldr	r3, [pc, #708]	@ (8007d14 <UART_SetConfig+0x634>)
 8007a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a56:	2b28      	cmp	r3, #40	@ 0x28
 8007a58:	d86c      	bhi.n	8007b34 <UART_SetConfig+0x454>
 8007a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a60 <UART_SetConfig+0x380>)
 8007a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a60:	08007b05 	.word	0x08007b05
 8007a64:	08007b35 	.word	0x08007b35
 8007a68:	08007b35 	.word	0x08007b35
 8007a6c:	08007b35 	.word	0x08007b35
 8007a70:	08007b35 	.word	0x08007b35
 8007a74:	08007b35 	.word	0x08007b35
 8007a78:	08007b35 	.word	0x08007b35
 8007a7c:	08007b35 	.word	0x08007b35
 8007a80:	08007b0d 	.word	0x08007b0d
 8007a84:	08007b35 	.word	0x08007b35
 8007a88:	08007b35 	.word	0x08007b35
 8007a8c:	08007b35 	.word	0x08007b35
 8007a90:	08007b35 	.word	0x08007b35
 8007a94:	08007b35 	.word	0x08007b35
 8007a98:	08007b35 	.word	0x08007b35
 8007a9c:	08007b35 	.word	0x08007b35
 8007aa0:	08007b15 	.word	0x08007b15
 8007aa4:	08007b35 	.word	0x08007b35
 8007aa8:	08007b35 	.word	0x08007b35
 8007aac:	08007b35 	.word	0x08007b35
 8007ab0:	08007b35 	.word	0x08007b35
 8007ab4:	08007b35 	.word	0x08007b35
 8007ab8:	08007b35 	.word	0x08007b35
 8007abc:	08007b35 	.word	0x08007b35
 8007ac0:	08007b1d 	.word	0x08007b1d
 8007ac4:	08007b35 	.word	0x08007b35
 8007ac8:	08007b35 	.word	0x08007b35
 8007acc:	08007b35 	.word	0x08007b35
 8007ad0:	08007b35 	.word	0x08007b35
 8007ad4:	08007b35 	.word	0x08007b35
 8007ad8:	08007b35 	.word	0x08007b35
 8007adc:	08007b35 	.word	0x08007b35
 8007ae0:	08007b25 	.word	0x08007b25
 8007ae4:	08007b35 	.word	0x08007b35
 8007ae8:	08007b35 	.word	0x08007b35
 8007aec:	08007b35 	.word	0x08007b35
 8007af0:	08007b35 	.word	0x08007b35
 8007af4:	08007b35 	.word	0x08007b35
 8007af8:	08007b35 	.word	0x08007b35
 8007afc:	08007b35 	.word	0x08007b35
 8007b00:	08007b2d 	.word	0x08007b2d
 8007b04:	2301      	movs	r3, #1
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0a:	e1c0      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007b0c:	2304      	movs	r3, #4
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b12:	e1bc      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007b14:	2308      	movs	r3, #8
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1a:	e1b8      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007b1c:	2310      	movs	r3, #16
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b22:	e1b4      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007b24:	2320      	movs	r3, #32
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2a:	e1b0      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007b2c:	2340      	movs	r3, #64	@ 0x40
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b32:	e1ac      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007b34:	2380      	movs	r3, #128	@ 0x80
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3a:	e1a8      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a75      	ldr	r2, [pc, #468]	@ (8007d18 <UART_SetConfig+0x638>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d130      	bne.n	8007ba8 <UART_SetConfig+0x4c8>
 8007b46:	4b73      	ldr	r3, [pc, #460]	@ (8007d14 <UART_SetConfig+0x634>)
 8007b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	2b05      	cmp	r3, #5
 8007b50:	d826      	bhi.n	8007ba0 <UART_SetConfig+0x4c0>
 8007b52:	a201      	add	r2, pc, #4	@ (adr r2, 8007b58 <UART_SetConfig+0x478>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b71 	.word	0x08007b71
 8007b5c:	08007b79 	.word	0x08007b79
 8007b60:	08007b81 	.word	0x08007b81
 8007b64:	08007b89 	.word	0x08007b89
 8007b68:	08007b91 	.word	0x08007b91
 8007b6c:	08007b99 	.word	0x08007b99
 8007b70:	2300      	movs	r3, #0
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b76:	e18a      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007b78:	2304      	movs	r3, #4
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	e186      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007b80:	2308      	movs	r3, #8
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b86:	e182      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007b88:	2310      	movs	r3, #16
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8e:	e17e      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007b90:	2320      	movs	r3, #32
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b96:	e17a      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007b98:	2340      	movs	r3, #64	@ 0x40
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9e:	e176      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007ba0:	2380      	movs	r3, #128	@ 0x80
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba6:	e172      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a5b      	ldr	r2, [pc, #364]	@ (8007d1c <UART_SetConfig+0x63c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d130      	bne.n	8007c14 <UART_SetConfig+0x534>
 8007bb2:	4b58      	ldr	r3, [pc, #352]	@ (8007d14 <UART_SetConfig+0x634>)
 8007bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	2b05      	cmp	r3, #5
 8007bbc:	d826      	bhi.n	8007c0c <UART_SetConfig+0x52c>
 8007bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc4 <UART_SetConfig+0x4e4>)
 8007bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc4:	08007bdd 	.word	0x08007bdd
 8007bc8:	08007be5 	.word	0x08007be5
 8007bcc:	08007bed 	.word	0x08007bed
 8007bd0:	08007bf5 	.word	0x08007bf5
 8007bd4:	08007bfd 	.word	0x08007bfd
 8007bd8:	08007c05 	.word	0x08007c05
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be2:	e154      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007be4:	2304      	movs	r3, #4
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bea:	e150      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007bec:	2308      	movs	r3, #8
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf2:	e14c      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007bf4:	2310      	movs	r3, #16
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfa:	e148      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007bfc:	2320      	movs	r3, #32
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c02:	e144      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007c04:	2340      	movs	r3, #64	@ 0x40
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0a:	e140      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007c0c:	2380      	movs	r3, #128	@ 0x80
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c12:	e13c      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a41      	ldr	r2, [pc, #260]	@ (8007d20 <UART_SetConfig+0x640>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	f040 8082 	bne.w	8007d24 <UART_SetConfig+0x644>
 8007c20:	4b3c      	ldr	r3, [pc, #240]	@ (8007d14 <UART_SetConfig+0x634>)
 8007c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c28:	2b28      	cmp	r3, #40	@ 0x28
 8007c2a:	d86d      	bhi.n	8007d08 <UART_SetConfig+0x628>
 8007c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c34 <UART_SetConfig+0x554>)
 8007c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c32:	bf00      	nop
 8007c34:	08007cd9 	.word	0x08007cd9
 8007c38:	08007d09 	.word	0x08007d09
 8007c3c:	08007d09 	.word	0x08007d09
 8007c40:	08007d09 	.word	0x08007d09
 8007c44:	08007d09 	.word	0x08007d09
 8007c48:	08007d09 	.word	0x08007d09
 8007c4c:	08007d09 	.word	0x08007d09
 8007c50:	08007d09 	.word	0x08007d09
 8007c54:	08007ce1 	.word	0x08007ce1
 8007c58:	08007d09 	.word	0x08007d09
 8007c5c:	08007d09 	.word	0x08007d09
 8007c60:	08007d09 	.word	0x08007d09
 8007c64:	08007d09 	.word	0x08007d09
 8007c68:	08007d09 	.word	0x08007d09
 8007c6c:	08007d09 	.word	0x08007d09
 8007c70:	08007d09 	.word	0x08007d09
 8007c74:	08007ce9 	.word	0x08007ce9
 8007c78:	08007d09 	.word	0x08007d09
 8007c7c:	08007d09 	.word	0x08007d09
 8007c80:	08007d09 	.word	0x08007d09
 8007c84:	08007d09 	.word	0x08007d09
 8007c88:	08007d09 	.word	0x08007d09
 8007c8c:	08007d09 	.word	0x08007d09
 8007c90:	08007d09 	.word	0x08007d09
 8007c94:	08007cf1 	.word	0x08007cf1
 8007c98:	08007d09 	.word	0x08007d09
 8007c9c:	08007d09 	.word	0x08007d09
 8007ca0:	08007d09 	.word	0x08007d09
 8007ca4:	08007d09 	.word	0x08007d09
 8007ca8:	08007d09 	.word	0x08007d09
 8007cac:	08007d09 	.word	0x08007d09
 8007cb0:	08007d09 	.word	0x08007d09
 8007cb4:	08007cf9 	.word	0x08007cf9
 8007cb8:	08007d09 	.word	0x08007d09
 8007cbc:	08007d09 	.word	0x08007d09
 8007cc0:	08007d09 	.word	0x08007d09
 8007cc4:	08007d09 	.word	0x08007d09
 8007cc8:	08007d09 	.word	0x08007d09
 8007ccc:	08007d09 	.word	0x08007d09
 8007cd0:	08007d09 	.word	0x08007d09
 8007cd4:	08007d01 	.word	0x08007d01
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cde:	e0d6      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007ce0:	2304      	movs	r3, #4
 8007ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce6:	e0d2      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007ce8:	2308      	movs	r3, #8
 8007cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cee:	e0ce      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf6:	e0ca      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007cf8:	2320      	movs	r3, #32
 8007cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfe:	e0c6      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007d00:	2340      	movs	r3, #64	@ 0x40
 8007d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d06:	e0c2      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007d08:	2380      	movs	r3, #128	@ 0x80
 8007d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0e:	e0be      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007d10:	40011400 	.word	0x40011400
 8007d14:	58024400 	.word	0x58024400
 8007d18:	40007800 	.word	0x40007800
 8007d1c:	40007c00 	.word	0x40007c00
 8007d20:	40011800 	.word	0x40011800
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4aad      	ldr	r2, [pc, #692]	@ (8007fe0 <UART_SetConfig+0x900>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d176      	bne.n	8007e1c <UART_SetConfig+0x73c>
 8007d2e:	4bad      	ldr	r3, [pc, #692]	@ (8007fe4 <UART_SetConfig+0x904>)
 8007d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d36:	2b28      	cmp	r3, #40	@ 0x28
 8007d38:	d86c      	bhi.n	8007e14 <UART_SetConfig+0x734>
 8007d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d40 <UART_SetConfig+0x660>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007de5 	.word	0x08007de5
 8007d44:	08007e15 	.word	0x08007e15
 8007d48:	08007e15 	.word	0x08007e15
 8007d4c:	08007e15 	.word	0x08007e15
 8007d50:	08007e15 	.word	0x08007e15
 8007d54:	08007e15 	.word	0x08007e15
 8007d58:	08007e15 	.word	0x08007e15
 8007d5c:	08007e15 	.word	0x08007e15
 8007d60:	08007ded 	.word	0x08007ded
 8007d64:	08007e15 	.word	0x08007e15
 8007d68:	08007e15 	.word	0x08007e15
 8007d6c:	08007e15 	.word	0x08007e15
 8007d70:	08007e15 	.word	0x08007e15
 8007d74:	08007e15 	.word	0x08007e15
 8007d78:	08007e15 	.word	0x08007e15
 8007d7c:	08007e15 	.word	0x08007e15
 8007d80:	08007df5 	.word	0x08007df5
 8007d84:	08007e15 	.word	0x08007e15
 8007d88:	08007e15 	.word	0x08007e15
 8007d8c:	08007e15 	.word	0x08007e15
 8007d90:	08007e15 	.word	0x08007e15
 8007d94:	08007e15 	.word	0x08007e15
 8007d98:	08007e15 	.word	0x08007e15
 8007d9c:	08007e15 	.word	0x08007e15
 8007da0:	08007dfd 	.word	0x08007dfd
 8007da4:	08007e15 	.word	0x08007e15
 8007da8:	08007e15 	.word	0x08007e15
 8007dac:	08007e15 	.word	0x08007e15
 8007db0:	08007e15 	.word	0x08007e15
 8007db4:	08007e15 	.word	0x08007e15
 8007db8:	08007e15 	.word	0x08007e15
 8007dbc:	08007e15 	.word	0x08007e15
 8007dc0:	08007e05 	.word	0x08007e05
 8007dc4:	08007e15 	.word	0x08007e15
 8007dc8:	08007e15 	.word	0x08007e15
 8007dcc:	08007e15 	.word	0x08007e15
 8007dd0:	08007e15 	.word	0x08007e15
 8007dd4:	08007e15 	.word	0x08007e15
 8007dd8:	08007e15 	.word	0x08007e15
 8007ddc:	08007e15 	.word	0x08007e15
 8007de0:	08007e0d 	.word	0x08007e0d
 8007de4:	2301      	movs	r3, #1
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dea:	e050      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007dec:	2304      	movs	r3, #4
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df2:	e04c      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007df4:	2308      	movs	r3, #8
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfa:	e048      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e02:	e044      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007e04:	2320      	movs	r3, #32
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0a:	e040      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007e0c:	2340      	movs	r3, #64	@ 0x40
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e12:	e03c      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007e14:	2380      	movs	r3, #128	@ 0x80
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1a:	e038      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a71      	ldr	r2, [pc, #452]	@ (8007fe8 <UART_SetConfig+0x908>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d130      	bne.n	8007e88 <UART_SetConfig+0x7a8>
 8007e26:	4b6f      	ldr	r3, [pc, #444]	@ (8007fe4 <UART_SetConfig+0x904>)
 8007e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	2b05      	cmp	r3, #5
 8007e30:	d826      	bhi.n	8007e80 <UART_SetConfig+0x7a0>
 8007e32:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <UART_SetConfig+0x758>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e51 	.word	0x08007e51
 8007e3c:	08007e59 	.word	0x08007e59
 8007e40:	08007e61 	.word	0x08007e61
 8007e44:	08007e69 	.word	0x08007e69
 8007e48:	08007e71 	.word	0x08007e71
 8007e4c:	08007e79 	.word	0x08007e79
 8007e50:	2302      	movs	r3, #2
 8007e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e56:	e01a      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007e58:	2304      	movs	r3, #4
 8007e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5e:	e016      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007e60:	2308      	movs	r3, #8
 8007e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e66:	e012      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007e68:	2310      	movs	r3, #16
 8007e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6e:	e00e      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007e70:	2320      	movs	r3, #32
 8007e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e76:	e00a      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007e78:	2340      	movs	r3, #64	@ 0x40
 8007e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e7e:	e006      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007e80:	2380      	movs	r3, #128	@ 0x80
 8007e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e86:	e002      	b.n	8007e8e <UART_SetConfig+0x7ae>
 8007e88:	2380      	movs	r3, #128	@ 0x80
 8007e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a55      	ldr	r2, [pc, #340]	@ (8007fe8 <UART_SetConfig+0x908>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	f040 80f8 	bne.w	800808a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	dc46      	bgt.n	8007f30 <UART_SetConfig+0x850>
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	db75      	blt.n	8007f92 <UART_SetConfig+0x8b2>
 8007ea6:	3b02      	subs	r3, #2
 8007ea8:	2b1e      	cmp	r3, #30
 8007eaa:	d872      	bhi.n	8007f92 <UART_SetConfig+0x8b2>
 8007eac:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb4 <UART_SetConfig+0x7d4>)
 8007eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb2:	bf00      	nop
 8007eb4:	08007f37 	.word	0x08007f37
 8007eb8:	08007f93 	.word	0x08007f93
 8007ebc:	08007f3f 	.word	0x08007f3f
 8007ec0:	08007f93 	.word	0x08007f93
 8007ec4:	08007f93 	.word	0x08007f93
 8007ec8:	08007f93 	.word	0x08007f93
 8007ecc:	08007f4f 	.word	0x08007f4f
 8007ed0:	08007f93 	.word	0x08007f93
 8007ed4:	08007f93 	.word	0x08007f93
 8007ed8:	08007f93 	.word	0x08007f93
 8007edc:	08007f93 	.word	0x08007f93
 8007ee0:	08007f93 	.word	0x08007f93
 8007ee4:	08007f93 	.word	0x08007f93
 8007ee8:	08007f93 	.word	0x08007f93
 8007eec:	08007f5f 	.word	0x08007f5f
 8007ef0:	08007f93 	.word	0x08007f93
 8007ef4:	08007f93 	.word	0x08007f93
 8007ef8:	08007f93 	.word	0x08007f93
 8007efc:	08007f93 	.word	0x08007f93
 8007f00:	08007f93 	.word	0x08007f93
 8007f04:	08007f93 	.word	0x08007f93
 8007f08:	08007f93 	.word	0x08007f93
 8007f0c:	08007f93 	.word	0x08007f93
 8007f10:	08007f93 	.word	0x08007f93
 8007f14:	08007f93 	.word	0x08007f93
 8007f18:	08007f93 	.word	0x08007f93
 8007f1c:	08007f93 	.word	0x08007f93
 8007f20:	08007f93 	.word	0x08007f93
 8007f24:	08007f93 	.word	0x08007f93
 8007f28:	08007f93 	.word	0x08007f93
 8007f2c:	08007f85 	.word	0x08007f85
 8007f30:	2b40      	cmp	r3, #64	@ 0x40
 8007f32:	d02a      	beq.n	8007f8a <UART_SetConfig+0x8aa>
 8007f34:	e02d      	b.n	8007f92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f36:	f7fe f897 	bl	8006068 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f3c:	e02f      	b.n	8007f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe f8a6 	bl	8006094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f4c:	e027      	b.n	8007f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f4e:	f107 0318 	add.w	r3, r7, #24
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fe f9f2 	bl	800633c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f5c:	e01f      	b.n	8007f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f5e:	4b21      	ldr	r3, [pc, #132]	@ (8007fe4 <UART_SetConfig+0x904>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d009      	beq.n	8007f7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe4 <UART_SetConfig+0x904>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	08db      	lsrs	r3, r3, #3
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	4a1d      	ldr	r2, [pc, #116]	@ (8007fec <UART_SetConfig+0x90c>)
 8007f76:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f7c:	e00f      	b.n	8007f9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8007fec <UART_SetConfig+0x90c>)
 8007f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f82:	e00c      	b.n	8007f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f84:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff0 <UART_SetConfig+0x910>)
 8007f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f88:	e009      	b.n	8007f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f90:	e005      	b.n	8007f9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 81ee 	beq.w	8008382 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007faa:	4a12      	ldr	r2, [pc, #72]	@ (8007ff4 <UART_SetConfig+0x914>)
 8007fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fb8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	4413      	add	r3, r2
 8007fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d305      	bcc.n	8007fd6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d910      	bls.n	8007ff8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007fdc:	e1d1      	b.n	8008382 <UART_SetConfig+0xca2>
 8007fde:	bf00      	nop
 8007fe0:	40011c00 	.word	0x40011c00
 8007fe4:	58024400 	.word	0x58024400
 8007fe8:	58000c00 	.word	0x58000c00
 8007fec:	03d09000 	.word	0x03d09000
 8007ff0:	003d0900 	.word	0x003d0900
 8007ff4:	080093c8 	.word	0x080093c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	60bb      	str	r3, [r7, #8]
 8007ffe:	60fa      	str	r2, [r7, #12]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008004:	4ac0      	ldr	r2, [pc, #768]	@ (8008308 <UART_SetConfig+0xc28>)
 8008006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800800a:	b29b      	uxth	r3, r3
 800800c:	2200      	movs	r2, #0
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	607a      	str	r2, [r7, #4]
 8008012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008016:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800801a:	f7f8 f9b9 	bl	8000390 <__aeabi_uldivmod>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4610      	mov	r0, r2
 8008024:	4619      	mov	r1, r3
 8008026:	f04f 0200 	mov.w	r2, #0
 800802a:	f04f 0300 	mov.w	r3, #0
 800802e:	020b      	lsls	r3, r1, #8
 8008030:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008034:	0202      	lsls	r2, r0, #8
 8008036:	6979      	ldr	r1, [r7, #20]
 8008038:	6849      	ldr	r1, [r1, #4]
 800803a:	0849      	lsrs	r1, r1, #1
 800803c:	2000      	movs	r0, #0
 800803e:	460c      	mov	r4, r1
 8008040:	4605      	mov	r5, r0
 8008042:	eb12 0804 	adds.w	r8, r2, r4
 8008046:	eb43 0905 	adc.w	r9, r3, r5
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	469a      	mov	sl, r3
 8008052:	4693      	mov	fp, r2
 8008054:	4652      	mov	r2, sl
 8008056:	465b      	mov	r3, fp
 8008058:	4640      	mov	r0, r8
 800805a:	4649      	mov	r1, r9
 800805c:	f7f8 f998 	bl	8000390 <__aeabi_uldivmod>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4613      	mov	r3, r2
 8008066:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800806e:	d308      	bcc.n	8008082 <UART_SetConfig+0x9a2>
 8008070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008076:	d204      	bcs.n	8008082 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800807e:	60da      	str	r2, [r3, #12]
 8008080:	e17f      	b.n	8008382 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008088:	e17b      	b.n	8008382 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008092:	f040 80bd 	bne.w	8008210 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008096:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800809a:	2b20      	cmp	r3, #32
 800809c:	dc48      	bgt.n	8008130 <UART_SetConfig+0xa50>
 800809e:	2b00      	cmp	r3, #0
 80080a0:	db7b      	blt.n	800819a <UART_SetConfig+0xaba>
 80080a2:	2b20      	cmp	r3, #32
 80080a4:	d879      	bhi.n	800819a <UART_SetConfig+0xaba>
 80080a6:	a201      	add	r2, pc, #4	@ (adr r2, 80080ac <UART_SetConfig+0x9cc>)
 80080a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ac:	08008137 	.word	0x08008137
 80080b0:	0800813f 	.word	0x0800813f
 80080b4:	0800819b 	.word	0x0800819b
 80080b8:	0800819b 	.word	0x0800819b
 80080bc:	08008147 	.word	0x08008147
 80080c0:	0800819b 	.word	0x0800819b
 80080c4:	0800819b 	.word	0x0800819b
 80080c8:	0800819b 	.word	0x0800819b
 80080cc:	08008157 	.word	0x08008157
 80080d0:	0800819b 	.word	0x0800819b
 80080d4:	0800819b 	.word	0x0800819b
 80080d8:	0800819b 	.word	0x0800819b
 80080dc:	0800819b 	.word	0x0800819b
 80080e0:	0800819b 	.word	0x0800819b
 80080e4:	0800819b 	.word	0x0800819b
 80080e8:	0800819b 	.word	0x0800819b
 80080ec:	08008167 	.word	0x08008167
 80080f0:	0800819b 	.word	0x0800819b
 80080f4:	0800819b 	.word	0x0800819b
 80080f8:	0800819b 	.word	0x0800819b
 80080fc:	0800819b 	.word	0x0800819b
 8008100:	0800819b 	.word	0x0800819b
 8008104:	0800819b 	.word	0x0800819b
 8008108:	0800819b 	.word	0x0800819b
 800810c:	0800819b 	.word	0x0800819b
 8008110:	0800819b 	.word	0x0800819b
 8008114:	0800819b 	.word	0x0800819b
 8008118:	0800819b 	.word	0x0800819b
 800811c:	0800819b 	.word	0x0800819b
 8008120:	0800819b 	.word	0x0800819b
 8008124:	0800819b 	.word	0x0800819b
 8008128:	0800819b 	.word	0x0800819b
 800812c:	0800818d 	.word	0x0800818d
 8008130:	2b40      	cmp	r3, #64	@ 0x40
 8008132:	d02e      	beq.n	8008192 <UART_SetConfig+0xab2>
 8008134:	e031      	b.n	800819a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008136:	f7fc f8d5 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
 800813a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800813c:	e033      	b.n	80081a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800813e:	f7fc f8e7 	bl	8004310 <HAL_RCC_GetPCLK2Freq>
 8008142:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008144:	e02f      	b.n	80081a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800814a:	4618      	mov	r0, r3
 800814c:	f7fd ffa2 	bl	8006094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008154:	e027      	b.n	80081a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008156:	f107 0318 	add.w	r3, r7, #24
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe f8ee 	bl	800633c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008164:	e01f      	b.n	80081a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008166:	4b69      	ldr	r3, [pc, #420]	@ (800830c <UART_SetConfig+0xc2c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0320 	and.w	r3, r3, #32
 800816e:	2b00      	cmp	r3, #0
 8008170:	d009      	beq.n	8008186 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008172:	4b66      	ldr	r3, [pc, #408]	@ (800830c <UART_SetConfig+0xc2c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	08db      	lsrs	r3, r3, #3
 8008178:	f003 0303 	and.w	r3, r3, #3
 800817c:	4a64      	ldr	r2, [pc, #400]	@ (8008310 <UART_SetConfig+0xc30>)
 800817e:	fa22 f303 	lsr.w	r3, r2, r3
 8008182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008184:	e00f      	b.n	80081a6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008186:	4b62      	ldr	r3, [pc, #392]	@ (8008310 <UART_SetConfig+0xc30>)
 8008188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800818a:	e00c      	b.n	80081a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800818c:	4b61      	ldr	r3, [pc, #388]	@ (8008314 <UART_SetConfig+0xc34>)
 800818e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008190:	e009      	b.n	80081a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008198:	e005      	b.n	80081a6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80081a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 80ea 	beq.w	8008382 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b2:	4a55      	ldr	r2, [pc, #340]	@ (8008308 <UART_SetConfig+0xc28>)
 80081b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081b8:	461a      	mov	r2, r3
 80081ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80081c0:	005a      	lsls	r2, r3, #1
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	085b      	lsrs	r3, r3, #1
 80081c8:	441a      	add	r2, r3
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d6:	2b0f      	cmp	r3, #15
 80081d8:	d916      	bls.n	8008208 <UART_SetConfig+0xb28>
 80081da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081e0:	d212      	bcs.n	8008208 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	f023 030f 	bic.w	r3, r3, #15
 80081ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ee:	085b      	lsrs	r3, r3, #1
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80081fa:	4313      	orrs	r3, r2
 80081fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008204:	60da      	str	r2, [r3, #12]
 8008206:	e0bc      	b.n	8008382 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800820e:	e0b8      	b.n	8008382 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008210:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008214:	2b20      	cmp	r3, #32
 8008216:	dc4b      	bgt.n	80082b0 <UART_SetConfig+0xbd0>
 8008218:	2b00      	cmp	r3, #0
 800821a:	f2c0 8087 	blt.w	800832c <UART_SetConfig+0xc4c>
 800821e:	2b20      	cmp	r3, #32
 8008220:	f200 8084 	bhi.w	800832c <UART_SetConfig+0xc4c>
 8008224:	a201      	add	r2, pc, #4	@ (adr r2, 800822c <UART_SetConfig+0xb4c>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	080082b7 	.word	0x080082b7
 8008230:	080082bf 	.word	0x080082bf
 8008234:	0800832d 	.word	0x0800832d
 8008238:	0800832d 	.word	0x0800832d
 800823c:	080082c7 	.word	0x080082c7
 8008240:	0800832d 	.word	0x0800832d
 8008244:	0800832d 	.word	0x0800832d
 8008248:	0800832d 	.word	0x0800832d
 800824c:	080082d7 	.word	0x080082d7
 8008250:	0800832d 	.word	0x0800832d
 8008254:	0800832d 	.word	0x0800832d
 8008258:	0800832d 	.word	0x0800832d
 800825c:	0800832d 	.word	0x0800832d
 8008260:	0800832d 	.word	0x0800832d
 8008264:	0800832d 	.word	0x0800832d
 8008268:	0800832d 	.word	0x0800832d
 800826c:	080082e7 	.word	0x080082e7
 8008270:	0800832d 	.word	0x0800832d
 8008274:	0800832d 	.word	0x0800832d
 8008278:	0800832d 	.word	0x0800832d
 800827c:	0800832d 	.word	0x0800832d
 8008280:	0800832d 	.word	0x0800832d
 8008284:	0800832d 	.word	0x0800832d
 8008288:	0800832d 	.word	0x0800832d
 800828c:	0800832d 	.word	0x0800832d
 8008290:	0800832d 	.word	0x0800832d
 8008294:	0800832d 	.word	0x0800832d
 8008298:	0800832d 	.word	0x0800832d
 800829c:	0800832d 	.word	0x0800832d
 80082a0:	0800832d 	.word	0x0800832d
 80082a4:	0800832d 	.word	0x0800832d
 80082a8:	0800832d 	.word	0x0800832d
 80082ac:	0800831f 	.word	0x0800831f
 80082b0:	2b40      	cmp	r3, #64	@ 0x40
 80082b2:	d037      	beq.n	8008324 <UART_SetConfig+0xc44>
 80082b4:	e03a      	b.n	800832c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082b6:	f7fc f815 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
 80082ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082bc:	e03c      	b.n	8008338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082be:	f7fc f827 	bl	8004310 <HAL_RCC_GetPCLK2Freq>
 80082c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082c4:	e038      	b.n	8008338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fd fee2 	bl	8006094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d4:	e030      	b.n	8008338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082d6:	f107 0318 	add.w	r3, r7, #24
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe f82e 	bl	800633c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082e4:	e028      	b.n	8008338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082e6:	4b09      	ldr	r3, [pc, #36]	@ (800830c <UART_SetConfig+0xc2c>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d012      	beq.n	8008318 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082f2:	4b06      	ldr	r3, [pc, #24]	@ (800830c <UART_SetConfig+0xc2c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	08db      	lsrs	r3, r3, #3
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	4a04      	ldr	r2, [pc, #16]	@ (8008310 <UART_SetConfig+0xc30>)
 80082fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008304:	e018      	b.n	8008338 <UART_SetConfig+0xc58>
 8008306:	bf00      	nop
 8008308:	080093c8 	.word	0x080093c8
 800830c:	58024400 	.word	0x58024400
 8008310:	03d09000 	.word	0x03d09000
 8008314:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008318:	4b24      	ldr	r3, [pc, #144]	@ (80083ac <UART_SetConfig+0xccc>)
 800831a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800831c:	e00c      	b.n	8008338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800831e:	4b24      	ldr	r3, [pc, #144]	@ (80083b0 <UART_SetConfig+0xcd0>)
 8008320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008322:	e009      	b.n	8008338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008324:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800832a:	e005      	b.n	8008338 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800832c:	2300      	movs	r3, #0
 800832e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008336:	bf00      	nop
    }

    if (pclk != 0U)
 8008338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d021      	beq.n	8008382 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008342:	4a1c      	ldr	r2, [pc, #112]	@ (80083b4 <UART_SetConfig+0xcd4>)
 8008344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008348:	461a      	mov	r2, r3
 800834a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800834c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	085b      	lsrs	r3, r3, #1
 8008356:	441a      	add	r2, r3
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008360:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008364:	2b0f      	cmp	r3, #15
 8008366:	d909      	bls.n	800837c <UART_SetConfig+0xc9c>
 8008368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800836e:	d205      	bcs.n	800837c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008372:	b29a      	uxth	r2, r3
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	60da      	str	r2, [r3, #12]
 800837a:	e002      	b.n	8008382 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2201      	movs	r2, #1
 8008386:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2201      	movs	r2, #1
 800838e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2200      	movs	r2, #0
 8008396:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	2200      	movs	r2, #0
 800839c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800839e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3748      	adds	r7, #72	@ 0x48
 80083a6:	46bd      	mov	sp, r7
 80083a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083ac:	03d09000 	.word	0x03d09000
 80083b0:	003d0900 	.word	0x003d0900
 80083b4:	080093c8 	.word	0x080093c8

080083b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c4:	f003 0301 	and.w	r3, r3, #1
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00a      	beq.n	80083e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00a      	beq.n	8008404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	430a      	orrs	r2, r1
 8008402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00a      	beq.n	8008426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	430a      	orrs	r2, r1
 8008424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842a:	f003 0308 	and.w	r3, r3, #8
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00a      	beq.n	8008448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	430a      	orrs	r2, r1
 8008446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844c:	f003 0310 	and.w	r3, r3, #16
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00a      	beq.n	800846a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846e:	f003 0320 	and.w	r3, r3, #32
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01a      	beq.n	80084ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084b6:	d10a      	bne.n	80084ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00a      	beq.n	80084f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	430a      	orrs	r2, r1
 80084ee:	605a      	str	r2, [r3, #4]
  }
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b098      	sub	sp, #96	@ 0x60
 8008500:	af02      	add	r7, sp, #8
 8008502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800850c:	f7f9 fa26 	bl	800195c <HAL_GetTick>
 8008510:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0308 	and.w	r3, r3, #8
 800851c:	2b08      	cmp	r3, #8
 800851e:	d12f      	bne.n	8008580 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008520:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008528:	2200      	movs	r2, #0
 800852a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f88e 	bl	8008650 <UART_WaitOnFlagUntilTimeout>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d022      	beq.n	8008580 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008542:	e853 3f00 	ldrex	r3, [r3]
 8008546:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800854a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800854e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	461a      	mov	r2, r3
 8008556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008558:	647b      	str	r3, [r7, #68]	@ 0x44
 800855a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800855e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008560:	e841 2300 	strex	r3, r2, [r1]
 8008564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e6      	bne.n	800853a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2220      	movs	r2, #32
 8008570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e063      	b.n	8008648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0304 	and.w	r3, r3, #4
 800858a:	2b04      	cmp	r3, #4
 800858c:	d149      	bne.n	8008622 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800858e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008596:	2200      	movs	r2, #0
 8008598:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f857 	bl	8008650 <UART_WaitOnFlagUntilTimeout>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d03c      	beq.n	8008622 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	623b      	str	r3, [r7, #32]
   return(result);
 80085b6:	6a3b      	ldr	r3, [r7, #32]
 80085b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80085c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1e6      	bne.n	80085a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3308      	adds	r3, #8
 80085e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	e853 3f00 	ldrex	r3, [r3]
 80085e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f023 0301 	bic.w	r3, r3, #1
 80085f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3308      	adds	r3, #8
 80085f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085fa:	61fa      	str	r2, [r7, #28]
 80085fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fe:	69b9      	ldr	r1, [r7, #24]
 8008600:	69fa      	ldr	r2, [r7, #28]
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	617b      	str	r3, [r7, #20]
   return(result);
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1e5      	bne.n	80085da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2220      	movs	r2, #32
 8008612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e012      	b.n	8008648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2220      	movs	r2, #32
 8008626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2220      	movs	r2, #32
 800862e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3758      	adds	r7, #88	@ 0x58
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	603b      	str	r3, [r7, #0]
 800865c:	4613      	mov	r3, r2
 800865e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008660:	e049      	b.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008668:	d045      	beq.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800866a:	f7f9 f977 	bl	800195c <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	429a      	cmp	r2, r3
 8008678:	d302      	bcc.n	8008680 <UART_WaitOnFlagUntilTimeout+0x30>
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e048      	b.n	8008716 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0304 	and.w	r3, r3, #4
 800868e:	2b00      	cmp	r3, #0
 8008690:	d031      	beq.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b08      	cmp	r3, #8
 800869e:	d110      	bne.n	80086c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2208      	movs	r2, #8
 80086a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 f839 	bl	8008720 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2208      	movs	r2, #8
 80086b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e029      	b.n	8008716 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	69db      	ldr	r3, [r3, #28]
 80086c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086d0:	d111      	bne.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 f81f 	bl	8008720 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e00f      	b.n	8008716 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69da      	ldr	r2, [r3, #28]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4013      	ands	r3, r2
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	429a      	cmp	r2, r3
 8008704:	bf0c      	ite	eq
 8008706:	2301      	moveq	r3, #1
 8008708:	2300      	movne	r3, #0
 800870a:	b2db      	uxtb	r3, r3
 800870c:	461a      	mov	r2, r3
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	429a      	cmp	r2, r3
 8008712:	d0a6      	beq.n	8008662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008720:	b480      	push	{r7}
 8008722:	b095      	sub	sp, #84	@ 0x54
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008738:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800873c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008746:	643b      	str	r3, [r7, #64]	@ 0x40
 8008748:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800874c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e6      	bne.n	8008728 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	61fb      	str	r3, [r7, #28]
   return(result);
 800876a:	69fa      	ldr	r2, [r7, #28]
 800876c:	4b1e      	ldr	r3, [pc, #120]	@ (80087e8 <UART_EndRxTransfer+0xc8>)
 800876e:	4013      	ands	r3, r2
 8008770:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3308      	adds	r3, #8
 8008778:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800877a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800877c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008780:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e5      	bne.n	800875a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008792:	2b01      	cmp	r3, #1
 8008794:	d118      	bne.n	80087c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f023 0310 	bic.w	r3, r3, #16
 80087aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087b4:	61bb      	str	r3, [r7, #24]
 80087b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	6979      	ldr	r1, [r7, #20]
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	e841 2300 	strex	r3, r2, [r1]
 80087c0:	613b      	str	r3, [r7, #16]
   return(result);
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e6      	bne.n	8008796 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80087dc:	bf00      	nop
 80087de:	3754      	adds	r7, #84	@ 0x54
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	effffffe 	.word	0xeffffffe

080087ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d101      	bne.n	8008802 <HAL_UARTEx_DisableFifoMode+0x16>
 80087fe:	2302      	movs	r3, #2
 8008800:	e027      	b.n	8008852 <HAL_UARTEx_DisableFifoMode+0x66>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2224      	movs	r2, #36	@ 0x24
 800880e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 0201 	bic.w	r2, r2, #1
 8008828:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008830:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2220      	movs	r2, #32
 8008844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800886e:	2b01      	cmp	r3, #1
 8008870:	d101      	bne.n	8008876 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008872:	2302      	movs	r3, #2
 8008874:	e02d      	b.n	80088d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2224      	movs	r2, #36	@ 0x24
 8008882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 0201 	bic.w	r2, r2, #1
 800889c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f850 	bl	8008958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088ee:	2302      	movs	r3, #2
 80088f0:	e02d      	b.n	800894e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2224      	movs	r2, #36	@ 0x24
 80088fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0201 	bic.w	r2, r2, #1
 8008918:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f812 	bl	8008958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2220      	movs	r2, #32
 8008940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008964:	2b00      	cmp	r3, #0
 8008966:	d108      	bne.n	800897a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008978:	e031      	b.n	80089de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800897a:	2310      	movs	r3, #16
 800897c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800897e:	2310      	movs	r3, #16
 8008980:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	0e5b      	lsrs	r3, r3, #25
 800898a:	b2db      	uxtb	r3, r3
 800898c:	f003 0307 	and.w	r3, r3, #7
 8008990:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	0f5b      	lsrs	r3, r3, #29
 800899a:	b2db      	uxtb	r3, r3
 800899c:	f003 0307 	and.w	r3, r3, #7
 80089a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	7b3a      	ldrb	r2, [r7, #12]
 80089a6:	4911      	ldr	r1, [pc, #68]	@ (80089ec <UARTEx_SetNbDataToProcess+0x94>)
 80089a8:	5c8a      	ldrb	r2, [r1, r2]
 80089aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089ae:	7b3a      	ldrb	r2, [r7, #12]
 80089b0:	490f      	ldr	r1, [pc, #60]	@ (80089f0 <UARTEx_SetNbDataToProcess+0x98>)
 80089b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	7b7a      	ldrb	r2, [r7, #13]
 80089c4:	4909      	ldr	r1, [pc, #36]	@ (80089ec <UARTEx_SetNbDataToProcess+0x94>)
 80089c6:	5c8a      	ldrb	r2, [r1, r2]
 80089c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089cc:	7b7a      	ldrb	r2, [r7, #13]
 80089ce:	4908      	ldr	r1, [pc, #32]	@ (80089f0 <UARTEx_SetNbDataToProcess+0x98>)
 80089d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80089de:	bf00      	nop
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	080093e0 	.word	0x080093e0
 80089f0:	080093e8 	.word	0x080093e8

080089f4 <siprintf>:
 80089f4:	b40e      	push	{r1, r2, r3}
 80089f6:	b500      	push	{lr}
 80089f8:	b09c      	sub	sp, #112	@ 0x70
 80089fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80089fc:	9002      	str	r0, [sp, #8]
 80089fe:	9006      	str	r0, [sp, #24]
 8008a00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a04:	4809      	ldr	r0, [pc, #36]	@ (8008a2c <siprintf+0x38>)
 8008a06:	9107      	str	r1, [sp, #28]
 8008a08:	9104      	str	r1, [sp, #16]
 8008a0a:	4909      	ldr	r1, [pc, #36]	@ (8008a30 <siprintf+0x3c>)
 8008a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a10:	9105      	str	r1, [sp, #20]
 8008a12:	6800      	ldr	r0, [r0, #0]
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	a902      	add	r1, sp, #8
 8008a18:	f000 f994 	bl	8008d44 <_svfiprintf_r>
 8008a1c:	9b02      	ldr	r3, [sp, #8]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	701a      	strb	r2, [r3, #0]
 8008a22:	b01c      	add	sp, #112	@ 0x70
 8008a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a28:	b003      	add	sp, #12
 8008a2a:	4770      	bx	lr
 8008a2c:	24000010 	.word	0x24000010
 8008a30:	ffff0208 	.word	0xffff0208

08008a34 <memset>:
 8008a34:	4402      	add	r2, r0
 8008a36:	4603      	mov	r3, r0
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d100      	bne.n	8008a3e <memset+0xa>
 8008a3c:	4770      	bx	lr
 8008a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a42:	e7f9      	b.n	8008a38 <memset+0x4>

08008a44 <__errno>:
 8008a44:	4b01      	ldr	r3, [pc, #4]	@ (8008a4c <__errno+0x8>)
 8008a46:	6818      	ldr	r0, [r3, #0]
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	24000010 	.word	0x24000010

08008a50 <__libc_init_array>:
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	4d0d      	ldr	r5, [pc, #52]	@ (8008a88 <__libc_init_array+0x38>)
 8008a54:	4c0d      	ldr	r4, [pc, #52]	@ (8008a8c <__libc_init_array+0x3c>)
 8008a56:	1b64      	subs	r4, r4, r5
 8008a58:	10a4      	asrs	r4, r4, #2
 8008a5a:	2600      	movs	r6, #0
 8008a5c:	42a6      	cmp	r6, r4
 8008a5e:	d109      	bne.n	8008a74 <__libc_init_array+0x24>
 8008a60:	4d0b      	ldr	r5, [pc, #44]	@ (8008a90 <__libc_init_array+0x40>)
 8008a62:	4c0c      	ldr	r4, [pc, #48]	@ (8008a94 <__libc_init_array+0x44>)
 8008a64:	f000 fc66 	bl	8009334 <_init>
 8008a68:	1b64      	subs	r4, r4, r5
 8008a6a:	10a4      	asrs	r4, r4, #2
 8008a6c:	2600      	movs	r6, #0
 8008a6e:	42a6      	cmp	r6, r4
 8008a70:	d105      	bne.n	8008a7e <__libc_init_array+0x2e>
 8008a72:	bd70      	pop	{r4, r5, r6, pc}
 8008a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a78:	4798      	blx	r3
 8008a7a:	3601      	adds	r6, #1
 8008a7c:	e7ee      	b.n	8008a5c <__libc_init_array+0xc>
 8008a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a82:	4798      	blx	r3
 8008a84:	3601      	adds	r6, #1
 8008a86:	e7f2      	b.n	8008a6e <__libc_init_array+0x1e>
 8008a88:	0800942c 	.word	0x0800942c
 8008a8c:	0800942c 	.word	0x0800942c
 8008a90:	0800942c 	.word	0x0800942c
 8008a94:	08009430 	.word	0x08009430

08008a98 <__retarget_lock_acquire_recursive>:
 8008a98:	4770      	bx	lr

08008a9a <__retarget_lock_release_recursive>:
 8008a9a:	4770      	bx	lr

08008a9c <_free_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	2900      	cmp	r1, #0
 8008aa2:	d041      	beq.n	8008b28 <_free_r+0x8c>
 8008aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa8:	1f0c      	subs	r4, r1, #4
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bfb8      	it	lt
 8008aae:	18e4      	addlt	r4, r4, r3
 8008ab0:	f000 f8e0 	bl	8008c74 <__malloc_lock>
 8008ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b2c <_free_r+0x90>)
 8008ab6:	6813      	ldr	r3, [r2, #0]
 8008ab8:	b933      	cbnz	r3, 8008ac8 <_free_r+0x2c>
 8008aba:	6063      	str	r3, [r4, #4]
 8008abc:	6014      	str	r4, [r2, #0]
 8008abe:	4628      	mov	r0, r5
 8008ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ac4:	f000 b8dc 	b.w	8008c80 <__malloc_unlock>
 8008ac8:	42a3      	cmp	r3, r4
 8008aca:	d908      	bls.n	8008ade <_free_r+0x42>
 8008acc:	6820      	ldr	r0, [r4, #0]
 8008ace:	1821      	adds	r1, r4, r0
 8008ad0:	428b      	cmp	r3, r1
 8008ad2:	bf01      	itttt	eq
 8008ad4:	6819      	ldreq	r1, [r3, #0]
 8008ad6:	685b      	ldreq	r3, [r3, #4]
 8008ad8:	1809      	addeq	r1, r1, r0
 8008ada:	6021      	streq	r1, [r4, #0]
 8008adc:	e7ed      	b.n	8008aba <_free_r+0x1e>
 8008ade:	461a      	mov	r2, r3
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	b10b      	cbz	r3, 8008ae8 <_free_r+0x4c>
 8008ae4:	42a3      	cmp	r3, r4
 8008ae6:	d9fa      	bls.n	8008ade <_free_r+0x42>
 8008ae8:	6811      	ldr	r1, [r2, #0]
 8008aea:	1850      	adds	r0, r2, r1
 8008aec:	42a0      	cmp	r0, r4
 8008aee:	d10b      	bne.n	8008b08 <_free_r+0x6c>
 8008af0:	6820      	ldr	r0, [r4, #0]
 8008af2:	4401      	add	r1, r0
 8008af4:	1850      	adds	r0, r2, r1
 8008af6:	4283      	cmp	r3, r0
 8008af8:	6011      	str	r1, [r2, #0]
 8008afa:	d1e0      	bne.n	8008abe <_free_r+0x22>
 8008afc:	6818      	ldr	r0, [r3, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	6053      	str	r3, [r2, #4]
 8008b02:	4408      	add	r0, r1
 8008b04:	6010      	str	r0, [r2, #0]
 8008b06:	e7da      	b.n	8008abe <_free_r+0x22>
 8008b08:	d902      	bls.n	8008b10 <_free_r+0x74>
 8008b0a:	230c      	movs	r3, #12
 8008b0c:	602b      	str	r3, [r5, #0]
 8008b0e:	e7d6      	b.n	8008abe <_free_r+0x22>
 8008b10:	6820      	ldr	r0, [r4, #0]
 8008b12:	1821      	adds	r1, r4, r0
 8008b14:	428b      	cmp	r3, r1
 8008b16:	bf04      	itt	eq
 8008b18:	6819      	ldreq	r1, [r3, #0]
 8008b1a:	685b      	ldreq	r3, [r3, #4]
 8008b1c:	6063      	str	r3, [r4, #4]
 8008b1e:	bf04      	itt	eq
 8008b20:	1809      	addeq	r1, r1, r0
 8008b22:	6021      	streq	r1, [r4, #0]
 8008b24:	6054      	str	r4, [r2, #4]
 8008b26:	e7ca      	b.n	8008abe <_free_r+0x22>
 8008b28:	bd38      	pop	{r3, r4, r5, pc}
 8008b2a:	bf00      	nop
 8008b2c:	24031154 	.word	0x24031154

08008b30 <sbrk_aligned>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	4e0f      	ldr	r6, [pc, #60]	@ (8008b70 <sbrk_aligned+0x40>)
 8008b34:	460c      	mov	r4, r1
 8008b36:	6831      	ldr	r1, [r6, #0]
 8008b38:	4605      	mov	r5, r0
 8008b3a:	b911      	cbnz	r1, 8008b42 <sbrk_aligned+0x12>
 8008b3c:	f000 fba6 	bl	800928c <_sbrk_r>
 8008b40:	6030      	str	r0, [r6, #0]
 8008b42:	4621      	mov	r1, r4
 8008b44:	4628      	mov	r0, r5
 8008b46:	f000 fba1 	bl	800928c <_sbrk_r>
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	d103      	bne.n	8008b56 <sbrk_aligned+0x26>
 8008b4e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008b52:	4620      	mov	r0, r4
 8008b54:	bd70      	pop	{r4, r5, r6, pc}
 8008b56:	1cc4      	adds	r4, r0, #3
 8008b58:	f024 0403 	bic.w	r4, r4, #3
 8008b5c:	42a0      	cmp	r0, r4
 8008b5e:	d0f8      	beq.n	8008b52 <sbrk_aligned+0x22>
 8008b60:	1a21      	subs	r1, r4, r0
 8008b62:	4628      	mov	r0, r5
 8008b64:	f000 fb92 	bl	800928c <_sbrk_r>
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d1f2      	bne.n	8008b52 <sbrk_aligned+0x22>
 8008b6c:	e7ef      	b.n	8008b4e <sbrk_aligned+0x1e>
 8008b6e:	bf00      	nop
 8008b70:	24031150 	.word	0x24031150

08008b74 <_malloc_r>:
 8008b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b78:	1ccd      	adds	r5, r1, #3
 8008b7a:	f025 0503 	bic.w	r5, r5, #3
 8008b7e:	3508      	adds	r5, #8
 8008b80:	2d0c      	cmp	r5, #12
 8008b82:	bf38      	it	cc
 8008b84:	250c      	movcc	r5, #12
 8008b86:	2d00      	cmp	r5, #0
 8008b88:	4606      	mov	r6, r0
 8008b8a:	db01      	blt.n	8008b90 <_malloc_r+0x1c>
 8008b8c:	42a9      	cmp	r1, r5
 8008b8e:	d904      	bls.n	8008b9a <_malloc_r+0x26>
 8008b90:	230c      	movs	r3, #12
 8008b92:	6033      	str	r3, [r6, #0]
 8008b94:	2000      	movs	r0, #0
 8008b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c70 <_malloc_r+0xfc>
 8008b9e:	f000 f869 	bl	8008c74 <__malloc_lock>
 8008ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba6:	461c      	mov	r4, r3
 8008ba8:	bb44      	cbnz	r4, 8008bfc <_malloc_r+0x88>
 8008baa:	4629      	mov	r1, r5
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff ffbf 	bl	8008b30 <sbrk_aligned>
 8008bb2:	1c43      	adds	r3, r0, #1
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	d158      	bne.n	8008c6a <_malloc_r+0xf6>
 8008bb8:	f8d8 4000 	ldr.w	r4, [r8]
 8008bbc:	4627      	mov	r7, r4
 8008bbe:	2f00      	cmp	r7, #0
 8008bc0:	d143      	bne.n	8008c4a <_malloc_r+0xd6>
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	d04b      	beq.n	8008c5e <_malloc_r+0xea>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	4630      	mov	r0, r6
 8008bcc:	eb04 0903 	add.w	r9, r4, r3
 8008bd0:	f000 fb5c 	bl	800928c <_sbrk_r>
 8008bd4:	4581      	cmp	r9, r0
 8008bd6:	d142      	bne.n	8008c5e <_malloc_r+0xea>
 8008bd8:	6821      	ldr	r1, [r4, #0]
 8008bda:	1a6d      	subs	r5, r5, r1
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7ff ffa6 	bl	8008b30 <sbrk_aligned>
 8008be4:	3001      	adds	r0, #1
 8008be6:	d03a      	beq.n	8008c5e <_malloc_r+0xea>
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	442b      	add	r3, r5
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	f8d8 3000 	ldr.w	r3, [r8]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	bb62      	cbnz	r2, 8008c50 <_malloc_r+0xdc>
 8008bf6:	f8c8 7000 	str.w	r7, [r8]
 8008bfa:	e00f      	b.n	8008c1c <_malloc_r+0xa8>
 8008bfc:	6822      	ldr	r2, [r4, #0]
 8008bfe:	1b52      	subs	r2, r2, r5
 8008c00:	d420      	bmi.n	8008c44 <_malloc_r+0xd0>
 8008c02:	2a0b      	cmp	r2, #11
 8008c04:	d917      	bls.n	8008c36 <_malloc_r+0xc2>
 8008c06:	1961      	adds	r1, r4, r5
 8008c08:	42a3      	cmp	r3, r4
 8008c0a:	6025      	str	r5, [r4, #0]
 8008c0c:	bf18      	it	ne
 8008c0e:	6059      	strne	r1, [r3, #4]
 8008c10:	6863      	ldr	r3, [r4, #4]
 8008c12:	bf08      	it	eq
 8008c14:	f8c8 1000 	streq.w	r1, [r8]
 8008c18:	5162      	str	r2, [r4, r5]
 8008c1a:	604b      	str	r3, [r1, #4]
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f000 f82f 	bl	8008c80 <__malloc_unlock>
 8008c22:	f104 000b 	add.w	r0, r4, #11
 8008c26:	1d23      	adds	r3, r4, #4
 8008c28:	f020 0007 	bic.w	r0, r0, #7
 8008c2c:	1ac2      	subs	r2, r0, r3
 8008c2e:	bf1c      	itt	ne
 8008c30:	1a1b      	subne	r3, r3, r0
 8008c32:	50a3      	strne	r3, [r4, r2]
 8008c34:	e7af      	b.n	8008b96 <_malloc_r+0x22>
 8008c36:	6862      	ldr	r2, [r4, #4]
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	bf0c      	ite	eq
 8008c3c:	f8c8 2000 	streq.w	r2, [r8]
 8008c40:	605a      	strne	r2, [r3, #4]
 8008c42:	e7eb      	b.n	8008c1c <_malloc_r+0xa8>
 8008c44:	4623      	mov	r3, r4
 8008c46:	6864      	ldr	r4, [r4, #4]
 8008c48:	e7ae      	b.n	8008ba8 <_malloc_r+0x34>
 8008c4a:	463c      	mov	r4, r7
 8008c4c:	687f      	ldr	r7, [r7, #4]
 8008c4e:	e7b6      	b.n	8008bbe <_malloc_r+0x4a>
 8008c50:	461a      	mov	r2, r3
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	d1fb      	bne.n	8008c50 <_malloc_r+0xdc>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	6053      	str	r3, [r2, #4]
 8008c5c:	e7de      	b.n	8008c1c <_malloc_r+0xa8>
 8008c5e:	230c      	movs	r3, #12
 8008c60:	6033      	str	r3, [r6, #0]
 8008c62:	4630      	mov	r0, r6
 8008c64:	f000 f80c 	bl	8008c80 <__malloc_unlock>
 8008c68:	e794      	b.n	8008b94 <_malloc_r+0x20>
 8008c6a:	6005      	str	r5, [r0, #0]
 8008c6c:	e7d6      	b.n	8008c1c <_malloc_r+0xa8>
 8008c6e:	bf00      	nop
 8008c70:	24031154 	.word	0x24031154

08008c74 <__malloc_lock>:
 8008c74:	4801      	ldr	r0, [pc, #4]	@ (8008c7c <__malloc_lock+0x8>)
 8008c76:	f7ff bf0f 	b.w	8008a98 <__retarget_lock_acquire_recursive>
 8008c7a:	bf00      	nop
 8008c7c:	2403114c 	.word	0x2403114c

08008c80 <__malloc_unlock>:
 8008c80:	4801      	ldr	r0, [pc, #4]	@ (8008c88 <__malloc_unlock+0x8>)
 8008c82:	f7ff bf0a 	b.w	8008a9a <__retarget_lock_release_recursive>
 8008c86:	bf00      	nop
 8008c88:	2403114c 	.word	0x2403114c

08008c8c <__ssputs_r>:
 8008c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c90:	688e      	ldr	r6, [r1, #8]
 8008c92:	461f      	mov	r7, r3
 8008c94:	42be      	cmp	r6, r7
 8008c96:	680b      	ldr	r3, [r1, #0]
 8008c98:	4682      	mov	sl, r0
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	4690      	mov	r8, r2
 8008c9e:	d82d      	bhi.n	8008cfc <__ssputs_r+0x70>
 8008ca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ca4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ca8:	d026      	beq.n	8008cf8 <__ssputs_r+0x6c>
 8008caa:	6965      	ldr	r5, [r4, #20]
 8008cac:	6909      	ldr	r1, [r1, #16]
 8008cae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cb2:	eba3 0901 	sub.w	r9, r3, r1
 8008cb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cba:	1c7b      	adds	r3, r7, #1
 8008cbc:	444b      	add	r3, r9
 8008cbe:	106d      	asrs	r5, r5, #1
 8008cc0:	429d      	cmp	r5, r3
 8008cc2:	bf38      	it	cc
 8008cc4:	461d      	movcc	r5, r3
 8008cc6:	0553      	lsls	r3, r2, #21
 8008cc8:	d527      	bpl.n	8008d1a <__ssputs_r+0x8e>
 8008cca:	4629      	mov	r1, r5
 8008ccc:	f7ff ff52 	bl	8008b74 <_malloc_r>
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	b360      	cbz	r0, 8008d2e <__ssputs_r+0xa2>
 8008cd4:	6921      	ldr	r1, [r4, #16]
 8008cd6:	464a      	mov	r2, r9
 8008cd8:	f000 fae8 	bl	80092ac <memcpy>
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ce6:	81a3      	strh	r3, [r4, #12]
 8008ce8:	6126      	str	r6, [r4, #16]
 8008cea:	6165      	str	r5, [r4, #20]
 8008cec:	444e      	add	r6, r9
 8008cee:	eba5 0509 	sub.w	r5, r5, r9
 8008cf2:	6026      	str	r6, [r4, #0]
 8008cf4:	60a5      	str	r5, [r4, #8]
 8008cf6:	463e      	mov	r6, r7
 8008cf8:	42be      	cmp	r6, r7
 8008cfa:	d900      	bls.n	8008cfe <__ssputs_r+0x72>
 8008cfc:	463e      	mov	r6, r7
 8008cfe:	6820      	ldr	r0, [r4, #0]
 8008d00:	4632      	mov	r2, r6
 8008d02:	4641      	mov	r1, r8
 8008d04:	f000 faa8 	bl	8009258 <memmove>
 8008d08:	68a3      	ldr	r3, [r4, #8]
 8008d0a:	1b9b      	subs	r3, r3, r6
 8008d0c:	60a3      	str	r3, [r4, #8]
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	4433      	add	r3, r6
 8008d12:	6023      	str	r3, [r4, #0]
 8008d14:	2000      	movs	r0, #0
 8008d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1a:	462a      	mov	r2, r5
 8008d1c:	f000 fad4 	bl	80092c8 <_realloc_r>
 8008d20:	4606      	mov	r6, r0
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d1e0      	bne.n	8008ce8 <__ssputs_r+0x5c>
 8008d26:	6921      	ldr	r1, [r4, #16]
 8008d28:	4650      	mov	r0, sl
 8008d2a:	f7ff feb7 	bl	8008a9c <_free_r>
 8008d2e:	230c      	movs	r3, #12
 8008d30:	f8ca 3000 	str.w	r3, [sl]
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d3a:	81a3      	strh	r3, [r4, #12]
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d40:	e7e9      	b.n	8008d16 <__ssputs_r+0x8a>
	...

08008d44 <_svfiprintf_r>:
 8008d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	4698      	mov	r8, r3
 8008d4a:	898b      	ldrh	r3, [r1, #12]
 8008d4c:	061b      	lsls	r3, r3, #24
 8008d4e:	b09d      	sub	sp, #116	@ 0x74
 8008d50:	4607      	mov	r7, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	4614      	mov	r4, r2
 8008d56:	d510      	bpl.n	8008d7a <_svfiprintf_r+0x36>
 8008d58:	690b      	ldr	r3, [r1, #16]
 8008d5a:	b973      	cbnz	r3, 8008d7a <_svfiprintf_r+0x36>
 8008d5c:	2140      	movs	r1, #64	@ 0x40
 8008d5e:	f7ff ff09 	bl	8008b74 <_malloc_r>
 8008d62:	6028      	str	r0, [r5, #0]
 8008d64:	6128      	str	r0, [r5, #16]
 8008d66:	b930      	cbnz	r0, 8008d76 <_svfiprintf_r+0x32>
 8008d68:	230c      	movs	r3, #12
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d70:	b01d      	add	sp, #116	@ 0x74
 8008d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d76:	2340      	movs	r3, #64	@ 0x40
 8008d78:	616b      	str	r3, [r5, #20]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d7e:	2320      	movs	r3, #32
 8008d80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d88:	2330      	movs	r3, #48	@ 0x30
 8008d8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f28 <_svfiprintf_r+0x1e4>
 8008d8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d92:	f04f 0901 	mov.w	r9, #1
 8008d96:	4623      	mov	r3, r4
 8008d98:	469a      	mov	sl, r3
 8008d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d9e:	b10a      	cbz	r2, 8008da4 <_svfiprintf_r+0x60>
 8008da0:	2a25      	cmp	r2, #37	@ 0x25
 8008da2:	d1f9      	bne.n	8008d98 <_svfiprintf_r+0x54>
 8008da4:	ebba 0b04 	subs.w	fp, sl, r4
 8008da8:	d00b      	beq.n	8008dc2 <_svfiprintf_r+0x7e>
 8008daa:	465b      	mov	r3, fp
 8008dac:	4622      	mov	r2, r4
 8008dae:	4629      	mov	r1, r5
 8008db0:	4638      	mov	r0, r7
 8008db2:	f7ff ff6b 	bl	8008c8c <__ssputs_r>
 8008db6:	3001      	adds	r0, #1
 8008db8:	f000 80a7 	beq.w	8008f0a <_svfiprintf_r+0x1c6>
 8008dbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dbe:	445a      	add	r2, fp
 8008dc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f000 809f 	beq.w	8008f0a <_svfiprintf_r+0x1c6>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dd6:	f10a 0a01 	add.w	sl, sl, #1
 8008dda:	9304      	str	r3, [sp, #16]
 8008ddc:	9307      	str	r3, [sp, #28]
 8008dde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008de2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008de4:	4654      	mov	r4, sl
 8008de6:	2205      	movs	r2, #5
 8008de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dec:	484e      	ldr	r0, [pc, #312]	@ (8008f28 <_svfiprintf_r+0x1e4>)
 8008dee:	f7f7 fa7f 	bl	80002f0 <memchr>
 8008df2:	9a04      	ldr	r2, [sp, #16]
 8008df4:	b9d8      	cbnz	r0, 8008e2e <_svfiprintf_r+0xea>
 8008df6:	06d0      	lsls	r0, r2, #27
 8008df8:	bf44      	itt	mi
 8008dfa:	2320      	movmi	r3, #32
 8008dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e00:	0711      	lsls	r1, r2, #28
 8008e02:	bf44      	itt	mi
 8008e04:	232b      	movmi	r3, #43	@ 0x2b
 8008e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e10:	d015      	beq.n	8008e3e <_svfiprintf_r+0xfa>
 8008e12:	9a07      	ldr	r2, [sp, #28]
 8008e14:	4654      	mov	r4, sl
 8008e16:	2000      	movs	r0, #0
 8008e18:	f04f 0c0a 	mov.w	ip, #10
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e22:	3b30      	subs	r3, #48	@ 0x30
 8008e24:	2b09      	cmp	r3, #9
 8008e26:	d94b      	bls.n	8008ec0 <_svfiprintf_r+0x17c>
 8008e28:	b1b0      	cbz	r0, 8008e58 <_svfiprintf_r+0x114>
 8008e2a:	9207      	str	r2, [sp, #28]
 8008e2c:	e014      	b.n	8008e58 <_svfiprintf_r+0x114>
 8008e2e:	eba0 0308 	sub.w	r3, r0, r8
 8008e32:	fa09 f303 	lsl.w	r3, r9, r3
 8008e36:	4313      	orrs	r3, r2
 8008e38:	9304      	str	r3, [sp, #16]
 8008e3a:	46a2      	mov	sl, r4
 8008e3c:	e7d2      	b.n	8008de4 <_svfiprintf_r+0xa0>
 8008e3e:	9b03      	ldr	r3, [sp, #12]
 8008e40:	1d19      	adds	r1, r3, #4
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	9103      	str	r1, [sp, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	bfbb      	ittet	lt
 8008e4a:	425b      	neglt	r3, r3
 8008e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e50:	9307      	strge	r3, [sp, #28]
 8008e52:	9307      	strlt	r3, [sp, #28]
 8008e54:	bfb8      	it	lt
 8008e56:	9204      	strlt	r2, [sp, #16]
 8008e58:	7823      	ldrb	r3, [r4, #0]
 8008e5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e5c:	d10a      	bne.n	8008e74 <_svfiprintf_r+0x130>
 8008e5e:	7863      	ldrb	r3, [r4, #1]
 8008e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e62:	d132      	bne.n	8008eca <_svfiprintf_r+0x186>
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	1d1a      	adds	r2, r3, #4
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	9203      	str	r2, [sp, #12]
 8008e6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e70:	3402      	adds	r4, #2
 8008e72:	9305      	str	r3, [sp, #20]
 8008e74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f38 <_svfiprintf_r+0x1f4>
 8008e78:	7821      	ldrb	r1, [r4, #0]
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	4650      	mov	r0, sl
 8008e7e:	f7f7 fa37 	bl	80002f0 <memchr>
 8008e82:	b138      	cbz	r0, 8008e94 <_svfiprintf_r+0x150>
 8008e84:	9b04      	ldr	r3, [sp, #16]
 8008e86:	eba0 000a 	sub.w	r0, r0, sl
 8008e8a:	2240      	movs	r2, #64	@ 0x40
 8008e8c:	4082      	lsls	r2, r0
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	3401      	adds	r4, #1
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e98:	4824      	ldr	r0, [pc, #144]	@ (8008f2c <_svfiprintf_r+0x1e8>)
 8008e9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e9e:	2206      	movs	r2, #6
 8008ea0:	f7f7 fa26 	bl	80002f0 <memchr>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d036      	beq.n	8008f16 <_svfiprintf_r+0x1d2>
 8008ea8:	4b21      	ldr	r3, [pc, #132]	@ (8008f30 <_svfiprintf_r+0x1ec>)
 8008eaa:	bb1b      	cbnz	r3, 8008ef4 <_svfiprintf_r+0x1b0>
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	3307      	adds	r3, #7
 8008eb0:	f023 0307 	bic.w	r3, r3, #7
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	9303      	str	r3, [sp, #12]
 8008eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eba:	4433      	add	r3, r6
 8008ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ebe:	e76a      	b.n	8008d96 <_svfiprintf_r+0x52>
 8008ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	e7a8      	b.n	8008e1c <_svfiprintf_r+0xd8>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	3401      	adds	r4, #1
 8008ece:	9305      	str	r3, [sp, #20]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	f04f 0c0a 	mov.w	ip, #10
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008edc:	3a30      	subs	r2, #48	@ 0x30
 8008ede:	2a09      	cmp	r2, #9
 8008ee0:	d903      	bls.n	8008eea <_svfiprintf_r+0x1a6>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0c6      	beq.n	8008e74 <_svfiprintf_r+0x130>
 8008ee6:	9105      	str	r1, [sp, #20]
 8008ee8:	e7c4      	b.n	8008e74 <_svfiprintf_r+0x130>
 8008eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eee:	4604      	mov	r4, r0
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e7f0      	b.n	8008ed6 <_svfiprintf_r+0x192>
 8008ef4:	ab03      	add	r3, sp, #12
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	462a      	mov	r2, r5
 8008efa:	4b0e      	ldr	r3, [pc, #56]	@ (8008f34 <_svfiprintf_r+0x1f0>)
 8008efc:	a904      	add	r1, sp, #16
 8008efe:	4638      	mov	r0, r7
 8008f00:	f3af 8000 	nop.w
 8008f04:	1c42      	adds	r2, r0, #1
 8008f06:	4606      	mov	r6, r0
 8008f08:	d1d6      	bne.n	8008eb8 <_svfiprintf_r+0x174>
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	065b      	lsls	r3, r3, #25
 8008f0e:	f53f af2d 	bmi.w	8008d6c <_svfiprintf_r+0x28>
 8008f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f14:	e72c      	b.n	8008d70 <_svfiprintf_r+0x2c>
 8008f16:	ab03      	add	r3, sp, #12
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	462a      	mov	r2, r5
 8008f1c:	4b05      	ldr	r3, [pc, #20]	@ (8008f34 <_svfiprintf_r+0x1f0>)
 8008f1e:	a904      	add	r1, sp, #16
 8008f20:	4638      	mov	r0, r7
 8008f22:	f000 f879 	bl	8009018 <_printf_i>
 8008f26:	e7ed      	b.n	8008f04 <_svfiprintf_r+0x1c0>
 8008f28:	080093f0 	.word	0x080093f0
 8008f2c:	080093fa 	.word	0x080093fa
 8008f30:	00000000 	.word	0x00000000
 8008f34:	08008c8d 	.word	0x08008c8d
 8008f38:	080093f6 	.word	0x080093f6

08008f3c <_printf_common>:
 8008f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f40:	4616      	mov	r6, r2
 8008f42:	4698      	mov	r8, r3
 8008f44:	688a      	ldr	r2, [r1, #8]
 8008f46:	690b      	ldr	r3, [r1, #16]
 8008f48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	bfb8      	it	lt
 8008f50:	4613      	movlt	r3, r2
 8008f52:	6033      	str	r3, [r6, #0]
 8008f54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f58:	4607      	mov	r7, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	b10a      	cbz	r2, 8008f62 <_printf_common+0x26>
 8008f5e:	3301      	adds	r3, #1
 8008f60:	6033      	str	r3, [r6, #0]
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	0699      	lsls	r1, r3, #26
 8008f66:	bf42      	ittt	mi
 8008f68:	6833      	ldrmi	r3, [r6, #0]
 8008f6a:	3302      	addmi	r3, #2
 8008f6c:	6033      	strmi	r3, [r6, #0]
 8008f6e:	6825      	ldr	r5, [r4, #0]
 8008f70:	f015 0506 	ands.w	r5, r5, #6
 8008f74:	d106      	bne.n	8008f84 <_printf_common+0x48>
 8008f76:	f104 0a19 	add.w	sl, r4, #25
 8008f7a:	68e3      	ldr	r3, [r4, #12]
 8008f7c:	6832      	ldr	r2, [r6, #0]
 8008f7e:	1a9b      	subs	r3, r3, r2
 8008f80:	42ab      	cmp	r3, r5
 8008f82:	dc26      	bgt.n	8008fd2 <_printf_common+0x96>
 8008f84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f88:	6822      	ldr	r2, [r4, #0]
 8008f8a:	3b00      	subs	r3, #0
 8008f8c:	bf18      	it	ne
 8008f8e:	2301      	movne	r3, #1
 8008f90:	0692      	lsls	r2, r2, #26
 8008f92:	d42b      	bmi.n	8008fec <_printf_common+0xb0>
 8008f94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f98:	4641      	mov	r1, r8
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	47c8      	blx	r9
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	d01e      	beq.n	8008fe0 <_printf_common+0xa4>
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	6922      	ldr	r2, [r4, #16]
 8008fa6:	f003 0306 	and.w	r3, r3, #6
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	bf02      	ittt	eq
 8008fae:	68e5      	ldreq	r5, [r4, #12]
 8008fb0:	6833      	ldreq	r3, [r6, #0]
 8008fb2:	1aed      	subeq	r5, r5, r3
 8008fb4:	68a3      	ldr	r3, [r4, #8]
 8008fb6:	bf0c      	ite	eq
 8008fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fbc:	2500      	movne	r5, #0
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	bfc4      	itt	gt
 8008fc2:	1a9b      	subgt	r3, r3, r2
 8008fc4:	18ed      	addgt	r5, r5, r3
 8008fc6:	2600      	movs	r6, #0
 8008fc8:	341a      	adds	r4, #26
 8008fca:	42b5      	cmp	r5, r6
 8008fcc:	d11a      	bne.n	8009004 <_printf_common+0xc8>
 8008fce:	2000      	movs	r0, #0
 8008fd0:	e008      	b.n	8008fe4 <_printf_common+0xa8>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	4652      	mov	r2, sl
 8008fd6:	4641      	mov	r1, r8
 8008fd8:	4638      	mov	r0, r7
 8008fda:	47c8      	blx	r9
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d103      	bne.n	8008fe8 <_printf_common+0xac>
 8008fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe8:	3501      	adds	r5, #1
 8008fea:	e7c6      	b.n	8008f7a <_printf_common+0x3e>
 8008fec:	18e1      	adds	r1, r4, r3
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	2030      	movs	r0, #48	@ 0x30
 8008ff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ff6:	4422      	add	r2, r4
 8008ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ffc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009000:	3302      	adds	r3, #2
 8009002:	e7c7      	b.n	8008f94 <_printf_common+0x58>
 8009004:	2301      	movs	r3, #1
 8009006:	4622      	mov	r2, r4
 8009008:	4641      	mov	r1, r8
 800900a:	4638      	mov	r0, r7
 800900c:	47c8      	blx	r9
 800900e:	3001      	adds	r0, #1
 8009010:	d0e6      	beq.n	8008fe0 <_printf_common+0xa4>
 8009012:	3601      	adds	r6, #1
 8009014:	e7d9      	b.n	8008fca <_printf_common+0x8e>
	...

08009018 <_printf_i>:
 8009018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800901c:	7e0f      	ldrb	r7, [r1, #24]
 800901e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009020:	2f78      	cmp	r7, #120	@ 0x78
 8009022:	4691      	mov	r9, r2
 8009024:	4680      	mov	r8, r0
 8009026:	460c      	mov	r4, r1
 8009028:	469a      	mov	sl, r3
 800902a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800902e:	d807      	bhi.n	8009040 <_printf_i+0x28>
 8009030:	2f62      	cmp	r7, #98	@ 0x62
 8009032:	d80a      	bhi.n	800904a <_printf_i+0x32>
 8009034:	2f00      	cmp	r7, #0
 8009036:	f000 80d2 	beq.w	80091de <_printf_i+0x1c6>
 800903a:	2f58      	cmp	r7, #88	@ 0x58
 800903c:	f000 80b9 	beq.w	80091b2 <_printf_i+0x19a>
 8009040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009048:	e03a      	b.n	80090c0 <_printf_i+0xa8>
 800904a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800904e:	2b15      	cmp	r3, #21
 8009050:	d8f6      	bhi.n	8009040 <_printf_i+0x28>
 8009052:	a101      	add	r1, pc, #4	@ (adr r1, 8009058 <_printf_i+0x40>)
 8009054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009058:	080090b1 	.word	0x080090b1
 800905c:	080090c5 	.word	0x080090c5
 8009060:	08009041 	.word	0x08009041
 8009064:	08009041 	.word	0x08009041
 8009068:	08009041 	.word	0x08009041
 800906c:	08009041 	.word	0x08009041
 8009070:	080090c5 	.word	0x080090c5
 8009074:	08009041 	.word	0x08009041
 8009078:	08009041 	.word	0x08009041
 800907c:	08009041 	.word	0x08009041
 8009080:	08009041 	.word	0x08009041
 8009084:	080091c5 	.word	0x080091c5
 8009088:	080090ef 	.word	0x080090ef
 800908c:	0800917f 	.word	0x0800917f
 8009090:	08009041 	.word	0x08009041
 8009094:	08009041 	.word	0x08009041
 8009098:	080091e7 	.word	0x080091e7
 800909c:	08009041 	.word	0x08009041
 80090a0:	080090ef 	.word	0x080090ef
 80090a4:	08009041 	.word	0x08009041
 80090a8:	08009041 	.word	0x08009041
 80090ac:	08009187 	.word	0x08009187
 80090b0:	6833      	ldr	r3, [r6, #0]
 80090b2:	1d1a      	adds	r2, r3, #4
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6032      	str	r2, [r6, #0]
 80090b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090c0:	2301      	movs	r3, #1
 80090c2:	e09d      	b.n	8009200 <_printf_i+0x1e8>
 80090c4:	6833      	ldr	r3, [r6, #0]
 80090c6:	6820      	ldr	r0, [r4, #0]
 80090c8:	1d19      	adds	r1, r3, #4
 80090ca:	6031      	str	r1, [r6, #0]
 80090cc:	0606      	lsls	r6, r0, #24
 80090ce:	d501      	bpl.n	80090d4 <_printf_i+0xbc>
 80090d0:	681d      	ldr	r5, [r3, #0]
 80090d2:	e003      	b.n	80090dc <_printf_i+0xc4>
 80090d4:	0645      	lsls	r5, r0, #25
 80090d6:	d5fb      	bpl.n	80090d0 <_printf_i+0xb8>
 80090d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090dc:	2d00      	cmp	r5, #0
 80090de:	da03      	bge.n	80090e8 <_printf_i+0xd0>
 80090e0:	232d      	movs	r3, #45	@ 0x2d
 80090e2:	426d      	negs	r5, r5
 80090e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090e8:	4859      	ldr	r0, [pc, #356]	@ (8009250 <_printf_i+0x238>)
 80090ea:	230a      	movs	r3, #10
 80090ec:	e011      	b.n	8009112 <_printf_i+0xfa>
 80090ee:	6821      	ldr	r1, [r4, #0]
 80090f0:	6833      	ldr	r3, [r6, #0]
 80090f2:	0608      	lsls	r0, r1, #24
 80090f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80090f8:	d402      	bmi.n	8009100 <_printf_i+0xe8>
 80090fa:	0649      	lsls	r1, r1, #25
 80090fc:	bf48      	it	mi
 80090fe:	b2ad      	uxthmi	r5, r5
 8009100:	2f6f      	cmp	r7, #111	@ 0x6f
 8009102:	4853      	ldr	r0, [pc, #332]	@ (8009250 <_printf_i+0x238>)
 8009104:	6033      	str	r3, [r6, #0]
 8009106:	bf14      	ite	ne
 8009108:	230a      	movne	r3, #10
 800910a:	2308      	moveq	r3, #8
 800910c:	2100      	movs	r1, #0
 800910e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009112:	6866      	ldr	r6, [r4, #4]
 8009114:	60a6      	str	r6, [r4, #8]
 8009116:	2e00      	cmp	r6, #0
 8009118:	bfa2      	ittt	ge
 800911a:	6821      	ldrge	r1, [r4, #0]
 800911c:	f021 0104 	bicge.w	r1, r1, #4
 8009120:	6021      	strge	r1, [r4, #0]
 8009122:	b90d      	cbnz	r5, 8009128 <_printf_i+0x110>
 8009124:	2e00      	cmp	r6, #0
 8009126:	d04b      	beq.n	80091c0 <_printf_i+0x1a8>
 8009128:	4616      	mov	r6, r2
 800912a:	fbb5 f1f3 	udiv	r1, r5, r3
 800912e:	fb03 5711 	mls	r7, r3, r1, r5
 8009132:	5dc7      	ldrb	r7, [r0, r7]
 8009134:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009138:	462f      	mov	r7, r5
 800913a:	42bb      	cmp	r3, r7
 800913c:	460d      	mov	r5, r1
 800913e:	d9f4      	bls.n	800912a <_printf_i+0x112>
 8009140:	2b08      	cmp	r3, #8
 8009142:	d10b      	bne.n	800915c <_printf_i+0x144>
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	07df      	lsls	r7, r3, #31
 8009148:	d508      	bpl.n	800915c <_printf_i+0x144>
 800914a:	6923      	ldr	r3, [r4, #16]
 800914c:	6861      	ldr	r1, [r4, #4]
 800914e:	4299      	cmp	r1, r3
 8009150:	bfde      	ittt	le
 8009152:	2330      	movle	r3, #48	@ 0x30
 8009154:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009158:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800915c:	1b92      	subs	r2, r2, r6
 800915e:	6122      	str	r2, [r4, #16]
 8009160:	f8cd a000 	str.w	sl, [sp]
 8009164:	464b      	mov	r3, r9
 8009166:	aa03      	add	r2, sp, #12
 8009168:	4621      	mov	r1, r4
 800916a:	4640      	mov	r0, r8
 800916c:	f7ff fee6 	bl	8008f3c <_printf_common>
 8009170:	3001      	adds	r0, #1
 8009172:	d14a      	bne.n	800920a <_printf_i+0x1f2>
 8009174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009178:	b004      	add	sp, #16
 800917a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	f043 0320 	orr.w	r3, r3, #32
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	4833      	ldr	r0, [pc, #204]	@ (8009254 <_printf_i+0x23c>)
 8009188:	2778      	movs	r7, #120	@ 0x78
 800918a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	6831      	ldr	r1, [r6, #0]
 8009192:	061f      	lsls	r7, r3, #24
 8009194:	f851 5b04 	ldr.w	r5, [r1], #4
 8009198:	d402      	bmi.n	80091a0 <_printf_i+0x188>
 800919a:	065f      	lsls	r7, r3, #25
 800919c:	bf48      	it	mi
 800919e:	b2ad      	uxthmi	r5, r5
 80091a0:	6031      	str	r1, [r6, #0]
 80091a2:	07d9      	lsls	r1, r3, #31
 80091a4:	bf44      	itt	mi
 80091a6:	f043 0320 	orrmi.w	r3, r3, #32
 80091aa:	6023      	strmi	r3, [r4, #0]
 80091ac:	b11d      	cbz	r5, 80091b6 <_printf_i+0x19e>
 80091ae:	2310      	movs	r3, #16
 80091b0:	e7ac      	b.n	800910c <_printf_i+0xf4>
 80091b2:	4827      	ldr	r0, [pc, #156]	@ (8009250 <_printf_i+0x238>)
 80091b4:	e7e9      	b.n	800918a <_printf_i+0x172>
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	f023 0320 	bic.w	r3, r3, #32
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	e7f6      	b.n	80091ae <_printf_i+0x196>
 80091c0:	4616      	mov	r6, r2
 80091c2:	e7bd      	b.n	8009140 <_printf_i+0x128>
 80091c4:	6833      	ldr	r3, [r6, #0]
 80091c6:	6825      	ldr	r5, [r4, #0]
 80091c8:	6961      	ldr	r1, [r4, #20]
 80091ca:	1d18      	adds	r0, r3, #4
 80091cc:	6030      	str	r0, [r6, #0]
 80091ce:	062e      	lsls	r6, r5, #24
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	d501      	bpl.n	80091d8 <_printf_i+0x1c0>
 80091d4:	6019      	str	r1, [r3, #0]
 80091d6:	e002      	b.n	80091de <_printf_i+0x1c6>
 80091d8:	0668      	lsls	r0, r5, #25
 80091da:	d5fb      	bpl.n	80091d4 <_printf_i+0x1bc>
 80091dc:	8019      	strh	r1, [r3, #0]
 80091de:	2300      	movs	r3, #0
 80091e0:	6123      	str	r3, [r4, #16]
 80091e2:	4616      	mov	r6, r2
 80091e4:	e7bc      	b.n	8009160 <_printf_i+0x148>
 80091e6:	6833      	ldr	r3, [r6, #0]
 80091e8:	1d1a      	adds	r2, r3, #4
 80091ea:	6032      	str	r2, [r6, #0]
 80091ec:	681e      	ldr	r6, [r3, #0]
 80091ee:	6862      	ldr	r2, [r4, #4]
 80091f0:	2100      	movs	r1, #0
 80091f2:	4630      	mov	r0, r6
 80091f4:	f7f7 f87c 	bl	80002f0 <memchr>
 80091f8:	b108      	cbz	r0, 80091fe <_printf_i+0x1e6>
 80091fa:	1b80      	subs	r0, r0, r6
 80091fc:	6060      	str	r0, [r4, #4]
 80091fe:	6863      	ldr	r3, [r4, #4]
 8009200:	6123      	str	r3, [r4, #16]
 8009202:	2300      	movs	r3, #0
 8009204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009208:	e7aa      	b.n	8009160 <_printf_i+0x148>
 800920a:	6923      	ldr	r3, [r4, #16]
 800920c:	4632      	mov	r2, r6
 800920e:	4649      	mov	r1, r9
 8009210:	4640      	mov	r0, r8
 8009212:	47d0      	blx	sl
 8009214:	3001      	adds	r0, #1
 8009216:	d0ad      	beq.n	8009174 <_printf_i+0x15c>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	079b      	lsls	r3, r3, #30
 800921c:	d413      	bmi.n	8009246 <_printf_i+0x22e>
 800921e:	68e0      	ldr	r0, [r4, #12]
 8009220:	9b03      	ldr	r3, [sp, #12]
 8009222:	4298      	cmp	r0, r3
 8009224:	bfb8      	it	lt
 8009226:	4618      	movlt	r0, r3
 8009228:	e7a6      	b.n	8009178 <_printf_i+0x160>
 800922a:	2301      	movs	r3, #1
 800922c:	4632      	mov	r2, r6
 800922e:	4649      	mov	r1, r9
 8009230:	4640      	mov	r0, r8
 8009232:	47d0      	blx	sl
 8009234:	3001      	adds	r0, #1
 8009236:	d09d      	beq.n	8009174 <_printf_i+0x15c>
 8009238:	3501      	adds	r5, #1
 800923a:	68e3      	ldr	r3, [r4, #12]
 800923c:	9903      	ldr	r1, [sp, #12]
 800923e:	1a5b      	subs	r3, r3, r1
 8009240:	42ab      	cmp	r3, r5
 8009242:	dcf2      	bgt.n	800922a <_printf_i+0x212>
 8009244:	e7eb      	b.n	800921e <_printf_i+0x206>
 8009246:	2500      	movs	r5, #0
 8009248:	f104 0619 	add.w	r6, r4, #25
 800924c:	e7f5      	b.n	800923a <_printf_i+0x222>
 800924e:	bf00      	nop
 8009250:	08009401 	.word	0x08009401
 8009254:	08009412 	.word	0x08009412

08009258 <memmove>:
 8009258:	4288      	cmp	r0, r1
 800925a:	b510      	push	{r4, lr}
 800925c:	eb01 0402 	add.w	r4, r1, r2
 8009260:	d902      	bls.n	8009268 <memmove+0x10>
 8009262:	4284      	cmp	r4, r0
 8009264:	4623      	mov	r3, r4
 8009266:	d807      	bhi.n	8009278 <memmove+0x20>
 8009268:	1e43      	subs	r3, r0, #1
 800926a:	42a1      	cmp	r1, r4
 800926c:	d008      	beq.n	8009280 <memmove+0x28>
 800926e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009276:	e7f8      	b.n	800926a <memmove+0x12>
 8009278:	4402      	add	r2, r0
 800927a:	4601      	mov	r1, r0
 800927c:	428a      	cmp	r2, r1
 800927e:	d100      	bne.n	8009282 <memmove+0x2a>
 8009280:	bd10      	pop	{r4, pc}
 8009282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800928a:	e7f7      	b.n	800927c <memmove+0x24>

0800928c <_sbrk_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4d06      	ldr	r5, [pc, #24]	@ (80092a8 <_sbrk_r+0x1c>)
 8009290:	2300      	movs	r3, #0
 8009292:	4604      	mov	r4, r0
 8009294:	4608      	mov	r0, r1
 8009296:	602b      	str	r3, [r5, #0]
 8009298:	f7f8 fa02 	bl	80016a0 <_sbrk>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_sbrk_r+0x1a>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_sbrk_r+0x1a>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	24031148 	.word	0x24031148

080092ac <memcpy>:
 80092ac:	440a      	add	r2, r1
 80092ae:	4291      	cmp	r1, r2
 80092b0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80092b4:	d100      	bne.n	80092b8 <memcpy+0xc>
 80092b6:	4770      	bx	lr
 80092b8:	b510      	push	{r4, lr}
 80092ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092c2:	4291      	cmp	r1, r2
 80092c4:	d1f9      	bne.n	80092ba <memcpy+0xe>
 80092c6:	bd10      	pop	{r4, pc}

080092c8 <_realloc_r>:
 80092c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092cc:	4680      	mov	r8, r0
 80092ce:	4615      	mov	r5, r2
 80092d0:	460c      	mov	r4, r1
 80092d2:	b921      	cbnz	r1, 80092de <_realloc_r+0x16>
 80092d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092d8:	4611      	mov	r1, r2
 80092da:	f7ff bc4b 	b.w	8008b74 <_malloc_r>
 80092de:	b92a      	cbnz	r2, 80092ec <_realloc_r+0x24>
 80092e0:	f7ff fbdc 	bl	8008a9c <_free_r>
 80092e4:	2400      	movs	r4, #0
 80092e6:	4620      	mov	r0, r4
 80092e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ec:	f000 f81a 	bl	8009324 <_malloc_usable_size_r>
 80092f0:	4285      	cmp	r5, r0
 80092f2:	4606      	mov	r6, r0
 80092f4:	d802      	bhi.n	80092fc <_realloc_r+0x34>
 80092f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80092fa:	d8f4      	bhi.n	80092e6 <_realloc_r+0x1e>
 80092fc:	4629      	mov	r1, r5
 80092fe:	4640      	mov	r0, r8
 8009300:	f7ff fc38 	bl	8008b74 <_malloc_r>
 8009304:	4607      	mov	r7, r0
 8009306:	2800      	cmp	r0, #0
 8009308:	d0ec      	beq.n	80092e4 <_realloc_r+0x1c>
 800930a:	42b5      	cmp	r5, r6
 800930c:	462a      	mov	r2, r5
 800930e:	4621      	mov	r1, r4
 8009310:	bf28      	it	cs
 8009312:	4632      	movcs	r2, r6
 8009314:	f7ff ffca 	bl	80092ac <memcpy>
 8009318:	4621      	mov	r1, r4
 800931a:	4640      	mov	r0, r8
 800931c:	f7ff fbbe 	bl	8008a9c <_free_r>
 8009320:	463c      	mov	r4, r7
 8009322:	e7e0      	b.n	80092e6 <_realloc_r+0x1e>

08009324 <_malloc_usable_size_r>:
 8009324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009328:	1f18      	subs	r0, r3, #4
 800932a:	2b00      	cmp	r3, #0
 800932c:	bfbc      	itt	lt
 800932e:	580b      	ldrlt	r3, [r1, r0]
 8009330:	18c0      	addlt	r0, r0, r3
 8009332:	4770      	bx	lr

08009334 <_init>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr

08009340 <_fini>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr
