
h7a3zi_combine2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008714  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080089c4  080089c4  000189c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008a9c  08008a9c  00018a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008aa4  08008aa4  00018aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008aa8  08008aa8  00018aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08008aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00031088  24000060  08008b0c  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240310e8  08008b0c  000210e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018d5a  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002a63  00000000  00000000  00038e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001430  00000000  00000000  0003b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000fcb  00000000  00000000  0003ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000326f4  00000000  00000000  0003dc8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017dad  00000000  00000000  0007037f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00153740  00000000  00000000  0008812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005cbc  00000000  00000000  001db86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  001e1528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080089ac 	.word	0x080089ac

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	080089ac 	.word	0x080089ac

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000690:	f000 fe24 	bl	80012dc <HAL_Init>
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f814 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f9aa 	bl	80009f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800069c:	f000 f954 	bl	8000948 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006a0:	f000 f99e 	bl	80009e0 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006a4:	f000 f88a 	bl	80007bc <MX_ADC1_Init>
  MX_TIM16_Init();
 80006a8:	f000 f900 	bl	80008ac <MX_TIM16_Init>
  MX_TIM17_Init();
 80006ac:	f000 f926 	bl	80008fc <MX_TIM17_Init>
  //  don't forget to init timer16 for counting 1 sec and timer17 with ISR for
  //  Stepper

  /////////////////START/////////////////////////

  measure(&Meas);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <main+0x30>)
 80006b2:	f000 fae1 	bl	8000c78 <measure>
  uart_transmit_analog();
 80006b6:	f000 fb95 	bl	8000de4 <uart_transmit_analog>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80006ba:	e7fe      	b.n	80006ba <main+0x2e>
 80006bc:	2400007c 	.word	0x2400007c

080006c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b09c      	sub	sp, #112	; 0x70
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	224c      	movs	r2, #76	; 0x4c
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f007 fce8 	bl	80080a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2220      	movs	r2, #32
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f007 fce2 	bl	80080a4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006e0:	4b34      	ldr	r3, [pc, #208]	; (80007b4 <SystemClock_Config+0xf4>)
 80006e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006ea:	2004      	movs	r0, #4
 80006ec:	f002 fb30 	bl	8002d50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	4b30      	ldr	r3, [pc, #192]	; (80007b8 <SystemClock_Config+0xf8>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a2f      	ldr	r2, [pc, #188]	; (80007b8 <SystemClock_Config+0xf8>)
 80006fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <SystemClock_Config+0xf8>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800070c:	bf00      	nop
 800070e:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <SystemClock_Config+0xf8>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800071a:	d1f8      	bne.n	800070e <SystemClock_Config+0x4e>
  }

  /** Macro to configure the PLL clock source
   */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <SystemClock_Config+0xf4>)
 800071e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000720:	f023 0303 	bic.w	r3, r3, #3
 8000724:	4a23      	ldr	r2, [pc, #140]	; (80007b4 <SystemClock_Config+0xf4>)
 8000726:	f043 0302 	orr.w	r3, r3, #2
 800072a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType =
 800072c:	2321      	movs	r3, #33	; 0x21
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
      RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000730:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000736:	2301      	movs	r3, #1
 8000738:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	2302      	movs	r3, #2
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000746:	2318      	movs	r3, #24
 8000748:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800074e:	2304      	movs	r3, #4
 8000750:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000756:	230c      	movs	r3, #12
 8000758:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075a:	2300      	movs	r3, #0
 800075c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fb4c 	bl	8002e04 <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xb6>
    Error_Handler();
 8000772:	f000 fb6b 	bl	8000e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000776:	233f      	movs	r3, #63	; 0x3f
 8000778:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2303      	movs	r3, #3
 800077c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2102      	movs	r1, #2
 800079a:	4618      	mov	r0, r3
 800079c:	f002 ff64 	bl	8003668 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xea>
    Error_Handler();
 80007a6:	f000 fb51 	bl	8000e4c <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3770      	adds	r7, #112	; 0x70
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	58024400 	.word	0x58024400
 80007b8:	58024800 	.word	0x58024800

080007bc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007e2:	4a30      	ldr	r2, [pc, #192]	; (80008a4 <MX_ADC1_Init+0xe8>)
 80007e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000800:	2200      	movs	r2, #0
 8000802:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000806:	2200      	movs	r2, #0
 8000808:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800080c:	2201      	movs	r2, #1
 800080e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000812:	2200      	movs	r2, #0
 8000814:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000824:	2200      	movs	r2, #0
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800083c:	4818      	ldr	r0, [pc, #96]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800083e:	f000 ffc1 	bl	80017c4 <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x90>
    Error_Handler();
 8000848:	f000 fb00 	bl	8000e4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4812      	ldr	r0, [pc, #72]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000858:	f001 ff04 	bl	8002664 <HAL_ADCEx_MultiModeConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0xaa>
    Error_Handler();
 8000862:	f000 faf3 	bl	8000e4c <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_15;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_ADC1_Init+0xec>)
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800086a:	2306      	movs	r3, #6
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000872:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000876:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000878:	2304      	movs	r3, #4
 800087a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800088a:	f001 fa95 	bl	8001db8 <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0xdc>
    Error_Handler();
 8000894:	f000 fada 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	24030dd0 	.word	0x24030dd0
 80008a4:	40022000 	.word	0x40022000
 80008a8:	3ef08000 	.word	0x3ef08000

080008ac <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008b2:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <MX_TIM16_Init+0x4c>)
 80008b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600 - 1;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008b8:	f242 527f 	movw	r2, #9599	; 0x257f
 80008bc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000 - 1;
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008c6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80008ca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_TIM16_Init+0x48>)
 80008e0:	f005 fe58 	bl	8006594 <HAL_TIM_Base_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM16_Init+0x42>
    Error_Handler();
 80008ea:	f000 faaf 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	24030e34 	.word	0x24030e34
 80008f8:	40014400 	.word	0x40014400

080008fc <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_TIM17_Init+0x44>)
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <MX_TIM17_Init+0x48>)
 8000904:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_TIM17_Init+0x44>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_TIM17_Init+0x44>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_TIM17_Init+0x44>)
 8000914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000918:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_TIM17_Init+0x44>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_TIM17_Init+0x44>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_TIM17_Init+0x44>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_TIM17_Init+0x44>)
 800092e:	f005 fe31 	bl	8006594 <HAL_TIM_Base_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM17_Init+0x40>
    Error_Handler();
 8000938:	f000 fa88 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	24030e80 	.word	0x24030e80
 8000944:	40014800 	.word	0x40014800

08000948 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800094e:	4a23      	ldr	r2, [pc, #140]	; (80009dc <MX_USART3_UART_Init+0x94>)
 8000950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000990:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000992:	f006 f8ff 	bl	8006b94 <HAL_UART_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART3_UART_Init+0x58>
    Error_Handler();
 800099c:	f000 fa56 	bl	8000e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) !=
 80009a0:	2100      	movs	r1, #0
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 80009a4:	f007 fa93 	bl	8007ece <HAL_UARTEx_SetTxFifoThreshold>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART3_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 80009ae:	f000 fa4d 	bl	8000e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) !=
 80009b2:	2100      	movs	r1, #0
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 80009b6:	f007 fac8 	bl	8007f4a <HAL_UARTEx_SetRxFifoThreshold>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART3_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 80009c0:	f000 fa44 	bl	8000e4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 80009c6:	f007 fa49 	bl	8007e5c <HAL_UARTEx_DisableFifoMode>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART3_UART_Init+0x8c>
    Error_Handler();
 80009d0:	f000 fa3c 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	24030ecc 	.word	0x24030ecc
 80009dc:	40004800 	.word	0x40004800

080009e0 <MX_USB_OTG_HS_USB_Init>:
/**
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_USB_Init(void) {
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b95      	ldr	r3, [pc, #596]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a0c:	4a93      	ldr	r2, [pc, #588]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a16:	4b91      	ldr	r3, [pc, #580]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	623b      	str	r3, [r7, #32]
 8000a22:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a24:	4b8d      	ldr	r3, [pc, #564]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a2a:	4a8c      	ldr	r2, [pc, #560]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a34:	4b89      	ldr	r3, [pc, #548]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a3a:	f003 0320 	and.w	r3, r3, #32
 8000a3e:	61fb      	str	r3, [r7, #28]
 8000a40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	4b86      	ldr	r3, [pc, #536]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a48:	4a84      	ldr	r2, [pc, #528]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a52:	4b82      	ldr	r3, [pc, #520]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b7e      	ldr	r3, [pc, #504]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a66:	4a7d      	ldr	r2, [pc, #500]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a70:	4b7a      	ldr	r3, [pc, #488]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b77      	ldr	r3, [pc, #476]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a84:	4a75      	ldr	r2, [pc, #468]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a8e:	4b73      	ldr	r3, [pc, #460]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9c:	4b6f      	ldr	r3, [pc, #444]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000a9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa2:	4a6e      	ldr	r2, [pc, #440]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aac:	4b6b      	ldr	r3, [pc, #428]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000aae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	4b68      	ldr	r3, [pc, #416]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000abc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac0:	4a66      	ldr	r2, [pc, #408]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aca:	4b64      	ldr	r3, [pc, #400]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000acc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad0:	f003 0308 	and.w	r3, r3, #8
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad8:	4b60      	ldr	r3, [pc, #384]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000ada:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ade:	4a5f      	ldr	r2, [pc, #380]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ae8:	4b5c      	ldr	r3, [pc, #368]	; (8000c5c <MX_GPIO_Init+0x26c>)
 8000aea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afc:	4858      	ldr	r0, [pc, #352]	; (8000c60 <MX_GPIO_Init+0x270>)
 8000afe:	f002 f90d 	bl	8002d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUMP_PA5_Pin_GPIO_Port, PUMP_PA5_Pin_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2120      	movs	r1, #32
 8000b06:	4857      	ldr	r0, [pc, #348]	; (8000c64 <MX_GPIO_Init+0x274>)
 8000b08:	f002 f908 	bl	8002d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | STEPPER1_PB6_Pin_Pin,
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f244 0141 	movw	r1, #16449	; 0x4041
 8000b12:	4855      	ldr	r0, [pc, #340]	; (8000c68 <MX_GPIO_Init+0x278>)
 8000b14:	f002 f902 	bl	8002d1c <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE,
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f246 0102 	movw	r1, #24578	; 0x6002
 8000b1e:	4853      	ldr	r0, [pc, #332]	; (8000c6c <MX_GPIO_Init+0x27c>)
 8000b20:	f002 f8fc 	bl	8002d1c <HAL_GPIO_WritePin>
                    STEPPER3_PE13_Pin_Pin | STEPPER4_PE14_Pin_Pin | LD2_Pin,
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG,
 8000b24:	2200      	movs	r2, #0
 8000b26:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 8000b2a:	4851      	ldr	r0, [pc, #324]	; (8000c70 <MX_GPIO_Init+0x280>)
 8000b2c:	f002 f8f6 	bl	8002d1c <HAL_GPIO_WritePin>
                    HELP_SIGNAL_PG9_Pin_Pin | VIBROMOTOR_PG12_Pin_Pin |
                        STEPPER2_PG14_Pin_Pin,
                    GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b42:	4619      	mov	r1, r3
 8000b44:	484b      	ldr	r0, [pc, #300]	; (8000c74 <MX_GPIO_Init+0x284>)
 8000b46:	f001 ff39 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	483f      	ldr	r0, [pc, #252]	; (8000c60 <MX_GPIO_Init+0x270>)
 8000b64:	f001 ff2a 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PUMP_PA5_Pin_Pin */
  GPIO_InitStruct.Pin = PUMP_PA5_Pin_Pin;
 8000b68:	2320      	movs	r3, #32
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PUMP_PA5_Pin_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4839      	ldr	r0, [pc, #228]	; (8000c64 <MX_GPIO_Init+0x274>)
 8000b80:	f001 ff1c 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin STEPPER1_PB6_Pin_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | STEPPER1_PB6_Pin_Pin;
 8000b84:	f244 0341 	movw	r3, #16449	; 0x4041
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4832      	ldr	r0, [pc, #200]	; (8000c68 <MX_GPIO_Init+0x278>)
 8000b9e:	f001 ff0d 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER3_PE13_Pin_Pin STEPPER4_PE14_Pin_Pin LD2_Pin */
  GPIO_InitStruct.Pin = STEPPER3_PE13_Pin_Pin | STEPPER4_PE14_Pin_Pin | LD2_Pin;
 8000ba2:	f246 0302 	movw	r3, #24578	; 0x6002
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	482c      	ldr	r0, [pc, #176]	; (8000c6c <MX_GPIO_Init+0x27c>)
 8000bbc:	f001 fefe 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4826      	ldr	r0, [pc, #152]	; (8000c70 <MX_GPIO_Init+0x280>)
 8000bd6:	f001 fef1 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	481d      	ldr	r0, [pc, #116]	; (8000c64 <MX_GPIO_Init+0x274>)
 8000bf0:	f001 fee4 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c06:	230a      	movs	r3, #10
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4814      	ldr	r0, [pc, #80]	; (8000c64 <MX_GPIO_Init+0x274>)
 8000c12:	f001 fed3 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin | USB_FS_P_Pin;
 8000c16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_GPIO_Init+0x274>)
 8000c30:	f001 fec4 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : HELP_SIGNAL_PG9_Pin_Pin VIBROMOTOR_PG12_Pin_Pin
   * STEPPER2_PG14_Pin_Pin */
  GPIO_InitStruct.Pin =
 8000c34:	f44f 43a4 	mov.w	r3, #20992	; 0x5200
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
      HELP_SIGNAL_PG9_Pin_Pin | VIBROMOTOR_PG12_Pin_Pin | STEPPER2_PG14_Pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <MX_GPIO_Init+0x280>)
 8000c4e:	f001 feb5 	bl	80029bc <HAL_GPIO_Init>
}
 8000c52:	bf00      	nop
 8000c54:	3738      	adds	r7, #56	; 0x38
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58021400 	.word	0x58021400
 8000c64:	58020000 	.word	0x58020000
 8000c68:	58020400 	.word	0x58020400
 8000c6c:	58021000 	.word	0x58021000
 8000c70:	58021800 	.word	0x58021800
 8000c74:	58020800 	.word	0x58020800

08000c78 <measure>:
// calling an ISR for STEPPER
// void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
//   STEPPER_TMR_OVF_ISR(htim);
// }

void measure(struct MeasureData *s) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  const int ONESEC = 10000 - 1;
 8000c80:	f242 730f 	movw	r3, #9999	; 0x270f
 8000c84:	613b      	str	r3, [r7, #16]
  // store our counter value
  int tim_val_ms = 0; // tick is 0.1 ms
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]

  bool is_vibrating = false;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	76fb      	strb	r3, [r7, #27]
  // store our 16bit ADC reading
  uint16_t raw;
  // starting timer 16
  HAL_TIM_Base_Start(&htim16);
 8000c8e:	4852      	ldr	r0, [pc, #328]	; (8000dd8 <measure+0x160>)
 8000c90:	f005 fcd8 	bl	8006644 <HAL_TIM_Base_Start>
  // set help signal (yellow led)
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);

  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e079      	b.n	8000d8e <measure+0x116>

    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000c9a:	7efb      	ldrb	r3, [r7, #27]
 8000c9c:	f083 0301 	eor.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d035      	beq.n	8000d12 <measure+0x9a>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	ee07 3a90 	vmov	s15, r3
 8000cac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cba:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8000dc8 <measure+0x150>
 8000cbe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000cc2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	db22      	blt.n	8000d12 <measure+0x9a>
        tim_val_ms < ONESEC * 0.3) {
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ce0:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8000dd0 <measure+0x158>
 8000ce4:	ee27 7b05 	vmul.f64	d7, d7, d5
    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000ce8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf0:	d50f      	bpl.n	8000d12 <measure+0x9a>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); // vibrator ON
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf8:	4838      	ldr	r0, [pc, #224]	; (8000ddc <measure+0x164>)
 8000cfa:	f002 f80f 	bl	8002d1c <HAL_GPIO_WritePin>
      // saving time of begin vibration
      s->t_vibr_start = i;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000d04:	461a      	mov	r2, r3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
      is_vibrating = true;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	76fb      	strb	r3, [r7, #27]
 8000d10:	e01d      	b.n	8000d4e <measure+0xd6>
    } else if (is_vibrating && tim_val_ms >= ONESEC * 0.3) {
 8000d12:	7efb      	ldrb	r3, [r7, #27]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d01a      	beq.n	8000d4e <measure+0xd6>
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	ee07 3a90 	vmov	s15, r3
 8000d1e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	ee07 3a90 	vmov	s15, r3
 8000d28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d2c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8000dd0 <measure+0x158>
 8000d30:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000d34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3c:	db07      	blt.n	8000d4e <measure+0xd6>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); // vibrator OFF
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d44:	4825      	ldr	r0, [pc, #148]	; (8000ddc <measure+0x164>)
 8000d46:	f001 ffe9 	bl	8002d1c <HAL_GPIO_WritePin>
      is_vibrating = false;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	76fb      	strb	r3, [r7, #27]
    }

    // ADC routine
    HAL_ADC_Start(&hadc1);
 8000d4e:	4824      	ldr	r0, [pc, #144]	; (8000de0 <measure+0x168>)
 8000d50:	f000 fe92 	bl	8001a78 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d58:	4821      	ldr	r0, [pc, #132]	; (8000de0 <measure+0x168>)
 8000d5a:	f000 ff47 	bl	8001bec <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc1);
 8000d5e:	4820      	ldr	r0, [pc, #128]	; (8000de0 <measure+0x168>)
 8000d60:	f001 f81c 	bl	8001d9c <HAL_ADC_GetValue>
 8000d64:	4603      	mov	r3, r0
 8000d66:	81fb      	strh	r3, [r7, #14]
    // needed to save the last iterator i
    s->t_end = i;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000d6e:	461a      	mov	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	f8c2 3d44 	str.w	r3, [r2, #3396]	; 0xd44
    // remember the last element of array will be 0, the counter will be
    // increased but array not filled
    s->signal[i] = raw;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	89f9      	ldrh	r1, [r7, #14]
 8000d7c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    tim_val_ms = __HAL_TIM_GET_COUNTER(&htim16);
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <measure+0x160>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	61fb      	str	r3, [r7, #28]
  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	69fa      	ldr	r2, [r7, #28]
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	db81      	blt.n	8000c9a <measure+0x22>
  }
  // stoping and reseting timer 16
  HAL_TIM_Base_Stop_IT(&htim16);
 8000d96:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <measure+0x160>)
 8000d98:	f005 fcc4 	bl	8006724 <HAL_TIM_Base_Stop_IT>
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <measure+0x160>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2200      	movs	r2, #0
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
  s->pulses = 0;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000daa:	461a      	mov	r2, r3
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c2 3d48 	str.w	r3, [r2, #3400]	; 0xd48
  s->htime = 0;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000db8:	461a      	mov	r2, r3
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
  // reset help signal (yellow led)
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	9999999a 	.word	0x9999999a
 8000dcc:	3fc99999 	.word	0x3fc99999
 8000dd0:	33333333 	.word	0x33333333
 8000dd4:	3fd33333 	.word	0x3fd33333
 8000dd8:	24030e34 	.word	0x24030e34
 8000ddc:	58021800 	.word	0x58021800
 8000de0:	24030dd0 	.word	0x24030dd0

08000de4 <uart_transmit_analog>:
  // resolve the variables to human readable values
  s->htime = s->htime * SCALE / s->t_end;
  s->t_vibr_start = s->t_vibr_start * SCALE / s->t_end;
}

void uart_transmit_analog(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  /* Transmit an array with ANALOG data via uart */
  for (int j = 0; j < Meas.t_end; j++) {
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	e016      	b.n	8000e1e <uart_transmit_analog+0x3a>
    uart_buf_len = sprintf(uart_buf, "%d, %u \r\n", j, Meas.signal[j]);
 8000df0:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <uart_transmit_analog+0x54>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4910      	ldr	r1, [pc, #64]	; (8000e3c <uart_transmit_analog+0x58>)
 8000dfc:	4810      	ldr	r0, [pc, #64]	; (8000e40 <uart_transmit_analog+0x5c>)
 8000dfe:	f007 f931 	bl	8008064 <siprintf>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <uart_transmit_analog+0x60>)
 8000e06:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <uart_transmit_analog+0x60>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	2364      	movs	r3, #100	; 0x64
 8000e10:	490b      	ldr	r1, [pc, #44]	; (8000e40 <uart_transmit_analog+0x5c>)
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <uart_transmit_analog+0x64>)
 8000e14:	f005 ff0e 	bl	8006c34 <HAL_UART_Transmit>
  for (int j = 0; j < Meas.t_end; j++) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <uart_transmit_analog+0x54>)
 8000e20:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e24:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	dbe0      	blt.n	8000df0 <uart_transmit_analog+0xc>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2400007c 	.word	0x2400007c
 8000e3c:	080089c4 	.word	0x080089c4
 8000e40:	24030f60 	.word	0x24030f60
 8000e44:	24030f94 	.word	0x24030f94
 8000e48:	24030ecc 	.word	0x24030ecc

08000e4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_MspInit+0x30>)
 8000e60:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e64:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_MspInit+0x30>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_MspInit+0x30>)
 8000e70:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	58024400 	.word	0x58024400

08000e8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0ba      	sub	sp, #232	; 0xe8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	22c0      	movs	r2, #192	; 0xc0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f007 f8f9 	bl	80080a4 <memset>
  if(hadc->Instance==ADC1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a2b      	ldr	r2, [pc, #172]	; (8000f64 <HAL_ADC_MspInit+0xd8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d14f      	bne.n	8000f5c <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ebc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000ecc:	2310      	movs	r3, #16
 8000ece:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000edc:	23c0      	movs	r3, #192	; 0xc0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 ff44 	bl	8003d80 <HAL_RCCEx_PeriphCLKConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000efe:	f7ff ffa5 	bl	8000e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_ADC_MspInit+0xdc>)
 8000f04:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_ADC_MspInit+0xdc>)
 8000f0a:	f043 0320 	orr.w	r3, r3, #32
 8000f0e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_ADC_MspInit+0xdc>)
 8000f14:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f18:	f003 0320 	and.w	r3, r3, #32
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_ADC_MspInit+0xdc>)
 8000f22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_ADC_MspInit+0xdc>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_ADC_MspInit+0xdc>)
 8000f32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|ANALOG_READ_PA3_Pin_Pin;
 8000f3e:	2309      	movs	r3, #9
 8000f40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f44:	2303      	movs	r3, #3
 8000f46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <HAL_ADC_MspInit+0xe0>)
 8000f58:	f001 fd30 	bl	80029bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	37e8      	adds	r7, #232	; 0xe8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40022000 	.word	0x40022000
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	58020000 	.word	0x58020000

08000f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <HAL_TIM_Base_MspInit+0x74>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d10f      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_TIM_Base_MspInit+0x78>)
 8000f84:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000f88:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <HAL_TIM_Base_MspInit+0x78>)
 8000f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_TIM_Base_MspInit+0x78>)
 8000f94:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000fa0:	e01b      	b.n	8000fda <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <HAL_TIM_Base_MspInit+0x7c>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d116      	bne.n	8000fda <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_TIM_Base_MspInit+0x78>)
 8000fae:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_TIM_Base_MspInit+0x78>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb8:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_TIM_Base_MspInit+0x78>)
 8000fbe:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2076      	movs	r0, #118	; 0x76
 8000fd0:	f001 fcbf 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000fd4:	2076      	movs	r0, #118	; 0x76
 8000fd6:	f001 fcd6 	bl	8002986 <HAL_NVIC_EnableIRQ>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40014400 	.word	0x40014400
 8000fe8:	58024400 	.word	0x58024400
 8000fec:	40014800 	.word	0x40014800

08000ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0ba      	sub	sp, #232	; 0xe8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	22c0      	movs	r2, #192	; 0xc0
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f007 f847 	bl	80080a4 <memset>
  if(huart->Instance==USART3)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <HAL_UART_MspInit+0xc8>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d146      	bne.n	80010ae <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001020:	f04f 0202 	mov.w	r2, #2
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4618      	mov	r0, r3
 8001038:	f002 fea2 	bl	8003d80 <HAL_RCCEx_PeriphCLKConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001042:	f7ff ff03 	bl	8000e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <HAL_UART_MspInit+0xcc>)
 8001048:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800104c:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <HAL_UART_MspInit+0xcc>)
 800104e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001052:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_UART_MspInit+0xcc>)
 8001058:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800105c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_UART_MspInit+0xcc>)
 8001066:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800106a:	4a14      	ldr	r2, [pc, #80]	; (80010bc <HAL_UART_MspInit+0xcc>)
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_UART_MspInit+0xcc>)
 8001076:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001082:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800109c:	2307      	movs	r3, #7
 800109e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <HAL_UART_MspInit+0xd0>)
 80010aa:	f001 fc87 	bl	80029bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	37e8      	adds	r7, #232	; 0xe8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40004800 	.word	0x40004800
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58020c00 	.word	0x58020c00

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001110:	f000 f956 	bl	80013c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <TIM17_IRQHandler+0x10>)
 800111e:	f005 fb30 	bl	8006782 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	24030e80 	.word	0x24030e80

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f006 ffaa 	bl	80080b4 <__errno>
 8001160:	4603      	mov	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	24100000 	.word	0x24100000
 800118c:	00000400 	.word	0x00000400
 8001190:	24030f98 	.word	0x24030f98
 8001194:	240310e8 	.word	0x240310e8

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <SystemInit+0xd0>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a31      	ldr	r2, [pc, #196]	; (8001268 <SystemInit+0xd0>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ac:	4b2f      	ldr	r3, [pc, #188]	; (800126c <SystemInit+0xd4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d807      	bhi.n	80011c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011b8:	4b2c      	ldr	r3, [pc, #176]	; (800126c <SystemInit+0xd4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f023 030f 	bic.w	r3, r3, #15
 80011c0:	4a2a      	ldr	r2, [pc, #168]	; (800126c <SystemInit+0xd4>)
 80011c2:	f043 0303 	orr.w	r3, r3, #3
 80011c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <SystemInit+0xd8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a28      	ldr	r2, [pc, #160]	; (8001270 <SystemInit+0xd8>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <SystemInit+0xd8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <SystemInit+0xd8>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4924      	ldr	r1, [pc, #144]	; (8001270 <SystemInit+0xd8>)
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <SystemInit+0xdc>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <SystemInit+0xd4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <SystemInit+0xd4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 030f 	bic.w	r3, r3, #15
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <SystemInit+0xd4>)
 80011fc:	f043 0303 	orr.w	r3, r3, #3
 8001200:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <SystemInit+0xd8>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <SystemInit+0xd8>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <SystemInit+0xd8>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <SystemInit+0xd8>)
 8001216:	4a18      	ldr	r2, [pc, #96]	; (8001278 <SystemInit+0xe0>)
 8001218:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <SystemInit+0xd8>)
 800121c:	4a17      	ldr	r2, [pc, #92]	; (800127c <SystemInit+0xe4>)
 800121e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <SystemInit+0xd8>)
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <SystemInit+0xe8>)
 8001224:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <SystemInit+0xd8>)
 8001228:	2200      	movs	r2, #0
 800122a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <SystemInit+0xd8>)
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <SystemInit+0xe8>)
 8001230:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <SystemInit+0xd8>)
 8001234:	2200      	movs	r2, #0
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <SystemInit+0xd8>)
 800123a:	4a11      	ldr	r2, [pc, #68]	; (8001280 <SystemInit+0xe8>)
 800123c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <SystemInit+0xd8>)
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <SystemInit+0xd8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a09      	ldr	r2, [pc, #36]	; (8001270 <SystemInit+0xd8>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <SystemInit+0xd8>)
 8001252:	2200      	movs	r2, #0
 8001254:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <SystemInit+0xec>)
 8001258:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800125c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00
 800126c:	52002000 	.word	0x52002000
 8001270:	58024400 	.word	0x58024400
 8001274:	eaf6ed7f 	.word	0xeaf6ed7f
 8001278:	02020200 	.word	0x02020200
 800127c:	01ff0000 	.word	0x01ff0000
 8001280:	01010280 	.word	0x01010280
 8001284:	52004000 	.word	0x52004000

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800128c:	f7ff ff84 	bl	8001198 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001292:	490d      	ldr	r1, [pc, #52]	; (80012c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001294:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a8:	4c0a      	ldr	r4, [pc, #40]	; (80012d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f006 ff03 	bl	80080c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff f9e7 	bl	800068c <main>
  bx  lr
 80012be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80012c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012c8:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80012cc:	08008aac 	.word	0x08008aac
  ldr r2, =_sbss
 80012d0:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80012d4:	240310e8 	.word	0x240310e8

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>
	...

080012dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e2:	2003      	movs	r0, #3
 80012e4:	f001 fb2a 	bl	800293c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80012e8:	f002 fb74 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 80012ec:	4602      	mov	r2, r0
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_Init+0x68>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	0a1b      	lsrs	r3, r3, #8
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	4913      	ldr	r1, [pc, #76]	; (8001348 <HAL_Init+0x6c>)
 80012fa:	5ccb      	ldrb	r3, [r1, r3]
 80012fc:	f003 031f 	and.w	r3, r3, #31
 8001300:	fa22 f303 	lsr.w	r3, r2, r3
 8001304:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_Init+0x68>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_Init+0x6c>)
 8001310:	5cd3      	ldrb	r3, [r2, r3]
 8001312:	f003 031f 	and.w	r3, r3, #31
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
 800131c:	4a0b      	ldr	r2, [pc, #44]	; (800134c <HAL_Init+0x70>)
 800131e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001320:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <HAL_Init+0x74>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001326:	2000      	movs	r0, #0
 8001328:	f000 f814 	bl	8001354 <HAL_InitTick>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e002      	b.n	800133c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001336:	f7ff fd8f 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	58024400 	.word	0x58024400
 8001348:	08008a30 	.word	0x08008a30
 800134c:	24000004 	.word	0x24000004
 8001350:	24000000 	.word	0x24000000

08001354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_InitTick+0x60>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e021      	b.n	80013ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_InitTick+0x64>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_InitTick+0x60>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	fbb3 f3f1 	udiv	r3, r3, r1
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f001 fb0f 	bl	80029a2 <HAL_SYSTICK_Config>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e00e      	b.n	80013ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b0f      	cmp	r3, #15
 8001392:	d80a      	bhi.n	80013aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001394:	2200      	movs	r2, #0
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800139c:	f001 fad9 	bl	8002952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <HAL_InitTick+0x68>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e000      	b.n	80013ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2400000c 	.word	0x2400000c
 80013b8:	24000000 	.word	0x24000000
 80013bc:	24000008 	.word	0x24000008

080013c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_IncTick+0x20>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x24>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <HAL_IncTick+0x24>)
 80013d2:	6013      	str	r3, [r2, #0]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2400000c 	.word	0x2400000c
 80013e4:	24030f9c 	.word	0x24030f9c

080013e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_GetTick+0x14>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	24030f9c 	.word	0x24030f9c

08001400 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	609a      	str	r2, [r3, #8]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3360      	adds	r3, #96	; 0x60
 800147a:	461a      	mov	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	430b      	orrs	r3, r1
 8001496:	431a      	orrs	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800149c:	bf00      	nop
 800149e:	371c      	adds	r7, #28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	431a      	orrs	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	611a      	str	r2, [r3, #16]
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80014da:	b480      	push	{r7}
 80014dc:	b087      	sub	sp, #28
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3360      	adds	r3, #96	; 0x60
 80014ea:	461a      	mov	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	431a      	orrs	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	601a      	str	r2, [r3, #0]
  }
}
 8001504:	bf00      	nop
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001536:	b480      	push	{r7}
 8001538:	b087      	sub	sp, #28
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3330      	adds	r3, #48	; 0x30
 8001546:	461a      	mov	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	0a1b      	lsrs	r3, r3, #8
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	4413      	add	r3, r2
 8001554:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	211f      	movs	r1, #31
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	401a      	ands	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	0e9b      	lsrs	r3, r3, #26
 800156e:	f003 011f 	and.w	r1, r3, #31
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	431a      	orrs	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001582:	bf00      	nop
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800158e:	b480      	push	{r7}
 8001590:	b087      	sub	sp, #28
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3314      	adds	r3, #20
 800159e:	461a      	mov	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	0e5b      	lsrs	r3, r3, #25
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	4413      	add	r3, r2
 80015ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	0d1b      	lsrs	r3, r3, #20
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2107      	movs	r1, #7
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	401a      	ands	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	0d1b      	lsrs	r3, r3, #20
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	431a      	orrs	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015fc:	43db      	mvns	r3, r3
 80015fe:	401a      	ands	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0318 	and.w	r3, r3, #24
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001608:	40d9      	lsrs	r1, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	400b      	ands	r3, r1
 800160e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001612:	431a      	orrs	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	000fffff 	.word	0x000fffff

0800162c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 031f 	and.w	r3, r3, #31
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001672:	4013      	ands	r3, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6093      	str	r3, [r2, #8]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	5fffffc0 	.word	0x5fffffc0

08001688 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800169c:	d101      	bne.n	80016a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80016be:	4013      	ands	r3, r2
 80016c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	6fffffc0 	.word	0x6fffffc0

080016d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016ec:	d101      	bne.n	80016f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <LL_ADC_Enable+0x24>)
 800170e:	4013      	ands	r3, r2
 8001710:	f043 0201 	orr.w	r2, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	7fffffc0 	.word	0x7fffffc0

08001728 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <LL_ADC_IsEnabled+0x18>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <LL_ADC_IsEnabled+0x1a>
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <LL_ADC_REG_StartConversion+0x24>)
 800175e:	4013      	ands	r3, r2
 8001760:	f043 0204 	orr.w	r2, r3, #4
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	7fffffc0 	.word	0x7fffffc0

08001778 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b04      	cmp	r3, #4
 800178a:	d101      	bne.n	8001790 <LL_ADC_REG_IsConversionOngoing+0x18>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d101      	bne.n	80017b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e138      	b.n	8001a50 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d109      	bne.n	8001800 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fb4d 	bl	8000e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff3f 	bl	8001688 <LL_ADC_IsDeepPowerDownEnabled>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff25 	bl	8001664 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff5a 	bl	80016d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d114      	bne.n	8001854 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff3e 	bl	80016b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001834:	4b88      	ldr	r3, [pc, #544]	; (8001a58 <HAL_ADC_Init+0x294>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	099b      	lsrs	r3, r3, #6
 800183a:	4a88      	ldr	r2, [pc, #544]	; (8001a5c <HAL_ADC_Init+0x298>)
 800183c:	fba2 2303 	umull	r2, r3, r2, r3
 8001840:	099b      	lsrs	r3, r3, #6
 8001842:	3301      	adds	r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001846:	e002      	b.n	800184e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	3b01      	subs	r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f9      	bne.n	8001848 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff3d 	bl	80016d8 <LL_ADC_IsInternalRegulatorEnabled>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10d      	bne.n	8001880 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001868:	f043 0210 	orr.w	r2, r3, #16
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	f043 0201 	orr.w	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff77 	bl	8001778 <LL_ADC_REG_IsConversionOngoing>
 800188a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 80d2 	bne.w	8001a3e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	f040 80ce 	bne.w	8001a3e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018aa:	f043 0202 	orr.w	r2, r3, #2
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff36 	bl	8001728 <LL_ADC_IsEnabled>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d110      	bne.n	80018e4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018c2:	4867      	ldr	r0, [pc, #412]	; (8001a60 <HAL_ADC_Init+0x29c>)
 80018c4:	f7ff ff30 	bl	8001728 <LL_ADC_IsEnabled>
 80018c8:	4604      	mov	r4, r0
 80018ca:	4866      	ldr	r0, [pc, #408]	; (8001a64 <HAL_ADC_Init+0x2a0>)
 80018cc:	f7ff ff2c 	bl	8001728 <LL_ADC_IsEnabled>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4323      	orrs	r3, r4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4619      	mov	r1, r3
 80018de:	4862      	ldr	r0, [pc, #392]	; (8001a68 <HAL_ADC_Init+0x2a4>)
 80018e0:	f7ff fd8e 	bl	8001400 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7d5b      	ldrb	r3, [r3, #21]
 80018e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018ee:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80018f4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7f1b      	ldrb	r3, [r3, #28]
 80018fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7f1b      	ldrb	r3, [r3, #28]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d106      	bne.n	8001916 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	3b01      	subs	r3, #1
 800190e:	045b      	lsls	r3, r3, #17
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <HAL_ADC_Init+0x2a8>)
 800193a:	4013      	ands	r3, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	69b9      	ldr	r1, [r7, #24]
 8001942:	430b      	orrs	r3, r1
 8001944:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff14 	bl	8001778 <LL_ADC_REG_IsConversionOngoing>
 8001950:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff21 	bl	800179e <LL_ADC_INJ_IsConversionOngoing>
 800195c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d14a      	bne.n	80019fa <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d147      	bne.n	80019fa <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7d1b      	ldrb	r3, [r3, #20]
 800196e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <HAL_ADC_Init+0x2ac>)
 8001980:	4013      	ands	r3, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	69b9      	ldr	r1, [r7, #24]
 8001988:	430b      	orrs	r3, r1
 800198a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001992:	2b01      	cmp	r3, #1
 8001994:	d11b      	bne.n	80019ce <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	4b34      	ldr	r3, [pc, #208]	; (8001a74 <HAL_ADC_Init+0x2b0>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019aa:	3a01      	subs	r2, #1
 80019ac:	0411      	lsls	r1, r2, #16
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019b2:	4311      	orrs	r1, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019b8:	4311      	orrs	r1, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019be:	430a      	orrs	r2, r1
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	e007      	b.n	80019de <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fd41 	bl	800247c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d10c      	bne.n	8001a1c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	f023 010f 	bic.w	r1, r3, #15
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	631a      	str	r2, [r3, #48]	; 0x30
 8001a1a:	e007      	b.n	8001a2c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 020f 	bic.w	r2, r2, #15
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a30:	f023 0303 	bic.w	r3, r3, #3
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
 8001a3c:	e007      	b.n	8001a4e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	f043 0210 	orr.w	r2, r3, #16
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3724      	adds	r7, #36	; 0x24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	24000000 	.word	0x24000000
 8001a5c:	053e2d63 	.word	0x053e2d63
 8001a60:	40022000 	.word	0x40022000
 8001a64:	40022100 	.word	0x40022100
 8001a68:	40022300 	.word	0x40022300
 8001a6c:	fff0c003 	.word	0xfff0c003
 8001a70:	ffffbffc 	.word	0xffffbffc
 8001a74:	fc00f81e 	.word	0xfc00f81e

08001a78 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a80:	4856      	ldr	r0, [pc, #344]	; (8001bdc <HAL_ADC_Start+0x164>)
 8001a82:	f7ff fdd3 	bl	800162c <LL_ADC_GetMultimode>
 8001a86:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fe73 	bl	8001778 <LL_ADC_REG_IsConversionOngoing>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 809a 	bne.w	8001bce <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_Start+0x30>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e095      	b.n	8001bd4 <HAL_ADC_Start+0x15c>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fc67 	bl	8002384 <ADC_Enable>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 8081 	bne.w	8001bc4 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ac6:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <HAL_ADC_Start+0x168>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a43      	ldr	r2, [pc, #268]	; (8001be4 <HAL_ADC_Start+0x16c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d002      	beq.n	8001ae2 <HAL_ADC_Start+0x6a>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	e000      	b.n	8001ae4 <HAL_ADC_Start+0x6c>
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <HAL_ADC_Start+0x170>)
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d002      	beq.n	8001af2 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d105      	bne.n	8001afe <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b0a:	d106      	bne.n	8001b1a <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b10:	f023 0206 	bic.w	r2, r3, #6
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	659a      	str	r2, [r3, #88]	; 0x58
 8001b18:	e002      	b.n	8001b20 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	221c      	movs	r2, #28
 8001b26:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2b      	ldr	r2, [pc, #172]	; (8001be4 <HAL_ADC_Start+0x16c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d002      	beq.n	8001b40 <HAL_ADC_Start+0xc8>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	e000      	b.n	8001b42 <HAL_ADC_Start+0xca>
 8001b40:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_ADC_Start+0x170>)
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d008      	beq.n	8001b5c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	2b05      	cmp	r3, #5
 8001b54:	d002      	beq.n	8001b5c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d114      	bne.n	8001b86 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fde6 	bl	8001750 <LL_ADC_REG_StartConversion>
 8001b84:	e025      	b.n	8001bd2 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <HAL_ADC_Start+0x16c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d002      	beq.n	8001ba2 <HAL_ADC_Start+0x12a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	e000      	b.n	8001ba4 <HAL_ADC_Start+0x12c>
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_ADC_Start+0x170>)
 8001ba4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00f      	beq.n	8001bd2 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
 8001bc2:	e006      	b.n	8001bd2 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001bcc:	e001      	b.n	8001bd2 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40022300 	.word	0x40022300
 8001be0:	fffff0fe 	.word	0xfffff0fe
 8001be4:	40022100 	.word	0x40022100
 8001be8:	40022000 	.word	0x40022000

08001bec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bf6:	4866      	ldr	r0, [pc, #408]	; (8001d90 <HAL_ADC_PollForConversion+0x1a4>)
 8001bf8:	f7ff fd18 	bl	800162c <LL_ADC_GetMultimode>
 8001bfc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d102      	bne.n	8001c0c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c06:	2308      	movs	r3, #8
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	e02a      	b.n	8001c62 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d002      	beq.n	8001c1e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b09      	cmp	r3, #9
 8001c1c:	d111      	bne.n	8001c42 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	f043 0220 	orr.w	r2, r3, #32
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0a4      	b.n	8001d86 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001c40:	e00f      	b.n	8001c62 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001c42:	4853      	ldr	r0, [pc, #332]	; (8001d90 <HAL_ADC_PollForConversion+0x1a4>)
 8001c44:	f7ff fd00 	bl	8001648 <LL_ADC_GetMultiDMATransfer>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	f043 0220 	orr.w	r2, r3, #32
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e093      	b.n	8001d86 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c5e:	2304      	movs	r3, #4
 8001c60:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c62:	f7ff fbc1 	bl	80013e8 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c68:	e021      	b.n	8001cae <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c70:	d01d      	beq.n	8001cae <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c72:	f7ff fbb9 	bl	80013e8 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d302      	bcc.n	8001c88 <HAL_ADC_PollForConversion+0x9c>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d112      	bne.n	8001cae <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10b      	bne.n	8001cae <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9a:	f043 0204 	orr.w	r2, r3, #4
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e06b      	b.n	8001d86 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0d6      	beq.n	8001c6a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fc1f 	bl	8001510 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d01c      	beq.n	8001d12 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7d5b      	ldrb	r3, [r3, #21]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d118      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d111      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d105      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	f043 0201 	orr.w	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_ADC_PollForConversion+0x1a8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d002      	beq.n	8001d22 <HAL_ADC_PollForConversion+0x136>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	e000      	b.n	8001d24 <HAL_ADC_PollForConversion+0x138>
 8001d22:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_ADC_PollForConversion+0x1ac>)
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d008      	beq.n	8001d3e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	d002      	beq.n	8001d3e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b09      	cmp	r3, #9
 8001d3c:	d104      	bne.n	8001d48 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	e00c      	b.n	8001d62 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_ADC_PollForConversion+0x1a8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d002      	beq.n	8001d58 <HAL_ADC_PollForConversion+0x16c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	e000      	b.n	8001d5a <HAL_ADC_PollForConversion+0x16e>
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_ADC_PollForConversion+0x1ac>)
 8001d5a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d104      	bne.n	8001d72 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e008      	b.n	8001d84 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d103      	bne.n	8001d84 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	220c      	movs	r2, #12
 8001d82:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40022300 	.word	0x40022300
 8001d94:	40022100 	.word	0x40022100
 8001d98:	40022000 	.word	0x40022000

08001d9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b0a1      	sub	sp, #132	; 0x84
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a9a      	ldr	r2, [pc, #616]	; (800203c <HAL_ADC_ConfigChannel+0x284>)
 8001dd2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x2a>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e2bc      	b.n	800235c <HAL_ADC_ConfigChannel+0x5a4>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fcc2 	bl	8001778 <LL_ADC_REG_IsConversionOngoing>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 82a1 	bne.w	800233e <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d108      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x62>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	2201      	movs	r2, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	e016      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x90>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e2a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001e32:	2320      	movs	r3, #32
 8001e34:	e003      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	2201      	movs	r2, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	69d1      	ldr	r1, [r2, #28]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	430b      	orrs	r3, r1
 8001e54:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6859      	ldr	r1, [r3, #4]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	f7ff fb67 	bl	8001536 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fc83 	bl	8001778 <LL_ADC_REG_IsConversionOngoing>
 8001e72:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fc90 	bl	800179e <LL_ADC_INJ_IsConversionOngoing>
 8001e7e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 80a0 	bne.w	8001fc8 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 809c 	bne.w	8001fc8 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6819      	ldr	r1, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f7ff fb76 	bl	800158e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10b      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x110>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	e00a      	b.n	8001ede <HAL_ADC_ConfigChannel+0x126>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d027      	beq.n	8001f38 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6919      	ldr	r1, [r3, #16]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef6:	f7ff fab7 	bl	8001468 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6919      	ldr	r1, [r3, #16]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	7e5b      	ldrb	r3, [r3, #25]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x158>
 8001f0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f0e:	e000      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x15a>
 8001f10:	2300      	movs	r3, #0
 8001f12:	461a      	mov	r2, r3
 8001f14:	f7ff fae1 	bl	80014da <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6919      	ldr	r1, [r3, #16]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	7e1b      	ldrb	r3, [r3, #24]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d102      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x176>
 8001f28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f2c:	e000      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x178>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	461a      	mov	r2, r3
 8001f32:	f7ff fab9 	bl	80014a8 <LL_ADC_SetDataRightShift>
 8001f36:	e047      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	069b      	lsls	r3, r3, #26
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d107      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f5a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	069b      	lsls	r3, r3, #26
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d107      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f7e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	069b      	lsls	r3, r3, #26
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d107      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fa2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001faa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	069b      	lsls	r3, r3, #26
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fc6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fbab 	bl	8001728 <LL_ADC_IsEnabled>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f040 81bb 	bne.w	8002350 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6819      	ldr	r1, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f7ff fafc 	bl	80015e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a12      	ldr	r2, [pc, #72]	; (800203c <HAL_ADC_ConfigChannel+0x284>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	f040 8130 	bne.w	8002258 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10b      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x268>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0e9b      	lsrs	r3, r3, #26
 800200e:	3301      	adds	r3, #1
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	2b09      	cmp	r3, #9
 8002016:	bf94      	ite	ls
 8002018:	2301      	movls	r3, #1
 800201a:	2300      	movhi	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	e01b      	b.n	8002058 <HAL_ADC_ConfigChannel+0x2a0>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800202e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002030:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d103      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002038:	2320      	movs	r3, #32
 800203a:	e005      	b.n	8002048 <HAL_ADC_ConfigChannel+0x290>
 800203c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	3301      	adds	r3, #1
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	2b09      	cmp	r3, #9
 8002050:	bf94      	ite	ls
 8002052:	2301      	movls	r3, #1
 8002054:	2300      	movhi	r3, #0
 8002056:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002058:	2b00      	cmp	r3, #0
 800205a:	d079      	beq.n	8002150 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x2c0>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	3301      	adds	r3, #1
 8002070:	069b      	lsls	r3, r3, #26
 8002072:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002076:	e015      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x2ec>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002088:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800208a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002090:	2320      	movs	r3, #32
 8002092:	e003      	b.n	800209c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	3301      	adds	r3, #1
 800209e:	069b      	lsls	r3, r3, #26
 80020a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x30c>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	3301      	adds	r3, #1
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	2101      	movs	r1, #1
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	e017      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x33c>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80020d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80020d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80020dc:	2320      	movs	r3, #32
 80020de:	e003      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80020e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f303 	lsl.w	r3, r1, r3
 80020f4:	ea42 0103 	orr.w	r1, r2, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10a      	bne.n	800211a <HAL_ADC_ConfigChannel+0x362>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0e9b      	lsrs	r3, r3, #26
 800210a:	3301      	adds	r3, #1
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	051b      	lsls	r3, r3, #20
 8002118:	e018      	b.n	800214c <HAL_ADC_ConfigChannel+0x394>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800212c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002132:	2320      	movs	r3, #32
 8002134:	e003      	b.n	800213e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	3301      	adds	r3, #1
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800214c:	430b      	orrs	r3, r1
 800214e:	e07e      	b.n	800224e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002158:	2b00      	cmp	r3, #0
 800215a:	d107      	bne.n	800216c <HAL_ADC_ConfigChannel+0x3b4>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	3301      	adds	r3, #1
 8002164:	069b      	lsls	r3, r3, #26
 8002166:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800216a:	e015      	b.n	8002198 <HAL_ADC_ConfigChannel+0x3e0>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800217e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e003      	b.n	8002190 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	3301      	adds	r3, #1
 8002192:	069b      	lsls	r3, r3, #26
 8002194:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d109      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x400>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	3301      	adds	r3, #1
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	2101      	movs	r1, #1
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	e017      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x430>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	61bb      	str	r3, [r7, #24]
  return result;
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	ea42 0103 	orr.w	r1, r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10d      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x45c>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	3301      	adds	r3, #1
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	3b1e      	subs	r3, #30
 800220c:	051b      	lsls	r3, r3, #20
 800220e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002212:	e01b      	b.n	800224c <HAL_ADC_ConfigChannel+0x494>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	60fb      	str	r3, [r7, #12]
  return result;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 800222c:	2320      	movs	r3, #32
 800222e:	e003      	b.n	8002238 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3301      	adds	r3, #1
 800223a:	f003 021f 	and.w	r2, r3, #31
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	3b1e      	subs	r3, #30
 8002246:	051b      	lsls	r3, r3, #20
 8002248:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800224c:	430b      	orrs	r3, r1
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	6892      	ldr	r2, [r2, #8]
 8002252:	4619      	mov	r1, r3
 8002254:	f7ff f99b 	bl	800158e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	da77      	bge.n	8002350 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002260:	4840      	ldr	r0, [pc, #256]	; (8002364 <HAL_ADC_ConfigChannel+0x5ac>)
 8002262:	f7ff f8f3 	bl	800144c <LL_ADC_GetCommonPathInternalCh>
 8002266:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002268:	483f      	ldr	r0, [pc, #252]	; (8002368 <HAL_ADC_ConfigChannel+0x5b0>)
 800226a:	f7ff fa5d 	bl	8001728 <LL_ADC_IsEnabled>
 800226e:	4604      	mov	r4, r0
 8002270:	483e      	ldr	r0, [pc, #248]	; (800236c <HAL_ADC_ConfigChannel+0x5b4>)
 8002272:	f7ff fa59 	bl	8001728 <LL_ADC_IsEnabled>
 8002276:	4603      	mov	r3, r0
 8002278:	4323      	orrs	r3, r4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d155      	bne.n	800232a <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a3b      	ldr	r2, [pc, #236]	; (8002370 <HAL_ADC_ConfigChannel+0x5b8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d122      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x516>
 8002288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d11d      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a35      	ldr	r2, [pc, #212]	; (800236c <HAL_ADC_ConfigChannel+0x5b4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d159      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800229c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022a2:	4619      	mov	r1, r3
 80022a4:	482f      	ldr	r0, [pc, #188]	; (8002364 <HAL_ADC_ConfigChannel+0x5ac>)
 80022a6:	f7ff f8be 	bl	8001426 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022aa:	4b32      	ldr	r3, [pc, #200]	; (8002374 <HAL_ADC_ConfigChannel+0x5bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	099b      	lsrs	r3, r3, #6
 80022b0:	4a31      	ldr	r2, [pc, #196]	; (8002378 <HAL_ADC_ConfigChannel+0x5c0>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	099b      	lsrs	r3, r3, #6
 80022b8:	3301      	adds	r3, #1
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022be:	e002      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f9      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022cc:	e040      	b.n	8002350 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a2a      	ldr	r2, [pc, #168]	; (800237c <HAL_ADC_ConfigChannel+0x5c4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d111      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x544>
 80022d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a21      	ldr	r2, [pc, #132]	; (800236c <HAL_ADC_ConfigChannel+0x5b4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d131      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80022ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f2:	4619      	mov	r1, r3
 80022f4:	481b      	ldr	r0, [pc, #108]	; (8002364 <HAL_ADC_ConfigChannel+0x5ac>)
 80022f6:	f7ff f896 	bl	8001426 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022fa:	e029      	b.n	8002350 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <HAL_ADC_ConfigChannel+0x5c8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d124      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x598>
 8002306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d11f      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <HAL_ADC_ConfigChannel+0x5b4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d11a      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800231a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002320:	4619      	mov	r1, r3
 8002322:	4810      	ldr	r0, [pc, #64]	; (8002364 <HAL_ADC_ConfigChannel+0x5ac>)
 8002324:	f7ff f87f 	bl	8001426 <LL_ADC_SetCommonPathInternalCh>
 8002328:	e012      	b.n	8002350 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232e:	f043 0220 	orr.w	r2, r3, #32
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800233c:	e008      	b.n	8002350 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f043 0220 	orr.w	r2, r3, #32
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002358:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800235c:	4618      	mov	r0, r3
 800235e:	3784      	adds	r7, #132	; 0x84
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}
 8002364:	40022300 	.word	0x40022300
 8002368:	40022000 	.word	0x40022000
 800236c:	40022100 	.word	0x40022100
 8002370:	cb840000 	.word	0xcb840000
 8002374:	24000000 	.word	0x24000000
 8002378:	053e2d63 	.word	0x053e2d63
 800237c:	bac04000 	.word	0xbac04000
 8002380:	cfb80000 	.word	0xcfb80000

08002384 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff f9c9 	bl	8001728 <LL_ADC_IsEnabled>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d161      	bne.n	8002460 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	4b32      	ldr	r3, [pc, #200]	; (800246c <ADC_Enable+0xe8>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00d      	beq.n	80023c6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f043 0210 	orr.w	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	f043 0201 	orr.w	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e04d      	b.n	8002462 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff f998 	bl	8001700 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023d0:	f7ff f80a 	bl	80013e8 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023d6:	4826      	ldr	r0, [pc, #152]	; (8002470 <ADC_Enable+0xec>)
 80023d8:	f7ff f928 	bl	800162c <LL_ADC_GetMultimode>
 80023dc:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a24      	ldr	r2, [pc, #144]	; (8002474 <ADC_Enable+0xf0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d002      	beq.n	80023ee <ADC_Enable+0x6a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	e000      	b.n	80023f0 <ADC_Enable+0x6c>
 80023ee:	4b22      	ldr	r3, [pc, #136]	; (8002478 <ADC_Enable+0xf4>)
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d02c      	beq.n	8002452 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d130      	bne.n	8002460 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023fe:	e028      	b.n	8002452 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff f98f 	bl	8001728 <LL_ADC_IsEnabled>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d104      	bne.n	800241a <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff f973 	bl	8001700 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800241a:	f7fe ffe5 	bl	80013e8 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d914      	bls.n	8002452 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d00d      	beq.n	8002452 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	f043 0210 	orr.w	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e007      	b.n	8002462 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d1cf      	bne.n	8002400 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	8000003f 	.word	0x8000003f
 8002470:	40022300 	.word	0x40022300
 8002474:	40022100 	.word	0x40022100
 8002478:	40022000 	.word	0x40022000

0800247c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002484:	4b60      	ldr	r3, [pc, #384]	; (8002608 <ADC_ConfigureBoostMode+0x18c>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01c      	beq.n	80024ca <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002490:	f001 fc1a 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8002494:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800249e:	d010      	beq.n	80024c2 <ADC_ConfigureBoostMode+0x46>
 80024a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024a4:	d873      	bhi.n	800258e <ADC_ConfigureBoostMode+0x112>
 80024a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024aa:	d002      	beq.n	80024b2 <ADC_ConfigureBoostMode+0x36>
 80024ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024b0:	d16d      	bne.n	800258e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	60fb      	str	r3, [r7, #12]
        break;
 80024c0:	e068      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	60fb      	str	r3, [r7, #12]
        break;
 80024c8:	e064      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80024ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80024ce:	f04f 0100 	mov.w	r1, #0
 80024d2:	f002 fe13 	bl	80050fc <HAL_RCCEx_GetPeriphCLKFreq>
 80024d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024e0:	d051      	beq.n	8002586 <ADC_ConfigureBoostMode+0x10a>
 80024e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024e6:	d854      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 80024e8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024ec:	d047      	beq.n	800257e <ADC_ConfigureBoostMode+0x102>
 80024ee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024f2:	d84e      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 80024f4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024f8:	d03d      	beq.n	8002576 <ADC_ConfigureBoostMode+0xfa>
 80024fa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024fe:	d848      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 8002500:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002504:	d033      	beq.n	800256e <ADC_ConfigureBoostMode+0xf2>
 8002506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800250a:	d842      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 800250c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002510:	d029      	beq.n	8002566 <ADC_ConfigureBoostMode+0xea>
 8002512:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002516:	d83c      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 8002518:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800251c:	d01a      	beq.n	8002554 <ADC_ConfigureBoostMode+0xd8>
 800251e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002522:	d836      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 8002524:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002528:	d014      	beq.n	8002554 <ADC_ConfigureBoostMode+0xd8>
 800252a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800252e:	d830      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 8002530:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002534:	d00e      	beq.n	8002554 <ADC_ConfigureBoostMode+0xd8>
 8002536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800253a:	d82a      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 800253c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002540:	d008      	beq.n	8002554 <ADC_ConfigureBoostMode+0xd8>
 8002542:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002546:	d824      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 8002548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800254c:	d002      	beq.n	8002554 <ADC_ConfigureBoostMode+0xd8>
 800254e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002552:	d11e      	bne.n	8002592 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0c9b      	lsrs	r3, r3, #18
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002562:	60fb      	str	r3, [r7, #12]
        break;
 8002564:	e016      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	60fb      	str	r3, [r7, #12]
        break;
 800256c:	e012      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	60fb      	str	r3, [r7, #12]
        break;
 8002574:	e00e      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	60fb      	str	r3, [r7, #12]
        break;
 800257c:	e00a      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	09db      	lsrs	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]
        break;
 8002584:	e006      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	60fb      	str	r3, [r7, #12]
        break;
 800258c:	e002      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
        break;
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002592:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	085b      	lsrs	r3, r3, #1
 8002598:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a1b      	ldr	r2, [pc, #108]	; (800260c <ADC_ConfigureBoostMode+0x190>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d808      	bhi.n	80025b4 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025b0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80025b2:	e025      	b.n	8002600 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a16      	ldr	r2, [pc, #88]	; (8002610 <ADC_ConfigureBoostMode+0x194>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d80a      	bhi.n	80025d2 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ce:	609a      	str	r2, [r3, #8]
}
 80025d0:	e016      	b.n	8002600 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <ADC_ConfigureBoostMode+0x198>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d80a      	bhi.n	80025f0 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ec:	609a      	str	r2, [r3, #8]
}
 80025ee:	e007      	b.n	8002600 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80025fe:	609a      	str	r2, [r3, #8]
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40022300 	.word	0x40022300
 800260c:	005f5e10 	.word	0x005f5e10
 8002610:	00bebc20 	.word	0x00bebc20
 8002614:	017d7840 	.word	0x017d7840

08002618 <LL_ADC_IsEnabled>:
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <LL_ADC_IsEnabled+0x18>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <LL_ADC_IsEnabled+0x1a>
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_ADC_REG_IsConversionOngoing>:
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d101      	bne.n	8002656 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b09f      	sub	sp, #124	; 0x7c
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800267e:	2302      	movs	r3, #2
 8002680:	e080      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800268e:	2300      	movs	r3, #0
 8002690:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a3d      	ldr	r2, [pc, #244]	; (800278c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d102      	bne.n	80026a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800269c:	4b3c      	ldr	r3, [pc, #240]	; (8002790 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	e001      	b.n	80026a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	f043 0220 	orr.w	r2, r3, #32
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e05f      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ffb9 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 80026cc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ffb3 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d141      	bne.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d13e      	bne.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80026e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80026f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002700:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002702:	4822      	ldr	r0, [pc, #136]	; (800278c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002704:	f7ff ff88 	bl	8002618 <LL_ADC_IsEnabled>
 8002708:	4604      	mov	r4, r0
 800270a:	4821      	ldr	r0, [pc, #132]	; (8002790 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800270c:	f7ff ff84 	bl	8002618 <LL_ADC_IsEnabled>
 8002710:	4603      	mov	r3, r0
 8002712:	4323      	orrs	r3, r4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d12e      	bne.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800271e:	4013      	ands	r3, r2
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	6811      	ldr	r1, [r2, #0]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	6892      	ldr	r2, [r2, #8]
 8002728:	430a      	orrs	r2, r1
 800272a:	431a      	orrs	r2, r3
 800272c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002730:	e021      	b.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800273a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800273e:	4813      	ldr	r0, [pc, #76]	; (800278c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002740:	f7ff ff6a 	bl	8002618 <LL_ADC_IsEnabled>
 8002744:	4604      	mov	r4, r0
 8002746:	4812      	ldr	r0, [pc, #72]	; (8002790 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002748:	f7ff ff66 	bl	8002618 <LL_ADC_IsEnabled>
 800274c:	4603      	mov	r3, r0
 800274e:	4323      	orrs	r3, r4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d110      	bne.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800275a:	4013      	ands	r3, r2
 800275c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800275e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002760:	e009      	b.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002774:	e000      	b.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002776:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002780:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002784:	4618      	mov	r0, r3
 8002786:	377c      	adds	r7, #124	; 0x7c
 8002788:	46bd      	mov	sp, r7
 800278a:	bd90      	pop	{r4, r7, pc}
 800278c:	40022000 	.word	0x40022000
 8002790:	40022100 	.word	0x40022100
 8002794:	40022300 	.word	0x40022300
 8002798:	fffff0e0 	.word	0xfffff0e0

0800279c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <__NVIC_SetPriorityGrouping+0x40>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b8:	4013      	ands	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <__NVIC_SetPriorityGrouping+0x40>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00
 80027e0:	05fa0000 	.word	0x05fa0000

080027e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <__NVIC_GetPriorityGrouping+0x18>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	f003 0307 	and.w	r3, r3, #7
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800280a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db0b      	blt.n	800282a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	f003 021f 	and.w	r2, r3, #31
 8002818:	4907      	ldr	r1, [pc, #28]	; (8002838 <__NVIC_EnableIRQ+0x38>)
 800281a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2001      	movs	r0, #1
 8002822:	fa00 f202 	lsl.w	r2, r0, r2
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000e100 	.word	0xe000e100

0800283c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db0a      	blt.n	8002866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	490c      	ldr	r1, [pc, #48]	; (8002888 <__NVIC_SetPriority+0x4c>)
 8002856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	440b      	add	r3, r1
 8002860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002864:	e00a      	b.n	800287c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4908      	ldr	r1, [pc, #32]	; (800288c <__NVIC_SetPriority+0x50>)
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	3b04      	subs	r3, #4
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	440b      	add	r3, r1
 800287a:	761a      	strb	r2, [r3, #24]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f1c3 0307 	rsb	r3, r3, #7
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	bf28      	it	cs
 80028ae:	2304      	movcs	r3, #4
 80028b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d902      	bls.n	80028c0 <NVIC_EncodePriority+0x30>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3b03      	subs	r3, #3
 80028be:	e000      	b.n	80028c2 <NVIC_EncodePriority+0x32>
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43d9      	mvns	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	4313      	orrs	r3, r2
         );
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3724      	adds	r7, #36	; 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002908:	d301      	bcc.n	800290e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290a:	2301      	movs	r3, #1
 800290c:	e00f      	b.n	800292e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <SysTick_Config+0x40>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002916:	210f      	movs	r1, #15
 8002918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800291c:	f7ff ff8e 	bl	800283c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <SysTick_Config+0x40>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <SysTick_Config+0x40>)
 8002928:	2207      	movs	r2, #7
 800292a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	e000e010 	.word	0xe000e010

0800293c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ff29 	bl	800279c <__NVIC_SetPriorityGrouping>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002960:	f7ff ff40 	bl	80027e4 <__NVIC_GetPriorityGrouping>
 8002964:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	6978      	ldr	r0, [r7, #20]
 800296c:	f7ff ff90 	bl	8002890 <NVIC_EncodePriority>
 8002970:	4602      	mov	r2, r0
 8002972:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff5f 	bl	800283c <__NVIC_SetPriority>
}
 800297e:	bf00      	nop
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff33 	bl	8002800 <__NVIC_EnableIRQ>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ffa4 	bl	80028f8 <SysTick_Config>
 80029b0:	4603      	mov	r3, r0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029ca:	4b89      	ldr	r3, [pc, #548]	; (8002bf0 <HAL_GPIO_Init+0x234>)
 80029cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029ce:	e194      	b.n	8002cfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8186 	beq.w	8002cf4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d005      	beq.n	8002a00 <HAL_GPIO_Init+0x44>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d130      	bne.n	8002a62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a36:	2201      	movs	r2, #1
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	f003 0201 	and.w	r2, r3, #1
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d017      	beq.n	8002a9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2203      	movs	r2, #3
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d123      	bne.n	8002af2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	08da      	lsrs	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3208      	adds	r2, #8
 8002ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	08da      	lsrs	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3208      	adds	r2, #8
 8002aec:	69b9      	ldr	r1, [r7, #24]
 8002aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	2203      	movs	r2, #3
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0203 	and.w	r2, r3, #3
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80e0 	beq.w	8002cf4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <HAL_GPIO_Init+0x238>)
 8002b36:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b3a:	4a2e      	ldr	r2, [pc, #184]	; (8002bf4 <HAL_GPIO_Init+0x238>)
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002b44:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <HAL_GPIO_Init+0x238>)
 8002b46:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a29      	ldr	r2, [pc, #164]	; (8002bf8 <HAL_GPIO_Init+0x23c>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a20      	ldr	r2, [pc, #128]	; (8002bfc <HAL_GPIO_Init+0x240>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d052      	beq.n	8002c24 <HAL_GPIO_Init+0x268>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <HAL_GPIO_Init+0x244>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d031      	beq.n	8002bea <HAL_GPIO_Init+0x22e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <HAL_GPIO_Init+0x248>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02b      	beq.n	8002be6 <HAL_GPIO_Init+0x22a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <HAL_GPIO_Init+0x24c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d025      	beq.n	8002be2 <HAL_GPIO_Init+0x226>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a1c      	ldr	r2, [pc, #112]	; (8002c0c <HAL_GPIO_Init+0x250>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01f      	beq.n	8002bde <HAL_GPIO_Init+0x222>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	; (8002c10 <HAL_GPIO_Init+0x254>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d019      	beq.n	8002bda <HAL_GPIO_Init+0x21e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a1a      	ldr	r2, [pc, #104]	; (8002c14 <HAL_GPIO_Init+0x258>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_GPIO_Init+0x21a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <HAL_GPIO_Init+0x25c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00d      	beq.n	8002bd2 <HAL_GPIO_Init+0x216>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_GPIO_Init+0x260>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <HAL_GPIO_Init+0x212>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a17      	ldr	r2, [pc, #92]	; (8002c20 <HAL_GPIO_Init+0x264>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d101      	bne.n	8002bca <HAL_GPIO_Init+0x20e>
 8002bc6:	2309      	movs	r3, #9
 8002bc8:	e02d      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bca:	230a      	movs	r3, #10
 8002bcc:	e02b      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bce:	2308      	movs	r3, #8
 8002bd0:	e029      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bd2:	2307      	movs	r3, #7
 8002bd4:	e027      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	e025      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bda:	2305      	movs	r3, #5
 8002bdc:	e023      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e021      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e01f      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e01d      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e01b      	b.n	8002c26 <HAL_GPIO_Init+0x26a>
 8002bee:	bf00      	nop
 8002bf0:	58000080 	.word	0x58000080
 8002bf4:	58024400 	.word	0x58024400
 8002bf8:	58000400 	.word	0x58000400
 8002bfc:	58020000 	.word	0x58020000
 8002c00:	58020400 	.word	0x58020400
 8002c04:	58020800 	.word	0x58020800
 8002c08:	58020c00 	.word	0x58020c00
 8002c0c:	58021000 	.word	0x58021000
 8002c10:	58021400 	.word	0x58021400
 8002c14:	58021800 	.word	0x58021800
 8002c18:	58021c00 	.word	0x58021c00
 8002c1c:	58022000 	.word	0x58022000
 8002c20:	58022400 	.word	0x58022400
 8002c24:	2300      	movs	r3, #0
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	f002 0203 	and.w	r2, r2, #3
 8002c2c:	0092      	lsls	r2, r2, #2
 8002c2e:	4093      	lsls	r3, r2
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c36:	4938      	ldr	r1, [pc, #224]	; (8002d18 <HAL_GPIO_Init+0x35c>)
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f47f ae63 	bne.w	80029d0 <HAL_GPIO_Init+0x14>
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	bf00      	nop
 8002d0e:	3724      	adds	r7, #36	; 0x24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	58000400 	.word	0x58000400

08002d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	807b      	strh	r3, [r7, #2]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d2c:	787b      	ldrb	r3, [r7, #1]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d32:	887a      	ldrh	r2, [r7, #2]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d38:	e003      	b.n	8002d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d3a:	887b      	ldrh	r3, [r7, #2]
 8002d3c:	041a      	lsls	r2, r3, #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	619a      	str	r2, [r3, #24]
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002d58:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	2b06      	cmp	r3, #6
 8002d62:	d00a      	beq.n	8002d7a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d64:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d001      	beq.n	8002d76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e040      	b.n	8002df8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e03e      	b.n	8002df8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d7a:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002d82:	491f      	ldr	r1, [pc, #124]	; (8002e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d8a:	f7fe fb2d 	bl	80013e8 <HAL_GetTick>
 8002d8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d90:	e009      	b.n	8002da6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d92:	f7fe fb29 	bl	80013e8 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002da0:	d901      	bls.n	8002da6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e028      	b.n	8002df8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002da6:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db2:	d1ee      	bne.n	8002d92 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b1e      	cmp	r3, #30
 8002db8:	d008      	beq.n	8002dcc <HAL_PWREx_ConfigSupply+0x7c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8002dbe:	d005      	beq.n	8002dcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b1d      	cmp	r3, #29
 8002dc4:	d002      	beq.n	8002dcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b2d      	cmp	r3, #45	; 0x2d
 8002dca:	d114      	bne.n	8002df6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002dcc:	f7fe fb0c 	bl	80013e8 <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002dd2:	e009      	b.n	8002de8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dd4:	f7fe fb08 	bl	80013e8 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002de2:	d901      	bls.n	8002de8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e007      	b.n	8002df8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df4:	d1ee      	bne.n	8002dd4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	58024800 	.word	0x58024800

08002e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	; 0x30
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f000 bc1f 	b.w	8003656 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80b3 	beq.w	8002f8c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e26:	4b95      	ldr	r3, [pc, #596]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e30:	4b92      	ldr	r3, [pc, #584]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d007      	beq.n	8002e4c <HAL_RCC_OscConfig+0x48>
 8002e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3e:	2b18      	cmp	r3, #24
 8002e40:	d112      	bne.n	8002e68 <HAL_RCC_OscConfig+0x64>
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d10d      	bne.n	8002e68 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	4b8b      	ldr	r3, [pc, #556]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8098 	beq.w	8002f8a <HAL_RCC_OscConfig+0x186>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f040 8093 	bne.w	8002f8a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e3f6      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e70:	d106      	bne.n	8002e80 <HAL_RCC_OscConfig+0x7c>
 8002e72:	4b82      	ldr	r3, [pc, #520]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a81      	ldr	r2, [pc, #516]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e058      	b.n	8002f32 <HAL_RCC_OscConfig+0x12e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d112      	bne.n	8002eae <HAL_RCC_OscConfig+0xaa>
 8002e88:	4b7c      	ldr	r3, [pc, #496]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a7b      	ldr	r2, [pc, #492]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	4b79      	ldr	r3, [pc, #484]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a78      	ldr	r2, [pc, #480]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002e9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b76      	ldr	r3, [pc, #472]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a75      	ldr	r2, [pc, #468]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	e041      	b.n	8002f32 <HAL_RCC_OscConfig+0x12e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb6:	d112      	bne.n	8002ede <HAL_RCC_OscConfig+0xda>
 8002eb8:	4b70      	ldr	r3, [pc, #448]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a6f      	ldr	r2, [pc, #444]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b6d      	ldr	r3, [pc, #436]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a6c      	ldr	r2, [pc, #432]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002eca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b6a      	ldr	r3, [pc, #424]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a69      	ldr	r2, [pc, #420]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	e029      	b.n	8002f32 <HAL_RCC_OscConfig+0x12e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002ee6:	d112      	bne.n	8002f0e <HAL_RCC_OscConfig+0x10a>
 8002ee8:	4b64      	ldr	r3, [pc, #400]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a63      	ldr	r2, [pc, #396]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b61      	ldr	r3, [pc, #388]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a60      	ldr	r2, [pc, #384]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b5e      	ldr	r3, [pc, #376]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5d      	ldr	r2, [pc, #372]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e011      	b.n	8002f32 <HAL_RCC_OscConfig+0x12e>
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a5a      	ldr	r2, [pc, #360]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b58      	ldr	r3, [pc, #352]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a57      	ldr	r2, [pc, #348]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b55      	ldr	r3, [pc, #340]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a54      	ldr	r2, [pc, #336]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002f2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d013      	beq.n	8002f62 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fe fa55 	bl	80013e8 <HAL_GetTick>
 8002f3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f42:	f7fe fa51 	bl	80013e8 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b64      	cmp	r3, #100	; 0x64
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e380      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f54:	4b49      	ldr	r3, [pc, #292]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x13e>
 8002f60:	e014      	b.n	8002f8c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f62:	f7fe fa41 	bl	80013e8 <HAL_GetTick>
 8002f66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6a:	f7fe fa3d 	bl	80013e8 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b64      	cmp	r3, #100	; 0x64
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e36c      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f7c:	4b3f      	ldr	r3, [pc, #252]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x166>
 8002f88:	e000      	b.n	8002f8c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 808c 	beq.w	80030b2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f9a:	4b38      	ldr	r3, [pc, #224]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fa2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fa4:	4b35      	ldr	r3, [pc, #212]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x1bc>
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	2b18      	cmp	r3, #24
 8002fb4:	d137      	bne.n	8003026 <HAL_RCC_OscConfig+0x222>
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d132      	bne.n	8003026 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fc0:	4b2e      	ldr	r3, [pc, #184]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x1d4>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e33e      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fd8:	4b28      	ldr	r3, [pc, #160]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 0219 	bic.w	r2, r3, #25
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4925      	ldr	r1, [pc, #148]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fea:	f7fe f9fd 	bl	80013e8 <HAL_GetTick>
 8002fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff2:	f7fe f9f9 	bl	80013e8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e328      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003010:	4b1a      	ldr	r3, [pc, #104]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	061b      	lsls	r3, r3, #24
 800301e:	4917      	ldr	r1, [pc, #92]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003024:	e045      	b.n	80030b2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d028      	beq.n	8003080 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800302e:	4b13      	ldr	r3, [pc, #76]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 0219 	bic.w	r2, r3, #25
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4910      	ldr	r1, [pc, #64]	; (800307c <HAL_RCC_OscConfig+0x278>)
 800303c:	4313      	orrs	r3, r2
 800303e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe f9d2 	bl	80013e8 <HAL_GetTick>
 8003044:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003048:	f7fe f9ce 	bl	80013e8 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e2fd      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800305a:	4b08      	ldr	r3, [pc, #32]	; (800307c <HAL_RCC_OscConfig+0x278>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	4901      	ldr	r1, [pc, #4]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
 800307a:	e01a      	b.n	80030b2 <HAL_RCC_OscConfig+0x2ae>
 800307c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003080:	4b97      	ldr	r3, [pc, #604]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a96      	ldr	r2, [pc, #600]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fe f9ac 	bl	80013e8 <HAL_GetTick>
 8003090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003094:	f7fe f9a8 	bl	80013e8 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e2d7      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030a6:	4b8e      	ldr	r3, [pc, #568]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d06a      	beq.n	8003194 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030be:	4b88      	ldr	r3, [pc, #544]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030c8:	4b85      	ldr	r3, [pc, #532]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d007      	beq.n	80030e4 <HAL_RCC_OscConfig+0x2e0>
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b18      	cmp	r3, #24
 80030d8:	d11b      	bne.n	8003112 <HAL_RCC_OscConfig+0x30e>
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d116      	bne.n	8003112 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030e4:	4b7e      	ldr	r3, [pc, #504]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_OscConfig+0x2f8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	2b80      	cmp	r3, #128	; 0x80
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e2ac      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030fc:	4b78      	ldr	r3, [pc, #480]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	4975      	ldr	r1, [pc, #468]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 800310c:	4313      	orrs	r3, r2
 800310e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003110:	e040      	b.n	8003194 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d023      	beq.n	8003162 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800311a:	4b71      	ldr	r3, [pc, #452]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a70      	ldr	r2, [pc, #448]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 8003120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7fe f95f 	bl	80013e8 <HAL_GetTick>
 800312a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800312e:	f7fe f95b 	bl	80013e8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e28a      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003140:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800314c:	4b64      	ldr	r3, [pc, #400]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	061b      	lsls	r3, r3, #24
 800315a:	4961      	ldr	r1, [pc, #388]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	60cb      	str	r3, [r1, #12]
 8003160:	e018      	b.n	8003194 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003162:	4b5f      	ldr	r3, [pc, #380]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5e      	ldr	r2, [pc, #376]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 8003168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800316c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fe f93b 	bl	80013e8 <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003176:	f7fe f937 	bl	80013e8 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e266      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003188:	4b55      	ldr	r3, [pc, #340]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d036      	beq.n	800320e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d019      	beq.n	80031dc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a8:	4b4d      	ldr	r3, [pc, #308]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 80031aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ac:	4a4c      	ldr	r2, [pc, #304]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe f918 	bl	80013e8 <HAL_GetTick>
 80031b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031bc:	f7fe f914 	bl	80013e8 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e243      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031ce:	4b44      	ldr	r3, [pc, #272]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 80031d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x3b8>
 80031da:	e018      	b.n	800320e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031dc:	4b40      	ldr	r3, [pc, #256]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	4a3f      	ldr	r2, [pc, #252]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe f8fe 	bl	80013e8 <HAL_GetTick>
 80031ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fe f8fa 	bl	80013e8 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e229      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003202:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 8003204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d036      	beq.n	8003288 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d019      	beq.n	8003256 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003222:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a2e      	ldr	r2, [pc, #184]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 8003228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800322c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800322e:	f7fe f8db 	bl	80013e8 <HAL_GetTick>
 8003232:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003236:	f7fe f8d7 	bl	80013e8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e206      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003248:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x432>
 8003254:	e018      	b.n	8003288 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003256:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 800325c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003260:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003262:	f7fe f8c1 	bl	80013e8 <HAL_GetTick>
 8003266:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800326a:	f7fe f8bd 	bl	80013e8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e1ec      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800327c:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80af 	beq.w	80033f4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_RCC_OscConfig+0x4e0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <HAL_RCC_OscConfig+0x4e0>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032a2:	f7fe f8a1 	bl	80013e8 <HAL_GetTick>
 80032a6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7fe f89d 	bl	80013e8 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	; 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1cc      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_RCC_OscConfig+0x4e0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d10b      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4e4>
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	4a02      	ldr	r2, [pc, #8]	; (80032e0 <HAL_RCC_OscConfig+0x4dc>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6713      	str	r3, [r2, #112]	; 0x70
 80032dc:	e05b      	b.n	8003396 <HAL_RCC_OscConfig+0x592>
 80032de:	bf00      	nop
 80032e0:	58024400 	.word	0x58024400
 80032e4:	58024800 	.word	0x58024800
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d112      	bne.n	8003316 <HAL_RCC_OscConfig+0x512>
 80032f0:	4b9d      	ldr	r3, [pc, #628]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	4a9c      	ldr	r2, [pc, #624]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	6713      	str	r3, [r2, #112]	; 0x70
 80032fc:	4b9a      	ldr	r3, [pc, #616]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	4a99      	ldr	r2, [pc, #612]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003306:	6713      	str	r3, [r2, #112]	; 0x70
 8003308:	4b97      	ldr	r3, [pc, #604]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	4a96      	ldr	r2, [pc, #600]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800330e:	f023 0304 	bic.w	r3, r3, #4
 8003312:	6713      	str	r3, [r2, #112]	; 0x70
 8003314:	e03f      	b.n	8003396 <HAL_RCC_OscConfig+0x592>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b05      	cmp	r3, #5
 800331c:	d112      	bne.n	8003344 <HAL_RCC_OscConfig+0x540>
 800331e:	4b92      	ldr	r3, [pc, #584]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a91      	ldr	r2, [pc, #580]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
 800332a:	4b8f      	ldr	r3, [pc, #572]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a8e      	ldr	r2, [pc, #568]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	4b8c      	ldr	r3, [pc, #560]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	4a8b      	ldr	r2, [pc, #556]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	6713      	str	r3, [r2, #112]	; 0x70
 8003342:	e028      	b.n	8003396 <HAL_RCC_OscConfig+0x592>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b85      	cmp	r3, #133	; 0x85
 800334a:	d112      	bne.n	8003372 <HAL_RCC_OscConfig+0x56e>
 800334c:	4b86      	ldr	r3, [pc, #536]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a85      	ldr	r2, [pc, #532]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003352:	f043 0304 	orr.w	r3, r3, #4
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	4b83      	ldr	r3, [pc, #524]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	4a82      	ldr	r2, [pc, #520]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800335e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003362:	6713      	str	r3, [r2, #112]	; 0x70
 8003364:	4b80      	ldr	r3, [pc, #512]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a7f      	ldr	r2, [pc, #508]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	e011      	b.n	8003396 <HAL_RCC_OscConfig+0x592>
 8003372:	4b7d      	ldr	r3, [pc, #500]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	4a7c      	ldr	r2, [pc, #496]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	6713      	str	r3, [r2, #112]	; 0x70
 800337e:	4b7a      	ldr	r3, [pc, #488]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a79      	ldr	r2, [pc, #484]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
 800338a:	4b77      	ldr	r3, [pc, #476]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a76      	ldr	r2, [pc, #472]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d015      	beq.n	80033ca <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fe f823 	bl	80013e8 <HAL_GetTick>
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fe f81f 	bl	80013e8 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e14c      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033bc:	4b6a      	ldr	r3, [pc, #424]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ee      	beq.n	80033a6 <HAL_RCC_OscConfig+0x5a2>
 80033c8:	e014      	b.n	80033f4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fe f80d 	bl	80013e8 <HAL_GetTick>
 80033ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7fe f809 	bl	80013e8 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e136      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033e8:	4b5f      	ldr	r3, [pc, #380]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ee      	bne.n	80033d2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 812b 	beq.w	8003654 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033fe:	4b5a      	ldr	r3, [pc, #360]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003406:	2b18      	cmp	r3, #24
 8003408:	f000 80bb 	beq.w	8003582 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	2b02      	cmp	r3, #2
 8003412:	f040 8095 	bne.w	8003540 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003416:	4b54      	ldr	r3, [pc, #336]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a53      	ldr	r2, [pc, #332]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800341c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fd ffe1 	bl	80013e8 <HAL_GetTick>
 8003426:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342a:	f7fd ffdd 	bl	80013e8 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e10c      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800343c:	4b4a      	ldr	r3, [pc, #296]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f0      	bne.n	800342a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003448:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800344a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344c:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_OscConfig+0x768>)
 800344e:	4013      	ands	r3, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003458:	0112      	lsls	r2, r2, #4
 800345a:	430a      	orrs	r2, r1
 800345c:	4942      	ldr	r1, [pc, #264]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800345e:	4313      	orrs	r3, r2
 8003460:	628b      	str	r3, [r1, #40]	; 0x28
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	3b01      	subs	r3, #1
 8003468:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	3b01      	subs	r3, #1
 8003472:	025b      	lsls	r3, r3, #9
 8003474:	b29b      	uxth	r3, r3
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	3b01      	subs	r3, #1
 800347e:	041b      	lsls	r3, r3, #16
 8003480:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	3b01      	subs	r3, #1
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003492:	4935      	ldr	r1, [pc, #212]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003494:	4313      	orrs	r3, r2
 8003496:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003498:	4b33      	ldr	r3, [pc, #204]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	4a32      	ldr	r2, [pc, #200]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034a4:	4b30      	ldr	r3, [pc, #192]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a8:	4b31      	ldr	r3, [pc, #196]	; (8003570 <HAL_RCC_OscConfig+0x76c>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034b0:	00d2      	lsls	r2, r2, #3
 80034b2:	492d      	ldr	r1, [pc, #180]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034b8:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	f023 020c 	bic.w	r2, r3, #12
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	4928      	ldr	r1, [pc, #160]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034ca:	4b27      	ldr	r3, [pc, #156]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	f023 0202 	bic.w	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	4924      	ldr	r1, [pc, #144]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	4a21      	ldr	r2, [pc, #132]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e8:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	4a1e      	ldr	r2, [pc, #120]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034f4:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	4a1b      	ldr	r2, [pc, #108]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	4a18      	ldr	r2, [pc, #96]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a15      	ldr	r2, [pc, #84]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fd ff66 	bl	80013e8 <HAL_GetTick>
 800351c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fd ff62 	bl	80013e8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e091      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x71c>
 800353e:	e089      	b.n	8003654 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a08      	ldr	r2, [pc, #32]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd ff4c 	bl	80013e8 <HAL_GetTick>
 8003550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003552:	e00f      	b.n	8003574 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fd ff48 	bl	80013e8 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d908      	bls.n	8003574 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e077      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
 8003566:	bf00      	nop
 8003568:	58024400 	.word	0x58024400
 800356c:	fffffc0c 	.word	0xfffffc0c
 8003570:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003574:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <HAL_RCC_OscConfig+0x85c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e9      	bne.n	8003554 <HAL_RCC_OscConfig+0x750>
 8003580:	e068      	b.n	8003654 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003582:	4b37      	ldr	r3, [pc, #220]	; (8003660 <HAL_RCC_OscConfig+0x85c>)
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003588:	4b35      	ldr	r3, [pc, #212]	; (8003660 <HAL_RCC_OscConfig+0x85c>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	2b01      	cmp	r3, #1
 8003594:	d031      	beq.n	80035fa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0203 	and.w	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d12a      	bne.n	80035fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d122      	bne.n	80035fa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d11a      	bne.n	80035fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	0a5b      	lsrs	r3, r3, #9
 80035c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d111      	bne.n	80035fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	0c1b      	lsrs	r3, r3, #16
 80035da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d108      	bne.n	80035fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	0e1b      	lsrs	r3, r3, #24
 80035ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d001      	beq.n	80035fe <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e02b      	b.n	8003656 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80035fe:	4b18      	ldr	r3, [pc, #96]	; (8003660 <HAL_RCC_OscConfig+0x85c>)
 8003600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003602:	08db      	lsrs	r3, r3, #3
 8003604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003608:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	429a      	cmp	r2, r3
 8003612:	d01f      	beq.n	8003654 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003614:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_RCC_OscConfig+0x85c>)
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	4a11      	ldr	r2, [pc, #68]	; (8003660 <HAL_RCC_OscConfig+0x85c>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003620:	f7fd fee2 	bl	80013e8 <HAL_GetTick>
 8003624:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003626:	bf00      	nop
 8003628:	f7fd fede 	bl	80013e8 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	4293      	cmp	r3, r2
 8003632:	d0f9      	beq.n	8003628 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <HAL_RCC_OscConfig+0x85c>)
 8003636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_RCC_OscConfig+0x860>)
 800363a:	4013      	ands	r3, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003640:	00d2      	lsls	r2, r2, #3
 8003642:	4907      	ldr	r1, [pc, #28]	; (8003660 <HAL_RCC_OscConfig+0x85c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_OscConfig+0x85c>)
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	4a04      	ldr	r2, [pc, #16]	; (8003660 <HAL_RCC_OscConfig+0x85c>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3730      	adds	r7, #48	; 0x30
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	58024400 	.word	0x58024400
 8003664:	ffff0007 	.word	0xffff0007

08003668 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e19c      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800367c:	4b8a      	ldr	r3, [pc, #552]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d910      	bls.n	80036ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b87      	ldr	r3, [pc, #540]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 020f 	bic.w	r2, r3, #15
 8003692:	4985      	ldr	r1, [pc, #532]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b83      	ldr	r3, [pc, #524]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e184      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d010      	beq.n	80036da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	4b7b      	ldr	r3, [pc, #492]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d908      	bls.n	80036da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036c8:	4b78      	ldr	r3, [pc, #480]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	4975      	ldr	r1, [pc, #468]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	4b70      	ldr	r3, [pc, #448]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d908      	bls.n	8003708 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036f6:	4b6d      	ldr	r3, [pc, #436]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	496a      	ldr	r1, [pc, #424]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003704:	4313      	orrs	r3, r2
 8003706:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	d010      	beq.n	8003736 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699a      	ldr	r2, [r3, #24]
 8003718:	4b64      	ldr	r3, [pc, #400]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003720:	429a      	cmp	r2, r3
 8003722:	d908      	bls.n	8003736 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003724:	4b61      	ldr	r3, [pc, #388]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	495e      	ldr	r1, [pc, #376]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003732:	4313      	orrs	r3, r2
 8003734:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d010      	beq.n	8003764 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	4b59      	ldr	r3, [pc, #356]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800374e:	429a      	cmp	r2, r3
 8003750:	d908      	bls.n	8003764 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003752:	4b56      	ldr	r3, [pc, #344]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	4953      	ldr	r1, [pc, #332]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003760:	4313      	orrs	r3, r2
 8003762:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d010      	beq.n	8003792 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	4b4d      	ldr	r3, [pc, #308]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	429a      	cmp	r2, r3
 800377e:	d908      	bls.n	8003792 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003780:	4b4a      	ldr	r3, [pc, #296]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f023 020f 	bic.w	r2, r3, #15
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4947      	ldr	r1, [pc, #284]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800378e:	4313      	orrs	r3, r2
 8003790:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d055      	beq.n	800384a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800379e:	4b43      	ldr	r3, [pc, #268]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	4940      	ldr	r1, [pc, #256]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037b8:	4b3c      	ldr	r3, [pc, #240]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d121      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0f6      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037d0:	4b36      	ldr	r3, [pc, #216]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d115      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0ea      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d107      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037e8:	4b30      	ldr	r3, [pc, #192]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0de      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0d6      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003808:	4b28      	ldr	r3, [pc, #160]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f023 0207 	bic.w	r2, r3, #7
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4925      	ldr	r1, [pc, #148]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003816:	4313      	orrs	r3, r2
 8003818:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381a:	f7fd fde5 	bl	80013e8 <HAL_GetTick>
 800381e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003820:	e00a      	b.n	8003838 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003822:	f7fd fde1 	bl	80013e8 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0be      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003838:	4b1c      	ldr	r3, [pc, #112]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	429a      	cmp	r2, r3
 8003848:	d1eb      	bne.n	8003822 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d010      	beq.n	8003878 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	429a      	cmp	r2, r3
 8003864:	d208      	bcs.n	8003878 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f023 020f 	bic.w	r2, r3, #15
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	490e      	ldr	r1, [pc, #56]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003874:	4313      	orrs	r3, r2
 8003876:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d214      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 020f 	bic.w	r2, r3, #15
 800388e:	4906      	ldr	r1, [pc, #24]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	4313      	orrs	r3, r2
 8003894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e086      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
 80038a8:	52002000 	.word	0x52002000
 80038ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d010      	beq.n	80038de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	4b3f      	ldr	r3, [pc, #252]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d208      	bcs.n	80038de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038cc:	4b3c      	ldr	r3, [pc, #240]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	4939      	ldr	r1, [pc, #228]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d010      	beq.n	800390c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d208      	bcs.n	800390c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038fa:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	492e      	ldr	r1, [pc, #184]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003908:	4313      	orrs	r3, r2
 800390a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b00      	cmp	r3, #0
 8003916:	d010      	beq.n	800393a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003924:	429a      	cmp	r2, r3
 8003926:	d208      	bcs.n	800393a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	4922      	ldr	r1, [pc, #136]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003936:	4313      	orrs	r3, r2
 8003938:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d010      	beq.n	8003968 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003952:	429a      	cmp	r2, r3
 8003954:	d208      	bcs.n	8003968 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003956:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4917      	ldr	r1, [pc, #92]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003964:	4313      	orrs	r3, r2
 8003966:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003968:	f000 f834 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	4912      	ldr	r1, [pc, #72]	; (80039c4 <HAL_RCC_ClockConfig+0x35c>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
 8003984:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003986:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	4a0d      	ldr	r2, [pc, #52]	; (80039c4 <HAL_RCC_ClockConfig+0x35c>)
 8003990:	5cd3      	ldrb	r3, [r2, r3]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
 800399c:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <HAL_RCC_ClockConfig+0x360>)
 800399e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039a0:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <HAL_RCC_ClockConfig+0x364>)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_RCC_ClockConfig+0x368>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd fcd2 	bl	8001354 <HAL_InitTick>
 80039b0:	4603      	mov	r3, r0
 80039b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	58024400 	.word	0x58024400
 80039c4:	08008a30 	.word	0x08008a30
 80039c8:	24000004 	.word	0x24000004
 80039cc:	24000000 	.word	0x24000000
 80039d0:	24000008 	.word	0x24000008

080039d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039da:	4bb3      	ldr	r3, [pc, #716]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039e2:	2b18      	cmp	r3, #24
 80039e4:	f200 8155 	bhi.w	8003c92 <HAL_RCC_GetSysClockFreq+0x2be>
 80039e8:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a55 	.word	0x08003a55
 80039f4:	08003c93 	.word	0x08003c93
 80039f8:	08003c93 	.word	0x08003c93
 80039fc:	08003c93 	.word	0x08003c93
 8003a00:	08003c93 	.word	0x08003c93
 8003a04:	08003c93 	.word	0x08003c93
 8003a08:	08003c93 	.word	0x08003c93
 8003a0c:	08003c93 	.word	0x08003c93
 8003a10:	08003a7b 	.word	0x08003a7b
 8003a14:	08003c93 	.word	0x08003c93
 8003a18:	08003c93 	.word	0x08003c93
 8003a1c:	08003c93 	.word	0x08003c93
 8003a20:	08003c93 	.word	0x08003c93
 8003a24:	08003c93 	.word	0x08003c93
 8003a28:	08003c93 	.word	0x08003c93
 8003a2c:	08003c93 	.word	0x08003c93
 8003a30:	08003a81 	.word	0x08003a81
 8003a34:	08003c93 	.word	0x08003c93
 8003a38:	08003c93 	.word	0x08003c93
 8003a3c:	08003c93 	.word	0x08003c93
 8003a40:	08003c93 	.word	0x08003c93
 8003a44:	08003c93 	.word	0x08003c93
 8003a48:	08003c93 	.word	0x08003c93
 8003a4c:	08003c93 	.word	0x08003c93
 8003a50:	08003a87 	.word	0x08003a87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a54:	4b94      	ldr	r3, [pc, #592]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a60:	4b91      	ldr	r3, [pc, #580]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	08db      	lsrs	r3, r3, #3
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	4a90      	ldr	r2, [pc, #576]	; (8003cac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a72:	e111      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a74:	4b8d      	ldr	r3, [pc, #564]	; (8003cac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a76:	61bb      	str	r3, [r7, #24]
      break;
 8003a78:	e10e      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a7a:	4b8d      	ldr	r3, [pc, #564]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a7c:	61bb      	str	r3, [r7, #24]
      break;
 8003a7e:	e10b      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a80:	4b8c      	ldr	r3, [pc, #560]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a82:	61bb      	str	r3, [r7, #24]
      break;
 8003a84:	e108      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a86:	4b88      	ldr	r3, [pc, #544]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003a90:	4b85      	ldr	r3, [pc, #532]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a9a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a9c:	4b82      	ldr	r3, [pc, #520]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003aa6:	4b80      	ldr	r3, [pc, #512]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aaa:	08db      	lsrs	r3, r3, #3
 8003aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80e1 	beq.w	8003c8c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	f000 8083 	beq.w	8003bd8 <HAL_RCC_GetSysClockFreq+0x204>
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	f200 80a1 	bhi.w	8003c1c <HAL_RCC_GetSysClockFreq+0x248>
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x114>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d056      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ae6:	e099      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ae8:	4b6f      	ldr	r3, [pc, #444]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d02d      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003af4:	4b6c      	ldr	r3, [pc, #432]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	08db      	lsrs	r3, r3, #3
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	4a6b      	ldr	r2, [pc, #428]	; (8003cac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
 8003b04:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	ee07 3a90 	vmov	s15, r3
 8003b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b1e:	4b62      	ldr	r3, [pc, #392]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b32:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b4e:	e087      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003cbc <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b62:	4b51      	ldr	r3, [pc, #324]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b76:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b92:	e065      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003cc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba6:	4b40      	ldr	r3, [pc, #256]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bd6:	e043      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003cc4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bea:	4b2f      	ldr	r3, [pc, #188]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bfe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c1a:	e021      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c26:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003cc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c42:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	0a5b      	lsrs	r3, r3, #9
 8003c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	ee07 3a90 	vmov	s15, r3
 8003c74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c84:	ee17 3a90 	vmov	r3, s15
 8003c88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c8a:	e005      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61bb      	str	r3, [r7, #24]
      break;
 8003c90:	e002      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003c92:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c94:	61bb      	str	r3, [r7, #24]
      break;
 8003c96:	bf00      	nop
  }

  return sysclockfreq;
 8003c98:	69bb      	ldr	r3, [r7, #24]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3724      	adds	r7, #36	; 0x24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	58024400 	.word	0x58024400
 8003cac:	03d09000 	.word	0x03d09000
 8003cb0:	003d0900 	.word	0x003d0900
 8003cb4:	007a1200 	.word	0x007a1200
 8003cb8:	46000000 	.word	0x46000000
 8003cbc:	4c742400 	.word	0x4c742400
 8003cc0:	4a742400 	.word	0x4a742400
 8003cc4:	4af42400 	.word	0x4af42400

08003cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003cce:	f7ff fe81 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	490f      	ldr	r1, [pc, #60]	; (8003d1c <HAL_RCC_GetHCLKFreq+0x54>)
 8003ce0:	5ccb      	ldrb	r3, [r1, r3]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cea:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <HAL_RCC_GetHCLKFreq+0x54>)
 8003cf6:	5cd3      	ldrb	r3, [r2, r3]
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003d02:	4a07      	ldr	r2, [pc, #28]	; (8003d20 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d06:	4a07      	ldr	r2, [pc, #28]	; (8003d24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	08008a30 	.word	0x08008a30
 8003d20:	24000004 	.word	0x24000004
 8003d24:	24000000 	.word	0x24000000

08003d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003d2c:	f7ff ffcc 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003d30:	4602      	mov	r2, r0
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	4904      	ldr	r1, [pc, #16]	; (8003d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d3e:	5ccb      	ldrb	r3, [r1, r3]
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	58024400 	.word	0x58024400
 8003d50:	08008a30 	.word	0x08008a30

08003d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003d58:	f7ff ffb6 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	0a1b      	lsrs	r3, r3, #8
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	4904      	ldr	r1, [pc, #16]	; (8003d7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d6a:	5ccb      	ldrb	r3, [r1, r3]
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	58024400 	.word	0x58024400
 8003d7c:	08008a30 	.word	0x08008a30

08003d80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d84:	b0c8      	sub	sp, #288	; 0x120
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d92:	2300      	movs	r3, #0
 8003d94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003da4:	2500      	movs	r5, #0
 8003da6:	ea54 0305 	orrs.w	r3, r4, r5
 8003daa:	d049      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003db6:	d02f      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003db8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dbc:	d828      	bhi.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dc2:	d01a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003dc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dc8:	d822      	bhi.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd2:	d007      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dd4:	e01c      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd6:	4ba7      	ldr	r3, [pc, #668]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	4aa6      	ldr	r2, [pc, #664]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003de2:	e01a      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de8:	3308      	adds	r3, #8
 8003dea:	2102      	movs	r1, #2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f002 fa6d 	bl	80062cc <RCCEx_PLL2_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003df8:	e00f      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dfe:	3328      	adds	r3, #40	; 0x28
 8003e00:	2102      	movs	r1, #2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f002 fb14 	bl	8006430 <RCCEx_PLL3_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e0e:	e004      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e16:	e000      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e22:	4b94      	ldr	r3, [pc, #592]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e26:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e30:	4a90      	ldr	r2, [pc, #576]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e32:	430b      	orrs	r3, r1
 8003e34:	6513      	str	r3, [r2, #80]	; 0x50
 8003e36:	e003      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003e4c:	f04f 0900 	mov.w	r9, #0
 8003e50:	ea58 0309 	orrs.w	r3, r8, r9
 8003e54:	d047      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d82a      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e60:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e7d 	.word	0x08003e7d
 8003e6c:	08003e8b 	.word	0x08003e8b
 8003e70:	08003ea1 	.word	0x08003ea1
 8003e74:	08003ebf 	.word	0x08003ebf
 8003e78:	08003ebf 	.word	0x08003ebf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e7c:	4b7d      	ldr	r3, [pc, #500]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	4a7c      	ldr	r2, [pc, #496]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e88:	e01a      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e8e:	3308      	adds	r3, #8
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f002 fa1a 	bl	80062cc <RCCEx_PLL2_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e9e:	e00f      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea4:	3328      	adds	r3, #40	; 0x28
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f002 fac1 	bl	8006430 <RCCEx_PLL3_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003eb4:	e004      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ec8:	4b6a      	ldr	r3, [pc, #424]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ecc:	f023 0107 	bic.w	r1, r3, #7
 8003ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	4a67      	ldr	r2, [pc, #412]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6513      	str	r3, [r2, #80]	; 0x50
 8003edc:	e003      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ee2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003ef2:	f04f 0b00 	mov.w	fp, #0
 8003ef6:	ea5a 030b 	orrs.w	r3, sl, fp
 8003efa:	d054      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f06:	d036      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003f08:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f0c:	d82f      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f12:	d032      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f18:	d829      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003f1c:	d02f      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003f1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f20:	d825      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f22:	2b80      	cmp	r3, #128	; 0x80
 8003f24:	d018      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003f26:	2b80      	cmp	r3, #128	; 0x80
 8003f28:	d821      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d007      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003f32:	e01c      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f34:	4b4f      	ldr	r3, [pc, #316]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	4a4e      	ldr	r2, [pc, #312]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003f40:	e01e      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f46:	3308      	adds	r3, #8
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f002 f9be 	bl	80062cc <RCCEx_PLL2_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003f56:	e013      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f5c:	3328      	adds	r3, #40	; 0x28
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f002 fa65 	bl	8006430 <RCCEx_PLL3_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003f6c:	e008      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f74:	e004      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003f76:	bf00      	nop
 8003f78:	e002      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003f88:	4b3a      	ldr	r3, [pc, #232]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	4a37      	ldr	r2, [pc, #220]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6513      	str	r3, [r2, #80]	; 0x50
 8003f9c:	e003      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fa2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003fb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003fbc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	d05c      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fcc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003fd0:	d03b      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003fd2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003fd6:	d834      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fdc:	d037      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe2:	d82e      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003fe4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fe8:	d033      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003fea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fee:	d828      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff4:	d01a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffa:	d822      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004004:	d007      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004006:	e01c      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800400e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004014:	e01e      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401a:	3308      	adds	r3, #8
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f002 f954 	bl	80062cc <RCCEx_PLL2_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800402a:	e013      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800402c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004030:	3328      	adds	r3, #40	; 0x28
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f002 f9fb 	bl	8006430 <RCCEx_PLL3_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004040:	e008      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004048:	e004      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800404a:	bf00      	nop
 800404c:	e002      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800404e:	bf00      	nop
 8004050:	e000      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004054:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10d      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800405e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004060:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406a:	4a02      	ldr	r2, [pc, #8]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800406c:	430b      	orrs	r3, r1
 800406e:	6513      	str	r3, [r2, #80]	; 0x50
 8004070:	e006      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004072:	bf00      	nop
 8004074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004078:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800407c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004088:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800408c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004090:	2300      	movs	r3, #0
 8004092:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004096:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800409a:	460b      	mov	r3, r1
 800409c:	4313      	orrs	r3, r2
 800409e:	d03a      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80040a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a6:	2b30      	cmp	r3, #48	; 0x30
 80040a8:	d01f      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80040aa:	2b30      	cmp	r3, #48	; 0x30
 80040ac:	d819      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d00c      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d815      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d019      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80040ba:	2b10      	cmp	r3, #16
 80040bc:	d111      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040be:	4bae      	ldr	r3, [pc, #696]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	4aad      	ldr	r2, [pc, #692]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80040ca:	e011      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d0:	3308      	adds	r3, #8
 80040d2:	2102      	movs	r1, #2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f002 f8f9 	bl	80062cc <RCCEx_PLL2_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80040e0:	e006      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040e8:	e002      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80040ea:	bf00      	nop
 80040ec:	e000      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80040ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80040f8:	4b9f      	ldr	r3, [pc, #636]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004106:	4a9c      	ldr	r2, [pc, #624]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004108:	430b      	orrs	r3, r1
 800410a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800410c:	e003      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004112:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004122:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004126:	2300      	movs	r3, #0
 8004128:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800412c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004130:	460b      	mov	r3, r1
 8004132:	4313      	orrs	r3, r2
 8004134:	d051      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800413a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004140:	d035      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004146:	d82e      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004148:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800414c:	d031      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800414e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004152:	d828      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004158:	d01a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800415a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415e:	d822      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004168:	d007      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800416a:	e01c      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416c:	4b82      	ldr	r3, [pc, #520]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	4a81      	ldr	r2, [pc, #516]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004176:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004178:	e01c      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800417a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417e:	3308      	adds	r3, #8
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f002 f8a2 	bl	80062cc <RCCEx_PLL2_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800418e:	e011      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004194:	3328      	adds	r3, #40	; 0x28
 8004196:	2100      	movs	r1, #0
 8004198:	4618      	mov	r0, r3
 800419a:	f002 f949 	bl	8006430 <RCCEx_PLL3_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041a4:	e006      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041ac:	e002      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80041ae:	bf00      	nop
 80041b0:	e000      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80041b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80041bc:	4b6e      	ldr	r3, [pc, #440]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80041c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ca:	4a6b      	ldr	r2, [pc, #428]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041cc:	430b      	orrs	r3, r1
 80041ce:	6513      	str	r3, [r2, #80]	; 0x50
 80041d0:	e003      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80041da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80041e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041ea:	2300      	movs	r3, #0
 80041ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80041f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80041f4:	460b      	mov	r3, r1
 80041f6:	4313      	orrs	r3, r2
 80041f8:	d053      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80041fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004204:	d033      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004206:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800420a:	d82c      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800420c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004210:	d02f      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004212:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004216:	d826      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004218:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800421c:	d02b      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800421e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004222:	d820      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004228:	d012      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800422a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800422e:	d81a      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d022      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004238:	d115      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800423a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800423e:	3308      	adds	r3, #8
 8004240:	2101      	movs	r1, #1
 8004242:	4618      	mov	r0, r3
 8004244:	f002 f842 	bl	80062cc <RCCEx_PLL2_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800424e:	e015      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004254:	3328      	adds	r3, #40	; 0x28
 8004256:	2101      	movs	r1, #1
 8004258:	4618      	mov	r0, r3
 800425a:	f002 f8e9 	bl	8006430 <RCCEx_PLL3_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004264:	e00a      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800426c:	e006      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800426e:	bf00      	nop
 8004270:	e004      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004272:	bf00      	nop
 8004274:	e002      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800427a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004284:	4b3c      	ldr	r3, [pc, #240]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004288:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800428c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004292:	4a39      	ldr	r2, [pc, #228]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004294:	430b      	orrs	r3, r1
 8004296:	6513      	str	r3, [r2, #80]	; 0x50
 8004298:	e003      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800429e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80042ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042b2:	2300      	movs	r3, #0
 80042b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042b8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80042bc:	460b      	mov	r3, r1
 80042be:	4313      	orrs	r3, r2
 80042c0:	d060      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80042c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042ca:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80042ce:	d039      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80042d0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80042d4:	d832      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80042d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042da:	d035      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80042dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042e0:	d82c      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80042e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e6:	d031      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80042e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ec:	d826      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80042ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042f2:	d02d      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80042f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042f8:	d820      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80042fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042fe:	d012      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004304:	d81a      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004306:	2b00      	cmp	r3, #0
 8004308:	d024      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800430a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800430e:	d115      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004314:	3308      	adds	r3, #8
 8004316:	2101      	movs	r1, #1
 8004318:	4618      	mov	r0, r3
 800431a:	f001 ffd7 	bl	80062cc <RCCEx_PLL2_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004324:	e017      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432a:	3328      	adds	r3, #40	; 0x28
 800432c:	2101      	movs	r1, #1
 800432e:	4618      	mov	r0, r3
 8004330:	f002 f87e 	bl	8006430 <RCCEx_PLL3_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800433a:	e00c      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004342:	e008      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004344:	bf00      	nop
 8004346:	e006      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004348:	bf00      	nop
 800434a:	e004      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800434c:	bf00      	nop
 800434e:	e002      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004350:	bf00      	nop
 8004352:	e000      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004356:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10e      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800436a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800436e:	4a02      	ldr	r2, [pc, #8]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004370:	430b      	orrs	r3, r1
 8004372:	6593      	str	r3, [r2, #88]	; 0x58
 8004374:	e006      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004376:	bf00      	nop
 8004378:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004380:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004394:	2300      	movs	r3, #0
 8004396:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800439a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800439e:	460b      	mov	r3, r1
 80043a0:	4313      	orrs	r3, r2
 80043a2:	d037      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80043a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ae:	d00e      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80043b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b4:	d816      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d018      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80043ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043be:	d111      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c0:	4bc4      	ldr	r3, [pc, #784]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	4ac3      	ldr	r2, [pc, #780]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043cc:	e00f      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d2:	3308      	adds	r3, #8
 80043d4:	2101      	movs	r1, #1
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 ff78 	bl	80062cc <RCCEx_PLL2_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043e2:	e004      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043ea:	e000      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80043ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043f6:	4bb7      	ldr	r3, [pc, #732]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80043fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004404:	4ab3      	ldr	r2, [pc, #716]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004406:	430b      	orrs	r3, r1
 8004408:	6513      	str	r3, [r2, #80]	; 0x50
 800440a:	e003      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004410:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004424:	2300      	movs	r3, #0
 8004426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800442a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d039      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443a:	2b03      	cmp	r3, #3
 800443c:	d81c      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004481 	.word	0x08004481
 8004448:	08004455 	.word	0x08004455
 800444c:	08004463 	.word	0x08004463
 8004450:	08004481 	.word	0x08004481
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004454:	4b9f      	ldr	r3, [pc, #636]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	4a9e      	ldr	r2, [pc, #632]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800445a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800445e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004460:	e00f      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004466:	3308      	adds	r3, #8
 8004468:	2102      	movs	r1, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f001 ff2e 	bl	80062cc <RCCEx_PLL2_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004476:	e004      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800447e:	e000      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004482:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800448a:	4b92      	ldr	r3, [pc, #584]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800448c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448e:	f023 0103 	bic.w	r1, r3, #3
 8004492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004498:	4a8e      	ldr	r2, [pc, #568]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800449a:	430b      	orrs	r3, r1
 800449c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800449e:	e003      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80044b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044b8:	2300      	movs	r3, #0
 80044ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80044c2:	460b      	mov	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f000 8099 	beq.w	80045fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ca:	4b83      	ldr	r3, [pc, #524]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a82      	ldr	r2, [pc, #520]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044d6:	f7fc ff87 	bl	80013e8 <HAL_GetTick>
 80044da:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044de:	e00b      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e0:	f7fc ff82 	bl	80013e8 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b64      	cmp	r3, #100	; 0x64
 80044ee:	d903      	bls.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044f6:	e005      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f8:	4b77      	ldr	r3, [pc, #476]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0ed      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004504:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004508:	2b00      	cmp	r3, #0
 800450a:	d173      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800450c:	4b71      	ldr	r3, [pc, #452]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800450e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004514:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004518:	4053      	eors	r3, r2
 800451a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451e:	2b00      	cmp	r3, #0
 8004520:	d015      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004522:	4b6c      	ldr	r3, [pc, #432]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800452e:	4b69      	ldr	r3, [pc, #420]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4a68      	ldr	r2, [pc, #416]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800453a:	4b66      	ldr	r3, [pc, #408]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	4a65      	ldr	r2, [pc, #404]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004544:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004546:	4a63      	ldr	r2, [pc, #396]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800454e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004552:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455a:	d118      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fc ff44 	bl	80013e8 <HAL_GetTick>
 8004560:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004564:	e00d      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004566:	f7fc ff3f 	bl	80013e8 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004570:	1ad2      	subs	r2, r2, r3
 8004572:	f241 3388 	movw	r3, #5000	; 0x1388
 8004576:	429a      	cmp	r2, r3
 8004578:	d903      	bls.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8004580:	e005      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004582:	4b54      	ldr	r3, [pc, #336]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0eb      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800458e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004592:	2b00      	cmp	r3, #0
 8004594:	d129      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800459a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800459e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a6:	d10e      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80045a8:	4b4a      	ldr	r3, [pc, #296]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80045b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045b8:	091a      	lsrs	r2, r3, #4
 80045ba:	4b48      	ldr	r3, [pc, #288]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045bc:	4013      	ands	r3, r2
 80045be:	4a45      	ldr	r2, [pc, #276]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6113      	str	r3, [r2, #16]
 80045c4:	e005      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80045c6:	4b43      	ldr	r3, [pc, #268]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	4a42      	ldr	r2, [pc, #264]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045d0:	6113      	str	r3, [r2, #16]
 80045d2:	4b40      	ldr	r3, [pc, #256]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80045d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e2:	4a3c      	ldr	r2, [pc, #240]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
 80045e8:	e008      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80045f2:	e003      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80045fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f002 0301 	and.w	r3, r2, #1
 8004608:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800460c:	2300      	movs	r3, #0
 800460e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004612:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004616:	460b      	mov	r3, r1
 8004618:	4313      	orrs	r3, r2
 800461a:	f000 8090 	beq.w	800473e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800461e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004626:	2b28      	cmp	r3, #40	; 0x28
 8004628:	d870      	bhi.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	08004715 	.word	0x08004715
 8004634:	0800470d 	.word	0x0800470d
 8004638:	0800470d 	.word	0x0800470d
 800463c:	0800470d 	.word	0x0800470d
 8004640:	0800470d 	.word	0x0800470d
 8004644:	0800470d 	.word	0x0800470d
 8004648:	0800470d 	.word	0x0800470d
 800464c:	0800470d 	.word	0x0800470d
 8004650:	080046e1 	.word	0x080046e1
 8004654:	0800470d 	.word	0x0800470d
 8004658:	0800470d 	.word	0x0800470d
 800465c:	0800470d 	.word	0x0800470d
 8004660:	0800470d 	.word	0x0800470d
 8004664:	0800470d 	.word	0x0800470d
 8004668:	0800470d 	.word	0x0800470d
 800466c:	0800470d 	.word	0x0800470d
 8004670:	080046f7 	.word	0x080046f7
 8004674:	0800470d 	.word	0x0800470d
 8004678:	0800470d 	.word	0x0800470d
 800467c:	0800470d 	.word	0x0800470d
 8004680:	0800470d 	.word	0x0800470d
 8004684:	0800470d 	.word	0x0800470d
 8004688:	0800470d 	.word	0x0800470d
 800468c:	0800470d 	.word	0x0800470d
 8004690:	08004715 	.word	0x08004715
 8004694:	0800470d 	.word	0x0800470d
 8004698:	0800470d 	.word	0x0800470d
 800469c:	0800470d 	.word	0x0800470d
 80046a0:	0800470d 	.word	0x0800470d
 80046a4:	0800470d 	.word	0x0800470d
 80046a8:	0800470d 	.word	0x0800470d
 80046ac:	0800470d 	.word	0x0800470d
 80046b0:	08004715 	.word	0x08004715
 80046b4:	0800470d 	.word	0x0800470d
 80046b8:	0800470d 	.word	0x0800470d
 80046bc:	0800470d 	.word	0x0800470d
 80046c0:	0800470d 	.word	0x0800470d
 80046c4:	0800470d 	.word	0x0800470d
 80046c8:	0800470d 	.word	0x0800470d
 80046cc:	0800470d 	.word	0x0800470d
 80046d0:	08004715 	.word	0x08004715
 80046d4:	58024400 	.word	0x58024400
 80046d8:	58024800 	.word	0x58024800
 80046dc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e4:	3308      	adds	r3, #8
 80046e6:	2101      	movs	r1, #1
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 fdef 	bl	80062cc <RCCEx_PLL2_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80046f4:	e00f      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fa:	3328      	adds	r3, #40	; 0x28
 80046fc:	2101      	movs	r1, #1
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 fe96 	bl	8006430 <RCCEx_PLL3_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800470a:	e004      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004712:	e000      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004716:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800471e:	4bc0      	ldr	r3, [pc, #768]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800472a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472e:	4abc      	ldr	r2, [pc, #752]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004730:	430b      	orrs	r3, r1
 8004732:	6553      	str	r3, [r2, #84]	; 0x54
 8004734:	e003      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004736:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800473a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800473e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	f002 0302 	and.w	r3, r2, #2
 800474a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800474e:	2300      	movs	r3, #0
 8004750:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004754:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004758:	460b      	mov	r3, r1
 800475a:	4313      	orrs	r3, r2
 800475c:	d043      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800475e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004766:	2b05      	cmp	r3, #5
 8004768:	d824      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800476a:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	080047bd 	.word	0x080047bd
 8004774:	08004789 	.word	0x08004789
 8004778:	0800479f 	.word	0x0800479f
 800477c:	080047bd 	.word	0x080047bd
 8004780:	080047bd 	.word	0x080047bd
 8004784:	080047bd 	.word	0x080047bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478c:	3308      	adds	r3, #8
 800478e:	2101      	movs	r1, #1
 8004790:	4618      	mov	r0, r3
 8004792:	f001 fd9b 	bl	80062cc <RCCEx_PLL2_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800479c:	e00f      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800479e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a2:	3328      	adds	r3, #40	; 0x28
 80047a4:	2101      	movs	r1, #1
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 fe42 	bl	8006430 <RCCEx_PLL3_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047b2:	e004      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80047ba:	e000      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80047bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80047c6:	4b96      	ldr	r3, [pc, #600]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	f023 0107 	bic.w	r1, r3, #7
 80047ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d6:	4a92      	ldr	r2, [pc, #584]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047d8:	430b      	orrs	r3, r1
 80047da:	6553      	str	r3, [r2, #84]	; 0x54
 80047dc:	e003      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f002 0304 	and.w	r3, r2, #4
 80047f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047f6:	2300      	movs	r3, #0
 80047f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047fc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004800:	460b      	mov	r3, r1
 8004802:	4313      	orrs	r3, r2
 8004804:	d043      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800480e:	2b05      	cmp	r3, #5
 8004810:	d824      	bhi.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004812:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	08004865 	.word	0x08004865
 800481c:	08004831 	.word	0x08004831
 8004820:	08004847 	.word	0x08004847
 8004824:	08004865 	.word	0x08004865
 8004828:	08004865 	.word	0x08004865
 800482c:	08004865 	.word	0x08004865
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004834:	3308      	adds	r3, #8
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f001 fd47 	bl	80062cc <RCCEx_PLL2_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004844:	e00f      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484a:	3328      	adds	r3, #40	; 0x28
 800484c:	2101      	movs	r1, #1
 800484e:	4618      	mov	r0, r3
 8004850:	f001 fdee 	bl	8006430 <RCCEx_PLL3_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800485a:	e004      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004862:	e000      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004866:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10b      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800486e:	4b6c      	ldr	r3, [pc, #432]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004872:	f023 0107 	bic.w	r1, r3, #7
 8004876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800487a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800487e:	4a68      	ldr	r2, [pc, #416]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004880:	430b      	orrs	r3, r1
 8004882:	6593      	str	r3, [r2, #88]	; 0x58
 8004884:	e003      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004886:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800488a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800488e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004896:	f002 0320 	and.w	r3, r2, #32
 800489a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800489e:	2300      	movs	r3, #0
 80048a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048a8:	460b      	mov	r3, r1
 80048aa:	4313      	orrs	r3, r2
 80048ac:	d055      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80048ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048ba:	d033      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80048bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048c0:	d82c      	bhi.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c6:	d02f      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048cc:	d826      	bhi.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80048ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048d2:	d02b      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80048d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048d8:	d820      	bhi.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80048da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048de:	d012      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80048e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e4:	d81a      	bhi.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d022      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80048ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ee:	d115      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f4:	3308      	adds	r3, #8
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 fce7 	bl	80062cc <RCCEx_PLL2_Config>
 80048fe:	4603      	mov	r3, r0
 8004900:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004904:	e015      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490a:	3328      	adds	r3, #40	; 0x28
 800490c:	2102      	movs	r1, #2
 800490e:	4618      	mov	r0, r3
 8004910:	f001 fd8e 	bl	8006430 <RCCEx_PLL3_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800491a:	e00a      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004922:	e006      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004924:	bf00      	nop
 8004926:	e004      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004928:	bf00      	nop
 800492a:	e002      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800492c:	bf00      	nop
 800492e:	e000      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004932:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10b      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800493a:	4b39      	ldr	r3, [pc, #228]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800494a:	4a35      	ldr	r2, [pc, #212]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800494c:	430b      	orrs	r3, r1
 800494e:	6553      	str	r3, [r2, #84]	; 0x54
 8004950:	e003      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004952:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004956:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800495a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800496a:	2300      	movs	r3, #0
 800496c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004970:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004974:	460b      	mov	r3, r1
 8004976:	4313      	orrs	r3, r2
 8004978:	d058      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800497a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800497e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004982:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004986:	d033      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004988:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800498c:	d82c      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004992:	d02f      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	d826      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800499a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800499e:	d02b      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80049a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a4:	d820      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049aa:	d012      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80049ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b0:	d81a      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d022      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80049b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ba:	d115      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c0:	3308      	adds	r3, #8
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 fc81 	bl	80062cc <RCCEx_PLL2_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049d0:	e015      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d6:	3328      	adds	r3, #40	; 0x28
 80049d8:	2102      	movs	r1, #2
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 fd28 	bl	8006430 <RCCEx_PLL3_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049e6:	e00a      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80049ee:	e006      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80049f0:	bf00      	nop
 80049f2:	e004      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80049f4:	bf00      	nop
 80049f6:	e002      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80049f8:	bf00      	nop
 80049fa:	e000      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80049fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10e      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a16:	4a02      	ldr	r2, [pc, #8]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a1c:	e006      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004a1e:	bf00      	nop
 8004a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004a46:	460b      	mov	r3, r1
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	d055      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a58:	d033      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004a5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a5e:	d82c      	bhi.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a64:	d02f      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a6a:	d826      	bhi.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004a6c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a70:	d02b      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004a72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a76:	d820      	bhi.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a7c:	d012      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004a7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a82:	d81a      	bhi.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d022      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8c:	d115      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a92:	3308      	adds	r3, #8
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f001 fc18 	bl	80062cc <RCCEx_PLL2_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004aa2:	e015      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa8:	3328      	adds	r3, #40	; 0x28
 8004aaa:	2102      	movs	r1, #2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f001 fcbf 	bl	8006430 <RCCEx_PLL3_Config>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ab8:	e00a      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ac0:	e006      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004ac2:	bf00      	nop
 8004ac4:	e004      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004ac6:	bf00      	nop
 8004ac8:	e002      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004aca:	bf00      	nop
 8004acc:	e000      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ad8:	4ba1      	ldr	r3, [pc, #644]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004adc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ae4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ae8:	4a9d      	ldr	r2, [pc, #628]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004aea:	430b      	orrs	r3, r1
 8004aec:	6593      	str	r3, [r2, #88]	; 0x58
 8004aee:	e003      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004af4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	f002 0308 	and.w	r3, r2, #8
 8004b04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004b12:	460b      	mov	r3, r1
 8004b14:	4313      	orrs	r3, r2
 8004b16:	d01e      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b24:	d10c      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b2a:	3328      	adds	r3, #40	; 0x28
 8004b2c:	2102      	movs	r1, #2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f001 fc7e 	bl	8006430 <RCCEx_PLL3_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b40:	4b87      	ldr	r3, [pc, #540]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b50:	4a83      	ldr	r2, [pc, #524]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b52:	430b      	orrs	r3, r1
 8004b54:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	f002 0310 	and.w	r3, r2, #16
 8004b62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b66:	2300      	movs	r3, #0
 8004b68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004b6c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004b70:	460b      	mov	r3, r1
 8004b72:	4313      	orrs	r3, r2
 8004b74:	d01e      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b82:	d10c      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b88:	3328      	adds	r3, #40	; 0x28
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 fc4f 	bl	8006430 <RCCEx_PLL3_Config>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b9e:	4b70      	ldr	r3, [pc, #448]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004baa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bae:	4a6c      	ldr	r2, [pc, #432]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	d03e      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be0:	d022      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004be2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be6:	d81b      	bhi.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf0:	d00b      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004bf2:	e015      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f001 fb65 	bl	80062cc <RCCEx_PLL2_Config>
 8004c02:	4603      	mov	r3, r0
 8004c04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c08:	e00f      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c0e:	3328      	adds	r3, #40	; 0x28
 8004c10:	2102      	movs	r1, #2
 8004c12:	4618      	mov	r0, r3
 8004c14:	f001 fc0c 	bl	8006430 <RCCEx_PLL3_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c1e:	e004      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c26:	e000      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c32:	4b4b      	ldr	r3, [pc, #300]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c42:	4a47      	ldr	r2, [pc, #284]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6593      	str	r3, [r2, #88]	; 0x58
 8004c48:	e003      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004c5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c60:	2300      	movs	r3, #0
 8004c62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c64:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	d03b      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c7a:	d01f      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004c7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c80:	d818      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c86:	d003      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004c88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c8c:	d007      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004c8e:	e011      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c90:	4b33      	ldr	r3, [pc, #204]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	4a32      	ldr	r2, [pc, #200]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c9c:	e00f      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca2:	3328      	adds	r3, #40	; 0x28
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f001 fbc2 	bl	8006430 <RCCEx_PLL3_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cb2:	e004      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004cba:	e000      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cc6:	4b26      	ldr	r3, [pc, #152]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	4a22      	ldr	r2, [pc, #136]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6553      	str	r3, [r2, #84]	; 0x54
 8004cdc:	e003      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ce2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004cf2:	673b      	str	r3, [r7, #112]	; 0x70
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	677b      	str	r3, [r7, #116]	; 0x74
 8004cf8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	d034      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d10:	d007      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004d12:	e011      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d14:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	4a11      	ldr	r2, [pc, #68]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d20:	e00e      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d26:	3308      	adds	r3, #8
 8004d28:	2102      	movs	r1, #2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 face 	bl	80062cc <RCCEx_PLL2_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d36:	e003      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10d      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d56:	4a02      	ldr	r2, [pc, #8]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d5c:	e006      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004d5e:	bf00      	nop
 8004d60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004d78:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d7e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004d82:	460b      	mov	r3, r1
 8004d84:	4313      	orrs	r3, r2
 8004d86:	d00c      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d8c:	3328      	adds	r3, #40	; 0x28
 8004d8e:	2102      	movs	r1, #2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f001 fb4d 	bl	8006430 <RCCEx_PLL3_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004dae:	663b      	str	r3, [r7, #96]	; 0x60
 8004db0:	2300      	movs	r3, #0
 8004db2:	667b      	str	r3, [r7, #100]	; 0x64
 8004db4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d038      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dca:	d018      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd0:	d811      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd6:	d014      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ddc:	d80b      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d011      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de6:	d106      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de8:	4bc3      	ldr	r3, [pc, #780]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	4ac2      	ldr	r2, [pc, #776]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004df4:	e008      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004dfc:	e004      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004dfe:	bf00      	nop
 8004e00:	e002      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e10:	4bb9      	ldr	r3, [pc, #740]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	4ab5      	ldr	r2, [pc, #724]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e22:	430b      	orrs	r3, r1
 8004e24:	6553      	str	r3, [r2, #84]	; 0x54
 8004e26:	e003      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004e3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e3e:	2300      	movs	r3, #0
 8004e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e42:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004e46:	460b      	mov	r3, r1
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	d009      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e4c:	4baa      	ldr	r3, [pc, #680]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e5a:	4aa7      	ldr	r2, [pc, #668]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004e6c:	653b      	str	r3, [r7, #80]	; 0x50
 8004e6e:	2300      	movs	r3, #0
 8004e70:	657b      	str	r3, [r7, #84]	; 0x54
 8004e72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004e76:	460b      	mov	r3, r1
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	d009      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e7c:	4b9e      	ldr	r3, [pc, #632]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e80:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	4a9b      	ldr	r2, [pc, #620]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004e9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ea2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	d009      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004eac:	4b92      	ldr	r3, [pc, #584]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eba:	4a8f      	ldr	r2, [pc, #572]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8004ece:	2300      	movs	r3, #0
 8004ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	d00e      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004edc:	4b86      	ldr	r3, [pc, #536]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	4a85      	ldr	r2, [pc, #532]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ee2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ee6:	6113      	str	r3, [r2, #16]
 8004ee8:	4b83      	ldr	r3, [pc, #524]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004eea:	6919      	ldr	r1, [r3, #16]
 8004eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ef4:	4a80      	ldr	r2, [pc, #512]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f08:	2300      	movs	r3, #0
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f0c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004f10:	460b      	mov	r3, r1
 8004f12:	4313      	orrs	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f16:	4b78      	ldr	r3, [pc, #480]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f24:	4a74      	ldr	r2, [pc, #464]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004f36:	633b      	str	r3, [r7, #48]	; 0x30
 8004f38:	2300      	movs	r3, #0
 8004f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f3c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004f40:	460b      	mov	r3, r1
 8004f42:	4313      	orrs	r3, r2
 8004f44:	d00a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f46:	4b6c      	ldr	r3, [pc, #432]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f56:	4a68      	ldr	r2, [pc, #416]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	2100      	movs	r1, #0
 8004f66:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f6e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004f72:	460b      	mov	r3, r1
 8004f74:	4313      	orrs	r3, r2
 8004f76:	d011      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4618      	mov	r0, r3
 8004f82:	f001 f9a3 	bl	80062cc <RCCEx_PLL2_Config>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	6239      	str	r1, [r7, #32]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
 8004fae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	d011      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 f983 	bl	80062cc <RCCEx_PLL2_Config>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004fcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	61b9      	str	r1, [r7, #24]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	d011      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	2102      	movs	r1, #2
 8005000:	4618      	mov	r0, r3
 8005002:	f001 f963 	bl	80062cc <RCCEx_PLL2_Config>
 8005006:	4603      	mov	r3, r0
 8005008:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800500c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005014:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005018:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800501c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	2100      	movs	r1, #0
 8005026:	6139      	str	r1, [r7, #16]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005032:	460b      	mov	r3, r1
 8005034:	4313      	orrs	r3, r2
 8005036:	d011      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800503c:	3328      	adds	r3, #40	; 0x28
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f001 f9f5 	bl	8006430 <RCCEx_PLL3_Config>
 8005046:	4603      	mov	r3, r0
 8005048:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800504c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005054:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005058:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800505c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	2100      	movs	r1, #0
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005072:	460b      	mov	r3, r1
 8005074:	4313      	orrs	r3, r2
 8005076:	d011      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800507c:	3328      	adds	r3, #40	; 0x28
 800507e:	2101      	movs	r1, #1
 8005080:	4618      	mov	r0, r3
 8005082:	f001 f9d5 	bl	8006430 <RCCEx_PLL3_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800508c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005094:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005098:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800509c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a4:	2100      	movs	r1, #0
 80050a6:	6039      	str	r1, [r7, #0]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80050b2:	460b      	mov	r3, r1
 80050b4:	4313      	orrs	r3, r2
 80050b6:	d011      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050bc:	3328      	adds	r3, #40	; 0x28
 80050be:	2102      	movs	r1, #2
 80050c0:	4618      	mov	r0, r3
 80050c2:	f001 f9b5 	bl	8006430 <RCCEx_PLL3_Config>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80050cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80050dc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e000      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80050f0:	46bd      	mov	sp, r7
 80050f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f6:	bf00      	nop
 80050f8:	58024400 	.word	0x58024400

080050fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b090      	sub	sp, #64	; 0x40
 8005100:	af00      	add	r7, sp, #0
 8005102:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800510a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800510e:	430b      	orrs	r3, r1
 8005110:	f040 8094 	bne.w	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005114:	4b97      	ldr	r3, [pc, #604]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	2b04      	cmp	r3, #4
 8005122:	f200 8087 	bhi.w	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	08005141 	.word	0x08005141
 8005130:	08005169 	.word	0x08005169
 8005134:	08005191 	.word	0x08005191
 8005138:	0800522d 	.word	0x0800522d
 800513c:	080051b9 	.word	0x080051b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005140:	4b8c      	ldr	r3, [pc, #560]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800514c:	d108      	bne.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800514e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005152:	4618      	mov	r0, r3
 8005154:	f000 ff68 	bl	8006028 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800515c:	f000 bc97 	b.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005164:	f000 bc93 	b.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005168:	4b82      	ldr	r3, [pc, #520]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005174:	d108      	bne.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005176:	f107 0318 	add.w	r3, r7, #24
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fcac 	bl	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005184:	f000 bc83 	b.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800518c:	f000 bc7f 	b.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005190:	4b78      	ldr	r3, [pc, #480]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800519c:	d108      	bne.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800519e:	f107 030c 	add.w	r3, r7, #12
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fdec 	bl	8005d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051ac:	f000 bc6f 	b.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80051b0:	2300      	movs	r3, #0
 80051b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051b4:	f000 bc6b 	b.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051b8:	4b6e      	ldr	r3, [pc, #440]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80051ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051c2:	4b6c      	ldr	r3, [pc, #432]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d10c      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80051ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051d4:	4b67      	ldr	r3, [pc, #412]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	08db      	lsrs	r3, r3, #3
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	4a66      	ldr	r2, [pc, #408]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
 80051e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e6:	e01f      	b.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051e8:	4b62      	ldr	r3, [pc, #392]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051f4:	d106      	bne.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80051f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051fc:	d102      	bne.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80051fe:	4b5f      	ldr	r3, [pc, #380]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005202:	e011      	b.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005204:	4b5b      	ldr	r3, [pc, #364]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005210:	d106      	bne.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005218:	d102      	bne.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800521a:	4b59      	ldr	r3, [pc, #356]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800521c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800521e:	e003      	b.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005220:	2300      	movs	r3, #0
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005224:	f000 bc33 	b.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005228:	f000 bc31 	b.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800522c:	4b55      	ldr	r3, [pc, #340]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005230:	f000 bc2d 	b.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005238:	f000 bc29 	b.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800523c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005240:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005244:	430b      	orrs	r3, r1
 8005246:	f040 809f 	bne.w	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800524a:	4b4a      	ldr	r3, [pc, #296]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800524c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005252:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800525a:	d04d      	beq.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005262:	f200 8084 	bhi.w	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	2bc0      	cmp	r3, #192	; 0xc0
 800526a:	d07d      	beq.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	2bc0      	cmp	r3, #192	; 0xc0
 8005270:	d87d      	bhi.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	2b80      	cmp	r3, #128	; 0x80
 8005276:	d02d      	beq.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	2b80      	cmp	r3, #128	; 0x80
 800527c:	d877      	bhi.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d012      	beq.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800528a:	e070      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800528c:	4b39      	ldr	r3, [pc, #228]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005294:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005298:	d107      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800529a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fec2 	bl	8006028 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052a8:	e3f1      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052ae:	e3ee      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052b0:	4b30      	ldr	r3, [pc, #192]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052bc:	d107      	bne.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052be:	f107 0318 	add.w	r3, r7, #24
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fc08 	bl	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052cc:	e3df      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052d2:	e3dc      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052d4:	4b27      	ldr	r3, [pc, #156]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e0:	d107      	bne.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052e2:	f107 030c 	add.w	r3, r7, #12
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fd4a 	bl	8005d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052f0:	e3cd      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052f6:	e3ca      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052f8:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005300:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b04      	cmp	r3, #4
 800530c:	d10c      	bne.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800530e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005310:	2b00      	cmp	r3, #0
 8005312:	d109      	bne.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005314:	4b17      	ldr	r3, [pc, #92]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	08db      	lsrs	r3, r3, #3
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	4a16      	ldr	r2, [pc, #88]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005326:	e01e      	b.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005328:	4b12      	ldr	r3, [pc, #72]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005334:	d106      	bne.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800533c:	d102      	bne.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800533e:	4b0f      	ldr	r3, [pc, #60]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005342:	e010      	b.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005344:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005350:	d106      	bne.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005358:	d102      	bne.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800535c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800535e:	e002      	b.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005364:	e393      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005366:	e392      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005368:	4b06      	ldr	r3, [pc, #24]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800536a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800536c:	e38f      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005372:	e38c      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005374:	58024400 	.word	0x58024400
 8005378:	03d09000 	.word	0x03d09000
 800537c:	003d0900 	.word	0x003d0900
 8005380:	007a1200 	.word	0x007a1200
 8005384:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800538c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005390:	430b      	orrs	r3, r1
 8005392:	f040 809c 	bne.w	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8005396:	4b9e      	ldr	r3, [pc, #632]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800539e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a6:	d054      	beq.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ae:	f200 808b 	bhi.w	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053b8:	f000 8083 	beq.w	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053c2:	f200 8081 	bhi.w	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053cc:	d02f      	beq.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d4:	d878      	bhi.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d004      	beq.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e2:	d012      	beq.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80053e4:	e070      	b.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053e6:	4b8a      	ldr	r3, [pc, #552]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053f2:	d107      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fe15 	bl	8006028 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005402:	e344      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005408:	e341      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800540a:	4b81      	ldr	r3, [pc, #516]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005416:	d107      	bne.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005418:	f107 0318 	add.w	r3, r7, #24
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fb5b 	bl	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005426:	e332      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800542c:	e32f      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800542e:	4b78      	ldr	r3, [pc, #480]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800543a:	d107      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800543c:	f107 030c 	add.w	r3, r7, #12
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fc9d 	bl	8005d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800544a:	e320      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005450:	e31d      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005452:	4b6f      	ldr	r3, [pc, #444]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005456:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800545a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800545c:	4b6c      	ldr	r3, [pc, #432]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b04      	cmp	r3, #4
 8005466:	d10c      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800546e:	4b68      	ldr	r3, [pc, #416]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	08db      	lsrs	r3, r3, #3
 8005474:	f003 0303 	and.w	r3, r3, #3
 8005478:	4a66      	ldr	r2, [pc, #408]	; (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800547a:	fa22 f303 	lsr.w	r3, r2, r3
 800547e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005480:	e01e      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005482:	4b63      	ldr	r3, [pc, #396]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548e:	d106      	bne.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005496:	d102      	bne.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005498:	4b5f      	ldr	r3, [pc, #380]	; (8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800549c:	e010      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800549e:	4b5c      	ldr	r3, [pc, #368]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054aa:	d106      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054b2:	d102      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80054b4:	4b59      	ldr	r3, [pc, #356]	; (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b8:	e002      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 80054be:	e2e6      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80054c0:	e2e5      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80054c2:	4b57      	ldr	r3, [pc, #348]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80054c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054c6:	e2e2      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054cc:	e2df      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80054ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054d2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80054d6:	430b      	orrs	r3, r1
 80054d8:	f040 80a7 	bne.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80054dc:	4b4c      	ldr	r3, [pc, #304]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80054de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80054e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ec:	d055      	beq.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054f4:	f200 8096 	bhi.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80054f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054fe:	f000 8084 	beq.w	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005508:	f200 808c 	bhi.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005512:	d030      	beq.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551a:	f200 8083 	bhi.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552a:	d012      	beq.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800552c:	e07a      	b.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800552e:	4b38      	ldr	r3, [pc, #224]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800553a:	d107      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800553c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fd71 	bl	8006028 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800554a:	e2a0      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005550:	e29d      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005552:	4b2f      	ldr	r3, [pc, #188]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800555a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800555e:	d107      	bne.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005560:	f107 0318 	add.w	r3, r7, #24
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fab7 	bl	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800556e:	e28e      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005570:	2300      	movs	r3, #0
 8005572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005574:	e28b      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005576:	4b26      	ldr	r3, [pc, #152]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800557e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005582:	d107      	bne.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005584:	f107 030c 	add.w	r3, r7, #12
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fbf9 	bl	8005d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005592:	e27c      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005598:	e279      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800559a:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800559c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055a4:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d10c      	bne.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055b6:	4b16      	ldr	r3, [pc, #88]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	08db      	lsrs	r3, r3, #3
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	4a14      	ldr	r2, [pc, #80]	; (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80055c2:	fa22 f303 	lsr.w	r3, r2, r3
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c8:	e01e      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055ca:	4b11      	ldr	r3, [pc, #68]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d6:	d106      	bne.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80055d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055de:	d102      	bne.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80055e0:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e4:	e010      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055e6:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f2:	d106      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80055f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055fa:	d102      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055fc:	4b07      	ldr	r3, [pc, #28]	; (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005600:	e002      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005606:	e242      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005608:	e241      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800560e:	e23e      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005610:	58024400 	.word	0x58024400
 8005614:	03d09000 	.word	0x03d09000
 8005618:	003d0900 	.word	0x003d0900
 800561c:	007a1200 	.word	0x007a1200
 8005620:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005628:	e231      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800562a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800562e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005632:	430b      	orrs	r3, r1
 8005634:	f040 8085 	bne.w	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005638:	4b9c      	ldr	r3, [pc, #624]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800563a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005640:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005648:	d06b      	beq.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005650:	d874      	bhi.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005658:	d056      	beq.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005660:	d86c      	bhi.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005668:	d03b      	beq.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005670:	d864      	bhi.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005678:	d021      	beq.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005680:	d85c      	bhi.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568e:	d004      	beq.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8005690:	e054      	b.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005692:	f7fe fb49 	bl	8003d28 <HAL_RCC_GetPCLK1Freq>
 8005696:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005698:	e1f9      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800569a:	4b84      	ldr	r3, [pc, #528]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056a6:	d107      	bne.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056a8:	f107 0318 	add.w	r3, r7, #24
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fa13 	bl	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056b6:	e1ea      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056bc:	e1e7      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056be:	4b7b      	ldr	r3, [pc, #492]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ca:	d107      	bne.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056cc:	f107 030c 	add.w	r3, r7, #12
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fb55 	bl	8005d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056da:	e1d8      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056e0:	e1d5      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056e2:	4b72      	ldr	r3, [pc, #456]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d109      	bne.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056ee:	4b6f      	ldr	r3, [pc, #444]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	08db      	lsrs	r3, r3, #3
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	4a6d      	ldr	r2, [pc, #436]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80056fa:	fa22 f303 	lsr.w	r3, r2, r3
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005700:	e1c5      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005706:	e1c2      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005708:	4b68      	ldr	r3, [pc, #416]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005714:	d102      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8005716:	4b67      	ldr	r3, [pc, #412]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005718:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800571a:	e1b8      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005720:	e1b5      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005722:	4b62      	ldr	r3, [pc, #392]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800572e:	d102      	bne.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8005730:	4b61      	ldr	r3, [pc, #388]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005734:	e1ab      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800573a:	e1a8      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005740:	e1a5      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005746:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800574a:	430b      	orrs	r3, r1
 800574c:	d173      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800574e:	4b57      	ldr	r3, [pc, #348]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005752:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005756:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800575e:	d02f      	beq.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005766:	d863      	bhi.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576a:	2b00      	cmp	r3, #0
 800576c:	d004      	beq.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005774:	d012      	beq.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8005776:	e05b      	b.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005778:	4b4c      	ldr	r3, [pc, #304]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005784:	d107      	bne.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005786:	f107 0318 	add.w	r3, r7, #24
 800578a:	4618      	mov	r0, r3
 800578c:	f000 f9a4 	bl	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005794:	e17b      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800579a:	e178      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800579c:	4b43      	ldr	r3, [pc, #268]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a8:	d107      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057aa:	f107 030c 	add.w	r3, r7, #12
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fae6 	bl	8005d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057b8:	e169      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057be:	e166      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057c0:	4b3a      	ldr	r3, [pc, #232]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80057c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057ca:	4b38      	ldr	r3, [pc, #224]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d10c      	bne.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80057d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d109      	bne.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057dc:	4b33      	ldr	r3, [pc, #204]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	4a32      	ldr	r2, [pc, #200]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ee:	e01e      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057f0:	4b2e      	ldr	r3, [pc, #184]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fc:	d106      	bne.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80057fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005804:	d102      	bne.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005806:	4b2b      	ldr	r3, [pc, #172]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800580a:	e010      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800580c:	4b27      	ldr	r3, [pc, #156]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005818:	d106      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005820:	d102      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005822:	4b25      	ldr	r3, [pc, #148]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005826:	e002      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800582c:	e12f      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800582e:	e12e      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005834:	e12b      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005836:	e9d7 2300 	ldrd	r2, r3, [r7]
 800583a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800583e:	430b      	orrs	r3, r1
 8005840:	d13c      	bne.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005842:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	2b00      	cmp	r3, #0
 8005850:	d004      	beq.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005858:	d012      	beq.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800585a:	e023      	b.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800585c:	4b13      	ldr	r3, [pc, #76]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005868:	d107      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800586a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fbda 	bl	8006028 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005878:	e109      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800587e:	e106      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800588c:	d107      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800588e:	f107 0318 	add.w	r3, r7, #24
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f920 	bl	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800589c:	e0f7      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800589e:	2300      	movs	r3, #0
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a2:	e0f4      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a8:	e0f1      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80058aa:	bf00      	nop
 80058ac:	58024400 	.word	0x58024400
 80058b0:	03d09000 	.word	0x03d09000
 80058b4:	003d0900 	.word	0x003d0900
 80058b8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80058bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058c0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80058c4:	430b      	orrs	r3, r1
 80058c6:	f040 8091 	bne.w	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80058ca:	4b73      	ldr	r3, [pc, #460]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80058d2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80058da:	f000 8081 	beq.w	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80058e4:	d87f      	bhi.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058ec:	d06b      	beq.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80058ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058f4:	d877      	bhi.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fc:	d056      	beq.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005904:	d86f      	bhi.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800590c:	d03b      	beq.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005914:	d867      	bhi.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800591c:	d021      	beq.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005924:	d85f      	bhi.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005932:	d004      	beq.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005934:	e057      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005936:	f000 f8b9 	bl	8005aac <HAL_RCCEx_GetD3PCLK1Freq>
 800593a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800593c:	e0a7      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800593e:	4b56      	ldr	r3, [pc, #344]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800594a:	d107      	bne.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800594c:	f107 0318 	add.w	r3, r7, #24
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f8c1 	bl	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800595a:	e098      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005960:	e095      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005962:	4b4d      	ldr	r3, [pc, #308]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800596a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800596e:	d107      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005970:	f107 030c 	add.w	r3, r7, #12
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fa03 	bl	8005d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800597e:	e086      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005984:	e083      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005986:	4b44      	ldr	r3, [pc, #272]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b04      	cmp	r3, #4
 8005990:	d109      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005992:	4b41      	ldr	r3, [pc, #260]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	08db      	lsrs	r3, r3, #3
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	4a3f      	ldr	r2, [pc, #252]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800599e:	fa22 f303 	lsr.w	r3, r2, r3
 80059a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059a4:	e073      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059aa:	e070      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80059ac:	4b3a      	ldr	r3, [pc, #232]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b8:	d102      	bne.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80059ba:	4b39      	ldr	r3, [pc, #228]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80059bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059be:	e066      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059c4:	e063      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80059c6:	4b34      	ldr	r3, [pc, #208]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059d2:	d102      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80059d4:	4b33      	ldr	r3, [pc, #204]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059d8:	e059      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059de:	e056      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80059e0:	4b31      	ldr	r3, [pc, #196]	; (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059e4:	e053      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059ea:	e050      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80059ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059f0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80059f4:	430b      	orrs	r3, r1
 80059f6:	d148      	bne.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80059f8:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80059fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a00:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a08:	d02a      	beq.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a10:	d838      	bhi.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a1e:	d00d      	beq.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005a20:	e030      	b.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a22:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a2e:	d102      	bne.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8005a30:	4b1c      	ldr	r3, [pc, #112]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a34:	e02b      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a3a:	e028      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a3c:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a48:	d107      	bne.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 faea 	bl	8006028 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a58:	e019      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a5e:	e016      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a60:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a6c:	d107      	bne.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a6e:	f107 0318 	add.w	r3, r7, #24
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f830 	bl	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a7c:	e007      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a82:	e004      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a88:	e001      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3740      	adds	r7, #64	; 0x40
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	58024400 	.word	0x58024400
 8005a9c:	03d09000 	.word	0x03d09000
 8005aa0:	003d0900 	.word	0x003d0900
 8005aa4:	007a1200 	.word	0x007a1200
 8005aa8:	00bb8000 	.word	0x00bb8000

08005aac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005ab0:	f7fe f90a 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	091b      	lsrs	r3, r3, #4
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	4904      	ldr	r1, [pc, #16]	; (8005ad4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005ac2:	5ccb      	ldrb	r3, [r1, r3]
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	08008a30 	.word	0x08008a30

08005ad8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b089      	sub	sp, #36	; 0x24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ae0:	4ba1      	ldr	r3, [pc, #644]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005aea:	4b9f      	ldr	r3, [pc, #636]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	0b1b      	lsrs	r3, r3, #12
 8005af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005af4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005af6:	4b9c      	ldr	r3, [pc, #624]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	091b      	lsrs	r3, r3, #4
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005b02:	4b99      	ldr	r3, [pc, #612]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	08db      	lsrs	r3, r3, #3
 8005b08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	fb02 f303 	mul.w	r3, r2, r3
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8111 	beq.w	8005d48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	f000 8083 	beq.w	8005c34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	f200 80a1 	bhi.w	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d056      	beq.n	8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005b42:	e099      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b44:	4b88      	ldr	r3, [pc, #544]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d02d      	beq.n	8005bac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b50:	4b85      	ldr	r3, [pc, #532]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	08db      	lsrs	r3, r3, #3
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	4a84      	ldr	r2, [pc, #528]	; (8005d6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	ee07 3a90 	vmov	s15, r3
 8005b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7a:	4b7b      	ldr	r3, [pc, #492]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005baa:	e087      	b.n	8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bbe:	4b6a      	ldr	r3, [pc, #424]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bd2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bee:	e065      	b.n	8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c02:	4b59      	ldr	r3, [pc, #356]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c32:	e043      	b.n	8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c46:	4b48      	ldr	r3, [pc, #288]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c76:	e021      	b.n	8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8a:	4b37      	ldr	r3, [pc, #220]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005cbc:	4b2a      	ldr	r3, [pc, #168]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	0a5b      	lsrs	r3, r3, #9
 8005cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ce2:	ee17 2a90 	vmov	r2, s15
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005cea:	4b1f      	ldr	r3, [pc, #124]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	0c1b      	lsrs	r3, r3, #16
 8005cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf4:	ee07 3a90 	vmov	s15, r3
 8005cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d10:	ee17 2a90 	vmov	r2, s15
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005d18:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	0e1b      	lsrs	r3, r3, #24
 8005d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d3e:	ee17 2a90 	vmov	r2, s15
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d46:	e008      	b.n	8005d5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	609a      	str	r2, [r3, #8]
}
 8005d5a:	bf00      	nop
 8005d5c:	3724      	adds	r7, #36	; 0x24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	03d09000 	.word	0x03d09000
 8005d70:	46000000 	.word	0x46000000
 8005d74:	4c742400 	.word	0x4c742400
 8005d78:	4a742400 	.word	0x4a742400
 8005d7c:	4af42400 	.word	0x4af42400

08005d80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b089      	sub	sp, #36	; 0x24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d88:	4ba1      	ldr	r3, [pc, #644]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d92:	4b9f      	ldr	r3, [pc, #636]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	0d1b      	lsrs	r3, r3, #20
 8005d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d9e:	4b9c      	ldr	r3, [pc, #624]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	0a1b      	lsrs	r3, r3, #8
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005daa:	4b99      	ldr	r3, [pc, #612]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dae:	08db      	lsrs	r3, r3, #3
 8005db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	fb02 f303 	mul.w	r3, r2, r3
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8111 	beq.w	8005ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	f000 8083 	beq.w	8005edc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	f200 80a1 	bhi.w	8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d056      	beq.n	8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005dea:	e099      	b.n	8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dec:	4b88      	ldr	r3, [pc, #544]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d02d      	beq.n	8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005df8:	4b85      	ldr	r3, [pc, #532]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	08db      	lsrs	r3, r3, #3
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	4a84      	ldr	r2, [pc, #528]	; (8006014 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
 8005e08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	ee07 3a90 	vmov	s15, r3
 8005e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e22:	4b7b      	ldr	r3, [pc, #492]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e36:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e52:	e087      	b.n	8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800601c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e66:	4b6a      	ldr	r3, [pc, #424]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e96:	e065      	b.n	8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eaa:	4b59      	ldr	r3, [pc, #356]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ebe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eda:	e043      	b.n	8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eee:	4b48      	ldr	r3, [pc, #288]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f02:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f1e:	e021      	b.n	8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f32:	4b37      	ldr	r3, [pc, #220]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f46:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005f64:	4b2a      	ldr	r3, [pc, #168]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	0a5b      	lsrs	r3, r3, #9
 8005f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f6e:	ee07 3a90 	vmov	s15, r3
 8005f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f8a:	ee17 2a90 	vmov	r2, s15
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005f92:	4b1f      	ldr	r3, [pc, #124]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	0c1b      	lsrs	r3, r3, #16
 8005f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fb8:	ee17 2a90 	vmov	r2, s15
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005fc0:	4b13      	ldr	r3, [pc, #76]	; (8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	0e1b      	lsrs	r3, r3, #24
 8005fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fe6:	ee17 2a90 	vmov	r2, s15
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005fee:	e008      	b.n	8006002 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	609a      	str	r2, [r3, #8]
}
 8006002:	bf00      	nop
 8006004:	3724      	adds	r7, #36	; 0x24
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	58024400 	.word	0x58024400
 8006014:	03d09000 	.word	0x03d09000
 8006018:	46000000 	.word	0x46000000
 800601c:	4c742400 	.word	0x4c742400
 8006020:	4a742400 	.word	0x4a742400
 8006024:	4af42400 	.word	0x4af42400

08006028 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006028:	b480      	push	{r7}
 800602a:	b089      	sub	sp, #36	; 0x24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006030:	4ba0      	ldr	r3, [pc, #640]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800603a:	4b9e      	ldr	r3, [pc, #632]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	091b      	lsrs	r3, r3, #4
 8006040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006044:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006046:	4b9b      	ldr	r3, [pc, #620]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006050:	4b98      	ldr	r3, [pc, #608]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006054:	08db      	lsrs	r3, r3, #3
 8006056:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	fb02 f303 	mul.w	r3, r2, r3
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006068:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 8111 	beq.w	8006296 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	2b02      	cmp	r3, #2
 8006078:	f000 8083 	beq.w	8006182 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b02      	cmp	r3, #2
 8006080:	f200 80a1 	bhi.w	80061c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d056      	beq.n	800613e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006090:	e099      	b.n	80061c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006092:	4b88      	ldr	r3, [pc, #544]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d02d      	beq.n	80060fa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800609e:	4b85      	ldr	r3, [pc, #532]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	08db      	lsrs	r3, r3, #3
 80060a4:	f003 0303 	and.w	r3, r3, #3
 80060a8:	4a83      	ldr	r2, [pc, #524]	; (80062b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80060aa:	fa22 f303 	lsr.w	r3, r2, r3
 80060ae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	ee07 3a90 	vmov	s15, r3
 80060c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c8:	4b7a      	ldr	r3, [pc, #488]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80060dc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80060e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80060f8:	e087      	b.n	800620a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006104:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610c:	4b69      	ldr	r3, [pc, #420]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800610e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006114:	ee07 3a90 	vmov	s15, r3
 8006118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006120:	eddf 5a66 	vldr	s11, [pc, #408]	; 80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006138:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800613c:	e065      	b.n	800620a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	ee07 3a90 	vmov	s15, r3
 8006144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006148:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800614c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006150:	4b58      	ldr	r3, [pc, #352]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006158:	ee07 3a90 	vmov	s15, r3
 800615c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006160:	ed97 6a03 	vldr	s12, [r7, #12]
 8006164:	eddf 5a55 	vldr	s11, [pc, #340]	; 80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800616c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800617c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006180:	e043      	b.n	800620a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	ee07 3a90 	vmov	s15, r3
 8006188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006194:	4b47      	ldr	r3, [pc, #284]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619c:	ee07 3a90 	vmov	s15, r3
 80061a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80061ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061c4:	e021      	b.n	800620a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	ee07 3a90 	vmov	s15, r3
 80061cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80061d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d8:	4b36      	ldr	r3, [pc, #216]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e0:	ee07 3a90 	vmov	s15, r3
 80061e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ec:	eddf 5a33 	vldr	s11, [pc, #204]	; 80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80061f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006204:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006208:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800620a:	4b2a      	ldr	r3, [pc, #168]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	0a5b      	lsrs	r3, r3, #9
 8006210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006214:	ee07 3a90 	vmov	s15, r3
 8006218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006224:	edd7 6a07 	vldr	s13, [r7, #28]
 8006228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800622c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006230:	ee17 2a90 	vmov	r2, s15
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006238:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800624e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006252:	edd7 6a07 	vldr	s13, [r7, #28]
 8006256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800625a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800625e:	ee17 2a90 	vmov	r2, s15
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006266:	4b13      	ldr	r3, [pc, #76]	; (80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	0e1b      	lsrs	r3, r3, #24
 800626c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006270:	ee07 3a90 	vmov	s15, r3
 8006274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800627c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006280:	edd7 6a07 	vldr	s13, [r7, #28]
 8006284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800628c:	ee17 2a90 	vmov	r2, s15
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006294:	e008      	b.n	80062a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	609a      	str	r2, [r3, #8]
}
 80062a8:	bf00      	nop
 80062aa:	3724      	adds	r7, #36	; 0x24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	58024400 	.word	0x58024400
 80062b8:	03d09000 	.word	0x03d09000
 80062bc:	46000000 	.word	0x46000000
 80062c0:	4c742400 	.word	0x4c742400
 80062c4:	4a742400 	.word	0x4a742400
 80062c8:	4af42400 	.word	0x4af42400

080062cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062da:	4b53      	ldr	r3, [pc, #332]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80062dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062de:	f003 0303 	and.w	r3, r3, #3
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d101      	bne.n	80062ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e099      	b.n	800641e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80062ea:	4b4f      	ldr	r3, [pc, #316]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a4e      	ldr	r2, [pc, #312]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80062f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062f6:	f7fb f877 	bl	80013e8 <HAL_GetTick>
 80062fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062fc:	e008      	b.n	8006310 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062fe:	f7fb f873 	bl	80013e8 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d901      	bls.n	8006310 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e086      	b.n	800641e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006310:	4b45      	ldr	r3, [pc, #276]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1f0      	bne.n	80062fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800631c:	4b42      	ldr	r3, [pc, #264]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	031b      	lsls	r3, r3, #12
 800632a:	493f      	ldr	r1, [pc, #252]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 800632c:	4313      	orrs	r3, r2
 800632e:	628b      	str	r3, [r1, #40]	; 0x28
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	3b01      	subs	r3, #1
 8006336:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	3b01      	subs	r3, #1
 8006340:	025b      	lsls	r3, r3, #9
 8006342:	b29b      	uxth	r3, r3
 8006344:	431a      	orrs	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	3b01      	subs	r3, #1
 800634c:	041b      	lsls	r3, r3, #16
 800634e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	3b01      	subs	r3, #1
 800635a:	061b      	lsls	r3, r3, #24
 800635c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006360:	4931      	ldr	r1, [pc, #196]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 8006362:	4313      	orrs	r3, r2
 8006364:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006366:	4b30      	ldr	r3, [pc, #192]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	492d      	ldr	r1, [pc, #180]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 8006374:	4313      	orrs	r3, r2
 8006376:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006378:	4b2b      	ldr	r3, [pc, #172]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	f023 0220 	bic.w	r2, r3, #32
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	4928      	ldr	r1, [pc, #160]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 8006386:	4313      	orrs	r3, r2
 8006388:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800638a:	4b27      	ldr	r3, [pc, #156]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	4a26      	ldr	r2, [pc, #152]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 8006390:	f023 0310 	bic.w	r3, r3, #16
 8006394:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006396:	4b24      	ldr	r3, [pc, #144]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 8006398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800639a:	4b24      	ldr	r3, [pc, #144]	; (800642c <RCCEx_PLL2_Config+0x160>)
 800639c:	4013      	ands	r3, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	69d2      	ldr	r2, [r2, #28]
 80063a2:	00d2      	lsls	r2, r2, #3
 80063a4:	4920      	ldr	r1, [pc, #128]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80063aa:	4b1f      	ldr	r3, [pc, #124]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	4a1e      	ldr	r2, [pc, #120]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80063b0:	f043 0310 	orr.w	r3, r3, #16
 80063b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d106      	bne.n	80063ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80063bc:	4b1a      	ldr	r3, [pc, #104]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	4a19      	ldr	r2, [pc, #100]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80063c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063c8:	e00f      	b.n	80063ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d106      	bne.n	80063de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80063d0:	4b15      	ldr	r3, [pc, #84]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	4a14      	ldr	r2, [pc, #80]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80063d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063dc:	e005      	b.n	80063ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80063de:	4b12      	ldr	r3, [pc, #72]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	4a11      	ldr	r2, [pc, #68]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80063e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80063ea:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a0e      	ldr	r2, [pc, #56]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 80063f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063f6:	f7fa fff7 	bl	80013e8 <HAL_GetTick>
 80063fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063fc:	e008      	b.n	8006410 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063fe:	f7fa fff3 	bl	80013e8 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e006      	b.n	800641e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <RCCEx_PLL2_Config+0x15c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0f0      	beq.n	80063fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	58024400 	.word	0x58024400
 800642c:	ffff0007 	.word	0xffff0007

08006430 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800643e:	4b53      	ldr	r3, [pc, #332]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	2b03      	cmp	r3, #3
 8006448:	d101      	bne.n	800644e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e099      	b.n	8006582 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800644e:	4b4f      	ldr	r3, [pc, #316]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a4e      	ldr	r2, [pc, #312]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800645a:	f7fa ffc5 	bl	80013e8 <HAL_GetTick>
 800645e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006460:	e008      	b.n	8006474 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006462:	f7fa ffc1 	bl	80013e8 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d901      	bls.n	8006474 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e086      	b.n	8006582 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006474:	4b45      	ldr	r3, [pc, #276]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1f0      	bne.n	8006462 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006480:	4b42      	ldr	r3, [pc, #264]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	051b      	lsls	r3, r3, #20
 800648e:	493f      	ldr	r1, [pc, #252]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006490:	4313      	orrs	r3, r2
 8006492:	628b      	str	r3, [r1, #40]	; 0x28
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	3b01      	subs	r3, #1
 800649a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	025b      	lsls	r3, r3, #9
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	041b      	lsls	r3, r3, #16
 80064b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	3b01      	subs	r3, #1
 80064be:	061b      	lsls	r3, r3, #24
 80064c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064c4:	4931      	ldr	r1, [pc, #196]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80064ca:	4b30      	ldr	r3, [pc, #192]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 80064cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	492d      	ldr	r1, [pc, #180]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80064dc:	4b2b      	ldr	r3, [pc, #172]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	4928      	ldr	r1, [pc, #160]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80064ee:	4b27      	ldr	r3, [pc, #156]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	4a26      	ldr	r2, [pc, #152]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 80064f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80064fa:	4b24      	ldr	r3, [pc, #144]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 80064fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064fe:	4b24      	ldr	r3, [pc, #144]	; (8006590 <RCCEx_PLL3_Config+0x160>)
 8006500:	4013      	ands	r3, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	69d2      	ldr	r2, [r2, #28]
 8006506:	00d2      	lsls	r2, r2, #3
 8006508:	4920      	ldr	r1, [pc, #128]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 800650a:	4313      	orrs	r3, r2
 800650c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800650e:	4b1f      	ldr	r3, [pc, #124]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	4a1e      	ldr	r2, [pc, #120]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006518:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d106      	bne.n	800652e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006520:	4b1a      	ldr	r3, [pc, #104]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	4a19      	ldr	r2, [pc, #100]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006526:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800652a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800652c:	e00f      	b.n	800654e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d106      	bne.n	8006542 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006534:	4b15      	ldr	r3, [pc, #84]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	4a14      	ldr	r2, [pc, #80]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 800653a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800653e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006540:	e005      	b.n	800654e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006542:	4b12      	ldr	r3, [pc, #72]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	4a11      	ldr	r2, [pc, #68]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006548:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800654c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800654e:	4b0f      	ldr	r3, [pc, #60]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a0e      	ldr	r2, [pc, #56]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800655a:	f7fa ff45 	bl	80013e8 <HAL_GetTick>
 800655e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006560:	e008      	b.n	8006574 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006562:	f7fa ff41 	bl	80013e8 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e006      	b.n	8006582 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <RCCEx_PLL3_Config+0x15c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0f0      	beq.n	8006562 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	58024400 	.word	0x58024400
 8006590:	ffff0007 	.word	0xffff0007

08006594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e049      	b.n	800663a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7fa fcd8 	bl	8000f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4619      	mov	r1, r3
 80065d2:	4610      	mov	r0, r2
 80065d4:	f000 fa26 	bl	8006a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
	...

08006644 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b01      	cmp	r3, #1
 8006656:	d001      	beq.n	800665c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e04c      	b.n	80066f6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a26      	ldr	r2, [pc, #152]	; (8006704 <HAL_TIM_Base_Start+0xc0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d022      	beq.n	80066b4 <HAL_TIM_Base_Start+0x70>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006676:	d01d      	beq.n	80066b4 <HAL_TIM_Base_Start+0x70>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a22      	ldr	r2, [pc, #136]	; (8006708 <HAL_TIM_Base_Start+0xc4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d018      	beq.n	80066b4 <HAL_TIM_Base_Start+0x70>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a21      	ldr	r2, [pc, #132]	; (800670c <HAL_TIM_Base_Start+0xc8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d013      	beq.n	80066b4 <HAL_TIM_Base_Start+0x70>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1f      	ldr	r2, [pc, #124]	; (8006710 <HAL_TIM_Base_Start+0xcc>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00e      	beq.n	80066b4 <HAL_TIM_Base_Start+0x70>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a1e      	ldr	r2, [pc, #120]	; (8006714 <HAL_TIM_Base_Start+0xd0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d009      	beq.n	80066b4 <HAL_TIM_Base_Start+0x70>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1c      	ldr	r2, [pc, #112]	; (8006718 <HAL_TIM_Base_Start+0xd4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d004      	beq.n	80066b4 <HAL_TIM_Base_Start+0x70>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1b      	ldr	r2, [pc, #108]	; (800671c <HAL_TIM_Base_Start+0xd8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d115      	bne.n	80066e0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	4b19      	ldr	r3, [pc, #100]	; (8006720 <HAL_TIM_Base_Start+0xdc>)
 80066bc:	4013      	ands	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b06      	cmp	r3, #6
 80066c4:	d015      	beq.n	80066f2 <HAL_TIM_Base_Start+0xae>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066cc:	d011      	beq.n	80066f2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f042 0201 	orr.w	r2, r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066de:	e008      	b.n	80066f2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0201 	orr.w	r2, r2, #1
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	e000      	b.n	80066f4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40010000 	.word	0x40010000
 8006708:	40000400 	.word	0x40000400
 800670c:	40000800 	.word	0x40000800
 8006710:	40000c00 	.word	0x40000c00
 8006714:	40010400 	.word	0x40010400
 8006718:	40001800 	.word	0x40001800
 800671c:	40014000 	.word	0x40014000
 8006720:	00010007 	.word	0x00010007

08006724 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0201 	bic.w	r2, r2, #1
 800673a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6a1a      	ldr	r2, [r3, #32]
 8006742:	f241 1311 	movw	r3, #4369	; 0x1111
 8006746:	4013      	ands	r3, r2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10f      	bne.n	800676c <HAL_TIM_Base_Stop_IT+0x48>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6a1a      	ldr	r2, [r3, #32]
 8006752:	f240 4344 	movw	r3, #1092	; 0x444
 8006756:	4013      	ands	r3, r2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d107      	bne.n	800676c <HAL_TIM_Base_Stop_IT+0x48>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0201 	bic.w	r2, r2, #1
 800676a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b02      	cmp	r3, #2
 8006796:	d122      	bne.n	80067de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d11b      	bne.n	80067de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f06f 0202 	mvn.w	r2, #2
 80067ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f003 0303 	and.w	r3, r3, #3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f90f 	bl	80069e8 <HAL_TIM_IC_CaptureCallback>
 80067ca:	e005      	b.n	80067d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f901 	bl	80069d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f912 	bl	80069fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	d122      	bne.n	8006832 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d11b      	bne.n	8006832 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f06f 0204 	mvn.w	r2, #4
 8006802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f8e5 	bl	80069e8 <HAL_TIM_IC_CaptureCallback>
 800681e:	e005      	b.n	800682c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f8d7 	bl	80069d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f8e8 	bl	80069fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b08      	cmp	r3, #8
 800683e:	d122      	bne.n	8006886 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b08      	cmp	r3, #8
 800684c:	d11b      	bne.n	8006886 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f06f 0208 	mvn.w	r2, #8
 8006856:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2204      	movs	r2, #4
 800685c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f003 0303 	and.w	r3, r3, #3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f8bb 	bl	80069e8 <HAL_TIM_IC_CaptureCallback>
 8006872:	e005      	b.n	8006880 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f8ad 	bl	80069d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f8be 	bl	80069fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b10      	cmp	r3, #16
 8006892:	d122      	bne.n	80068da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d11b      	bne.n	80068da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f06f 0210 	mvn.w	r2, #16
 80068aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2208      	movs	r2, #8
 80068b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f891 	bl	80069e8 <HAL_TIM_IC_CaptureCallback>
 80068c6:	e005      	b.n	80068d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f883 	bl	80069d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f894 	bl	80069fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d10e      	bne.n	8006906 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d107      	bne.n	8006906 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f06f 0201 	mvn.w	r2, #1
 80068fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f85d 	bl	80069c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006910:	2b80      	cmp	r3, #128	; 0x80
 8006912:	d10e      	bne.n	8006932 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691e:	2b80      	cmp	r3, #128	; 0x80
 8006920:	d107      	bne.n	8006932 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800692a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f91d 	bl	8006b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006940:	d10e      	bne.n	8006960 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694c:	2b80      	cmp	r3, #128	; 0x80
 800694e:	d107      	bne.n	8006960 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f910 	bl	8006b80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696a:	2b40      	cmp	r3, #64	; 0x40
 800696c:	d10e      	bne.n	800698c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	d107      	bne.n	800698c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f842 	bl	8006a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b20      	cmp	r3, #32
 8006998:	d10e      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	d107      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0220 	mvn.w	r2, #32
 80069b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f8d0 	bl	8006b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069b8:	bf00      	nop
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a40      	ldr	r2, [pc, #256]	; (8006b38 <TIM_Base_SetConfig+0x114>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d013      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a42:	d00f      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a3d      	ldr	r2, [pc, #244]	; (8006b3c <TIM_Base_SetConfig+0x118>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00b      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a3c      	ldr	r2, [pc, #240]	; (8006b40 <TIM_Base_SetConfig+0x11c>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d007      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a3b      	ldr	r2, [pc, #236]	; (8006b44 <TIM_Base_SetConfig+0x120>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d003      	beq.n	8006a64 <TIM_Base_SetConfig+0x40>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a3a      	ldr	r2, [pc, #232]	; (8006b48 <TIM_Base_SetConfig+0x124>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d108      	bne.n	8006a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a2f      	ldr	r2, [pc, #188]	; (8006b38 <TIM_Base_SetConfig+0x114>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01f      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a84:	d01b      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a2c      	ldr	r2, [pc, #176]	; (8006b3c <TIM_Base_SetConfig+0x118>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d017      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a2b      	ldr	r2, [pc, #172]	; (8006b40 <TIM_Base_SetConfig+0x11c>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d013      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a2a      	ldr	r2, [pc, #168]	; (8006b44 <TIM_Base_SetConfig+0x120>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d00f      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a29      	ldr	r2, [pc, #164]	; (8006b48 <TIM_Base_SetConfig+0x124>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00b      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a28      	ldr	r2, [pc, #160]	; (8006b4c <TIM_Base_SetConfig+0x128>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d007      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a27      	ldr	r2, [pc, #156]	; (8006b50 <TIM_Base_SetConfig+0x12c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d003      	beq.n	8006abe <TIM_Base_SetConfig+0x9a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a26      	ldr	r2, [pc, #152]	; (8006b54 <TIM_Base_SetConfig+0x130>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d108      	bne.n	8006ad0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a10      	ldr	r2, [pc, #64]	; (8006b38 <TIM_Base_SetConfig+0x114>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00f      	beq.n	8006b1c <TIM_Base_SetConfig+0xf8>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a12      	ldr	r2, [pc, #72]	; (8006b48 <TIM_Base_SetConfig+0x124>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00b      	beq.n	8006b1c <TIM_Base_SetConfig+0xf8>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a11      	ldr	r2, [pc, #68]	; (8006b4c <TIM_Base_SetConfig+0x128>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d007      	beq.n	8006b1c <TIM_Base_SetConfig+0xf8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a10      	ldr	r2, [pc, #64]	; (8006b50 <TIM_Base_SetConfig+0x12c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d003      	beq.n	8006b1c <TIM_Base_SetConfig+0xf8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a0f      	ldr	r2, [pc, #60]	; (8006b54 <TIM_Base_SetConfig+0x130>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d103      	bne.n	8006b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	615a      	str	r2, [r3, #20]
}
 8006b2a:	bf00      	nop
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	40010000 	.word	0x40010000
 8006b3c:	40000400 	.word	0x40000400
 8006b40:	40000800 	.word	0x40000800
 8006b44:	40000c00 	.word	0x40000c00
 8006b48:	40010400 	.word	0x40010400
 8006b4c:	40014000 	.word	0x40014000
 8006b50:	40014400 	.word	0x40014400
 8006b54:	40014800 	.word	0x40014800

08006b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e042      	b.n	8006c2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7fa fa19 	bl	8000ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2224      	movs	r2, #36	; 0x24
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0201 	bic.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f8ba 	bl	8006d50 <UART_SetConfig>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d101      	bne.n	8006be6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e022      	b.n	8006c2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 ff1a 	bl	8007a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0201 	orr.w	r2, r2, #1
 8006c22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 ffa1 	bl	8007b6c <UART_CheckIdleState>
 8006c2a:	4603      	mov	r3, r0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	; 0x28
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	4613      	mov	r3, r2
 8006c42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	d17b      	bne.n	8006d46 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <HAL_UART_Transmit+0x26>
 8006c54:	88fb      	ldrh	r3, [r7, #6]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e074      	b.n	8006d48 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2221      	movs	r2, #33	; 0x21
 8006c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c6e:	f7fa fbbb 	bl	80013e8 <HAL_GetTick>
 8006c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	88fa      	ldrh	r2, [r7, #6]
 8006c78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8c:	d108      	bne.n	8006ca0 <HAL_UART_Transmit+0x6c>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d104      	bne.n	8006ca0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	e003      	b.n	8006ca8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ca8:	e030      	b.n	8006d0c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2180      	movs	r1, #128	; 0x80
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f001 f803 	bl	8007cc0 <UART_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e03d      	b.n	8006d48 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10b      	bne.n	8006cea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ce0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	3302      	adds	r3, #2
 8006ce6:	61bb      	str	r3, [r7, #24]
 8006ce8:	e007      	b.n	8006cfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	781a      	ldrb	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1c8      	bne.n	8006caa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2140      	movs	r1, #64	; 0x40
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 ffcc 	bl	8007cc0 <UART_WaitOnFlagUntilTimeout>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d005      	beq.n	8006d3a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e006      	b.n	8006d48 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	e000      	b.n	8006d48 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d46:	2302      	movs	r3, #2
  }
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3720      	adds	r7, #32
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d54:	b092      	sub	sp, #72	; 0x48
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	69db      	ldr	r3, [r3, #28]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	4bbe      	ldr	r3, [pc, #760]	; (8007078 <UART_SetConfig+0x328>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	6812      	ldr	r2, [r2, #0]
 8006d86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4ab3      	ldr	r2, [pc, #716]	; (800707c <UART_SetConfig+0x32c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d004      	beq.n	8006dbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006db8:	4313      	orrs	r3, r2
 8006dba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	4baf      	ldr	r3, [pc, #700]	; (8007080 <UART_SetConfig+0x330>)
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	6812      	ldr	r2, [r2, #0]
 8006dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd6:	f023 010f 	bic.w	r1, r3, #15
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4aa6      	ldr	r2, [pc, #664]	; (8007084 <UART_SetConfig+0x334>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d177      	bne.n	8006ee0 <UART_SetConfig+0x190>
 8006df0:	4ba5      	ldr	r3, [pc, #660]	; (8007088 <UART_SetConfig+0x338>)
 8006df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006df8:	2b28      	cmp	r3, #40	; 0x28
 8006dfa:	d86d      	bhi.n	8006ed8 <UART_SetConfig+0x188>
 8006dfc:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <UART_SetConfig+0xb4>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006ea9 	.word	0x08006ea9
 8006e08:	08006ed9 	.word	0x08006ed9
 8006e0c:	08006ed9 	.word	0x08006ed9
 8006e10:	08006ed9 	.word	0x08006ed9
 8006e14:	08006ed9 	.word	0x08006ed9
 8006e18:	08006ed9 	.word	0x08006ed9
 8006e1c:	08006ed9 	.word	0x08006ed9
 8006e20:	08006ed9 	.word	0x08006ed9
 8006e24:	08006eb1 	.word	0x08006eb1
 8006e28:	08006ed9 	.word	0x08006ed9
 8006e2c:	08006ed9 	.word	0x08006ed9
 8006e30:	08006ed9 	.word	0x08006ed9
 8006e34:	08006ed9 	.word	0x08006ed9
 8006e38:	08006ed9 	.word	0x08006ed9
 8006e3c:	08006ed9 	.word	0x08006ed9
 8006e40:	08006ed9 	.word	0x08006ed9
 8006e44:	08006eb9 	.word	0x08006eb9
 8006e48:	08006ed9 	.word	0x08006ed9
 8006e4c:	08006ed9 	.word	0x08006ed9
 8006e50:	08006ed9 	.word	0x08006ed9
 8006e54:	08006ed9 	.word	0x08006ed9
 8006e58:	08006ed9 	.word	0x08006ed9
 8006e5c:	08006ed9 	.word	0x08006ed9
 8006e60:	08006ed9 	.word	0x08006ed9
 8006e64:	08006ec1 	.word	0x08006ec1
 8006e68:	08006ed9 	.word	0x08006ed9
 8006e6c:	08006ed9 	.word	0x08006ed9
 8006e70:	08006ed9 	.word	0x08006ed9
 8006e74:	08006ed9 	.word	0x08006ed9
 8006e78:	08006ed9 	.word	0x08006ed9
 8006e7c:	08006ed9 	.word	0x08006ed9
 8006e80:	08006ed9 	.word	0x08006ed9
 8006e84:	08006ec9 	.word	0x08006ec9
 8006e88:	08006ed9 	.word	0x08006ed9
 8006e8c:	08006ed9 	.word	0x08006ed9
 8006e90:	08006ed9 	.word	0x08006ed9
 8006e94:	08006ed9 	.word	0x08006ed9
 8006e98:	08006ed9 	.word	0x08006ed9
 8006e9c:	08006ed9 	.word	0x08006ed9
 8006ea0:	08006ed9 	.word	0x08006ed9
 8006ea4:	08006ed1 	.word	0x08006ed1
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eae:	e326      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb6:	e322      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006eb8:	2308      	movs	r3, #8
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ebe:	e31e      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006ec0:	2310      	movs	r3, #16
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec6:	e31a      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006ec8:	2320      	movs	r3, #32
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e316      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006ed0:	2340      	movs	r3, #64	; 0x40
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed6:	e312      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006ed8:	2380      	movs	r3, #128	; 0x80
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ede:	e30e      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a69      	ldr	r2, [pc, #420]	; (800708c <UART_SetConfig+0x33c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d130      	bne.n	8006f4c <UART_SetConfig+0x1fc>
 8006eea:	4b67      	ldr	r3, [pc, #412]	; (8007088 <UART_SetConfig+0x338>)
 8006eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	d826      	bhi.n	8006f44 <UART_SetConfig+0x1f4>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <UART_SetConfig+0x1ac>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f15 	.word	0x08006f15
 8006f00:	08006f1d 	.word	0x08006f1d
 8006f04:	08006f25 	.word	0x08006f25
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f35 	.word	0x08006f35
 8006f10:	08006f3d 	.word	0x08006f3d
 8006f14:	2300      	movs	r3, #0
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1a:	e2f0      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f22:	e2ec      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006f24:	2308      	movs	r3, #8
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2a:	e2e8      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e2e4      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006f34:	2320      	movs	r3, #32
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e2e0      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006f3c:	2340      	movs	r3, #64	; 0x40
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e2dc      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006f44:	2380      	movs	r3, #128	; 0x80
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e2d8      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a4f      	ldr	r2, [pc, #316]	; (8007090 <UART_SetConfig+0x340>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d130      	bne.n	8006fb8 <UART_SetConfig+0x268>
 8006f56:	4b4c      	ldr	r3, [pc, #304]	; (8007088 <UART_SetConfig+0x338>)
 8006f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	2b05      	cmp	r3, #5
 8006f60:	d826      	bhi.n	8006fb0 <UART_SetConfig+0x260>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <UART_SetConfig+0x218>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006f81 	.word	0x08006f81
 8006f6c:	08006f89 	.word	0x08006f89
 8006f70:	08006f91 	.word	0x08006f91
 8006f74:	08006f99 	.word	0x08006f99
 8006f78:	08006fa1 	.word	0x08006fa1
 8006f7c:	08006fa9 	.word	0x08006fa9
 8006f80:	2300      	movs	r3, #0
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f86:	e2ba      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8e:	e2b6      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006f90:	2308      	movs	r3, #8
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f96:	e2b2      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006f98:	2310      	movs	r3, #16
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9e:	e2ae      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006fa0:	2320      	movs	r3, #32
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e2aa      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006fa8:	2340      	movs	r3, #64	; 0x40
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fae:	e2a6      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006fb0:	2380      	movs	r3, #128	; 0x80
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e2a2      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a35      	ldr	r2, [pc, #212]	; (8007094 <UART_SetConfig+0x344>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d130      	bne.n	8007024 <UART_SetConfig+0x2d4>
 8006fc2:	4b31      	ldr	r3, [pc, #196]	; (8007088 <UART_SetConfig+0x338>)
 8006fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	2b05      	cmp	r3, #5
 8006fcc:	d826      	bhi.n	800701c <UART_SetConfig+0x2cc>
 8006fce:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <UART_SetConfig+0x284>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08006fed 	.word	0x08006fed
 8006fd8:	08006ff5 	.word	0x08006ff5
 8006fdc:	08006ffd 	.word	0x08006ffd
 8006fe0:	08007005 	.word	0x08007005
 8006fe4:	0800700d 	.word	0x0800700d
 8006fe8:	08007015 	.word	0x08007015
 8006fec:	2300      	movs	r3, #0
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff2:	e284      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffa:	e280      	b.n	80074fe <UART_SetConfig+0x7ae>
 8006ffc:	2308      	movs	r3, #8
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007002:	e27c      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007004:	2310      	movs	r3, #16
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700a:	e278      	b.n	80074fe <UART_SetConfig+0x7ae>
 800700c:	2320      	movs	r3, #32
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007012:	e274      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007014:	2340      	movs	r3, #64	; 0x40
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701a:	e270      	b.n	80074fe <UART_SetConfig+0x7ae>
 800701c:	2380      	movs	r3, #128	; 0x80
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e26c      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1b      	ldr	r2, [pc, #108]	; (8007098 <UART_SetConfig+0x348>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d142      	bne.n	80070b4 <UART_SetConfig+0x364>
 800702e:	4b16      	ldr	r3, [pc, #88]	; (8007088 <UART_SetConfig+0x338>)
 8007030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	2b05      	cmp	r3, #5
 8007038:	d838      	bhi.n	80070ac <UART_SetConfig+0x35c>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <UART_SetConfig+0x2f0>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007059 	.word	0x08007059
 8007044:	08007061 	.word	0x08007061
 8007048:	08007069 	.word	0x08007069
 800704c:	08007071 	.word	0x08007071
 8007050:	0800709d 	.word	0x0800709d
 8007054:	080070a5 	.word	0x080070a5
 8007058:	2300      	movs	r3, #0
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705e:	e24e      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007060:	2304      	movs	r3, #4
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007066:	e24a      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007068:	2308      	movs	r3, #8
 800706a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706e:	e246      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007070:	2310      	movs	r3, #16
 8007072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007076:	e242      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007078:	cfff69f3 	.word	0xcfff69f3
 800707c:	58000c00 	.word	0x58000c00
 8007080:	11fff4ff 	.word	0x11fff4ff
 8007084:	40011000 	.word	0x40011000
 8007088:	58024400 	.word	0x58024400
 800708c:	40004400 	.word	0x40004400
 8007090:	40004800 	.word	0x40004800
 8007094:	40004c00 	.word	0x40004c00
 8007098:	40005000 	.word	0x40005000
 800709c:	2320      	movs	r3, #32
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a2:	e22c      	b.n	80074fe <UART_SetConfig+0x7ae>
 80070a4:	2340      	movs	r3, #64	; 0x40
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070aa:	e228      	b.n	80074fe <UART_SetConfig+0x7ae>
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b2:	e224      	b.n	80074fe <UART_SetConfig+0x7ae>
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4ab1      	ldr	r2, [pc, #708]	; (8007380 <UART_SetConfig+0x630>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d176      	bne.n	80071ac <UART_SetConfig+0x45c>
 80070be:	4bb1      	ldr	r3, [pc, #708]	; (8007384 <UART_SetConfig+0x634>)
 80070c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070c6:	2b28      	cmp	r3, #40	; 0x28
 80070c8:	d86c      	bhi.n	80071a4 <UART_SetConfig+0x454>
 80070ca:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <UART_SetConfig+0x380>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	08007175 	.word	0x08007175
 80070d4:	080071a5 	.word	0x080071a5
 80070d8:	080071a5 	.word	0x080071a5
 80070dc:	080071a5 	.word	0x080071a5
 80070e0:	080071a5 	.word	0x080071a5
 80070e4:	080071a5 	.word	0x080071a5
 80070e8:	080071a5 	.word	0x080071a5
 80070ec:	080071a5 	.word	0x080071a5
 80070f0:	0800717d 	.word	0x0800717d
 80070f4:	080071a5 	.word	0x080071a5
 80070f8:	080071a5 	.word	0x080071a5
 80070fc:	080071a5 	.word	0x080071a5
 8007100:	080071a5 	.word	0x080071a5
 8007104:	080071a5 	.word	0x080071a5
 8007108:	080071a5 	.word	0x080071a5
 800710c:	080071a5 	.word	0x080071a5
 8007110:	08007185 	.word	0x08007185
 8007114:	080071a5 	.word	0x080071a5
 8007118:	080071a5 	.word	0x080071a5
 800711c:	080071a5 	.word	0x080071a5
 8007120:	080071a5 	.word	0x080071a5
 8007124:	080071a5 	.word	0x080071a5
 8007128:	080071a5 	.word	0x080071a5
 800712c:	080071a5 	.word	0x080071a5
 8007130:	0800718d 	.word	0x0800718d
 8007134:	080071a5 	.word	0x080071a5
 8007138:	080071a5 	.word	0x080071a5
 800713c:	080071a5 	.word	0x080071a5
 8007140:	080071a5 	.word	0x080071a5
 8007144:	080071a5 	.word	0x080071a5
 8007148:	080071a5 	.word	0x080071a5
 800714c:	080071a5 	.word	0x080071a5
 8007150:	08007195 	.word	0x08007195
 8007154:	080071a5 	.word	0x080071a5
 8007158:	080071a5 	.word	0x080071a5
 800715c:	080071a5 	.word	0x080071a5
 8007160:	080071a5 	.word	0x080071a5
 8007164:	080071a5 	.word	0x080071a5
 8007168:	080071a5 	.word	0x080071a5
 800716c:	080071a5 	.word	0x080071a5
 8007170:	0800719d 	.word	0x0800719d
 8007174:	2301      	movs	r3, #1
 8007176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717a:	e1c0      	b.n	80074fe <UART_SetConfig+0x7ae>
 800717c:	2304      	movs	r3, #4
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007182:	e1bc      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007184:	2308      	movs	r3, #8
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718a:	e1b8      	b.n	80074fe <UART_SetConfig+0x7ae>
 800718c:	2310      	movs	r3, #16
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007192:	e1b4      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007194:	2320      	movs	r3, #32
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719a:	e1b0      	b.n	80074fe <UART_SetConfig+0x7ae>
 800719c:	2340      	movs	r3, #64	; 0x40
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a2:	e1ac      	b.n	80074fe <UART_SetConfig+0x7ae>
 80071a4:	2380      	movs	r3, #128	; 0x80
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071aa:	e1a8      	b.n	80074fe <UART_SetConfig+0x7ae>
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a75      	ldr	r2, [pc, #468]	; (8007388 <UART_SetConfig+0x638>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d130      	bne.n	8007218 <UART_SetConfig+0x4c8>
 80071b6:	4b73      	ldr	r3, [pc, #460]	; (8007384 <UART_SetConfig+0x634>)
 80071b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	2b05      	cmp	r3, #5
 80071c0:	d826      	bhi.n	8007210 <UART_SetConfig+0x4c0>
 80071c2:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <UART_SetConfig+0x478>)
 80071c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c8:	080071e1 	.word	0x080071e1
 80071cc:	080071e9 	.word	0x080071e9
 80071d0:	080071f1 	.word	0x080071f1
 80071d4:	080071f9 	.word	0x080071f9
 80071d8:	08007201 	.word	0x08007201
 80071dc:	08007209 	.word	0x08007209
 80071e0:	2300      	movs	r3, #0
 80071e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e6:	e18a      	b.n	80074fe <UART_SetConfig+0x7ae>
 80071e8:	2304      	movs	r3, #4
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ee:	e186      	b.n	80074fe <UART_SetConfig+0x7ae>
 80071f0:	2308      	movs	r3, #8
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f6:	e182      	b.n	80074fe <UART_SetConfig+0x7ae>
 80071f8:	2310      	movs	r3, #16
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fe:	e17e      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007200:	2320      	movs	r3, #32
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007206:	e17a      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007208:	2340      	movs	r3, #64	; 0x40
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720e:	e176      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007210:	2380      	movs	r3, #128	; 0x80
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007216:	e172      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a5b      	ldr	r2, [pc, #364]	; (800738c <UART_SetConfig+0x63c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d130      	bne.n	8007284 <UART_SetConfig+0x534>
 8007222:	4b58      	ldr	r3, [pc, #352]	; (8007384 <UART_SetConfig+0x634>)
 8007224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	2b05      	cmp	r3, #5
 800722c:	d826      	bhi.n	800727c <UART_SetConfig+0x52c>
 800722e:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <UART_SetConfig+0x4e4>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	0800724d 	.word	0x0800724d
 8007238:	08007255 	.word	0x08007255
 800723c:	0800725d 	.word	0x0800725d
 8007240:	08007265 	.word	0x08007265
 8007244:	0800726d 	.word	0x0800726d
 8007248:	08007275 	.word	0x08007275
 800724c:	2300      	movs	r3, #0
 800724e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007252:	e154      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007254:	2304      	movs	r3, #4
 8007256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725a:	e150      	b.n	80074fe <UART_SetConfig+0x7ae>
 800725c:	2308      	movs	r3, #8
 800725e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007262:	e14c      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007264:	2310      	movs	r3, #16
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726a:	e148      	b.n	80074fe <UART_SetConfig+0x7ae>
 800726c:	2320      	movs	r3, #32
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007272:	e144      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007274:	2340      	movs	r3, #64	; 0x40
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727a:	e140      	b.n	80074fe <UART_SetConfig+0x7ae>
 800727c:	2380      	movs	r3, #128	; 0x80
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007282:	e13c      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a41      	ldr	r2, [pc, #260]	; (8007390 <UART_SetConfig+0x640>)
 800728a:	4293      	cmp	r3, r2
 800728c:	f040 8082 	bne.w	8007394 <UART_SetConfig+0x644>
 8007290:	4b3c      	ldr	r3, [pc, #240]	; (8007384 <UART_SetConfig+0x634>)
 8007292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007294:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007298:	2b28      	cmp	r3, #40	; 0x28
 800729a:	d86d      	bhi.n	8007378 <UART_SetConfig+0x628>
 800729c:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <UART_SetConfig+0x554>)
 800729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a2:	bf00      	nop
 80072a4:	08007349 	.word	0x08007349
 80072a8:	08007379 	.word	0x08007379
 80072ac:	08007379 	.word	0x08007379
 80072b0:	08007379 	.word	0x08007379
 80072b4:	08007379 	.word	0x08007379
 80072b8:	08007379 	.word	0x08007379
 80072bc:	08007379 	.word	0x08007379
 80072c0:	08007379 	.word	0x08007379
 80072c4:	08007351 	.word	0x08007351
 80072c8:	08007379 	.word	0x08007379
 80072cc:	08007379 	.word	0x08007379
 80072d0:	08007379 	.word	0x08007379
 80072d4:	08007379 	.word	0x08007379
 80072d8:	08007379 	.word	0x08007379
 80072dc:	08007379 	.word	0x08007379
 80072e0:	08007379 	.word	0x08007379
 80072e4:	08007359 	.word	0x08007359
 80072e8:	08007379 	.word	0x08007379
 80072ec:	08007379 	.word	0x08007379
 80072f0:	08007379 	.word	0x08007379
 80072f4:	08007379 	.word	0x08007379
 80072f8:	08007379 	.word	0x08007379
 80072fc:	08007379 	.word	0x08007379
 8007300:	08007379 	.word	0x08007379
 8007304:	08007361 	.word	0x08007361
 8007308:	08007379 	.word	0x08007379
 800730c:	08007379 	.word	0x08007379
 8007310:	08007379 	.word	0x08007379
 8007314:	08007379 	.word	0x08007379
 8007318:	08007379 	.word	0x08007379
 800731c:	08007379 	.word	0x08007379
 8007320:	08007379 	.word	0x08007379
 8007324:	08007369 	.word	0x08007369
 8007328:	08007379 	.word	0x08007379
 800732c:	08007379 	.word	0x08007379
 8007330:	08007379 	.word	0x08007379
 8007334:	08007379 	.word	0x08007379
 8007338:	08007379 	.word	0x08007379
 800733c:	08007379 	.word	0x08007379
 8007340:	08007379 	.word	0x08007379
 8007344:	08007371 	.word	0x08007371
 8007348:	2301      	movs	r3, #1
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734e:	e0d6      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007350:	2304      	movs	r3, #4
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007356:	e0d2      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007358:	2308      	movs	r3, #8
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800735e:	e0ce      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007360:	2310      	movs	r3, #16
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007366:	e0ca      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007368:	2320      	movs	r3, #32
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800736e:	e0c6      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007370:	2340      	movs	r3, #64	; 0x40
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007376:	e0c2      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007378:	2380      	movs	r3, #128	; 0x80
 800737a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800737e:	e0be      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007380:	40011400 	.word	0x40011400
 8007384:	58024400 	.word	0x58024400
 8007388:	40007800 	.word	0x40007800
 800738c:	40007c00 	.word	0x40007c00
 8007390:	40011800 	.word	0x40011800
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4aad      	ldr	r2, [pc, #692]	; (8007650 <UART_SetConfig+0x900>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d176      	bne.n	800748c <UART_SetConfig+0x73c>
 800739e:	4bad      	ldr	r3, [pc, #692]	; (8007654 <UART_SetConfig+0x904>)
 80073a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073a6:	2b28      	cmp	r3, #40	; 0x28
 80073a8:	d86c      	bhi.n	8007484 <UART_SetConfig+0x734>
 80073aa:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <UART_SetConfig+0x660>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	08007455 	.word	0x08007455
 80073b4:	08007485 	.word	0x08007485
 80073b8:	08007485 	.word	0x08007485
 80073bc:	08007485 	.word	0x08007485
 80073c0:	08007485 	.word	0x08007485
 80073c4:	08007485 	.word	0x08007485
 80073c8:	08007485 	.word	0x08007485
 80073cc:	08007485 	.word	0x08007485
 80073d0:	0800745d 	.word	0x0800745d
 80073d4:	08007485 	.word	0x08007485
 80073d8:	08007485 	.word	0x08007485
 80073dc:	08007485 	.word	0x08007485
 80073e0:	08007485 	.word	0x08007485
 80073e4:	08007485 	.word	0x08007485
 80073e8:	08007485 	.word	0x08007485
 80073ec:	08007485 	.word	0x08007485
 80073f0:	08007465 	.word	0x08007465
 80073f4:	08007485 	.word	0x08007485
 80073f8:	08007485 	.word	0x08007485
 80073fc:	08007485 	.word	0x08007485
 8007400:	08007485 	.word	0x08007485
 8007404:	08007485 	.word	0x08007485
 8007408:	08007485 	.word	0x08007485
 800740c:	08007485 	.word	0x08007485
 8007410:	0800746d 	.word	0x0800746d
 8007414:	08007485 	.word	0x08007485
 8007418:	08007485 	.word	0x08007485
 800741c:	08007485 	.word	0x08007485
 8007420:	08007485 	.word	0x08007485
 8007424:	08007485 	.word	0x08007485
 8007428:	08007485 	.word	0x08007485
 800742c:	08007485 	.word	0x08007485
 8007430:	08007475 	.word	0x08007475
 8007434:	08007485 	.word	0x08007485
 8007438:	08007485 	.word	0x08007485
 800743c:	08007485 	.word	0x08007485
 8007440:	08007485 	.word	0x08007485
 8007444:	08007485 	.word	0x08007485
 8007448:	08007485 	.word	0x08007485
 800744c:	08007485 	.word	0x08007485
 8007450:	0800747d 	.word	0x0800747d
 8007454:	2301      	movs	r3, #1
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745a:	e050      	b.n	80074fe <UART_SetConfig+0x7ae>
 800745c:	2304      	movs	r3, #4
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007462:	e04c      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007464:	2308      	movs	r3, #8
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746a:	e048      	b.n	80074fe <UART_SetConfig+0x7ae>
 800746c:	2310      	movs	r3, #16
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007472:	e044      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007474:	2320      	movs	r3, #32
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747a:	e040      	b.n	80074fe <UART_SetConfig+0x7ae>
 800747c:	2340      	movs	r3, #64	; 0x40
 800747e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007482:	e03c      	b.n	80074fe <UART_SetConfig+0x7ae>
 8007484:	2380      	movs	r3, #128	; 0x80
 8007486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748a:	e038      	b.n	80074fe <UART_SetConfig+0x7ae>
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a71      	ldr	r2, [pc, #452]	; (8007658 <UART_SetConfig+0x908>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d130      	bne.n	80074f8 <UART_SetConfig+0x7a8>
 8007496:	4b6f      	ldr	r3, [pc, #444]	; (8007654 <UART_SetConfig+0x904>)
 8007498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	2b05      	cmp	r3, #5
 80074a0:	d826      	bhi.n	80074f0 <UART_SetConfig+0x7a0>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <UART_SetConfig+0x758>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074c1 	.word	0x080074c1
 80074ac:	080074c9 	.word	0x080074c9
 80074b0:	080074d1 	.word	0x080074d1
 80074b4:	080074d9 	.word	0x080074d9
 80074b8:	080074e1 	.word	0x080074e1
 80074bc:	080074e9 	.word	0x080074e9
 80074c0:	2302      	movs	r3, #2
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c6:	e01a      	b.n	80074fe <UART_SetConfig+0x7ae>
 80074c8:	2304      	movs	r3, #4
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ce:	e016      	b.n	80074fe <UART_SetConfig+0x7ae>
 80074d0:	2308      	movs	r3, #8
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d6:	e012      	b.n	80074fe <UART_SetConfig+0x7ae>
 80074d8:	2310      	movs	r3, #16
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074de:	e00e      	b.n	80074fe <UART_SetConfig+0x7ae>
 80074e0:	2320      	movs	r3, #32
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e6:	e00a      	b.n	80074fe <UART_SetConfig+0x7ae>
 80074e8:	2340      	movs	r3, #64	; 0x40
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ee:	e006      	b.n	80074fe <UART_SetConfig+0x7ae>
 80074f0:	2380      	movs	r3, #128	; 0x80
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074f6:	e002      	b.n	80074fe <UART_SetConfig+0x7ae>
 80074f8:	2380      	movs	r3, #128	; 0x80
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a55      	ldr	r2, [pc, #340]	; (8007658 <UART_SetConfig+0x908>)
 8007504:	4293      	cmp	r3, r2
 8007506:	f040 80f8 	bne.w	80076fa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800750a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800750e:	2b20      	cmp	r3, #32
 8007510:	dc46      	bgt.n	80075a0 <UART_SetConfig+0x850>
 8007512:	2b02      	cmp	r3, #2
 8007514:	db75      	blt.n	8007602 <UART_SetConfig+0x8b2>
 8007516:	3b02      	subs	r3, #2
 8007518:	2b1e      	cmp	r3, #30
 800751a:	d872      	bhi.n	8007602 <UART_SetConfig+0x8b2>
 800751c:	a201      	add	r2, pc, #4	; (adr r2, 8007524 <UART_SetConfig+0x7d4>)
 800751e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007522:	bf00      	nop
 8007524:	080075a7 	.word	0x080075a7
 8007528:	08007603 	.word	0x08007603
 800752c:	080075af 	.word	0x080075af
 8007530:	08007603 	.word	0x08007603
 8007534:	08007603 	.word	0x08007603
 8007538:	08007603 	.word	0x08007603
 800753c:	080075bf 	.word	0x080075bf
 8007540:	08007603 	.word	0x08007603
 8007544:	08007603 	.word	0x08007603
 8007548:	08007603 	.word	0x08007603
 800754c:	08007603 	.word	0x08007603
 8007550:	08007603 	.word	0x08007603
 8007554:	08007603 	.word	0x08007603
 8007558:	08007603 	.word	0x08007603
 800755c:	080075cf 	.word	0x080075cf
 8007560:	08007603 	.word	0x08007603
 8007564:	08007603 	.word	0x08007603
 8007568:	08007603 	.word	0x08007603
 800756c:	08007603 	.word	0x08007603
 8007570:	08007603 	.word	0x08007603
 8007574:	08007603 	.word	0x08007603
 8007578:	08007603 	.word	0x08007603
 800757c:	08007603 	.word	0x08007603
 8007580:	08007603 	.word	0x08007603
 8007584:	08007603 	.word	0x08007603
 8007588:	08007603 	.word	0x08007603
 800758c:	08007603 	.word	0x08007603
 8007590:	08007603 	.word	0x08007603
 8007594:	08007603 	.word	0x08007603
 8007598:	08007603 	.word	0x08007603
 800759c:	080075f5 	.word	0x080075f5
 80075a0:	2b40      	cmp	r3, #64	; 0x40
 80075a2:	d02a      	beq.n	80075fa <UART_SetConfig+0x8aa>
 80075a4:	e02d      	b.n	8007602 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80075a6:	f7fe fa81 	bl	8005aac <HAL_RCCEx_GetD3PCLK1Freq>
 80075aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075ac:	e02f      	b.n	800760e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fa90 	bl	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075bc:	e027      	b.n	800760e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075be:	f107 0318 	add.w	r3, r7, #24
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe fbdc 	bl	8005d80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075cc:	e01f      	b.n	800760e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075ce:	4b21      	ldr	r3, [pc, #132]	; (8007654 <UART_SetConfig+0x904>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0320 	and.w	r3, r3, #32
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d009      	beq.n	80075ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075da:	4b1e      	ldr	r3, [pc, #120]	; (8007654 <UART_SetConfig+0x904>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	08db      	lsrs	r3, r3, #3
 80075e0:	f003 0303 	and.w	r3, r3, #3
 80075e4:	4a1d      	ldr	r2, [pc, #116]	; (800765c <UART_SetConfig+0x90c>)
 80075e6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075ec:	e00f      	b.n	800760e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80075ee:	4b1b      	ldr	r3, [pc, #108]	; (800765c <UART_SetConfig+0x90c>)
 80075f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075f2:	e00c      	b.n	800760e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075f4:	4b1a      	ldr	r3, [pc, #104]	; (8007660 <UART_SetConfig+0x910>)
 80075f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075f8:	e009      	b.n	800760e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007600:	e005      	b.n	800760e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800760c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800760e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 81ee 	beq.w	80079f2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	4a12      	ldr	r2, [pc, #72]	; (8007664 <UART_SetConfig+0x914>)
 800761c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007620:	461a      	mov	r2, r3
 8007622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007624:	fbb3 f3f2 	udiv	r3, r3, r2
 8007628:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	4613      	mov	r3, r2
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	4413      	add	r3, r2
 8007634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007636:	429a      	cmp	r2, r3
 8007638:	d305      	bcc.n	8007646 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007642:	429a      	cmp	r2, r3
 8007644:	d910      	bls.n	8007668 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800764c:	e1d1      	b.n	80079f2 <UART_SetConfig+0xca2>
 800764e:	bf00      	nop
 8007650:	40011c00 	.word	0x40011c00
 8007654:	58024400 	.word	0x58024400
 8007658:	58000c00 	.word	0x58000c00
 800765c:	03d09000 	.word	0x03d09000
 8007660:	003d0900 	.word	0x003d0900
 8007664:	08008a40 	.word	0x08008a40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766a:	2200      	movs	r2, #0
 800766c:	60bb      	str	r3, [r7, #8]
 800766e:	60fa      	str	r2, [r7, #12]
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	4ac0      	ldr	r2, [pc, #768]	; (8007978 <UART_SetConfig+0xc28>)
 8007676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800767a:	b29b      	uxth	r3, r3
 800767c:	2200      	movs	r2, #0
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	607a      	str	r2, [r7, #4]
 8007682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007686:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800768a:	f7f8 fe81 	bl	8000390 <__aeabi_uldivmod>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	4610      	mov	r0, r2
 8007694:	4619      	mov	r1, r3
 8007696:	f04f 0200 	mov.w	r2, #0
 800769a:	f04f 0300 	mov.w	r3, #0
 800769e:	020b      	lsls	r3, r1, #8
 80076a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076a4:	0202      	lsls	r2, r0, #8
 80076a6:	6979      	ldr	r1, [r7, #20]
 80076a8:	6849      	ldr	r1, [r1, #4]
 80076aa:	0849      	lsrs	r1, r1, #1
 80076ac:	2000      	movs	r0, #0
 80076ae:	460c      	mov	r4, r1
 80076b0:	4605      	mov	r5, r0
 80076b2:	eb12 0804 	adds.w	r8, r2, r4
 80076b6:	eb43 0905 	adc.w	r9, r3, r5
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	469a      	mov	sl, r3
 80076c2:	4693      	mov	fp, r2
 80076c4:	4652      	mov	r2, sl
 80076c6:	465b      	mov	r3, fp
 80076c8:	4640      	mov	r0, r8
 80076ca:	4649      	mov	r1, r9
 80076cc:	f7f8 fe60 	bl	8000390 <__aeabi_uldivmod>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4613      	mov	r3, r2
 80076d6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076de:	d308      	bcc.n	80076f2 <UART_SetConfig+0x9a2>
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076e6:	d204      	bcs.n	80076f2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ee:	60da      	str	r2, [r3, #12]
 80076f0:	e17f      	b.n	80079f2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80076f8:	e17b      	b.n	80079f2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007702:	f040 80bd 	bne.w	8007880 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007706:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800770a:	2b20      	cmp	r3, #32
 800770c:	dc48      	bgt.n	80077a0 <UART_SetConfig+0xa50>
 800770e:	2b00      	cmp	r3, #0
 8007710:	db7b      	blt.n	800780a <UART_SetConfig+0xaba>
 8007712:	2b20      	cmp	r3, #32
 8007714:	d879      	bhi.n	800780a <UART_SetConfig+0xaba>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <UART_SetConfig+0x9cc>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	080077a7 	.word	0x080077a7
 8007720:	080077af 	.word	0x080077af
 8007724:	0800780b 	.word	0x0800780b
 8007728:	0800780b 	.word	0x0800780b
 800772c:	080077b7 	.word	0x080077b7
 8007730:	0800780b 	.word	0x0800780b
 8007734:	0800780b 	.word	0x0800780b
 8007738:	0800780b 	.word	0x0800780b
 800773c:	080077c7 	.word	0x080077c7
 8007740:	0800780b 	.word	0x0800780b
 8007744:	0800780b 	.word	0x0800780b
 8007748:	0800780b 	.word	0x0800780b
 800774c:	0800780b 	.word	0x0800780b
 8007750:	0800780b 	.word	0x0800780b
 8007754:	0800780b 	.word	0x0800780b
 8007758:	0800780b 	.word	0x0800780b
 800775c:	080077d7 	.word	0x080077d7
 8007760:	0800780b 	.word	0x0800780b
 8007764:	0800780b 	.word	0x0800780b
 8007768:	0800780b 	.word	0x0800780b
 800776c:	0800780b 	.word	0x0800780b
 8007770:	0800780b 	.word	0x0800780b
 8007774:	0800780b 	.word	0x0800780b
 8007778:	0800780b 	.word	0x0800780b
 800777c:	0800780b 	.word	0x0800780b
 8007780:	0800780b 	.word	0x0800780b
 8007784:	0800780b 	.word	0x0800780b
 8007788:	0800780b 	.word	0x0800780b
 800778c:	0800780b 	.word	0x0800780b
 8007790:	0800780b 	.word	0x0800780b
 8007794:	0800780b 	.word	0x0800780b
 8007798:	0800780b 	.word	0x0800780b
 800779c:	080077fd 	.word	0x080077fd
 80077a0:	2b40      	cmp	r3, #64	; 0x40
 80077a2:	d02e      	beq.n	8007802 <UART_SetConfig+0xab2>
 80077a4:	e031      	b.n	800780a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077a6:	f7fc fabf 	bl	8003d28 <HAL_RCC_GetPCLK1Freq>
 80077aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80077ac:	e033      	b.n	8007816 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077ae:	f7fc fad1 	bl	8003d54 <HAL_RCC_GetPCLK2Freq>
 80077b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80077b4:	e02f      	b.n	8007816 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe f98c 	bl	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077c4:	e027      	b.n	8007816 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077c6:	f107 0318 	add.w	r3, r7, #24
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe fad8 	bl	8005d80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077d4:	e01f      	b.n	8007816 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077d6:	4b69      	ldr	r3, [pc, #420]	; (800797c <UART_SetConfig+0xc2c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077e2:	4b66      	ldr	r3, [pc, #408]	; (800797c <UART_SetConfig+0xc2c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	08db      	lsrs	r3, r3, #3
 80077e8:	f003 0303 	and.w	r3, r3, #3
 80077ec:	4a64      	ldr	r2, [pc, #400]	; (8007980 <UART_SetConfig+0xc30>)
 80077ee:	fa22 f303 	lsr.w	r3, r2, r3
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077f4:	e00f      	b.n	8007816 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80077f6:	4b62      	ldr	r3, [pc, #392]	; (8007980 <UART_SetConfig+0xc30>)
 80077f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077fa:	e00c      	b.n	8007816 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077fc:	4b61      	ldr	r3, [pc, #388]	; (8007984 <UART_SetConfig+0xc34>)
 80077fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007800:	e009      	b.n	8007816 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007808:	e005      	b.n	8007816 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007814:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80ea 	beq.w	80079f2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	4a55      	ldr	r2, [pc, #340]	; (8007978 <UART_SetConfig+0xc28>)
 8007824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007828:	461a      	mov	r2, r3
 800782a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800782c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007830:	005a      	lsls	r2, r3, #1
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	085b      	lsrs	r3, r3, #1
 8007838:	441a      	add	r2, r3
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007842:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	2b0f      	cmp	r3, #15
 8007848:	d916      	bls.n	8007878 <UART_SetConfig+0xb28>
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007850:	d212      	bcs.n	8007878 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	b29b      	uxth	r3, r3
 8007856:	f023 030f 	bic.w	r3, r3, #15
 800785a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	085b      	lsrs	r3, r3, #1
 8007860:	b29b      	uxth	r3, r3
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	b29a      	uxth	r2, r3
 8007868:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800786a:	4313      	orrs	r3, r2
 800786c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007874:	60da      	str	r2, [r3, #12]
 8007876:	e0bc      	b.n	80079f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800787e:	e0b8      	b.n	80079f2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007880:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007884:	2b20      	cmp	r3, #32
 8007886:	dc4b      	bgt.n	8007920 <UART_SetConfig+0xbd0>
 8007888:	2b00      	cmp	r3, #0
 800788a:	f2c0 8087 	blt.w	800799c <UART_SetConfig+0xc4c>
 800788e:	2b20      	cmp	r3, #32
 8007890:	f200 8084 	bhi.w	800799c <UART_SetConfig+0xc4c>
 8007894:	a201      	add	r2, pc, #4	; (adr r2, 800789c <UART_SetConfig+0xb4c>)
 8007896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789a:	bf00      	nop
 800789c:	08007927 	.word	0x08007927
 80078a0:	0800792f 	.word	0x0800792f
 80078a4:	0800799d 	.word	0x0800799d
 80078a8:	0800799d 	.word	0x0800799d
 80078ac:	08007937 	.word	0x08007937
 80078b0:	0800799d 	.word	0x0800799d
 80078b4:	0800799d 	.word	0x0800799d
 80078b8:	0800799d 	.word	0x0800799d
 80078bc:	08007947 	.word	0x08007947
 80078c0:	0800799d 	.word	0x0800799d
 80078c4:	0800799d 	.word	0x0800799d
 80078c8:	0800799d 	.word	0x0800799d
 80078cc:	0800799d 	.word	0x0800799d
 80078d0:	0800799d 	.word	0x0800799d
 80078d4:	0800799d 	.word	0x0800799d
 80078d8:	0800799d 	.word	0x0800799d
 80078dc:	08007957 	.word	0x08007957
 80078e0:	0800799d 	.word	0x0800799d
 80078e4:	0800799d 	.word	0x0800799d
 80078e8:	0800799d 	.word	0x0800799d
 80078ec:	0800799d 	.word	0x0800799d
 80078f0:	0800799d 	.word	0x0800799d
 80078f4:	0800799d 	.word	0x0800799d
 80078f8:	0800799d 	.word	0x0800799d
 80078fc:	0800799d 	.word	0x0800799d
 8007900:	0800799d 	.word	0x0800799d
 8007904:	0800799d 	.word	0x0800799d
 8007908:	0800799d 	.word	0x0800799d
 800790c:	0800799d 	.word	0x0800799d
 8007910:	0800799d 	.word	0x0800799d
 8007914:	0800799d 	.word	0x0800799d
 8007918:	0800799d 	.word	0x0800799d
 800791c:	0800798f 	.word	0x0800798f
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	d037      	beq.n	8007994 <UART_SetConfig+0xc44>
 8007924:	e03a      	b.n	800799c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007926:	f7fc f9ff 	bl	8003d28 <HAL_RCC_GetPCLK1Freq>
 800792a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800792c:	e03c      	b.n	80079a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800792e:	f7fc fa11 	bl	8003d54 <HAL_RCC_GetPCLK2Freq>
 8007932:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007934:	e038      	b.n	80079a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe f8cc 	bl	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007944:	e030      	b.n	80079a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007946:	f107 0318 	add.w	r3, r7, #24
 800794a:	4618      	mov	r0, r3
 800794c:	f7fe fa18 	bl	8005d80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007954:	e028      	b.n	80079a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007956:	4b09      	ldr	r3, [pc, #36]	; (800797c <UART_SetConfig+0xc2c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	d012      	beq.n	8007988 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007962:	4b06      	ldr	r3, [pc, #24]	; (800797c <UART_SetConfig+0xc2c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	08db      	lsrs	r3, r3, #3
 8007968:	f003 0303 	and.w	r3, r3, #3
 800796c:	4a04      	ldr	r2, [pc, #16]	; (8007980 <UART_SetConfig+0xc30>)
 800796e:	fa22 f303 	lsr.w	r3, r2, r3
 8007972:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007974:	e018      	b.n	80079a8 <UART_SetConfig+0xc58>
 8007976:	bf00      	nop
 8007978:	08008a40 	.word	0x08008a40
 800797c:	58024400 	.word	0x58024400
 8007980:	03d09000 	.word	0x03d09000
 8007984:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007988:	4b24      	ldr	r3, [pc, #144]	; (8007a1c <UART_SetConfig+0xccc>)
 800798a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800798c:	e00c      	b.n	80079a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800798e:	4b24      	ldr	r3, [pc, #144]	; (8007a20 <UART_SetConfig+0xcd0>)
 8007990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007992:	e009      	b.n	80079a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800799a:	e005      	b.n	80079a8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80079a6:	bf00      	nop
    }

    if (pclk != 0U)
 80079a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d021      	beq.n	80079f2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	4a1c      	ldr	r2, [pc, #112]	; (8007a24 <UART_SetConfig+0xcd4>)
 80079b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	085b      	lsrs	r3, r3, #1
 80079c6:	441a      	add	r2, r3
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d4:	2b0f      	cmp	r3, #15
 80079d6:	d909      	bls.n	80079ec <UART_SetConfig+0xc9c>
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079de:	d205      	bcs.n	80079ec <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60da      	str	r2, [r3, #12]
 80079ea:	e002      	b.n	80079f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2200      	movs	r2, #0
 8007a06:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007a0e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3748      	adds	r7, #72	; 0x48
 8007a16:	46bd      	mov	sp, r7
 8007a18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a1c:	03d09000 	.word	0x03d09000
 8007a20:	003d0900 	.word	0x003d0900
 8007a24:	08008a40 	.word	0x08008a40

08007a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00a      	beq.n	8007a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9a:	f003 0308 	and.w	r3, r3, #8
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abc:	f003 0310 	and.w	r3, r3, #16
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00a      	beq.n	8007ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00a      	beq.n	8007afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	430a      	orrs	r2, r1
 8007afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01a      	beq.n	8007b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b26:	d10a      	bne.n	8007b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00a      	beq.n	8007b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	605a      	str	r2, [r3, #4]
  }
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b098      	sub	sp, #96	; 0x60
 8007b70:	af02      	add	r7, sp, #8
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b7c:	f7f9 fc34 	bl	80013e8 <HAL_GetTick>
 8007b80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d12f      	bne.n	8007bf0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f88e 	bl	8007cc0 <UART_WaitOnFlagUntilTimeout>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d022      	beq.n	8007bf0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8007bca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e6      	bne.n	8007baa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e063      	b.n	8007cb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0304 	and.w	r3, r3, #4
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d149      	bne.n	8007c92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c06:	2200      	movs	r2, #0
 8007c08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f857 	bl	8007cc0 <UART_WaitOnFlagUntilTimeout>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d03c      	beq.n	8007c92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	623b      	str	r3, [r7, #32]
   return(result);
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c36:	633b      	str	r3, [r7, #48]	; 0x30
 8007c38:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e6      	bne.n	8007c18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3308      	adds	r3, #8
 8007c50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f023 0301 	bic.w	r3, r3, #1
 8007c60:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3308      	adds	r3, #8
 8007c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c6a:	61fa      	str	r2, [r7, #28]
 8007c6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	69b9      	ldr	r1, [r7, #24]
 8007c70:	69fa      	ldr	r2, [r7, #28]
 8007c72:	e841 2300 	strex	r3, r2, [r1]
 8007c76:	617b      	str	r3, [r7, #20]
   return(result);
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1e5      	bne.n	8007c4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2220      	movs	r2, #32
 8007c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e012      	b.n	8007cb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2220      	movs	r2, #32
 8007c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3758      	adds	r7, #88	; 0x58
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	603b      	str	r3, [r7, #0]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cd0:	e049      	b.n	8007d66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cd8:	d045      	beq.n	8007d66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cda:	f7f9 fb85 	bl	80013e8 <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d302      	bcc.n	8007cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e048      	b.n	8007d86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0304 	and.w	r3, r3, #4
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d031      	beq.n	8007d66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	f003 0308 	and.w	r3, r3, #8
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d110      	bne.n	8007d32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2208      	movs	r2, #8
 8007d16:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 f839 	bl	8007d90 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2208      	movs	r2, #8
 8007d22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e029      	b.n	8007d86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d40:	d111      	bne.n	8007d66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 f81f 	bl	8007d90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e00f      	b.n	8007d86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69da      	ldr	r2, [r3, #28]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	bf0c      	ite	eq
 8007d76:	2301      	moveq	r3, #1
 8007d78:	2300      	movne	r3, #0
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d0a6      	beq.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b095      	sub	sp, #84	; 0x54
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db6:	643b      	str	r3, [r7, #64]	; 0x40
 8007db8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e6      	bne.n	8007d98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	4b1e      	ldr	r3, [pc, #120]	; (8007e58 <UART_EndRxTransfer+0xc8>)
 8007dde:	4013      	ands	r3, r2
 8007de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e5      	bne.n	8007dca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d118      	bne.n	8007e38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f023 0310 	bic.w	r3, r3, #16
 8007e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e24:	61bb      	str	r3, [r7, #24]
 8007e26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6979      	ldr	r1, [r7, #20]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	613b      	str	r3, [r7, #16]
   return(result);
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e6      	bne.n	8007e06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007e4c:	bf00      	nop
 8007e4e:	3754      	adds	r7, #84	; 0x54
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	effffffe 	.word	0xeffffffe

08007e5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d101      	bne.n	8007e72 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	e027      	b.n	8007ec2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2224      	movs	r2, #36	; 0x24
 8007e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0201 	bic.w	r2, r2, #1
 8007e98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ea0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b084      	sub	sp, #16
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e02d      	b.n	8007f42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2224      	movs	r2, #36	; 0x24
 8007ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0201 	bic.w	r2, r2, #1
 8007f0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f850 	bl	8007fc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d101      	bne.n	8007f62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e02d      	b.n	8007fbe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2224      	movs	r2, #36	; 0x24
 8007f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0201 	bic.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f812 	bl	8007fc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
	...

08007fc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d108      	bne.n	8007fea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fe8:	e031      	b.n	800804e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fea:	2310      	movs	r3, #16
 8007fec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fee:	2310      	movs	r3, #16
 8007ff0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	0e5b      	lsrs	r3, r3, #25
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	f003 0307 	and.w	r3, r3, #7
 8008000:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	0f5b      	lsrs	r3, r3, #29
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008012:	7bbb      	ldrb	r3, [r7, #14]
 8008014:	7b3a      	ldrb	r2, [r7, #12]
 8008016:	4911      	ldr	r1, [pc, #68]	; (800805c <UARTEx_SetNbDataToProcess+0x94>)
 8008018:	5c8a      	ldrb	r2, [r1, r2]
 800801a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800801e:	7b3a      	ldrb	r2, [r7, #12]
 8008020:	490f      	ldr	r1, [pc, #60]	; (8008060 <UARTEx_SetNbDataToProcess+0x98>)
 8008022:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008024:	fb93 f3f2 	sdiv	r3, r3, r2
 8008028:	b29a      	uxth	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	7b7a      	ldrb	r2, [r7, #13]
 8008034:	4909      	ldr	r1, [pc, #36]	; (800805c <UARTEx_SetNbDataToProcess+0x94>)
 8008036:	5c8a      	ldrb	r2, [r1, r2]
 8008038:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800803c:	7b7a      	ldrb	r2, [r7, #13]
 800803e:	4908      	ldr	r1, [pc, #32]	; (8008060 <UARTEx_SetNbDataToProcess+0x98>)
 8008040:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008042:	fb93 f3f2 	sdiv	r3, r3, r2
 8008046:	b29a      	uxth	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800804e:	bf00      	nop
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	08008a58 	.word	0x08008a58
 8008060:	08008a60 	.word	0x08008a60

08008064 <siprintf>:
 8008064:	b40e      	push	{r1, r2, r3}
 8008066:	b500      	push	{lr}
 8008068:	b09c      	sub	sp, #112	; 0x70
 800806a:	ab1d      	add	r3, sp, #116	; 0x74
 800806c:	9002      	str	r0, [sp, #8]
 800806e:	9006      	str	r0, [sp, #24]
 8008070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008074:	4809      	ldr	r0, [pc, #36]	; (800809c <siprintf+0x38>)
 8008076:	9107      	str	r1, [sp, #28]
 8008078:	9104      	str	r1, [sp, #16]
 800807a:	4909      	ldr	r1, [pc, #36]	; (80080a0 <siprintf+0x3c>)
 800807c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008080:	9105      	str	r1, [sp, #20]
 8008082:	6800      	ldr	r0, [r0, #0]
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	a902      	add	r1, sp, #8
 8008088:	f000 f992 	bl	80083b0 <_svfiprintf_r>
 800808c:	9b02      	ldr	r3, [sp, #8]
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	b01c      	add	sp, #112	; 0x70
 8008094:	f85d eb04 	ldr.w	lr, [sp], #4
 8008098:	b003      	add	sp, #12
 800809a:	4770      	bx	lr
 800809c:	2400005c 	.word	0x2400005c
 80080a0:	ffff0208 	.word	0xffff0208

080080a4 <memset>:
 80080a4:	4402      	add	r2, r0
 80080a6:	4603      	mov	r3, r0
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d100      	bne.n	80080ae <memset+0xa>
 80080ac:	4770      	bx	lr
 80080ae:	f803 1b01 	strb.w	r1, [r3], #1
 80080b2:	e7f9      	b.n	80080a8 <memset+0x4>

080080b4 <__errno>:
 80080b4:	4b01      	ldr	r3, [pc, #4]	; (80080bc <__errno+0x8>)
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	2400005c 	.word	0x2400005c

080080c0 <__libc_init_array>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	4d0d      	ldr	r5, [pc, #52]	; (80080f8 <__libc_init_array+0x38>)
 80080c4:	4c0d      	ldr	r4, [pc, #52]	; (80080fc <__libc_init_array+0x3c>)
 80080c6:	1b64      	subs	r4, r4, r5
 80080c8:	10a4      	asrs	r4, r4, #2
 80080ca:	2600      	movs	r6, #0
 80080cc:	42a6      	cmp	r6, r4
 80080ce:	d109      	bne.n	80080e4 <__libc_init_array+0x24>
 80080d0:	4d0b      	ldr	r5, [pc, #44]	; (8008100 <__libc_init_array+0x40>)
 80080d2:	4c0c      	ldr	r4, [pc, #48]	; (8008104 <__libc_init_array+0x44>)
 80080d4:	f000 fc6a 	bl	80089ac <_init>
 80080d8:	1b64      	subs	r4, r4, r5
 80080da:	10a4      	asrs	r4, r4, #2
 80080dc:	2600      	movs	r6, #0
 80080de:	42a6      	cmp	r6, r4
 80080e0:	d105      	bne.n	80080ee <__libc_init_array+0x2e>
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e8:	4798      	blx	r3
 80080ea:	3601      	adds	r6, #1
 80080ec:	e7ee      	b.n	80080cc <__libc_init_array+0xc>
 80080ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f2:	4798      	blx	r3
 80080f4:	3601      	adds	r6, #1
 80080f6:	e7f2      	b.n	80080de <__libc_init_array+0x1e>
 80080f8:	08008aa4 	.word	0x08008aa4
 80080fc:	08008aa4 	.word	0x08008aa4
 8008100:	08008aa4 	.word	0x08008aa4
 8008104:	08008aa8 	.word	0x08008aa8

08008108 <__retarget_lock_acquire_recursive>:
 8008108:	4770      	bx	lr

0800810a <__retarget_lock_release_recursive>:
 800810a:	4770      	bx	lr

0800810c <_free_r>:
 800810c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800810e:	2900      	cmp	r1, #0
 8008110:	d044      	beq.n	800819c <_free_r+0x90>
 8008112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008116:	9001      	str	r0, [sp, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	f1a1 0404 	sub.w	r4, r1, #4
 800811e:	bfb8      	it	lt
 8008120:	18e4      	addlt	r4, r4, r3
 8008122:	f000 f8df 	bl	80082e4 <__malloc_lock>
 8008126:	4a1e      	ldr	r2, [pc, #120]	; (80081a0 <_free_r+0x94>)
 8008128:	9801      	ldr	r0, [sp, #4]
 800812a:	6813      	ldr	r3, [r2, #0]
 800812c:	b933      	cbnz	r3, 800813c <_free_r+0x30>
 800812e:	6063      	str	r3, [r4, #4]
 8008130:	6014      	str	r4, [r2, #0]
 8008132:	b003      	add	sp, #12
 8008134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008138:	f000 b8da 	b.w	80082f0 <__malloc_unlock>
 800813c:	42a3      	cmp	r3, r4
 800813e:	d908      	bls.n	8008152 <_free_r+0x46>
 8008140:	6825      	ldr	r5, [r4, #0]
 8008142:	1961      	adds	r1, r4, r5
 8008144:	428b      	cmp	r3, r1
 8008146:	bf01      	itttt	eq
 8008148:	6819      	ldreq	r1, [r3, #0]
 800814a:	685b      	ldreq	r3, [r3, #4]
 800814c:	1949      	addeq	r1, r1, r5
 800814e:	6021      	streq	r1, [r4, #0]
 8008150:	e7ed      	b.n	800812e <_free_r+0x22>
 8008152:	461a      	mov	r2, r3
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	b10b      	cbz	r3, 800815c <_free_r+0x50>
 8008158:	42a3      	cmp	r3, r4
 800815a:	d9fa      	bls.n	8008152 <_free_r+0x46>
 800815c:	6811      	ldr	r1, [r2, #0]
 800815e:	1855      	adds	r5, r2, r1
 8008160:	42a5      	cmp	r5, r4
 8008162:	d10b      	bne.n	800817c <_free_r+0x70>
 8008164:	6824      	ldr	r4, [r4, #0]
 8008166:	4421      	add	r1, r4
 8008168:	1854      	adds	r4, r2, r1
 800816a:	42a3      	cmp	r3, r4
 800816c:	6011      	str	r1, [r2, #0]
 800816e:	d1e0      	bne.n	8008132 <_free_r+0x26>
 8008170:	681c      	ldr	r4, [r3, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	6053      	str	r3, [r2, #4]
 8008176:	440c      	add	r4, r1
 8008178:	6014      	str	r4, [r2, #0]
 800817a:	e7da      	b.n	8008132 <_free_r+0x26>
 800817c:	d902      	bls.n	8008184 <_free_r+0x78>
 800817e:	230c      	movs	r3, #12
 8008180:	6003      	str	r3, [r0, #0]
 8008182:	e7d6      	b.n	8008132 <_free_r+0x26>
 8008184:	6825      	ldr	r5, [r4, #0]
 8008186:	1961      	adds	r1, r4, r5
 8008188:	428b      	cmp	r3, r1
 800818a:	bf04      	itt	eq
 800818c:	6819      	ldreq	r1, [r3, #0]
 800818e:	685b      	ldreq	r3, [r3, #4]
 8008190:	6063      	str	r3, [r4, #4]
 8008192:	bf04      	itt	eq
 8008194:	1949      	addeq	r1, r1, r5
 8008196:	6021      	streq	r1, [r4, #0]
 8008198:	6054      	str	r4, [r2, #4]
 800819a:	e7ca      	b.n	8008132 <_free_r+0x26>
 800819c:	b003      	add	sp, #12
 800819e:	bd30      	pop	{r4, r5, pc}
 80081a0:	240310e0 	.word	0x240310e0

080081a4 <sbrk_aligned>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	4e0e      	ldr	r6, [pc, #56]	; (80081e0 <sbrk_aligned+0x3c>)
 80081a8:	460c      	mov	r4, r1
 80081aa:	6831      	ldr	r1, [r6, #0]
 80081ac:	4605      	mov	r5, r0
 80081ae:	b911      	cbnz	r1, 80081b6 <sbrk_aligned+0x12>
 80081b0:	f000 fba6 	bl	8008900 <_sbrk_r>
 80081b4:	6030      	str	r0, [r6, #0]
 80081b6:	4621      	mov	r1, r4
 80081b8:	4628      	mov	r0, r5
 80081ba:	f000 fba1 	bl	8008900 <_sbrk_r>
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	d00a      	beq.n	80081d8 <sbrk_aligned+0x34>
 80081c2:	1cc4      	adds	r4, r0, #3
 80081c4:	f024 0403 	bic.w	r4, r4, #3
 80081c8:	42a0      	cmp	r0, r4
 80081ca:	d007      	beq.n	80081dc <sbrk_aligned+0x38>
 80081cc:	1a21      	subs	r1, r4, r0
 80081ce:	4628      	mov	r0, r5
 80081d0:	f000 fb96 	bl	8008900 <_sbrk_r>
 80081d4:	3001      	adds	r0, #1
 80081d6:	d101      	bne.n	80081dc <sbrk_aligned+0x38>
 80081d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80081dc:	4620      	mov	r0, r4
 80081de:	bd70      	pop	{r4, r5, r6, pc}
 80081e0:	240310e4 	.word	0x240310e4

080081e4 <_malloc_r>:
 80081e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e8:	1ccd      	adds	r5, r1, #3
 80081ea:	f025 0503 	bic.w	r5, r5, #3
 80081ee:	3508      	adds	r5, #8
 80081f0:	2d0c      	cmp	r5, #12
 80081f2:	bf38      	it	cc
 80081f4:	250c      	movcc	r5, #12
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	4607      	mov	r7, r0
 80081fa:	db01      	blt.n	8008200 <_malloc_r+0x1c>
 80081fc:	42a9      	cmp	r1, r5
 80081fe:	d905      	bls.n	800820c <_malloc_r+0x28>
 8008200:	230c      	movs	r3, #12
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	2600      	movs	r6, #0
 8008206:	4630      	mov	r0, r6
 8008208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800820c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80082e0 <_malloc_r+0xfc>
 8008210:	f000 f868 	bl	80082e4 <__malloc_lock>
 8008214:	f8d8 3000 	ldr.w	r3, [r8]
 8008218:	461c      	mov	r4, r3
 800821a:	bb5c      	cbnz	r4, 8008274 <_malloc_r+0x90>
 800821c:	4629      	mov	r1, r5
 800821e:	4638      	mov	r0, r7
 8008220:	f7ff ffc0 	bl	80081a4 <sbrk_aligned>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	4604      	mov	r4, r0
 8008228:	d155      	bne.n	80082d6 <_malloc_r+0xf2>
 800822a:	f8d8 4000 	ldr.w	r4, [r8]
 800822e:	4626      	mov	r6, r4
 8008230:	2e00      	cmp	r6, #0
 8008232:	d145      	bne.n	80082c0 <_malloc_r+0xdc>
 8008234:	2c00      	cmp	r4, #0
 8008236:	d048      	beq.n	80082ca <_malloc_r+0xe6>
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	4631      	mov	r1, r6
 800823c:	4638      	mov	r0, r7
 800823e:	eb04 0903 	add.w	r9, r4, r3
 8008242:	f000 fb5d 	bl	8008900 <_sbrk_r>
 8008246:	4581      	cmp	r9, r0
 8008248:	d13f      	bne.n	80082ca <_malloc_r+0xe6>
 800824a:	6821      	ldr	r1, [r4, #0]
 800824c:	1a6d      	subs	r5, r5, r1
 800824e:	4629      	mov	r1, r5
 8008250:	4638      	mov	r0, r7
 8008252:	f7ff ffa7 	bl	80081a4 <sbrk_aligned>
 8008256:	3001      	adds	r0, #1
 8008258:	d037      	beq.n	80082ca <_malloc_r+0xe6>
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	442b      	add	r3, r5
 800825e:	6023      	str	r3, [r4, #0]
 8008260:	f8d8 3000 	ldr.w	r3, [r8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d038      	beq.n	80082da <_malloc_r+0xf6>
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	42a2      	cmp	r2, r4
 800826c:	d12b      	bne.n	80082c6 <_malloc_r+0xe2>
 800826e:	2200      	movs	r2, #0
 8008270:	605a      	str	r2, [r3, #4]
 8008272:	e00f      	b.n	8008294 <_malloc_r+0xb0>
 8008274:	6822      	ldr	r2, [r4, #0]
 8008276:	1b52      	subs	r2, r2, r5
 8008278:	d41f      	bmi.n	80082ba <_malloc_r+0xd6>
 800827a:	2a0b      	cmp	r2, #11
 800827c:	d917      	bls.n	80082ae <_malloc_r+0xca>
 800827e:	1961      	adds	r1, r4, r5
 8008280:	42a3      	cmp	r3, r4
 8008282:	6025      	str	r5, [r4, #0]
 8008284:	bf18      	it	ne
 8008286:	6059      	strne	r1, [r3, #4]
 8008288:	6863      	ldr	r3, [r4, #4]
 800828a:	bf08      	it	eq
 800828c:	f8c8 1000 	streq.w	r1, [r8]
 8008290:	5162      	str	r2, [r4, r5]
 8008292:	604b      	str	r3, [r1, #4]
 8008294:	4638      	mov	r0, r7
 8008296:	f104 060b 	add.w	r6, r4, #11
 800829a:	f000 f829 	bl	80082f0 <__malloc_unlock>
 800829e:	f026 0607 	bic.w	r6, r6, #7
 80082a2:	1d23      	adds	r3, r4, #4
 80082a4:	1af2      	subs	r2, r6, r3
 80082a6:	d0ae      	beq.n	8008206 <_malloc_r+0x22>
 80082a8:	1b9b      	subs	r3, r3, r6
 80082aa:	50a3      	str	r3, [r4, r2]
 80082ac:	e7ab      	b.n	8008206 <_malloc_r+0x22>
 80082ae:	42a3      	cmp	r3, r4
 80082b0:	6862      	ldr	r2, [r4, #4]
 80082b2:	d1dd      	bne.n	8008270 <_malloc_r+0x8c>
 80082b4:	f8c8 2000 	str.w	r2, [r8]
 80082b8:	e7ec      	b.n	8008294 <_malloc_r+0xb0>
 80082ba:	4623      	mov	r3, r4
 80082bc:	6864      	ldr	r4, [r4, #4]
 80082be:	e7ac      	b.n	800821a <_malloc_r+0x36>
 80082c0:	4634      	mov	r4, r6
 80082c2:	6876      	ldr	r6, [r6, #4]
 80082c4:	e7b4      	b.n	8008230 <_malloc_r+0x4c>
 80082c6:	4613      	mov	r3, r2
 80082c8:	e7cc      	b.n	8008264 <_malloc_r+0x80>
 80082ca:	230c      	movs	r3, #12
 80082cc:	603b      	str	r3, [r7, #0]
 80082ce:	4638      	mov	r0, r7
 80082d0:	f000 f80e 	bl	80082f0 <__malloc_unlock>
 80082d4:	e797      	b.n	8008206 <_malloc_r+0x22>
 80082d6:	6025      	str	r5, [r4, #0]
 80082d8:	e7dc      	b.n	8008294 <_malloc_r+0xb0>
 80082da:	605b      	str	r3, [r3, #4]
 80082dc:	deff      	udf	#255	; 0xff
 80082de:	bf00      	nop
 80082e0:	240310e0 	.word	0x240310e0

080082e4 <__malloc_lock>:
 80082e4:	4801      	ldr	r0, [pc, #4]	; (80082ec <__malloc_lock+0x8>)
 80082e6:	f7ff bf0f 	b.w	8008108 <__retarget_lock_acquire_recursive>
 80082ea:	bf00      	nop
 80082ec:	240310dc 	.word	0x240310dc

080082f0 <__malloc_unlock>:
 80082f0:	4801      	ldr	r0, [pc, #4]	; (80082f8 <__malloc_unlock+0x8>)
 80082f2:	f7ff bf0a 	b.w	800810a <__retarget_lock_release_recursive>
 80082f6:	bf00      	nop
 80082f8:	240310dc 	.word	0x240310dc

080082fc <__ssputs_r>:
 80082fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008300:	688e      	ldr	r6, [r1, #8]
 8008302:	461f      	mov	r7, r3
 8008304:	42be      	cmp	r6, r7
 8008306:	680b      	ldr	r3, [r1, #0]
 8008308:	4682      	mov	sl, r0
 800830a:	460c      	mov	r4, r1
 800830c:	4690      	mov	r8, r2
 800830e:	d82c      	bhi.n	800836a <__ssputs_r+0x6e>
 8008310:	898a      	ldrh	r2, [r1, #12]
 8008312:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008316:	d026      	beq.n	8008366 <__ssputs_r+0x6a>
 8008318:	6965      	ldr	r5, [r4, #20]
 800831a:	6909      	ldr	r1, [r1, #16]
 800831c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008320:	eba3 0901 	sub.w	r9, r3, r1
 8008324:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008328:	1c7b      	adds	r3, r7, #1
 800832a:	444b      	add	r3, r9
 800832c:	106d      	asrs	r5, r5, #1
 800832e:	429d      	cmp	r5, r3
 8008330:	bf38      	it	cc
 8008332:	461d      	movcc	r5, r3
 8008334:	0553      	lsls	r3, r2, #21
 8008336:	d527      	bpl.n	8008388 <__ssputs_r+0x8c>
 8008338:	4629      	mov	r1, r5
 800833a:	f7ff ff53 	bl	80081e4 <_malloc_r>
 800833e:	4606      	mov	r6, r0
 8008340:	b360      	cbz	r0, 800839c <__ssputs_r+0xa0>
 8008342:	6921      	ldr	r1, [r4, #16]
 8008344:	464a      	mov	r2, r9
 8008346:	f000 faeb 	bl	8008920 <memcpy>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008354:	81a3      	strh	r3, [r4, #12]
 8008356:	6126      	str	r6, [r4, #16]
 8008358:	6165      	str	r5, [r4, #20]
 800835a:	444e      	add	r6, r9
 800835c:	eba5 0509 	sub.w	r5, r5, r9
 8008360:	6026      	str	r6, [r4, #0]
 8008362:	60a5      	str	r5, [r4, #8]
 8008364:	463e      	mov	r6, r7
 8008366:	42be      	cmp	r6, r7
 8008368:	d900      	bls.n	800836c <__ssputs_r+0x70>
 800836a:	463e      	mov	r6, r7
 800836c:	6820      	ldr	r0, [r4, #0]
 800836e:	4632      	mov	r2, r6
 8008370:	4641      	mov	r1, r8
 8008372:	f000 faab 	bl	80088cc <memmove>
 8008376:	68a3      	ldr	r3, [r4, #8]
 8008378:	1b9b      	subs	r3, r3, r6
 800837a:	60a3      	str	r3, [r4, #8]
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	4433      	add	r3, r6
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	2000      	movs	r0, #0
 8008384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008388:	462a      	mov	r2, r5
 800838a:	f000 fad7 	bl	800893c <_realloc_r>
 800838e:	4606      	mov	r6, r0
 8008390:	2800      	cmp	r0, #0
 8008392:	d1e0      	bne.n	8008356 <__ssputs_r+0x5a>
 8008394:	6921      	ldr	r1, [r4, #16]
 8008396:	4650      	mov	r0, sl
 8008398:	f7ff feb8 	bl	800810c <_free_r>
 800839c:	230c      	movs	r3, #12
 800839e:	f8ca 3000 	str.w	r3, [sl]
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083ae:	e7e9      	b.n	8008384 <__ssputs_r+0x88>

080083b0 <_svfiprintf_r>:
 80083b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	4698      	mov	r8, r3
 80083b6:	898b      	ldrh	r3, [r1, #12]
 80083b8:	061b      	lsls	r3, r3, #24
 80083ba:	b09d      	sub	sp, #116	; 0x74
 80083bc:	4607      	mov	r7, r0
 80083be:	460d      	mov	r5, r1
 80083c0:	4614      	mov	r4, r2
 80083c2:	d50e      	bpl.n	80083e2 <_svfiprintf_r+0x32>
 80083c4:	690b      	ldr	r3, [r1, #16]
 80083c6:	b963      	cbnz	r3, 80083e2 <_svfiprintf_r+0x32>
 80083c8:	2140      	movs	r1, #64	; 0x40
 80083ca:	f7ff ff0b 	bl	80081e4 <_malloc_r>
 80083ce:	6028      	str	r0, [r5, #0]
 80083d0:	6128      	str	r0, [r5, #16]
 80083d2:	b920      	cbnz	r0, 80083de <_svfiprintf_r+0x2e>
 80083d4:	230c      	movs	r3, #12
 80083d6:	603b      	str	r3, [r7, #0]
 80083d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083dc:	e0d0      	b.n	8008580 <_svfiprintf_r+0x1d0>
 80083de:	2340      	movs	r3, #64	; 0x40
 80083e0:	616b      	str	r3, [r5, #20]
 80083e2:	2300      	movs	r3, #0
 80083e4:	9309      	str	r3, [sp, #36]	; 0x24
 80083e6:	2320      	movs	r3, #32
 80083e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80083f0:	2330      	movs	r3, #48	; 0x30
 80083f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008598 <_svfiprintf_r+0x1e8>
 80083f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083fa:	f04f 0901 	mov.w	r9, #1
 80083fe:	4623      	mov	r3, r4
 8008400:	469a      	mov	sl, r3
 8008402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008406:	b10a      	cbz	r2, 800840c <_svfiprintf_r+0x5c>
 8008408:	2a25      	cmp	r2, #37	; 0x25
 800840a:	d1f9      	bne.n	8008400 <_svfiprintf_r+0x50>
 800840c:	ebba 0b04 	subs.w	fp, sl, r4
 8008410:	d00b      	beq.n	800842a <_svfiprintf_r+0x7a>
 8008412:	465b      	mov	r3, fp
 8008414:	4622      	mov	r2, r4
 8008416:	4629      	mov	r1, r5
 8008418:	4638      	mov	r0, r7
 800841a:	f7ff ff6f 	bl	80082fc <__ssputs_r>
 800841e:	3001      	adds	r0, #1
 8008420:	f000 80a9 	beq.w	8008576 <_svfiprintf_r+0x1c6>
 8008424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008426:	445a      	add	r2, fp
 8008428:	9209      	str	r2, [sp, #36]	; 0x24
 800842a:	f89a 3000 	ldrb.w	r3, [sl]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 80a1 	beq.w	8008576 <_svfiprintf_r+0x1c6>
 8008434:	2300      	movs	r3, #0
 8008436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800843a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800843e:	f10a 0a01 	add.w	sl, sl, #1
 8008442:	9304      	str	r3, [sp, #16]
 8008444:	9307      	str	r3, [sp, #28]
 8008446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800844a:	931a      	str	r3, [sp, #104]	; 0x68
 800844c:	4654      	mov	r4, sl
 800844e:	2205      	movs	r2, #5
 8008450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008454:	4850      	ldr	r0, [pc, #320]	; (8008598 <_svfiprintf_r+0x1e8>)
 8008456:	f7f7 ff4b 	bl	80002f0 <memchr>
 800845a:	9a04      	ldr	r2, [sp, #16]
 800845c:	b9d8      	cbnz	r0, 8008496 <_svfiprintf_r+0xe6>
 800845e:	06d0      	lsls	r0, r2, #27
 8008460:	bf44      	itt	mi
 8008462:	2320      	movmi	r3, #32
 8008464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008468:	0711      	lsls	r1, r2, #28
 800846a:	bf44      	itt	mi
 800846c:	232b      	movmi	r3, #43	; 0x2b
 800846e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008472:	f89a 3000 	ldrb.w	r3, [sl]
 8008476:	2b2a      	cmp	r3, #42	; 0x2a
 8008478:	d015      	beq.n	80084a6 <_svfiprintf_r+0xf6>
 800847a:	9a07      	ldr	r2, [sp, #28]
 800847c:	4654      	mov	r4, sl
 800847e:	2000      	movs	r0, #0
 8008480:	f04f 0c0a 	mov.w	ip, #10
 8008484:	4621      	mov	r1, r4
 8008486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800848a:	3b30      	subs	r3, #48	; 0x30
 800848c:	2b09      	cmp	r3, #9
 800848e:	d94d      	bls.n	800852c <_svfiprintf_r+0x17c>
 8008490:	b1b0      	cbz	r0, 80084c0 <_svfiprintf_r+0x110>
 8008492:	9207      	str	r2, [sp, #28]
 8008494:	e014      	b.n	80084c0 <_svfiprintf_r+0x110>
 8008496:	eba0 0308 	sub.w	r3, r0, r8
 800849a:	fa09 f303 	lsl.w	r3, r9, r3
 800849e:	4313      	orrs	r3, r2
 80084a0:	9304      	str	r3, [sp, #16]
 80084a2:	46a2      	mov	sl, r4
 80084a4:	e7d2      	b.n	800844c <_svfiprintf_r+0x9c>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	1d19      	adds	r1, r3, #4
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	9103      	str	r1, [sp, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bfbb      	ittet	lt
 80084b2:	425b      	neglt	r3, r3
 80084b4:	f042 0202 	orrlt.w	r2, r2, #2
 80084b8:	9307      	strge	r3, [sp, #28]
 80084ba:	9307      	strlt	r3, [sp, #28]
 80084bc:	bfb8      	it	lt
 80084be:	9204      	strlt	r2, [sp, #16]
 80084c0:	7823      	ldrb	r3, [r4, #0]
 80084c2:	2b2e      	cmp	r3, #46	; 0x2e
 80084c4:	d10c      	bne.n	80084e0 <_svfiprintf_r+0x130>
 80084c6:	7863      	ldrb	r3, [r4, #1]
 80084c8:	2b2a      	cmp	r3, #42	; 0x2a
 80084ca:	d134      	bne.n	8008536 <_svfiprintf_r+0x186>
 80084cc:	9b03      	ldr	r3, [sp, #12]
 80084ce:	1d1a      	adds	r2, r3, #4
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	9203      	str	r2, [sp, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	bfb8      	it	lt
 80084d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084dc:	3402      	adds	r4, #2
 80084de:	9305      	str	r3, [sp, #20]
 80084e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80085a8 <_svfiprintf_r+0x1f8>
 80084e4:	7821      	ldrb	r1, [r4, #0]
 80084e6:	2203      	movs	r2, #3
 80084e8:	4650      	mov	r0, sl
 80084ea:	f7f7 ff01 	bl	80002f0 <memchr>
 80084ee:	b138      	cbz	r0, 8008500 <_svfiprintf_r+0x150>
 80084f0:	9b04      	ldr	r3, [sp, #16]
 80084f2:	eba0 000a 	sub.w	r0, r0, sl
 80084f6:	2240      	movs	r2, #64	; 0x40
 80084f8:	4082      	lsls	r2, r0
 80084fa:	4313      	orrs	r3, r2
 80084fc:	3401      	adds	r4, #1
 80084fe:	9304      	str	r3, [sp, #16]
 8008500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008504:	4825      	ldr	r0, [pc, #148]	; (800859c <_svfiprintf_r+0x1ec>)
 8008506:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800850a:	2206      	movs	r2, #6
 800850c:	f7f7 fef0 	bl	80002f0 <memchr>
 8008510:	2800      	cmp	r0, #0
 8008512:	d038      	beq.n	8008586 <_svfiprintf_r+0x1d6>
 8008514:	4b22      	ldr	r3, [pc, #136]	; (80085a0 <_svfiprintf_r+0x1f0>)
 8008516:	bb1b      	cbnz	r3, 8008560 <_svfiprintf_r+0x1b0>
 8008518:	9b03      	ldr	r3, [sp, #12]
 800851a:	3307      	adds	r3, #7
 800851c:	f023 0307 	bic.w	r3, r3, #7
 8008520:	3308      	adds	r3, #8
 8008522:	9303      	str	r3, [sp, #12]
 8008524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008526:	4433      	add	r3, r6
 8008528:	9309      	str	r3, [sp, #36]	; 0x24
 800852a:	e768      	b.n	80083fe <_svfiprintf_r+0x4e>
 800852c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008530:	460c      	mov	r4, r1
 8008532:	2001      	movs	r0, #1
 8008534:	e7a6      	b.n	8008484 <_svfiprintf_r+0xd4>
 8008536:	2300      	movs	r3, #0
 8008538:	3401      	adds	r4, #1
 800853a:	9305      	str	r3, [sp, #20]
 800853c:	4619      	mov	r1, r3
 800853e:	f04f 0c0a 	mov.w	ip, #10
 8008542:	4620      	mov	r0, r4
 8008544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008548:	3a30      	subs	r2, #48	; 0x30
 800854a:	2a09      	cmp	r2, #9
 800854c:	d903      	bls.n	8008556 <_svfiprintf_r+0x1a6>
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0c6      	beq.n	80084e0 <_svfiprintf_r+0x130>
 8008552:	9105      	str	r1, [sp, #20]
 8008554:	e7c4      	b.n	80084e0 <_svfiprintf_r+0x130>
 8008556:	fb0c 2101 	mla	r1, ip, r1, r2
 800855a:	4604      	mov	r4, r0
 800855c:	2301      	movs	r3, #1
 800855e:	e7f0      	b.n	8008542 <_svfiprintf_r+0x192>
 8008560:	ab03      	add	r3, sp, #12
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	462a      	mov	r2, r5
 8008566:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <_svfiprintf_r+0x1f4>)
 8008568:	a904      	add	r1, sp, #16
 800856a:	4638      	mov	r0, r7
 800856c:	f3af 8000 	nop.w
 8008570:	1c42      	adds	r2, r0, #1
 8008572:	4606      	mov	r6, r0
 8008574:	d1d6      	bne.n	8008524 <_svfiprintf_r+0x174>
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	065b      	lsls	r3, r3, #25
 800857a:	f53f af2d 	bmi.w	80083d8 <_svfiprintf_r+0x28>
 800857e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008580:	b01d      	add	sp, #116	; 0x74
 8008582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008586:	ab03      	add	r3, sp, #12
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	462a      	mov	r2, r5
 800858c:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <_svfiprintf_r+0x1f4>)
 800858e:	a904      	add	r1, sp, #16
 8008590:	4638      	mov	r0, r7
 8008592:	f000 f879 	bl	8008688 <_printf_i>
 8008596:	e7eb      	b.n	8008570 <_svfiprintf_r+0x1c0>
 8008598:	08008a68 	.word	0x08008a68
 800859c:	08008a72 	.word	0x08008a72
 80085a0:	00000000 	.word	0x00000000
 80085a4:	080082fd 	.word	0x080082fd
 80085a8:	08008a6e 	.word	0x08008a6e

080085ac <_printf_common>:
 80085ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b0:	4616      	mov	r6, r2
 80085b2:	4699      	mov	r9, r3
 80085b4:	688a      	ldr	r2, [r1, #8]
 80085b6:	690b      	ldr	r3, [r1, #16]
 80085b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085bc:	4293      	cmp	r3, r2
 80085be:	bfb8      	it	lt
 80085c0:	4613      	movlt	r3, r2
 80085c2:	6033      	str	r3, [r6, #0]
 80085c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085c8:	4607      	mov	r7, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	b10a      	cbz	r2, 80085d2 <_printf_common+0x26>
 80085ce:	3301      	adds	r3, #1
 80085d0:	6033      	str	r3, [r6, #0]
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	0699      	lsls	r1, r3, #26
 80085d6:	bf42      	ittt	mi
 80085d8:	6833      	ldrmi	r3, [r6, #0]
 80085da:	3302      	addmi	r3, #2
 80085dc:	6033      	strmi	r3, [r6, #0]
 80085de:	6825      	ldr	r5, [r4, #0]
 80085e0:	f015 0506 	ands.w	r5, r5, #6
 80085e4:	d106      	bne.n	80085f4 <_printf_common+0x48>
 80085e6:	f104 0a19 	add.w	sl, r4, #25
 80085ea:	68e3      	ldr	r3, [r4, #12]
 80085ec:	6832      	ldr	r2, [r6, #0]
 80085ee:	1a9b      	subs	r3, r3, r2
 80085f0:	42ab      	cmp	r3, r5
 80085f2:	dc26      	bgt.n	8008642 <_printf_common+0x96>
 80085f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085f8:	1e13      	subs	r3, r2, #0
 80085fa:	6822      	ldr	r2, [r4, #0]
 80085fc:	bf18      	it	ne
 80085fe:	2301      	movne	r3, #1
 8008600:	0692      	lsls	r2, r2, #26
 8008602:	d42b      	bmi.n	800865c <_printf_common+0xb0>
 8008604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008608:	4649      	mov	r1, r9
 800860a:	4638      	mov	r0, r7
 800860c:	47c0      	blx	r8
 800860e:	3001      	adds	r0, #1
 8008610:	d01e      	beq.n	8008650 <_printf_common+0xa4>
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	6922      	ldr	r2, [r4, #16]
 8008616:	f003 0306 	and.w	r3, r3, #6
 800861a:	2b04      	cmp	r3, #4
 800861c:	bf02      	ittt	eq
 800861e:	68e5      	ldreq	r5, [r4, #12]
 8008620:	6833      	ldreq	r3, [r6, #0]
 8008622:	1aed      	subeq	r5, r5, r3
 8008624:	68a3      	ldr	r3, [r4, #8]
 8008626:	bf0c      	ite	eq
 8008628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800862c:	2500      	movne	r5, #0
 800862e:	4293      	cmp	r3, r2
 8008630:	bfc4      	itt	gt
 8008632:	1a9b      	subgt	r3, r3, r2
 8008634:	18ed      	addgt	r5, r5, r3
 8008636:	2600      	movs	r6, #0
 8008638:	341a      	adds	r4, #26
 800863a:	42b5      	cmp	r5, r6
 800863c:	d11a      	bne.n	8008674 <_printf_common+0xc8>
 800863e:	2000      	movs	r0, #0
 8008640:	e008      	b.n	8008654 <_printf_common+0xa8>
 8008642:	2301      	movs	r3, #1
 8008644:	4652      	mov	r2, sl
 8008646:	4649      	mov	r1, r9
 8008648:	4638      	mov	r0, r7
 800864a:	47c0      	blx	r8
 800864c:	3001      	adds	r0, #1
 800864e:	d103      	bne.n	8008658 <_printf_common+0xac>
 8008650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008658:	3501      	adds	r5, #1
 800865a:	e7c6      	b.n	80085ea <_printf_common+0x3e>
 800865c:	18e1      	adds	r1, r4, r3
 800865e:	1c5a      	adds	r2, r3, #1
 8008660:	2030      	movs	r0, #48	; 0x30
 8008662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008666:	4422      	add	r2, r4
 8008668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800866c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008670:	3302      	adds	r3, #2
 8008672:	e7c7      	b.n	8008604 <_printf_common+0x58>
 8008674:	2301      	movs	r3, #1
 8008676:	4622      	mov	r2, r4
 8008678:	4649      	mov	r1, r9
 800867a:	4638      	mov	r0, r7
 800867c:	47c0      	blx	r8
 800867e:	3001      	adds	r0, #1
 8008680:	d0e6      	beq.n	8008650 <_printf_common+0xa4>
 8008682:	3601      	adds	r6, #1
 8008684:	e7d9      	b.n	800863a <_printf_common+0x8e>
	...

08008688 <_printf_i>:
 8008688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800868c:	7e0f      	ldrb	r7, [r1, #24]
 800868e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008690:	2f78      	cmp	r7, #120	; 0x78
 8008692:	4691      	mov	r9, r2
 8008694:	4680      	mov	r8, r0
 8008696:	460c      	mov	r4, r1
 8008698:	469a      	mov	sl, r3
 800869a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800869e:	d807      	bhi.n	80086b0 <_printf_i+0x28>
 80086a0:	2f62      	cmp	r7, #98	; 0x62
 80086a2:	d80a      	bhi.n	80086ba <_printf_i+0x32>
 80086a4:	2f00      	cmp	r7, #0
 80086a6:	f000 80d4 	beq.w	8008852 <_printf_i+0x1ca>
 80086aa:	2f58      	cmp	r7, #88	; 0x58
 80086ac:	f000 80c0 	beq.w	8008830 <_printf_i+0x1a8>
 80086b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086b8:	e03a      	b.n	8008730 <_printf_i+0xa8>
 80086ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086be:	2b15      	cmp	r3, #21
 80086c0:	d8f6      	bhi.n	80086b0 <_printf_i+0x28>
 80086c2:	a101      	add	r1, pc, #4	; (adr r1, 80086c8 <_printf_i+0x40>)
 80086c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086c8:	08008721 	.word	0x08008721
 80086cc:	08008735 	.word	0x08008735
 80086d0:	080086b1 	.word	0x080086b1
 80086d4:	080086b1 	.word	0x080086b1
 80086d8:	080086b1 	.word	0x080086b1
 80086dc:	080086b1 	.word	0x080086b1
 80086e0:	08008735 	.word	0x08008735
 80086e4:	080086b1 	.word	0x080086b1
 80086e8:	080086b1 	.word	0x080086b1
 80086ec:	080086b1 	.word	0x080086b1
 80086f0:	080086b1 	.word	0x080086b1
 80086f4:	08008839 	.word	0x08008839
 80086f8:	08008761 	.word	0x08008761
 80086fc:	080087f3 	.word	0x080087f3
 8008700:	080086b1 	.word	0x080086b1
 8008704:	080086b1 	.word	0x080086b1
 8008708:	0800885b 	.word	0x0800885b
 800870c:	080086b1 	.word	0x080086b1
 8008710:	08008761 	.word	0x08008761
 8008714:	080086b1 	.word	0x080086b1
 8008718:	080086b1 	.word	0x080086b1
 800871c:	080087fb 	.word	0x080087fb
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	1d1a      	adds	r2, r3, #4
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	602a      	str	r2, [r5, #0]
 8008728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800872c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008730:	2301      	movs	r3, #1
 8008732:	e09f      	b.n	8008874 <_printf_i+0x1ec>
 8008734:	6820      	ldr	r0, [r4, #0]
 8008736:	682b      	ldr	r3, [r5, #0]
 8008738:	0607      	lsls	r7, r0, #24
 800873a:	f103 0104 	add.w	r1, r3, #4
 800873e:	6029      	str	r1, [r5, #0]
 8008740:	d501      	bpl.n	8008746 <_printf_i+0xbe>
 8008742:	681e      	ldr	r6, [r3, #0]
 8008744:	e003      	b.n	800874e <_printf_i+0xc6>
 8008746:	0646      	lsls	r6, r0, #25
 8008748:	d5fb      	bpl.n	8008742 <_printf_i+0xba>
 800874a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800874e:	2e00      	cmp	r6, #0
 8008750:	da03      	bge.n	800875a <_printf_i+0xd2>
 8008752:	232d      	movs	r3, #45	; 0x2d
 8008754:	4276      	negs	r6, r6
 8008756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800875a:	485a      	ldr	r0, [pc, #360]	; (80088c4 <_printf_i+0x23c>)
 800875c:	230a      	movs	r3, #10
 800875e:	e012      	b.n	8008786 <_printf_i+0xfe>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	6820      	ldr	r0, [r4, #0]
 8008764:	1d19      	adds	r1, r3, #4
 8008766:	6029      	str	r1, [r5, #0]
 8008768:	0605      	lsls	r5, r0, #24
 800876a:	d501      	bpl.n	8008770 <_printf_i+0xe8>
 800876c:	681e      	ldr	r6, [r3, #0]
 800876e:	e002      	b.n	8008776 <_printf_i+0xee>
 8008770:	0641      	lsls	r1, r0, #25
 8008772:	d5fb      	bpl.n	800876c <_printf_i+0xe4>
 8008774:	881e      	ldrh	r6, [r3, #0]
 8008776:	4853      	ldr	r0, [pc, #332]	; (80088c4 <_printf_i+0x23c>)
 8008778:	2f6f      	cmp	r7, #111	; 0x6f
 800877a:	bf0c      	ite	eq
 800877c:	2308      	moveq	r3, #8
 800877e:	230a      	movne	r3, #10
 8008780:	2100      	movs	r1, #0
 8008782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008786:	6865      	ldr	r5, [r4, #4]
 8008788:	60a5      	str	r5, [r4, #8]
 800878a:	2d00      	cmp	r5, #0
 800878c:	bfa2      	ittt	ge
 800878e:	6821      	ldrge	r1, [r4, #0]
 8008790:	f021 0104 	bicge.w	r1, r1, #4
 8008794:	6021      	strge	r1, [r4, #0]
 8008796:	b90e      	cbnz	r6, 800879c <_printf_i+0x114>
 8008798:	2d00      	cmp	r5, #0
 800879a:	d04b      	beq.n	8008834 <_printf_i+0x1ac>
 800879c:	4615      	mov	r5, r2
 800879e:	fbb6 f1f3 	udiv	r1, r6, r3
 80087a2:	fb03 6711 	mls	r7, r3, r1, r6
 80087a6:	5dc7      	ldrb	r7, [r0, r7]
 80087a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087ac:	4637      	mov	r7, r6
 80087ae:	42bb      	cmp	r3, r7
 80087b0:	460e      	mov	r6, r1
 80087b2:	d9f4      	bls.n	800879e <_printf_i+0x116>
 80087b4:	2b08      	cmp	r3, #8
 80087b6:	d10b      	bne.n	80087d0 <_printf_i+0x148>
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	07de      	lsls	r6, r3, #31
 80087bc:	d508      	bpl.n	80087d0 <_printf_i+0x148>
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	6861      	ldr	r1, [r4, #4]
 80087c2:	4299      	cmp	r1, r3
 80087c4:	bfde      	ittt	le
 80087c6:	2330      	movle	r3, #48	; 0x30
 80087c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80087d0:	1b52      	subs	r2, r2, r5
 80087d2:	6122      	str	r2, [r4, #16]
 80087d4:	f8cd a000 	str.w	sl, [sp]
 80087d8:	464b      	mov	r3, r9
 80087da:	aa03      	add	r2, sp, #12
 80087dc:	4621      	mov	r1, r4
 80087de:	4640      	mov	r0, r8
 80087e0:	f7ff fee4 	bl	80085ac <_printf_common>
 80087e4:	3001      	adds	r0, #1
 80087e6:	d14a      	bne.n	800887e <_printf_i+0x1f6>
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087ec:	b004      	add	sp, #16
 80087ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	f043 0320 	orr.w	r3, r3, #32
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	4833      	ldr	r0, [pc, #204]	; (80088c8 <_printf_i+0x240>)
 80087fc:	2778      	movs	r7, #120	; 0x78
 80087fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	6829      	ldr	r1, [r5, #0]
 8008806:	061f      	lsls	r7, r3, #24
 8008808:	f851 6b04 	ldr.w	r6, [r1], #4
 800880c:	d402      	bmi.n	8008814 <_printf_i+0x18c>
 800880e:	065f      	lsls	r7, r3, #25
 8008810:	bf48      	it	mi
 8008812:	b2b6      	uxthmi	r6, r6
 8008814:	07df      	lsls	r7, r3, #31
 8008816:	bf48      	it	mi
 8008818:	f043 0320 	orrmi.w	r3, r3, #32
 800881c:	6029      	str	r1, [r5, #0]
 800881e:	bf48      	it	mi
 8008820:	6023      	strmi	r3, [r4, #0]
 8008822:	b91e      	cbnz	r6, 800882c <_printf_i+0x1a4>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	f023 0320 	bic.w	r3, r3, #32
 800882a:	6023      	str	r3, [r4, #0]
 800882c:	2310      	movs	r3, #16
 800882e:	e7a7      	b.n	8008780 <_printf_i+0xf8>
 8008830:	4824      	ldr	r0, [pc, #144]	; (80088c4 <_printf_i+0x23c>)
 8008832:	e7e4      	b.n	80087fe <_printf_i+0x176>
 8008834:	4615      	mov	r5, r2
 8008836:	e7bd      	b.n	80087b4 <_printf_i+0x12c>
 8008838:	682b      	ldr	r3, [r5, #0]
 800883a:	6826      	ldr	r6, [r4, #0]
 800883c:	6961      	ldr	r1, [r4, #20]
 800883e:	1d18      	adds	r0, r3, #4
 8008840:	6028      	str	r0, [r5, #0]
 8008842:	0635      	lsls	r5, r6, #24
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	d501      	bpl.n	800884c <_printf_i+0x1c4>
 8008848:	6019      	str	r1, [r3, #0]
 800884a:	e002      	b.n	8008852 <_printf_i+0x1ca>
 800884c:	0670      	lsls	r0, r6, #25
 800884e:	d5fb      	bpl.n	8008848 <_printf_i+0x1c0>
 8008850:	8019      	strh	r1, [r3, #0]
 8008852:	2300      	movs	r3, #0
 8008854:	6123      	str	r3, [r4, #16]
 8008856:	4615      	mov	r5, r2
 8008858:	e7bc      	b.n	80087d4 <_printf_i+0x14c>
 800885a:	682b      	ldr	r3, [r5, #0]
 800885c:	1d1a      	adds	r2, r3, #4
 800885e:	602a      	str	r2, [r5, #0]
 8008860:	681d      	ldr	r5, [r3, #0]
 8008862:	6862      	ldr	r2, [r4, #4]
 8008864:	2100      	movs	r1, #0
 8008866:	4628      	mov	r0, r5
 8008868:	f7f7 fd42 	bl	80002f0 <memchr>
 800886c:	b108      	cbz	r0, 8008872 <_printf_i+0x1ea>
 800886e:	1b40      	subs	r0, r0, r5
 8008870:	6060      	str	r0, [r4, #4]
 8008872:	6863      	ldr	r3, [r4, #4]
 8008874:	6123      	str	r3, [r4, #16]
 8008876:	2300      	movs	r3, #0
 8008878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800887c:	e7aa      	b.n	80087d4 <_printf_i+0x14c>
 800887e:	6923      	ldr	r3, [r4, #16]
 8008880:	462a      	mov	r2, r5
 8008882:	4649      	mov	r1, r9
 8008884:	4640      	mov	r0, r8
 8008886:	47d0      	blx	sl
 8008888:	3001      	adds	r0, #1
 800888a:	d0ad      	beq.n	80087e8 <_printf_i+0x160>
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	079b      	lsls	r3, r3, #30
 8008890:	d413      	bmi.n	80088ba <_printf_i+0x232>
 8008892:	68e0      	ldr	r0, [r4, #12]
 8008894:	9b03      	ldr	r3, [sp, #12]
 8008896:	4298      	cmp	r0, r3
 8008898:	bfb8      	it	lt
 800889a:	4618      	movlt	r0, r3
 800889c:	e7a6      	b.n	80087ec <_printf_i+0x164>
 800889e:	2301      	movs	r3, #1
 80088a0:	4632      	mov	r2, r6
 80088a2:	4649      	mov	r1, r9
 80088a4:	4640      	mov	r0, r8
 80088a6:	47d0      	blx	sl
 80088a8:	3001      	adds	r0, #1
 80088aa:	d09d      	beq.n	80087e8 <_printf_i+0x160>
 80088ac:	3501      	adds	r5, #1
 80088ae:	68e3      	ldr	r3, [r4, #12]
 80088b0:	9903      	ldr	r1, [sp, #12]
 80088b2:	1a5b      	subs	r3, r3, r1
 80088b4:	42ab      	cmp	r3, r5
 80088b6:	dcf2      	bgt.n	800889e <_printf_i+0x216>
 80088b8:	e7eb      	b.n	8008892 <_printf_i+0x20a>
 80088ba:	2500      	movs	r5, #0
 80088bc:	f104 0619 	add.w	r6, r4, #25
 80088c0:	e7f5      	b.n	80088ae <_printf_i+0x226>
 80088c2:	bf00      	nop
 80088c4:	08008a79 	.word	0x08008a79
 80088c8:	08008a8a 	.word	0x08008a8a

080088cc <memmove>:
 80088cc:	4288      	cmp	r0, r1
 80088ce:	b510      	push	{r4, lr}
 80088d0:	eb01 0402 	add.w	r4, r1, r2
 80088d4:	d902      	bls.n	80088dc <memmove+0x10>
 80088d6:	4284      	cmp	r4, r0
 80088d8:	4623      	mov	r3, r4
 80088da:	d807      	bhi.n	80088ec <memmove+0x20>
 80088dc:	1e43      	subs	r3, r0, #1
 80088de:	42a1      	cmp	r1, r4
 80088e0:	d008      	beq.n	80088f4 <memmove+0x28>
 80088e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088ea:	e7f8      	b.n	80088de <memmove+0x12>
 80088ec:	4402      	add	r2, r0
 80088ee:	4601      	mov	r1, r0
 80088f0:	428a      	cmp	r2, r1
 80088f2:	d100      	bne.n	80088f6 <memmove+0x2a>
 80088f4:	bd10      	pop	{r4, pc}
 80088f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088fe:	e7f7      	b.n	80088f0 <memmove+0x24>

08008900 <_sbrk_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4d06      	ldr	r5, [pc, #24]	; (800891c <_sbrk_r+0x1c>)
 8008904:	2300      	movs	r3, #0
 8008906:	4604      	mov	r4, r0
 8008908:	4608      	mov	r0, r1
 800890a:	602b      	str	r3, [r5, #0]
 800890c:	f7f8 fc0e 	bl	800112c <_sbrk>
 8008910:	1c43      	adds	r3, r0, #1
 8008912:	d102      	bne.n	800891a <_sbrk_r+0x1a>
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	b103      	cbz	r3, 800891a <_sbrk_r+0x1a>
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	240310d8 	.word	0x240310d8

08008920 <memcpy>:
 8008920:	440a      	add	r2, r1
 8008922:	4291      	cmp	r1, r2
 8008924:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008928:	d100      	bne.n	800892c <memcpy+0xc>
 800892a:	4770      	bx	lr
 800892c:	b510      	push	{r4, lr}
 800892e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008936:	4291      	cmp	r1, r2
 8008938:	d1f9      	bne.n	800892e <memcpy+0xe>
 800893a:	bd10      	pop	{r4, pc}

0800893c <_realloc_r>:
 800893c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008940:	4680      	mov	r8, r0
 8008942:	4614      	mov	r4, r2
 8008944:	460e      	mov	r6, r1
 8008946:	b921      	cbnz	r1, 8008952 <_realloc_r+0x16>
 8008948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800894c:	4611      	mov	r1, r2
 800894e:	f7ff bc49 	b.w	80081e4 <_malloc_r>
 8008952:	b92a      	cbnz	r2, 8008960 <_realloc_r+0x24>
 8008954:	f7ff fbda 	bl	800810c <_free_r>
 8008958:	4625      	mov	r5, r4
 800895a:	4628      	mov	r0, r5
 800895c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008960:	f000 f81b 	bl	800899a <_malloc_usable_size_r>
 8008964:	4284      	cmp	r4, r0
 8008966:	4607      	mov	r7, r0
 8008968:	d802      	bhi.n	8008970 <_realloc_r+0x34>
 800896a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800896e:	d812      	bhi.n	8008996 <_realloc_r+0x5a>
 8008970:	4621      	mov	r1, r4
 8008972:	4640      	mov	r0, r8
 8008974:	f7ff fc36 	bl	80081e4 <_malloc_r>
 8008978:	4605      	mov	r5, r0
 800897a:	2800      	cmp	r0, #0
 800897c:	d0ed      	beq.n	800895a <_realloc_r+0x1e>
 800897e:	42bc      	cmp	r4, r7
 8008980:	4622      	mov	r2, r4
 8008982:	4631      	mov	r1, r6
 8008984:	bf28      	it	cs
 8008986:	463a      	movcs	r2, r7
 8008988:	f7ff ffca 	bl	8008920 <memcpy>
 800898c:	4631      	mov	r1, r6
 800898e:	4640      	mov	r0, r8
 8008990:	f7ff fbbc 	bl	800810c <_free_r>
 8008994:	e7e1      	b.n	800895a <_realloc_r+0x1e>
 8008996:	4635      	mov	r5, r6
 8008998:	e7df      	b.n	800895a <_realloc_r+0x1e>

0800899a <_malloc_usable_size_r>:
 800899a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800899e:	1f18      	subs	r0, r3, #4
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	bfbc      	itt	lt
 80089a4:	580b      	ldrlt	r3, [r1, r0]
 80089a6:	18c0      	addlt	r0, r0, r3
 80089a8:	4770      	bx	lr
	...

080089ac <_init>:
 80089ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ae:	bf00      	nop
 80089b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b2:	bc08      	pop	{r3}
 80089b4:	469e      	mov	lr, r3
 80089b6:	4770      	bx	lr

080089b8 <_fini>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	bf00      	nop
 80089bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089be:	bc08      	pop	{r3}
 80089c0:	469e      	mov	lr, r3
 80089c2:	4770      	bx	lr
