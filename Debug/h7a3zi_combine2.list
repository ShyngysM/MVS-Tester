
h7a3zi_combine2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008604  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080088b4  080088b4  000188b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080089a4  080089a4  000189a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080089ac  080089ac  000189ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080089b0  080089b0  000189b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  080089b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a0  24000060  08008a14  00020060  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000400  08008a14  00020400  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00019a75  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002c9d  00000000  00000000  00039b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001490  00000000  00000000  0003c7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000100d  00000000  00000000  0003dc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00032ce6  00000000  00000000  0003ec85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018ff3  00000000  00000000  0007196b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001538dd  00000000  00000000  0008a95e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005dc8  00000000  00000000  001de23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  001e4004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800889c 	.word	0x0800889c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	0800889c 	.word	0x0800889c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fec4 	bl	800141c <HAL_Init>
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f848 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 fa30 	bl	8000afc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800069c:	f000 f9da 	bl	8000a54 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006a0:	f000 fa24 	bl	8000aec <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006a4:	f000 f8b6 	bl	8000814 <MX_ADC1_Init>
  MX_TIM16_Init();
 80006a8:	f000 f986 	bl	80009b8 <MX_TIM16_Init>
  MX_TIM17_Init();
 80006ac:	f000 f9ac 	bl	8000a08 <MX_TIM17_Init>
  MX_TIM3_Init();
 80006b0:	f000 f928 	bl	8000904 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
     timer_counter = __HAL_TIM_GET_COUNTER(&htim3);
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <main+0x7c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <main+0x80>)
 80006be:	801a      	strh	r2, [r3, #0]
     update_encoder(&enc_instance, &htim3);
 80006c0:	4911      	ldr	r1, [pc, #68]	; (8000708 <main+0x7c>)
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <main+0x84>)
 80006c4:	f000 fb64 	bl	8000d90 <update_encoder>
     encoder_position = enc_instance.position;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <main+0x84>)
 80006ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <main+0x88>)
 80006d0:	601a      	str	r2, [r3, #0]
     // encoder_velocity = enc_instance.velocity;
    
     uart_buf_len = sprintf(uart_buf, "Counter value = %ld\r\n", encoder_position);
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <main+0x88>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	490f      	ldr	r1, [pc, #60]	; (8000718 <main+0x8c>)
 80006da:	4810      	ldr	r0, [pc, #64]	; (800071c <main+0x90>)
 80006dc:	f007 fc3a 	bl	8007f54 <siprintf>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <main+0x94>)
 80006e4:	6013      	str	r3, [r2, #0]
     HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <main+0x94>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	2364      	movs	r3, #100	; 0x64
 80006ee:	490b      	ldr	r1, [pc, #44]	; (800071c <main+0x90>)
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <main+0x98>)
 80006f2:	f006 fa17 	bl	8006b24 <HAL_UART_Transmit>
     rotate(890, encoder_position);
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <main+0x88>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4619      	mov	r1, r3
 80006fc:	f240 307a 	movw	r0, #890	; 0x37a
 8000700:	f000 fbca 	bl	8000e98 <rotate>
     timer_counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000704:	e7d6      	b.n	80006b4 <main+0x28>
 8000706:	bf00      	nop
 8000708:	240000e0 	.word	0x240000e0
 800070c:	240002ac 	.word	0x240002ac
 8000710:	24000258 	.word	0x24000258
 8000714:	240002a8 	.word	0x240002a8
 8000718:	080088b4 	.word	0x080088b4
 800071c:	24000270 	.word	0x24000270
 8000720:	240002a4 	.word	0x240002a4
 8000724:	240001c4 	.word	0x240001c4

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b09c      	sub	sp, #112	; 0x70
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000732:	224c      	movs	r2, #76	; 0x4c
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f007 fc2c 	bl	8007f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2220      	movs	r2, #32
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f007 fc26 	bl	8007f94 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000748:	4b30      	ldr	r3, [pc, #192]	; (800080c <SystemClock_Config+0xe4>)
 800074a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800074e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000752:	2004      	movs	r0, #4
 8000754:	f002 f92a 	bl	80029ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <SystemClock_Config+0xe8>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a2b      	ldr	r2, [pc, #172]	; (8000810 <SystemClock_Config+0xe8>)
 8000762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <SystemClock_Config+0xe8>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000774:	bf00      	nop
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <SystemClock_Config+0xe8>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800077e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000782:	d1f8      	bne.n	8000776 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000784:	2321      	movs	r3, #33	; 0x21
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000788:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	2302      	movs	r3, #2
 8000798:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800079e:	2318      	movs	r3, #24
 80007a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a6:	2304      	movs	r3, #4
 80007a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ae:	230c      	movs	r3, #12
 80007b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 f94e 	bl	8002a60 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007ca:	f000 fadb 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	233f      	movs	r3, #63	; 0x3f
 80007d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2303      	movs	r3, #3
 80007d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2102      	movs	r1, #2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fd66 	bl	80032c4 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80007fe:	f000 fac1 	bl	8000d84 <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3770      	adds	r7, #112	; 0x70
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	58024400 	.word	0x58024400
 8000810:	58024800 	.word	0x58024800

08000814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	615a      	str	r2, [r3, #20]
 8000836:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000838:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <MX_ADC1_Init+0xe4>)
 800083a:	4a30      	ldr	r2, [pc, #192]	; (80008fc <MX_ADC1_Init+0xe8>)
 800083c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000844:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <MX_ADC1_Init+0xe4>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000852:	2204      	movs	r2, #4
 8000854:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000858:	2200      	movs	r2, #0
 800085a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_ADC1_Init+0xe4>)
 800085e:	2200      	movs	r2, #0
 8000860:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000864:	2201      	movs	r2, #1
 8000866:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_ADC1_Init+0xe4>)
 800086a:	2200      	movs	r2, #0
 800086c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000870:	2200      	movs	r2, #0
 8000872:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000876:	2200      	movs	r2, #0
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_ADC1_Init+0xe4>)
 800087c:	2200      	movs	r2, #0
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000882:	2200      	movs	r2, #0
 8000884:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000888:	2200      	movs	r2, #0
 800088a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_ADC1_Init+0xe4>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000894:	4818      	ldr	r0, [pc, #96]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000896:	f000 ffdf 	bl	8001858 <HAL_ADC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008a0:	f000 fa70 	bl	8000d84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <MX_ADC1_Init+0xe4>)
 80008b0:	f001 fd06 	bl	80022c0 <HAL_ADCEx_MultiModeConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80008ba:	f000 fa63 	bl	8000d84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_ADC1_Init+0xec>)
 80008c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c2:	2306      	movs	r3, #6
 80008c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d0:	2304      	movs	r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_ADC1_Init+0xe4>)
 80008e2:	f001 f913 	bl	8001b0c <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80008ec:	f000 fa4a 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2400007c 	.word	0x2400007c
 80008fc:	40022000 	.word	0x40022000
 8000900:	3ef08000 	.word	0x3ef08000

08000904 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2224      	movs	r2, #36	; 0x24
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f007 fb3e 	bl	8007f94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <MX_TIM3_Init+0xac>)
 8000924:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <MX_TIM3_Init+0xb0>)
 8000926:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_TIM3_Init+0xac>)
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <MX_TIM3_Init+0xac>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <MX_TIM3_Init+0xac>)
 8000936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_TIM3_Init+0xac>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_TIM3_Init+0xac>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000948:	2303      	movs	r3, #3
 800094a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000950:	2301      	movs	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000960:	2301      	movs	r3, #1
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	4619      	mov	r1, r3
 8000972:	480f      	ldr	r0, [pc, #60]	; (80009b0 <MX_TIM3_Init+0xac>)
 8000974:	f005 fc94 	bl	80062a0 <HAL_TIM_Encoder_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800097e:	f000 fa01 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	4619      	mov	r1, r3
 800098e:	4808      	ldr	r0, [pc, #32]	; (80009b0 <MX_TIM3_Init+0xac>)
 8000990:	f005 ffcc 	bl	800692c <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800099a:	f000 f9f3 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800099e:	213c      	movs	r1, #60	; 0x3c
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <MX_TIM3_Init+0xac>)
 80009a2:	f005 fd23 	bl	80063ec <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	3730      	adds	r7, #48	; 0x30
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	240000e0 	.word	0x240000e0
 80009b4:	40000400 	.word	0x40000400

080009b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_TIM16_Init+0x48>)
 80009be:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <MX_TIM16_Init+0x4c>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600-1;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_TIM16_Init+0x48>)
 80009c4:	f242 527f 	movw	r2, #9599	; 0x257f
 80009c8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MX_TIM16_Init+0x48>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000-1;
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_TIM16_Init+0x48>)
 80009d2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80009d6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_TIM16_Init+0x48>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_TIM16_Init+0x48>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_TIM16_Init+0x48>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_TIM16_Init+0x48>)
 80009ec:	f005 fc00 	bl	80061f0 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80009f6:	f000 f9c5 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2400012c 	.word	0x2400012c
 8000a04:	40014400 	.word	0x40014400

08000a08 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_TIM17_Init+0x44>)
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <MX_TIM17_Init+0x48>)
 8000a10:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_TIM17_Init+0x44>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_TIM17_Init+0x44>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_TIM17_Init+0x44>)
 8000a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a24:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_TIM17_Init+0x44>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_TIM17_Init+0x44>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_TIM17_Init+0x44>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_TIM17_Init+0x44>)
 8000a3a:	f005 fbd9 	bl	80061f0 <HAL_TIM_Base_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000a44:	f000 f99e 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	24000178 	.word	0x24000178
 8000a50:	40014800 	.word	0x40014800

08000a54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <MX_USART3_UART_Init+0x94>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f005 fff1 	bl	8006a84 <HAL_UART_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa8:	f000 f96c 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aac:	2100      	movs	r1, #0
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ab0:	f007 f985 	bl	8007dbe <HAL_UARTEx_SetTxFifoThreshold>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aba:	f000 f963 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ac2:	f007 f9ba 	bl	8007e3a <HAL_UARTEx_SetRxFifoThreshold>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000acc:	f000 f95a 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ad2:	f007 f93b 	bl	8007d4c <HAL_UARTEx_DisableFifoMode>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000adc:	f000 f952 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	240001c4 	.word	0x240001c4
 8000ae8:	40004800 	.word	0x40004800

08000aec <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	; 0x38
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b95      	ldr	r3, [pc, #596]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b18:	4a93      	ldr	r2, [pc, #588]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b22:	4b91      	ldr	r3, [pc, #580]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	623b      	str	r3, [r7, #32]
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b30:	4b8d      	ldr	r3, [pc, #564]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b36:	4a8c      	ldr	r2, [pc, #560]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b38:	f043 0320 	orr.w	r3, r3, #32
 8000b3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b40:	4b89      	ldr	r3, [pc, #548]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b46:	f003 0320 	and.w	r3, r3, #32
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	4b86      	ldr	r3, [pc, #536]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b54:	4a84      	ldr	r2, [pc, #528]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b5e:	4b82      	ldr	r3, [pc, #520]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b7e      	ldr	r3, [pc, #504]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b72:	4a7d      	ldr	r2, [pc, #500]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b7c:	4b7a      	ldr	r3, [pc, #488]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b77      	ldr	r3, [pc, #476]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b90:	4a75      	ldr	r2, [pc, #468]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b9a:	4b73      	ldr	r3, [pc, #460]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000b9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba8:	4b6f      	ldr	r3, [pc, #444]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000baa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bae:	4a6e      	ldr	r2, [pc, #440]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000bb0:	f043 0310 	orr.w	r3, r3, #16
 8000bb4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bb8:	4b6b      	ldr	r3, [pc, #428]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000bba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bbe:	f003 0310 	and.w	r3, r3, #16
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	4b68      	ldr	r3, [pc, #416]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000bc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bcc:	4a66      	ldr	r2, [pc, #408]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000bce:	f043 0308 	orr.w	r3, r3, #8
 8000bd2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bd6:	4b64      	ldr	r3, [pc, #400]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000bd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bdc:	f003 0308 	and.w	r3, r3, #8
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be4:	4b60      	ldr	r3, [pc, #384]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000be6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bea:	4a5f      	ldr	r2, [pc, #380]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bf4:	4b5c      	ldr	r3, [pc, #368]	; (8000d68 <MX_GPIO_Init+0x26c>)
 8000bf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c08:	4858      	ldr	r0, [pc, #352]	; (8000d6c <MX_GPIO_Init+0x270>)
 8000c0a:	f001 feb5 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUMP_PA5_Pin_GPIO_Port, PUMP_PA5_Pin_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2120      	movs	r1, #32
 8000c12:	4857      	ldr	r0, [pc, #348]	; (8000d70 <MX_GPIO_Init+0x274>)
 8000c14:	f001 feb0 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|STEPPER1_PB6_Pin_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000c1e:	4855      	ldr	r0, [pc, #340]	; (8000d74 <MX_GPIO_Init+0x278>)
 8000c20:	f001 feaa 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f246 0102 	movw	r1, #24578	; 0x6002
 8000c2a:	4853      	ldr	r0, [pc, #332]	; (8000d78 <MX_GPIO_Init+0x27c>)
 8000c2c:	f001 fea4 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 8000c36:	4851      	ldr	r0, [pc, #324]	; (8000d7c <MX_GPIO_Init+0x280>)
 8000c38:	f001 fe9e 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	484b      	ldr	r0, [pc, #300]	; (8000d80 <MX_GPIO_Init+0x284>)
 8000c52:	f001 fce1 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	483f      	ldr	r0, [pc, #252]	; (8000d6c <MX_GPIO_Init+0x270>)
 8000c70:	f001 fcd2 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUMP_PA5_Pin_Pin */
  GPIO_InitStruct.Pin = PUMP_PA5_Pin_Pin;
 8000c74:	2320      	movs	r3, #32
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PUMP_PA5_Pin_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4839      	ldr	r0, [pc, #228]	; (8000d70 <MX_GPIO_Init+0x274>)
 8000c8c:	f001 fcc4 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin STEPPER1_PB6_Pin_Pin PB7 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|STEPPER1_PB6_Pin_Pin|GPIO_PIN_7;
 8000c90:	f244 03c1 	movw	r3, #16577	; 0x40c1
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4832      	ldr	r0, [pc, #200]	; (8000d74 <MX_GPIO_Init+0x278>)
 8000caa:	f001 fcb5 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER3_PE13_Pin_Pin STEPPER4_PE14_Pin_Pin LD2_Pin */
  GPIO_InitStruct.Pin = STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin;
 8000cae:	f246 0302 	movw	r3, #24578	; 0x6002
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	482c      	ldr	r0, [pc, #176]	; (8000d78 <MX_GPIO_Init+0x27c>)
 8000cc8:	f001 fca6 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4826      	ldr	r0, [pc, #152]	; (8000d7c <MX_GPIO_Init+0x280>)
 8000ce2:	f001 fc99 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	481d      	ldr	r0, [pc, #116]	; (8000d70 <MX_GPIO_Init+0x274>)
 8000cfc:	f001 fc8c 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d12:	230a      	movs	r3, #10
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4814      	ldr	r0, [pc, #80]	; (8000d70 <MX_GPIO_Init+0x274>)
 8000d1e:	f001 fc7b 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_GPIO_Init+0x274>)
 8000d3c:	f001 fc6c 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : HELP_SIGNAL_PG9_Pin_Pin VIBROMOTOR_PG12_Pin_Pin STEPPER2_PG14_Pin_Pin */
  GPIO_InitStruct.Pin = HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin;
 8000d40:	f44f 43a4 	mov.w	r3, #20992	; 0x5200
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	4808      	ldr	r0, [pc, #32]	; (8000d7c <MX_GPIO_Init+0x280>)
 8000d5a:	f001 fc5d 	bl	8002618 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5e:	bf00      	nop
 8000d60:	3738      	adds	r7, #56	; 0x38
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58021400 	.word	0x58021400
 8000d70:	58020000 	.word	0x58020000
 8000d74:	58020400 	.word	0x58020400
 8000d78:	58021000 	.word	0x58021000
 8000d7c:	58021800 	.word	0x58021800
 8000d80:	58020800 	.word	0x58020800

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>
	...

08000d90 <update_encoder>:
#include "../Inc/motor_encoder.h"

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef*htim) {
 8000d90:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000d94:	b085      	sub	sp, #20
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
  uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da2:	60fb      	str	r3, [r7, #12]
  static uint8_t first_time = 0;
  if (!first_time) {
 8000da4:	4b3b      	ldr	r3, [pc, #236]	; (8000e94 <update_encoder+0x104>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d106      	bne.n	8000dba <update_encoder+0x2a>
    encoder_value->velocity = 0;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	801a      	strh	r2, [r3, #0]
    first_time = 1;
 8000db2:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <update_encoder+0x104>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e052      	b.n	8000e60 <update_encoder+0xd0>

  } else {
    if (temp_counter == encoder_value->last_counter_value) {
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d103      	bne.n	8000dcc <update_encoder+0x3c>
      encoder_value->velocity = 0;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	801a      	strh	r2, [r3, #0]
 8000dca:	e049      	b.n	8000e60 <update_encoder+0xd0>

    } else if (temp_counter > encoder_value->last_counter_value) {
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d922      	bls.n	8000e1c <update_encoder+0x8c>
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	2b10      	cmp	r3, #16
 8000de2:	d110      	bne.n	8000e06 <update_encoder+0x76>
        encoder_value->velocity =
            -encoder_value->last_counter_value -
            (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	b29a      	uxth	r2, r3
            -encoder_value->last_counter_value -
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	b21a      	sxth	r2, r3
        encoder_value->velocity =
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	801a      	strh	r2, [r3, #0]
 8000e04:	e02c      	b.n	8000e60 <update_encoder+0xd0>

      } else {
        encoder_value->velocity =
            temp_counter - encoder_value->last_counter_value;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b21a      	sxth	r2, r3
        encoder_value->velocity =
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	801a      	strh	r2, [r3, #0]
 8000e1a:	e021      	b.n	8000e60 <update_encoder+0xd0>
      }

    } else {
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	2b10      	cmp	r3, #16
 8000e28:	d10a      	bne.n	8000e40 <update_encoder+0xb0>
        encoder_value->velocity =
            temp_counter - encoder_value->last_counter_value;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b21a      	sxth	r2, r3
        encoder_value->velocity =
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	801a      	strh	r2, [r3, #0]
 8000e3e:	e00f      	b.n	8000e60 <update_encoder+0xd0>
      } else {
        encoder_value->velocity =
            temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) -
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	b29a      	uxth	r2, r3
                            encoder_value->last_counter_value);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
            temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) -
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	4413      	add	r3, r2
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b21a      	sxth	r2, r3
        encoder_value->velocity =
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	801a      	strh	r2, [r3, #0]
      }
    }
  }
  encoder_value->position += encoder_value->velocity;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000e6c:	b209      	sxth	r1, r1
 8000e6e:	17c8      	asrs	r0, r1, #31
 8000e70:	460c      	mov	r4, r1
 8000e72:	4605      	mov	r5, r0
 8000e74:	eb12 0804 	adds.w	r8, r2, r4
 8000e78:	eb43 0905 	adc.w	r9, r3, r5
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	e9c3 8902 	strd	r8, r9, [r3, #8]
  encoder_value->last_counter_value = temp_counter;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	611a      	str	r2, [r3, #16]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000e92:	4770      	bx	lr
 8000e94:	240002ae 	.word	0x240002ae

08000e98 <rotate>:
#include "../Inc/rotate.h"

void rotate(int degree, int enc_position){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  if (enc_position > degree ) {
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	dd09      	ble.n	8000ebe <rotate+0x26>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	4814      	ldr	r0, [pc, #80]	; (8000f00 <rotate+0x68>)
 8000eb0:	f001 fd62 	bl	8002978 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	4811      	ldr	r0, [pc, #68]	; (8000f00 <rotate+0x68>)
 8000eba:	f001 fd5d 	bl	8002978 <HAL_GPIO_WritePin>
  }
  if (enc_position < degree ) {
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	da09      	bge.n	8000eda <rotate+0x42>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <rotate+0x68>)
 8000ecc:	f001 fd54 	bl	8002978 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2140      	movs	r1, #64	; 0x40
 8000ed4:	480a      	ldr	r0, [pc, #40]	; (8000f00 <rotate+0x68>)
 8000ed6:	f001 fd4f 	bl	8002978 <HAL_GPIO_WritePin>
  }
  if (enc_position == degree ) {
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d109      	bne.n	8000ef6 <rotate+0x5e>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	4806      	ldr	r0, [pc, #24]	; (8000f00 <rotate+0x68>)
 8000ee8:	f001 fd46 	bl	8002978 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2140      	movs	r1, #64	; 0x40
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <rotate+0x68>)
 8000ef2:	f001 fd41 	bl	8002978 <HAL_GPIO_WritePin>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	58020400 	.word	0x58020400

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_MspInit+0x30>)
 8000f0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_MspInit+0x30>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_MspInit+0x30>)
 8000f1c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	58024400 	.word	0x58024400

08000f38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0ba      	sub	sp, #232	; 0xe8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	22c0      	movs	r2, #192	; 0xc0
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f007 f81b 	bl	8007f94 <memset>
  if(hadc->Instance==ADC1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a2b      	ldr	r2, [pc, #172]	; (8001010 <HAL_ADC_MspInit+0xd8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d14f      	bne.n	8001008 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f88:	23c0      	movs	r3, #192	; 0xc0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 fd1c 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000faa:	f7ff feeb 	bl	8000d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_ADC_MspInit+0xdc>)
 8000fb0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000fb4:	4a17      	ldr	r2, [pc, #92]	; (8001014 <HAL_ADC_MspInit+0xdc>)
 8000fb6:	f043 0320 	orr.w	r3, r3, #32
 8000fba:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <HAL_ADC_MspInit+0xdc>)
 8000fc0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000fc4:	f003 0320 	and.w	r3, r3, #32
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_ADC_MspInit+0xdc>)
 8000fce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fd2:	4a10      	ldr	r2, [pc, #64]	; (8001014 <HAL_ADC_MspInit+0xdc>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <HAL_ADC_MspInit+0xdc>)
 8000fde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|ANALOG_READ_PA3_Pin_Pin;
 8000fea:	2309      	movs	r3, #9
 8000fec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <HAL_ADC_MspInit+0xe0>)
 8001004:	f001 fb08 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	37e8      	adds	r7, #232	; 0xe8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40022000 	.word	0x40022000
 8001014:	58024400 	.word	0x58024400
 8001018:	58020000 	.word	0x58020000

0800101c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <HAL_TIM_Encoder_MspInit+0x88>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d12d      	bne.n	800109a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001040:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001044:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001050:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800105e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800106e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = encoder1PA6_Pin|encoder2PA7_Pin;
 800107a:	23c0      	movs	r3, #192	; 0xc0
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800108a:	2302      	movs	r3, #2
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <HAL_TIM_Encoder_MspInit+0x90>)
 8001096:	f001 fabf 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40000400 	.word	0x40000400
 80010a8:	58024400 	.word	0x58024400
 80010ac:	58020000 	.word	0x58020000

080010b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_TIM_Base_MspInit+0x74>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d10f      	bne.n	80010e2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_TIM_Base_MspInit+0x78>)
 80010c4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80010c8:	4a17      	ldr	r2, [pc, #92]	; (8001128 <HAL_TIM_Base_MspInit+0x78>)
 80010ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ce:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_TIM_Base_MspInit+0x78>)
 80010d4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80010e0:	e01b      	b.n	800111a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a11      	ldr	r2, [pc, #68]	; (800112c <HAL_TIM_Base_MspInit+0x7c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d116      	bne.n	800111a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_TIM_Base_MspInit+0x78>)
 80010ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80010f2:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_TIM_Base_MspInit+0x78>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_TIM_Base_MspInit+0x78>)
 80010fe:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2076      	movs	r0, #118	; 0x76
 8001110:	f001 fa4d 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001114:	2076      	movs	r0, #118	; 0x76
 8001116:	f001 fa64 	bl	80025e2 <HAL_NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40014400 	.word	0x40014400
 8001128:	58024400 	.word	0x58024400
 800112c:	40014800 	.word	0x40014800

08001130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0ba      	sub	sp, #232	; 0xe8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	22c0      	movs	r2, #192	; 0xc0
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f006 ff1f 	bl	8007f94 <memset>
  if(huart->Instance==USART3)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a27      	ldr	r2, [pc, #156]	; (80011f8 <HAL_UART_MspInit+0xc8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d146      	bne.n	80011ee <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001160:	f04f 0202 	mov.w	r2, #2
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fc30 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001182:	f7ff fdff 	bl	8000d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_UART_MspInit+0xcc>)
 8001188:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <HAL_UART_MspInit+0xcc>)
 800118e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001192:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_UART_MspInit+0xcc>)
 8001198:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800119c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_UART_MspInit+0xcc>)
 80011a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_UART_MspInit+0xcc>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_UART_MspInit+0xcc>)
 80011b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011dc:	2307      	movs	r3, #7
 80011de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <HAL_UART_MspInit+0xd0>)
 80011ea:	f001 fa15 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	37e8      	adds	r7, #232	; 0xe8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40004800 	.word	0x40004800
 80011fc:	58024400 	.word	0x58024400
 8001200:	58020c00 	.word	0x58020c00

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <MemManage_Handler+0x4>

08001216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <UsageFault_Handler+0x4>

08001222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001250:	f000 f956 	bl	8001500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <TIM17_IRQHandler+0x10>)
 800125e:	f005 f953 	bl	8006508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	24000178 	.word	0x24000178

0800126c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <_sbrk+0x5c>)
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <_sbrk+0x60>)
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <_sbrk+0x64>)
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <_sbrk+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	429a      	cmp	r2, r3
 800129a:	d207      	bcs.n	80012ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800129c:	f006 fe82 	bl	8007fa4 <__errno>
 80012a0:	4603      	mov	r3, r0
 80012a2:	220c      	movs	r2, #12
 80012a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012aa:	e009      	b.n	80012c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <_sbrk+0x64>)
 80012bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	24100000 	.word	0x24100000
 80012cc:	00000400 	.word	0x00000400
 80012d0:	240002b0 	.word	0x240002b0
 80012d4:	24000400 	.word	0x24000400

080012d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012dc:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <SystemInit+0xd0>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e2:	4a31      	ldr	r2, [pc, #196]	; (80013a8 <SystemInit+0xd0>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <SystemInit+0xd4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d807      	bhi.n	8001308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012f8:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <SystemInit+0xd4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 030f 	bic.w	r3, r3, #15
 8001300:	4a2a      	ldr	r2, [pc, #168]	; (80013ac <SystemInit+0xd4>)
 8001302:	f043 0303 	orr.w	r3, r3, #3
 8001306:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <SystemInit+0xd8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a28      	ldr	r2, [pc, #160]	; (80013b0 <SystemInit+0xd8>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001314:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <SystemInit+0xd8>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800131a:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <SystemInit+0xd8>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4924      	ldr	r1, [pc, #144]	; (80013b0 <SystemInit+0xd8>)
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <SystemInit+0xdc>)
 8001322:	4013      	ands	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <SystemInit+0xd4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <SystemInit+0xd4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 030f 	bic.w	r3, r3, #15
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <SystemInit+0xd4>)
 800133c:	f043 0303 	orr.w	r3, r3, #3
 8001340:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <SystemInit+0xd8>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <SystemInit+0xd8>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <SystemInit+0xd8>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <SystemInit+0xd8>)
 8001356:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <SystemInit+0xe0>)
 8001358:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <SystemInit+0xd8>)
 800135c:	4a17      	ldr	r2, [pc, #92]	; (80013bc <SystemInit+0xe4>)
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <SystemInit+0xd8>)
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <SystemInit+0xe8>)
 8001364:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <SystemInit+0xd8>)
 8001368:	2200      	movs	r2, #0
 800136a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <SystemInit+0xd8>)
 800136e:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <SystemInit+0xe8>)
 8001370:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <SystemInit+0xd8>)
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <SystemInit+0xd8>)
 800137a:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <SystemInit+0xe8>)
 800137c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <SystemInit+0xd8>)
 8001380:	2200      	movs	r2, #0
 8001382:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <SystemInit+0xd8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <SystemInit+0xd8>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <SystemInit+0xd8>)
 8001392:	2200      	movs	r2, #0
 8001394:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <SystemInit+0xec>)
 8001398:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800139c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	52002000 	.word	0x52002000
 80013b0:	58024400 	.word	0x58024400
 80013b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80013b8:	02020200 	.word	0x02020200
 80013bc:	01ff0000 	.word	0x01ff0000
 80013c0:	01010280 	.word	0x01010280
 80013c4:	52004000 	.word	0x52004000

080013c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001400 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013cc:	f7ff ff84 	bl	80012d8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	; (8001408 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	; (8001414 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013f6:	f006 fddb 	bl	8007fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fa:	f7ff f947 	bl	800068c <main>
  bx  lr
 80013fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001400:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001404:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001408:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 800140c:	080089b4 	.word	0x080089b4
  ldr r2, =_sbss
 8001410:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001414:	24000400 	.word	0x24000400

08001418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC_IRQHandler>
	...

0800141c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001422:	2003      	movs	r0, #3
 8001424:	f001 f8b8 	bl	8002598 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001428:	f002 f902 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 800142c:	4602      	mov	r2, r0
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_Init+0x68>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	4913      	ldr	r1, [pc, #76]	; (8001488 <HAL_Init+0x6c>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	f003 031f 	and.w	r3, r3, #31
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
 8001444:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_Init+0x68>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_Init+0x6c>)
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_Init+0x70>)
 800145e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001460:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <HAL_Init+0x74>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001466:	2000      	movs	r0, #0
 8001468:	f000 f814 	bl	8001494 <HAL_InitTick>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e002      	b.n	800147c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001476:	f7ff fd45 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	58024400 	.word	0x58024400
 8001488:	08008938 	.word	0x08008938
 800148c:	24000004 	.word	0x24000004
 8001490:	24000000 	.word	0x24000000

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_InitTick+0x60>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e021      	b.n	80014ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_InitTick+0x64>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_InitTick+0x60>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 f89d 	bl	80025fe <HAL_SYSTICK_Config>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00e      	b.n	80014ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d80a      	bhi.n	80014ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d4:	2200      	movs	r2, #0
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014dc:	f001 f867 	bl	80025ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <HAL_InitTick+0x68>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e000      	b.n	80014ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2400000c 	.word	0x2400000c
 80014f8:	24000000 	.word	0x24000000
 80014fc:	24000008 	.word	0x24000008

08001500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x20>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x24>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_IncTick+0x24>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2400000c 	.word	0x2400000c
 8001524:	240002b4 	.word	0x240002b4

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <HAL_GetTick+0x14>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	240002b4 	.word	0x240002b4

08001540 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	609a      	str	r2, [r3, #8]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	609a      	str	r2, [r3, #8]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3360      	adds	r3, #96	; 0x60
 80015ba:	461a      	mov	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	430b      	orrs	r3, r1
 80015d6:	431a      	orrs	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80015dc:	bf00      	nop
 80015de:	371c      	adds	r7, #28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	431a      	orrs	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	611a      	str	r2, [r3, #16]
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800161a:	b480      	push	{r7}
 800161c:	b087      	sub	sp, #28
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3360      	adds	r3, #96	; 0x60
 800162a:	461a      	mov	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	431a      	orrs	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	601a      	str	r2, [r3, #0]
  }
}
 8001644:	bf00      	nop
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3330      	adds	r3, #48	; 0x30
 8001660:	461a      	mov	r2, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	4413      	add	r3, r2
 800166e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	211f      	movs	r1, #31
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	0e9b      	lsrs	r3, r3, #26
 8001688:	f003 011f 	and.w	r1, r3, #31
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	431a      	orrs	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800169c:	bf00      	nop
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3314      	adds	r3, #20
 80016b8:	461a      	mov	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	0e5b      	lsrs	r3, r3, #25
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	4413      	add	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	0d1b      	lsrs	r3, r3, #20
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	2107      	movs	r1, #7
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	401a      	ands	r2, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	0d1b      	lsrs	r3, r3, #20
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016f2:	bf00      	nop
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001718:	43db      	mvns	r3, r3
 800171a:	401a      	ands	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0318 	and.w	r3, r3, #24
 8001722:	4908      	ldr	r1, [pc, #32]	; (8001744 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001724:	40d9      	lsrs	r1, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	400b      	ands	r3, r1
 800172a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800172e:	431a      	orrs	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	000fffff 	.word	0x000fffff

08001748 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001756:	4013      	ands	r3, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6093      	str	r3, [r2, #8]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	5fffffc0 	.word	0x5fffffc0

0800176c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800177c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001780:	d101      	bne.n	8001786 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	6fffffc0 	.word	0x6fffffc0

080017bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017d0:	d101      	bne.n	80017d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <LL_ADC_IsEnabled+0x18>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <LL_ADC_IsEnabled+0x1a>
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b04      	cmp	r3, #4
 800181c:	d101      	bne.n	8001822 <LL_ADC_REG_IsConversionOngoing+0x18>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b08      	cmp	r3, #8
 8001842:	d101      	bne.n	8001848 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e138      	b.n	8001ae4 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff fb59 	bl	8000f38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff67 	bl	800176c <LL_ADC_IsDeepPowerDownEnabled>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff4d 	bl	8001748 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff82 	bl	80017bc <LL_ADC_IsInternalRegulatorEnabled>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d114      	bne.n	80018e8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff66 	bl	8001794 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018c8:	4b88      	ldr	r3, [pc, #544]	; (8001aec <HAL_ADC_Init+0x294>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	4a88      	ldr	r2, [pc, #544]	; (8001af0 <HAL_ADC_Init+0x298>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	099b      	lsrs	r3, r3, #6
 80018d6:	3301      	adds	r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018da:	e002      	b.n	80018e2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	3b01      	subs	r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f9      	bne.n	80018dc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff65 	bl	80017bc <LL_ADC_IsInternalRegulatorEnabled>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10d      	bne.n	8001914 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fc:	f043 0210 	orr.w	r2, r3, #16
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff76 	bl	800180a <LL_ADC_REG_IsConversionOngoing>
 800191e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	2b00      	cmp	r3, #0
 800192a:	f040 80d2 	bne.w	8001ad2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f040 80ce 	bne.w	8001ad2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800193e:	f043 0202 	orr.w	r2, r3, #2
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff4a 	bl	80017e4 <LL_ADC_IsEnabled>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d110      	bne.n	8001978 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001956:	4867      	ldr	r0, [pc, #412]	; (8001af4 <HAL_ADC_Init+0x29c>)
 8001958:	f7ff ff44 	bl	80017e4 <LL_ADC_IsEnabled>
 800195c:	4604      	mov	r4, r0
 800195e:	4866      	ldr	r0, [pc, #408]	; (8001af8 <HAL_ADC_Init+0x2a0>)
 8001960:	f7ff ff40 	bl	80017e4 <LL_ADC_IsEnabled>
 8001964:	4603      	mov	r3, r0
 8001966:	4323      	orrs	r3, r4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4619      	mov	r1, r3
 8001972:	4862      	ldr	r0, [pc, #392]	; (8001afc <HAL_ADC_Init+0x2a4>)
 8001974:	f7ff fde4 	bl	8001540 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7d5b      	ldrb	r3, [r3, #21]
 800197c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001982:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001988:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7f1b      	ldrb	r3, [r3, #28]
 800198e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7f1b      	ldrb	r3, [r3, #28]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d106      	bne.n	80019aa <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	045b      	lsls	r3, r3, #17
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <HAL_ADC_Init+0x2a8>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	69b9      	ldr	r1, [r7, #24]
 80019d6:	430b      	orrs	r3, r1
 80019d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ff13 	bl	800180a <LL_ADC_REG_IsConversionOngoing>
 80019e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ff20 	bl	8001830 <LL_ADC_INJ_IsConversionOngoing>
 80019f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d14a      	bne.n	8001a8e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d147      	bne.n	8001a8e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7d1b      	ldrb	r3, [r3, #20]
 8001a02:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	4b3c      	ldr	r3, [pc, #240]	; (8001b04 <HAL_ADC_Init+0x2ac>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	69b9      	ldr	r1, [r7, #24]
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d11b      	bne.n	8001a62 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <HAL_ADC_Init+0x2b0>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a3e:	3a01      	subs	r2, #1
 8001a40:	0411      	lsls	r1, r2, #16
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a52:	430a      	orrs	r2, r1
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	e007      	b.n	8001a72 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fb25 	bl	80020d8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d10c      	bne.n	8001ab0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	f023 010f 	bic.w	r1, r3, #15
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
 8001aae:	e007      	b.n	8001ac0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 020f 	bic.w	r2, r2, #15
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac4:	f023 0303 	bic.w	r3, r3, #3
 8001ac8:	f043 0201 	orr.w	r2, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	655a      	str	r2, [r3, #84]	; 0x54
 8001ad0:	e007      	b.n	8001ae2 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f043 0210 	orr.w	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3724      	adds	r7, #36	; 0x24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd90      	pop	{r4, r7, pc}
 8001aec:	24000000 	.word	0x24000000
 8001af0:	053e2d63 	.word	0x053e2d63
 8001af4:	40022000 	.word	0x40022000
 8001af8:	40022100 	.word	0x40022100
 8001afc:	40022300 	.word	0x40022300
 8001b00:	fff0c003 	.word	0xfff0c003
 8001b04:	ffffbffc 	.word	0xffffbffc
 8001b08:	fc00f81e 	.word	0xfc00f81e

08001b0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b0a1      	sub	sp, #132	; 0x84
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a9a      	ldr	r2, [pc, #616]	; (8001d90 <HAL_ADC_ConfigChannel+0x284>)
 8001b26:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x2a>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e2bc      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x5a4>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fe61 	bl	800180a <LL_ADC_REG_IsConversionOngoing>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 82a1 	bne.w	8002092 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d108      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x62>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0e9b      	lsrs	r3, r3, #26
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2201      	movs	r2, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	e016      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x90>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b7e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001b86:	2320      	movs	r3, #32
 8001b88:	e003      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	2201      	movs	r2, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	69d1      	ldr	r1, [r2, #28]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6859      	ldr	r1, [r3, #4]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f7ff fd4a 	bl	8001650 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fe22 	bl	800180a <LL_ADC_REG_IsConversionOngoing>
 8001bc6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fe2f 	bl	8001830 <LL_ADC_INJ_IsConversionOngoing>
 8001bd2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 80a0 	bne.w	8001d1c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 809c 	bne.w	8001d1c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6819      	ldr	r1, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f7ff fd59 	bl	80016a8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10b      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x110>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	695a      	ldr	r2, [r3, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	e00a      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x126>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d027      	beq.n	8001c8c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6919      	ldr	r1, [r3, #16]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c4a:	f7ff fcad 	bl	80015a8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6919      	ldr	r1, [r3, #16]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	7e5b      	ldrb	r3, [r3, #25]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d102      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x158>
 8001c5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c62:	e000      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x15a>
 8001c64:	2300      	movs	r3, #0
 8001c66:	461a      	mov	r2, r3
 8001c68:	f7ff fcd7 	bl	800161a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6919      	ldr	r1, [r3, #16]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	7e1b      	ldrb	r3, [r3, #24]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d102      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x176>
 8001c7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c80:	e000      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x178>
 8001c82:	2300      	movs	r3, #0
 8001c84:	461a      	mov	r2, r3
 8001c86:	f7ff fcaf 	bl	80015e8 <LL_ADC_SetDataRightShift>
 8001c8a:	e047      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	069b      	lsls	r3, r3, #26
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d107      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cae:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	069b      	lsls	r3, r3, #26
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d107      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cd2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	069b      	lsls	r3, r3, #26
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d107      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cf6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	069b      	lsls	r3, r3, #26
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d107      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d1a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fd5f 	bl	80017e4 <LL_ADC_IsEnabled>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f040 81bb 	bne.w	80020a4 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6819      	ldr	r1, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f7ff fce0 	bl	8001700 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <HAL_ADC_ConfigChannel+0x284>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	f040 8130 	bne.w	8001fac <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10b      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x268>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0e9b      	lsrs	r3, r3, #26
 8001d62:	3301      	adds	r3, #1
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	2b09      	cmp	r3, #9
 8001d6a:	bf94      	ite	ls
 8001d6c:	2301      	movls	r3, #1
 8001d6e:	2300      	movhi	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e01b      	b.n	8001dac <HAL_ADC_ConfigChannel+0x2a0>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d103      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	e005      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x290>
 8001d90:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	2b09      	cmp	r3, #9
 8001da4:	bf94      	ite	ls
 8001da6:	2301      	movls	r3, #1
 8001da8:	2300      	movhi	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d079      	beq.n	8001ea4 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x2c0>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0e9b      	lsrs	r3, r3, #26
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	069b      	lsls	r3, r3, #26
 8001dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dca:	e015      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x2ec>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ddc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001de4:	2320      	movs	r3, #32
 8001de6:	e003      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	069b      	lsls	r3, r3, #26
 8001df4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x30c>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	0e9b      	lsrs	r3, r3, #26
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	e017      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x33c>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e28:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001e30:	2320      	movs	r3, #32
 8001e32:	e003      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	2101      	movs	r1, #1
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	ea42 0103 	orr.w	r1, r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10a      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x362>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0e9b      	lsrs	r3, r3, #26
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	051b      	lsls	r3, r3, #20
 8001e6c:	e018      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x394>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001e86:	2320      	movs	r3, #32
 8001e88:	e003      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	e07e      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x3b4>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0e9b      	lsrs	r3, r3, #26
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	069b      	lsls	r3, r3, #26
 8001eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ebe:	e015      	b.n	8001eec <HAL_ADC_ConfigChannel+0x3e0>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	e003      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	069b      	lsls	r3, r3, #26
 8001ee8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x400>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	3301      	adds	r3, #1
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	e017      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x430>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	61bb      	str	r3, [r7, #24]
  return result;
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2101      	movs	r1, #1
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	ea42 0103 	orr.w	r1, r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10d      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x45c>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	3301      	adds	r3, #1
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3b1e      	subs	r3, #30
 8001f60:	051b      	lsls	r3, r3, #20
 8001f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f66:	e01b      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x494>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	60fb      	str	r3, [r7, #12]
  return result;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8001f80:	2320      	movs	r3, #32
 8001f82:	e003      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f003 021f 	and.w	r2, r3, #31
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	3b1e      	subs	r3, #30
 8001f9a:	051b      	lsls	r3, r3, #20
 8001f9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	6892      	ldr	r2, [r2, #8]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7ff fb7e 	bl	80016a8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	da77      	bge.n	80020a4 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fb4:	4840      	ldr	r0, [pc, #256]	; (80020b8 <HAL_ADC_ConfigChannel+0x5ac>)
 8001fb6:	f7ff fae9 	bl	800158c <LL_ADC_GetCommonPathInternalCh>
 8001fba:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fbc:	483f      	ldr	r0, [pc, #252]	; (80020bc <HAL_ADC_ConfigChannel+0x5b0>)
 8001fbe:	f7ff fc11 	bl	80017e4 <LL_ADC_IsEnabled>
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	483e      	ldr	r0, [pc, #248]	; (80020c0 <HAL_ADC_ConfigChannel+0x5b4>)
 8001fc6:	f7ff fc0d 	bl	80017e4 <LL_ADC_IsEnabled>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4323      	orrs	r3, r4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d155      	bne.n	800207e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a3b      	ldr	r2, [pc, #236]	; (80020c4 <HAL_ADC_ConfigChannel+0x5b8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d122      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x516>
 8001fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d11d      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a35      	ldr	r2, [pc, #212]	; (80020c0 <HAL_ADC_ConfigChannel+0x5b4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d159      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	482f      	ldr	r0, [pc, #188]	; (80020b8 <HAL_ADC_ConfigChannel+0x5ac>)
 8001ffa:	f7ff fab4 	bl	8001566 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ffe:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <HAL_ADC_ConfigChannel+0x5bc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	099b      	lsrs	r3, r3, #6
 8002004:	4a31      	ldr	r2, [pc, #196]	; (80020cc <HAL_ADC_ConfigChannel+0x5c0>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	099b      	lsrs	r3, r3, #6
 800200c:	3301      	adds	r3, #1
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002012:	e002      	b.n	800201a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	3b01      	subs	r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f9      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002020:	e040      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2a      	ldr	r2, [pc, #168]	; (80020d0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d111      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x544>
 800202c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10c      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a21      	ldr	r2, [pc, #132]	; (80020c0 <HAL_ADC_ConfigChannel+0x5b4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d131      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002046:	4619      	mov	r1, r3
 8002048:	481b      	ldr	r0, [pc, #108]	; (80020b8 <HAL_ADC_ConfigChannel+0x5ac>)
 800204a:	f7ff fa8c 	bl	8001566 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800204e:	e029      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1f      	ldr	r2, [pc, #124]	; (80020d4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d124      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x598>
 800205a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d11f      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a15      	ldr	r2, [pc, #84]	; (80020c0 <HAL_ADC_ConfigChannel+0x5b4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d11a      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800206e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002074:	4619      	mov	r1, r3
 8002076:	4810      	ldr	r0, [pc, #64]	; (80020b8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002078:	f7ff fa75 	bl	8001566 <LL_ADC_SetCommonPathInternalCh>
 800207c:	e012      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	f043 0220 	orr.w	r2, r3, #32
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002090:	e008      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	f043 0220 	orr.w	r2, r3, #32
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3784      	adds	r7, #132	; 0x84
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd90      	pop	{r4, r7, pc}
 80020b8:	40022300 	.word	0x40022300
 80020bc:	40022000 	.word	0x40022000
 80020c0:	40022100 	.word	0x40022100
 80020c4:	cb840000 	.word	0xcb840000
 80020c8:	24000000 	.word	0x24000000
 80020cc:	053e2d63 	.word	0x053e2d63
 80020d0:	bac04000 	.word	0xbac04000
 80020d4:	cfb80000 	.word	0xcfb80000

080020d8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80020e0:	4b60      	ldr	r3, [pc, #384]	; (8002264 <ADC_ConfigureBoostMode+0x18c>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01c      	beq.n	8002126 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80020ec:	f001 fc1a 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 80020f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020fa:	d010      	beq.n	800211e <ADC_ConfigureBoostMode+0x46>
 80020fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002100:	d873      	bhi.n	80021ea <ADC_ConfigureBoostMode+0x112>
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002106:	d002      	beq.n	800210e <ADC_ConfigureBoostMode+0x36>
 8002108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800210c:	d16d      	bne.n	80021ea <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	0c1b      	lsrs	r3, r3, #16
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	fbb2 f3f3 	udiv	r3, r2, r3
 800211a:	60fb      	str	r3, [r7, #12]
        break;
 800211c:	e068      	b.n	80021f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	60fb      	str	r3, [r7, #12]
        break;
 8002124:	e064      	b.n	80021f0 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002126:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800212a:	f04f 0100 	mov.w	r1, #0
 800212e:	f002 fe13 	bl	8004d58 <HAL_RCCEx_GetPeriphCLKFreq>
 8002132:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800213c:	d051      	beq.n	80021e2 <ADC_ConfigureBoostMode+0x10a>
 800213e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002142:	d854      	bhi.n	80021ee <ADC_ConfigureBoostMode+0x116>
 8002144:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002148:	d047      	beq.n	80021da <ADC_ConfigureBoostMode+0x102>
 800214a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800214e:	d84e      	bhi.n	80021ee <ADC_ConfigureBoostMode+0x116>
 8002150:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002154:	d03d      	beq.n	80021d2 <ADC_ConfigureBoostMode+0xfa>
 8002156:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800215a:	d848      	bhi.n	80021ee <ADC_ConfigureBoostMode+0x116>
 800215c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002160:	d033      	beq.n	80021ca <ADC_ConfigureBoostMode+0xf2>
 8002162:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002166:	d842      	bhi.n	80021ee <ADC_ConfigureBoostMode+0x116>
 8002168:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800216c:	d029      	beq.n	80021c2 <ADC_ConfigureBoostMode+0xea>
 800216e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002172:	d83c      	bhi.n	80021ee <ADC_ConfigureBoostMode+0x116>
 8002174:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002178:	d01a      	beq.n	80021b0 <ADC_ConfigureBoostMode+0xd8>
 800217a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800217e:	d836      	bhi.n	80021ee <ADC_ConfigureBoostMode+0x116>
 8002180:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002184:	d014      	beq.n	80021b0 <ADC_ConfigureBoostMode+0xd8>
 8002186:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800218a:	d830      	bhi.n	80021ee <ADC_ConfigureBoostMode+0x116>
 800218c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002190:	d00e      	beq.n	80021b0 <ADC_ConfigureBoostMode+0xd8>
 8002192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002196:	d82a      	bhi.n	80021ee <ADC_ConfigureBoostMode+0x116>
 8002198:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800219c:	d008      	beq.n	80021b0 <ADC_ConfigureBoostMode+0xd8>
 800219e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021a2:	d824      	bhi.n	80021ee <ADC_ConfigureBoostMode+0x116>
 80021a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021a8:	d002      	beq.n	80021b0 <ADC_ConfigureBoostMode+0xd8>
 80021aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021ae:	d11e      	bne.n	80021ee <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	0c9b      	lsrs	r3, r3, #18
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	60fb      	str	r3, [r7, #12]
        break;
 80021c0:	e016      	b.n	80021f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	60fb      	str	r3, [r7, #12]
        break;
 80021c8:	e012      	b.n	80021f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	60fb      	str	r3, [r7, #12]
        break;
 80021d0:	e00e      	b.n	80021f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	60fb      	str	r3, [r7, #12]
        break;
 80021d8:	e00a      	b.n	80021f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	09db      	lsrs	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]
        break;
 80021e0:	e006      	b.n	80021f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	60fb      	str	r3, [r7, #12]
        break;
 80021e8:	e002      	b.n	80021f0 <ADC_ConfigureBoostMode+0x118>
        break;
 80021ea:	bf00      	nop
 80021ec:	e000      	b.n	80021f0 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80021ee:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	085b      	lsrs	r3, r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <ADC_ConfigureBoostMode+0x190>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d808      	bhi.n	8002210 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800220c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800220e:	e025      	b.n	800225c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4a16      	ldr	r2, [pc, #88]	; (800226c <ADC_ConfigureBoostMode+0x194>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d80a      	bhi.n	800222e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800222a:	609a      	str	r2, [r3, #8]
}
 800222c:	e016      	b.n	800225c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <ADC_ConfigureBoostMode+0x198>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d80a      	bhi.n	800224c <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002248:	609a      	str	r2, [r3, #8]
}
 800224a:	e007      	b.n	800225c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800225a:	609a      	str	r2, [r3, #8]
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40022300 	.word	0x40022300
 8002268:	005f5e10 	.word	0x005f5e10
 800226c:	00bebc20 	.word	0x00bebc20
 8002270:	017d7840 	.word	0x017d7840

08002274 <LL_ADC_IsEnabled>:
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <LL_ADC_IsEnabled+0x18>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <LL_ADC_IsEnabled+0x1a>
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_ADC_REG_IsConversionOngoing>:
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d101      	bne.n	80022b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b09f      	sub	sp, #124	; 0x7c
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80022da:	2302      	movs	r3, #2
 80022dc:	e080      	b.n	80023e0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a3d      	ldr	r2, [pc, #244]	; (80023e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d102      	bne.n	80022fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80022f8:	4b3c      	ldr	r3, [pc, #240]	; (80023ec <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	e001      	b.n	8002302 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	f043 0220 	orr.w	r2, r3, #32
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e05f      	b.n	80023e0 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ffb9 	bl	800229a <LL_ADC_REG_IsConversionOngoing>
 8002328:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ffb3 	bl	800229a <LL_ADC_REG_IsConversionOngoing>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d141      	bne.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800233a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800233c:	2b00      	cmp	r3, #0
 800233e:	d13e      	bne.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002340:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002342:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800234c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	431a      	orrs	r2, r3
 800235a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800235e:	4822      	ldr	r0, [pc, #136]	; (80023e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002360:	f7ff ff88 	bl	8002274 <LL_ADC_IsEnabled>
 8002364:	4604      	mov	r4, r0
 8002366:	4821      	ldr	r0, [pc, #132]	; (80023ec <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002368:	f7ff ff84 	bl	8002274 <LL_ADC_IsEnabled>
 800236c:	4603      	mov	r3, r0
 800236e:	4323      	orrs	r3, r4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d12e      	bne.n	80023d2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800237a:	4013      	ands	r3, r2
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	6811      	ldr	r1, [r2, #0]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	6892      	ldr	r2, [r2, #8]
 8002384:	430a      	orrs	r2, r1
 8002386:	431a      	orrs	r2, r3
 8002388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800238c:	e021      	b.n	80023d2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800238e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002398:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800239a:	4813      	ldr	r0, [pc, #76]	; (80023e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800239c:	f7ff ff6a 	bl	8002274 <LL_ADC_IsEnabled>
 80023a0:	4604      	mov	r4, r0
 80023a2:	4812      	ldr	r0, [pc, #72]	; (80023ec <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80023a4:	f7ff ff66 	bl	8002274 <LL_ADC_IsEnabled>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4323      	orrs	r3, r4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d110      	bne.n	80023d2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80023b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023ba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023bc:	e009      	b.n	80023d2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f043 0220 	orr.w	r2, r3, #32
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80023d0:	e000      	b.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023d2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	377c      	adds	r7, #124	; 0x7c
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}
 80023e8:	40022000 	.word	0x40022000
 80023ec:	40022100 	.word	0x40022100
 80023f0:	40022300 	.word	0x40022300
 80023f4:	fffff0e0 	.word	0xfffff0e0

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <__NVIC_SetPriorityGrouping+0x40>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 8002422:	4313      	orrs	r3, r2
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <__NVIC_SetPriorityGrouping+0x40>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00
 800243c:	05fa0000 	.word	0x05fa0000

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800246a:	2b00      	cmp	r3, #0
 800246c:	db0b      	blt.n	8002486 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	4907      	ldr	r1, [pc, #28]	; (8002494 <__NVIC_EnableIRQ+0x38>)
 8002476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2001      	movs	r0, #1
 800247e:	fa00 f202 	lsl.w	r2, r0, r2
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000e100 	.word	0xe000e100

08002498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	db0a      	blt.n	80024c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	490c      	ldr	r1, [pc, #48]	; (80024e4 <__NVIC_SetPriority+0x4c>)
 80024b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b6:	0112      	lsls	r2, r2, #4
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	440b      	add	r3, r1
 80024bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c0:	e00a      	b.n	80024d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4908      	ldr	r1, [pc, #32]	; (80024e8 <__NVIC_SetPriority+0x50>)
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	3b04      	subs	r3, #4
 80024d0:	0112      	lsls	r2, r2, #4
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	440b      	add	r3, r1
 80024d6:	761a      	strb	r2, [r3, #24]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000e100 	.word	0xe000e100
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f1c3 0307 	rsb	r3, r3, #7
 8002506:	2b04      	cmp	r3, #4
 8002508:	bf28      	it	cs
 800250a:	2304      	movcs	r3, #4
 800250c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3304      	adds	r3, #4
 8002512:	2b06      	cmp	r3, #6
 8002514:	d902      	bls.n	800251c <NVIC_EncodePriority+0x30>
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3b03      	subs	r3, #3
 800251a:	e000      	b.n	800251e <NVIC_EncodePriority+0x32>
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	401a      	ands	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002534:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43d9      	mvns	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	4313      	orrs	r3, r2
         );
}
 8002546:	4618      	mov	r0, r3
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002564:	d301      	bcc.n	800256a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002566:	2301      	movs	r3, #1
 8002568:	e00f      	b.n	800258a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <SysTick_Config+0x40>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002572:	210f      	movs	r1, #15
 8002574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002578:	f7ff ff8e 	bl	8002498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <SysTick_Config+0x40>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <SysTick_Config+0x40>)
 8002584:	2207      	movs	r2, #7
 8002586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000e010 	.word	0xe000e010

08002598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff29 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025bc:	f7ff ff40 	bl	8002440 <__NVIC_GetPriorityGrouping>
 80025c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff90 	bl	80024ec <NVIC_EncodePriority>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff5f 	bl	8002498 <__NVIC_SetPriority>
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff33 	bl	800245c <__NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffa4 	bl	8002554 <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002626:	4b89      	ldr	r3, [pc, #548]	; (800284c <HAL_GPIO_Init+0x234>)
 8002628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800262a:	e194      	b.n	8002956 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2101      	movs	r1, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8186 	beq.w	8002950 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d005      	beq.n	800265c <HAL_GPIO_Init+0x44>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d130      	bne.n	80026be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002692:	2201      	movs	r2, #1
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	f003 0201 	and.w	r2, r3, #1
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d017      	beq.n	80026fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	2203      	movs	r2, #3
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d123      	bne.n	800274e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	08da      	lsrs	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3208      	adds	r2, #8
 800270e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	220f      	movs	r2, #15
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0203 	and.w	r2, r3, #3
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80e0 	beq.w	8002950 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002790:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <HAL_GPIO_Init+0x238>)
 8002792:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002796:	4a2e      	ldr	r2, [pc, #184]	; (8002850 <HAL_GPIO_Init+0x238>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_GPIO_Init+0x238>)
 80027a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ae:	4a29      	ldr	r2, [pc, #164]	; (8002854 <HAL_GPIO_Init+0x23c>)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	3302      	adds	r3, #2
 80027b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	220f      	movs	r2, #15
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a20      	ldr	r2, [pc, #128]	; (8002858 <HAL_GPIO_Init+0x240>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d052      	beq.n	8002880 <HAL_GPIO_Init+0x268>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a1f      	ldr	r2, [pc, #124]	; (800285c <HAL_GPIO_Init+0x244>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d031      	beq.n	8002846 <HAL_GPIO_Init+0x22e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a1e      	ldr	r2, [pc, #120]	; (8002860 <HAL_GPIO_Init+0x248>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d02b      	beq.n	8002842 <HAL_GPIO_Init+0x22a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_GPIO_Init+0x24c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d025      	beq.n	800283e <HAL_GPIO_Init+0x226>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <HAL_GPIO_Init+0x250>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01f      	beq.n	800283a <HAL_GPIO_Init+0x222>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <HAL_GPIO_Init+0x254>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d019      	beq.n	8002836 <HAL_GPIO_Init+0x21e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <HAL_GPIO_Init+0x258>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_GPIO_Init+0x21a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_GPIO_Init+0x25c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00d      	beq.n	800282e <HAL_GPIO_Init+0x216>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a18      	ldr	r2, [pc, #96]	; (8002878 <HAL_GPIO_Init+0x260>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d007      	beq.n	800282a <HAL_GPIO_Init+0x212>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a17      	ldr	r2, [pc, #92]	; (800287c <HAL_GPIO_Init+0x264>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d101      	bne.n	8002826 <HAL_GPIO_Init+0x20e>
 8002822:	2309      	movs	r3, #9
 8002824:	e02d      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002826:	230a      	movs	r3, #10
 8002828:	e02b      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800282a:	2308      	movs	r3, #8
 800282c:	e029      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800282e:	2307      	movs	r3, #7
 8002830:	e027      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002832:	2306      	movs	r3, #6
 8002834:	e025      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002836:	2305      	movs	r3, #5
 8002838:	e023      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800283a:	2304      	movs	r3, #4
 800283c:	e021      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800283e:	2303      	movs	r3, #3
 8002840:	e01f      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002842:	2302      	movs	r3, #2
 8002844:	e01d      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002846:	2301      	movs	r3, #1
 8002848:	e01b      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800284a:	bf00      	nop
 800284c:	58000080 	.word	0x58000080
 8002850:	58024400 	.word	0x58024400
 8002854:	58000400 	.word	0x58000400
 8002858:	58020000 	.word	0x58020000
 800285c:	58020400 	.word	0x58020400
 8002860:	58020800 	.word	0x58020800
 8002864:	58020c00 	.word	0x58020c00
 8002868:	58021000 	.word	0x58021000
 800286c:	58021400 	.word	0x58021400
 8002870:	58021800 	.word	0x58021800
 8002874:	58021c00 	.word	0x58021c00
 8002878:	58022000 	.word	0x58022000
 800287c:	58022400 	.word	0x58022400
 8002880:	2300      	movs	r3, #0
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	f002 0203 	and.w	r2, r2, #3
 8002888:	0092      	lsls	r2, r2, #2
 800288a:	4093      	lsls	r3, r2
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002892:	4938      	ldr	r1, [pc, #224]	; (8002974 <HAL_GPIO_Init+0x35c>)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	3302      	adds	r3, #2
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	3301      	adds	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	f47f ae63 	bne.w	800262c <HAL_GPIO_Init+0x14>
  }
}
 8002966:	bf00      	nop
 8002968:	bf00      	nop
 800296a:	3724      	adds	r7, #36	; 0x24
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	58000400 	.word	0x58000400

08002978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	807b      	strh	r3, [r7, #2]
 8002984:	4613      	mov	r3, r2
 8002986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002988:	787b      	ldrb	r3, [r7, #1]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800298e:	887a      	ldrh	r2, [r7, #2]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002994:	e003      	b.n	800299e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	041a      	lsls	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	619a      	str	r2, [r3, #24]
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80029b4:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <HAL_PWREx_ConfigSupply+0xb0>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	2b06      	cmp	r3, #6
 80029be:	d00a      	beq.n	80029d6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029c0:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <HAL_PWREx_ConfigSupply+0xb0>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e040      	b.n	8002a54 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e03e      	b.n	8002a54 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80029d6:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <HAL_PWREx_ConfigSupply+0xb0>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80029de:	491f      	ldr	r1, [pc, #124]	; (8002a5c <HAL_PWREx_ConfigSupply+0xb0>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80029e6:	f7fe fd9f 	bl	8001528 <HAL_GetTick>
 80029ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029ec:	e009      	b.n	8002a02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029ee:	f7fe fd9b 	bl	8001528 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029fc:	d901      	bls.n	8002a02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e028      	b.n	8002a54 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a02:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0e:	d1ee      	bne.n	80029ee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b1e      	cmp	r3, #30
 8002a14:	d008      	beq.n	8002a28 <HAL_PWREx_ConfigSupply+0x7c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b2e      	cmp	r3, #46	; 0x2e
 8002a1a:	d005      	beq.n	8002a28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b1d      	cmp	r3, #29
 8002a20:	d002      	beq.n	8002a28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b2d      	cmp	r3, #45	; 0x2d
 8002a26:	d114      	bne.n	8002a52 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002a28:	f7fe fd7e 	bl	8001528 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a2e:	e009      	b.n	8002a44 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a30:	f7fe fd7a 	bl	8001528 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a3e:	d901      	bls.n	8002a44 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e007      	b.n	8002a54 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d1ee      	bne.n	8002a30 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	58024800 	.word	0x58024800

08002a60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	; 0x30
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f000 bc1f 	b.w	80032b2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80b3 	beq.w	8002be8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a82:	4b95      	ldr	r3, [pc, #596]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a8c:	4b92      	ldr	r3, [pc, #584]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d007      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x48>
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	2b18      	cmp	r3, #24
 8002a9c:	d112      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x64>
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d10d      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8098 	beq.w	8002be6 <HAL_RCC_OscConfig+0x186>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 8093 	bne.w	8002be6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e3f6      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002acc:	d106      	bne.n	8002adc <HAL_RCC_OscConfig+0x7c>
 8002ace:	4b82      	ldr	r3, [pc, #520]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a81      	ldr	r2, [pc, #516]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e058      	b.n	8002b8e <HAL_RCC_OscConfig+0x12e>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d112      	bne.n	8002b0a <HAL_RCC_OscConfig+0xaa>
 8002ae4:	4b7c      	ldr	r3, [pc, #496]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a7b      	ldr	r2, [pc, #492]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b79      	ldr	r3, [pc, #484]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a78      	ldr	r2, [pc, #480]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002af6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b76      	ldr	r3, [pc, #472]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a75      	ldr	r2, [pc, #468]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	e041      	b.n	8002b8e <HAL_RCC_OscConfig+0x12e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b12:	d112      	bne.n	8002b3a <HAL_RCC_OscConfig+0xda>
 8002b14:	4b70      	ldr	r3, [pc, #448]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a6f      	ldr	r2, [pc, #444]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b6d      	ldr	r3, [pc, #436]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6c      	ldr	r2, [pc, #432]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b6a      	ldr	r3, [pc, #424]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a69      	ldr	r2, [pc, #420]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e029      	b.n	8002b8e <HAL_RCC_OscConfig+0x12e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002b42:	d112      	bne.n	8002b6a <HAL_RCC_OscConfig+0x10a>
 8002b44:	4b64      	ldr	r3, [pc, #400]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a63      	ldr	r2, [pc, #396]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a60      	ldr	r2, [pc, #384]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b5e      	ldr	r3, [pc, #376]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a5d      	ldr	r2, [pc, #372]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	e011      	b.n	8002b8e <HAL_RCC_OscConfig+0x12e>
 8002b6a:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a5a      	ldr	r2, [pc, #360]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a57      	ldr	r2, [pc, #348]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b55      	ldr	r3, [pc, #340]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a54      	ldr	r2, [pc, #336]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002b88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d013      	beq.n	8002bbe <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7fe fcc7 	bl	8001528 <HAL_GetTick>
 8002b9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9e:	f7fe fcc3 	bl	8001528 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b64      	cmp	r3, #100	; 0x64
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e380      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bb0:	4b49      	ldr	r3, [pc, #292]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x13e>
 8002bbc:	e014      	b.n	8002be8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fcb3 	bl	8001528 <HAL_GetTick>
 8002bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc6:	f7fe fcaf 	bl	8001528 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b64      	cmp	r3, #100	; 0x64
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e36c      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bd8:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x166>
 8002be4:	e000      	b.n	8002be8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 808c 	beq.w	8002d0e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf6:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bfe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_RCC_OscConfig+0x1bc>
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	2b18      	cmp	r3, #24
 8002c10:	d137      	bne.n	8002c82 <HAL_RCC_OscConfig+0x222>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d132      	bne.n	8002c82 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c1c:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x1d4>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e33e      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c34:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 0219 	bic.w	r2, r3, #25
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4925      	ldr	r1, [pc, #148]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7fe fc6f 	bl	8001528 <HAL_GetTick>
 8002c4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7fe fc6b 	bl	8001528 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e328      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	4917      	ldr	r1, [pc, #92]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c80:	e045      	b.n	8002d0e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d028      	beq.n	8002cdc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 0219 	bic.w	r2, r3, #25
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	4910      	ldr	r1, [pc, #64]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fc44 	bl	8001528 <HAL_GetTick>
 8002ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca4:	f7fe fc40 	bl	8001528 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e2fd      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	061b      	lsls	r3, r3, #24
 8002cd0:	4901      	ldr	r1, [pc, #4]	; (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
 8002cd6:	e01a      	b.n	8002d0e <HAL_RCC_OscConfig+0x2ae>
 8002cd8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cdc:	4b97      	ldr	r3, [pc, #604]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a96      	ldr	r2, [pc, #600]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fc1e 	bl	8001528 <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fc1a 	bl	8001528 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e2d7      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d02:	4b8e      	ldr	r3, [pc, #568]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d06a      	beq.n	8002df0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1a:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d24:	4b85      	ldr	r3, [pc, #532]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d007      	beq.n	8002d40 <HAL_RCC_OscConfig+0x2e0>
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b18      	cmp	r3, #24
 8002d34:	d11b      	bne.n	8002d6e <HAL_RCC_OscConfig+0x30e>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d116      	bne.n	8002d6e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d40:	4b7e      	ldr	r3, [pc, #504]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_OscConfig+0x2f8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	2b80      	cmp	r3, #128	; 0x80
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e2ac      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d58:	4b78      	ldr	r3, [pc, #480]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	4975      	ldr	r1, [pc, #468]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d6c:	e040      	b.n	8002df0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d023      	beq.n	8002dbe <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d76:	4b71      	ldr	r3, [pc, #452]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a70      	ldr	r2, [pc, #448]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fe fbd1 	bl	8001528 <HAL_GetTick>
 8002d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d8a:	f7fe fbcd 	bl	8001528 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e28a      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d9c:	4b67      	ldr	r3, [pc, #412]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002da8:	4b64      	ldr	r3, [pc, #400]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	061b      	lsls	r3, r3, #24
 8002db6:	4961      	ldr	r1, [pc, #388]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60cb      	str	r3, [r1, #12]
 8002dbc:	e018      	b.n	8002df0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002dbe:	4b5f      	ldr	r3, [pc, #380]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5e      	ldr	r2, [pc, #376]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe fbad 	bl	8001528 <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002dd2:	f7fe fba9 	bl	8001528 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e266      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002de4:	4b55      	ldr	r3, [pc, #340]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d036      	beq.n	8002e6a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d019      	beq.n	8002e38 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e04:	4b4d      	ldr	r3, [pc, #308]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e08:	4a4c      	ldr	r2, [pc, #304]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe fb8a 	bl	8001528 <HAL_GetTick>
 8002e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e18:	f7fe fb86 	bl	8001528 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e243      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e2a:	4b44      	ldr	r3, [pc, #272]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x3b8>
 8002e36:	e018      	b.n	8002e6a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e38:	4b40      	ldr	r3, [pc, #256]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3c:	4a3f      	ldr	r2, [pc, #252]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7fe fb70 	bl	8001528 <HAL_GetTick>
 8002e48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fb6c 	bl	8001528 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e229      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e5e:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d036      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d019      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e7e:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2e      	ldr	r2, [pc, #184]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fb4d 	bl	8001528 <HAL_GetTick>
 8002e8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e92:	f7fe fb49 	bl	8001528 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e206      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ea4:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x432>
 8002eb0:	e018      	b.n	8002ee4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eb2:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ebc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fb33 	bl	8001528 <HAL_GetTick>
 8002ec2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec6:	f7fe fb2f 	bl	8001528 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e1ec      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ed8:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f0      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80af 	beq.w	8003050 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <HAL_RCC_OscConfig+0x4e0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <HAL_RCC_OscConfig+0x4e0>)
 8002ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002efe:	f7fe fb13 	bl	8001528 <HAL_GetTick>
 8002f02:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f06:	f7fe fb0f 	bl	8001528 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b64      	cmp	r3, #100	; 0x64
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e1cc      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_RCC_OscConfig+0x4e0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10b      	bne.n	8002f44 <HAL_RCC_OscConfig+0x4e4>
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	4a02      	ldr	r2, [pc, #8]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6713      	str	r3, [r2, #112]	; 0x70
 8002f38:	e05b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x592>
 8002f3a:	bf00      	nop
 8002f3c:	58024400 	.word	0x58024400
 8002f40:	58024800 	.word	0x58024800
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d112      	bne.n	8002f72 <HAL_RCC_OscConfig+0x512>
 8002f4c:	4b9d      	ldr	r3, [pc, #628]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	4a9c      	ldr	r2, [pc, #624]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	6713      	str	r3, [r2, #112]	; 0x70
 8002f58:	4b9a      	ldr	r3, [pc, #616]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	4a99      	ldr	r2, [pc, #612]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f62:	6713      	str	r3, [r2, #112]	; 0x70
 8002f64:	4b97      	ldr	r3, [pc, #604]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a96      	ldr	r2, [pc, #600]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002f6a:	f023 0304 	bic.w	r3, r3, #4
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	e03f      	b.n	8002ff2 <HAL_RCC_OscConfig+0x592>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d112      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x540>
 8002f7a:	4b92      	ldr	r3, [pc, #584]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a91      	ldr	r2, [pc, #580]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
 8002f86:	4b8f      	ldr	r3, [pc, #572]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a8e      	ldr	r2, [pc, #568]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
 8002f92:	4b8c      	ldr	r3, [pc, #560]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	4a8b      	ldr	r2, [pc, #556]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9e:	e028      	b.n	8002ff2 <HAL_RCC_OscConfig+0x592>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b85      	cmp	r3, #133	; 0x85
 8002fa6:	d112      	bne.n	8002fce <HAL_RCC_OscConfig+0x56e>
 8002fa8:	4b86      	ldr	r3, [pc, #536]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	4a85      	ldr	r2, [pc, #532]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002fae:	f043 0304 	orr.w	r3, r3, #4
 8002fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb4:	4b83      	ldr	r3, [pc, #524]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a82      	ldr	r2, [pc, #520]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc0:	4b80      	ldr	r3, [pc, #512]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4a7f      	ldr	r2, [pc, #508]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6713      	str	r3, [r2, #112]	; 0x70
 8002fcc:	e011      	b.n	8002ff2 <HAL_RCC_OscConfig+0x592>
 8002fce:	4b7d      	ldr	r3, [pc, #500]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a7c      	ldr	r2, [pc, #496]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fda:	4b7a      	ldr	r3, [pc, #488]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	4a79      	ldr	r2, [pc, #484]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002fe0:	f023 0304 	bic.w	r3, r3, #4
 8002fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe6:	4b77      	ldr	r3, [pc, #476]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	4a76      	ldr	r2, [pc, #472]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8002fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ff0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d015      	beq.n	8003026 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffa:	f7fe fa95 	bl	8001528 <HAL_GetTick>
 8002ffe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003000:	e00a      	b.n	8003018 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fe fa91 	bl	8001528 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e14c      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003018:	4b6a      	ldr	r3, [pc, #424]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 800301a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0ee      	beq.n	8003002 <HAL_RCC_OscConfig+0x5a2>
 8003024:	e014      	b.n	8003050 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003026:	f7fe fa7f 	bl	8001528 <HAL_GetTick>
 800302a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fe fa7b 	bl	8001528 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e136      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003044:	4b5f      	ldr	r3, [pc, #380]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ee      	bne.n	800302e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 812b 	beq.w	80032b0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800305a:	4b5a      	ldr	r3, [pc, #360]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003062:	2b18      	cmp	r3, #24
 8003064:	f000 80bb 	beq.w	80031de <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	2b02      	cmp	r3, #2
 800306e:	f040 8095 	bne.w	800319c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b54      	ldr	r3, [pc, #336]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a53      	ldr	r2, [pc, #332]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003078:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800307c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe fa53 	bl	8001528 <HAL_GetTick>
 8003082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003086:	f7fe fa4f 	bl	8001528 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e10c      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003098:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f0      	bne.n	8003086 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a4:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 80030a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a8:	4b47      	ldr	r3, [pc, #284]	; (80031c8 <HAL_RCC_OscConfig+0x768>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030b4:	0112      	lsls	r2, r2, #4
 80030b6:	430a      	orrs	r2, r1
 80030b8:	4942      	ldr	r1, [pc, #264]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	628b      	str	r3, [r1, #40]	; 0x28
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	3b01      	subs	r3, #1
 80030c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030cc:	3b01      	subs	r3, #1
 80030ce:	025b      	lsls	r3, r3, #9
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	3b01      	subs	r3, #1
 80030da:	041b      	lsls	r3, r3, #16
 80030dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e6:	3b01      	subs	r3, #1
 80030e8:	061b      	lsls	r3, r3, #24
 80030ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80030ee:	4935      	ldr	r1, [pc, #212]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80030f4:	4b33      	ldr	r3, [pc, #204]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	4a32      	ldr	r2, [pc, #200]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003100:	4b30      	ldr	r3, [pc, #192]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003104:	4b31      	ldr	r3, [pc, #196]	; (80031cc <HAL_RCC_OscConfig+0x76c>)
 8003106:	4013      	ands	r3, r2
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800310c:	00d2      	lsls	r2, r2, #3
 800310e:	492d      	ldr	r1, [pc, #180]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003110:	4313      	orrs	r3, r2
 8003112:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003114:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	f023 020c 	bic.w	r2, r3, #12
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	4928      	ldr	r1, [pc, #160]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003122:	4313      	orrs	r3, r2
 8003124:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003126:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	f023 0202 	bic.w	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	4924      	ldr	r1, [pc, #144]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003134:	4313      	orrs	r3, r2
 8003136:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 800313e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003144:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 800314a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800314e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003150:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800315a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003168:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a15      	ldr	r2, [pc, #84]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 800316e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe f9d8 	bl	8001528 <HAL_GetTick>
 8003178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe f9d4 	bl	8001528 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e091      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800318e:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x71c>
 800319a:	e089      	b.n	80032b0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a08      	ldr	r2, [pc, #32]	; (80031c4 <HAL_RCC_OscConfig+0x764>)
 80031a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe f9be 	bl	8001528 <HAL_GetTick>
 80031ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ae:	e00f      	b.n	80031d0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe f9ba 	bl	8001528 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d908      	bls.n	80031d0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e077      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
 80031c2:	bf00      	nop
 80031c4:	58024400 	.word	0x58024400
 80031c8:	fffffc0c 	.word	0xfffffc0c
 80031cc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031d0:	4b3a      	ldr	r3, [pc, #232]	; (80032bc <HAL_RCC_OscConfig+0x85c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e9      	bne.n	80031b0 <HAL_RCC_OscConfig+0x750>
 80031dc:	e068      	b.n	80032b0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031de:	4b37      	ldr	r3, [pc, #220]	; (80032bc <HAL_RCC_OscConfig+0x85c>)
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031e4:	4b35      	ldr	r3, [pc, #212]	; (80032bc <HAL_RCC_OscConfig+0x85c>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d031      	beq.n	8003256 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0203 	and.w	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d12a      	bne.n	8003256 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d122      	bne.n	8003256 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d11a      	bne.n	8003256 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	0a5b      	lsrs	r3, r3, #9
 8003224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d111      	bne.n	8003256 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d108      	bne.n	8003256 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	0e1b      	lsrs	r3, r3, #24
 8003248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003250:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e02b      	b.n	80032b2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800325a:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_RCC_OscConfig+0x85c>)
 800325c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325e:	08db      	lsrs	r3, r3, #3
 8003260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003264:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	429a      	cmp	r2, r3
 800326e:	d01f      	beq.n	80032b0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_RCC_OscConfig+0x85c>)
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	4a11      	ldr	r2, [pc, #68]	; (80032bc <HAL_RCC_OscConfig+0x85c>)
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800327c:	f7fe f954 	bl	8001528 <HAL_GetTick>
 8003280:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003282:	bf00      	nop
 8003284:	f7fe f950 	bl	8001528 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	4293      	cmp	r3, r2
 800328e:	d0f9      	beq.n	8003284 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_RCC_OscConfig+0x85c>)
 8003292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_RCC_OscConfig+0x860>)
 8003296:	4013      	ands	r3, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800329c:	00d2      	lsls	r2, r2, #3
 800329e:	4907      	ldr	r1, [pc, #28]	; (80032bc <HAL_RCC_OscConfig+0x85c>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_OscConfig+0x85c>)
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_RCC_OscConfig+0x85c>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3730      	adds	r7, #48	; 0x30
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	58024400 	.word	0x58024400
 80032c0:	ffff0007 	.word	0xffff0007

080032c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e19c      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4b8a      	ldr	r3, [pc, #552]	; (8003504 <HAL_RCC_ClockConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d910      	bls.n	8003308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b87      	ldr	r3, [pc, #540]	; (8003504 <HAL_RCC_ClockConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 020f 	bic.w	r2, r3, #15
 80032ee:	4985      	ldr	r1, [pc, #532]	; (8003504 <HAL_RCC_ClockConfig+0x240>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b83      	ldr	r3, [pc, #524]	; (8003504 <HAL_RCC_ClockConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e184      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d010      	beq.n	8003336 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	4b7b      	ldr	r3, [pc, #492]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003320:	429a      	cmp	r2, r3
 8003322:	d908      	bls.n	8003336 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003324:	4b78      	ldr	r3, [pc, #480]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	4975      	ldr	r1, [pc, #468]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003332:	4313      	orrs	r3, r2
 8003334:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d010      	beq.n	8003364 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	4b70      	ldr	r3, [pc, #448]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800334e:	429a      	cmp	r2, r3
 8003350:	d908      	bls.n	8003364 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003352:	4b6d      	ldr	r3, [pc, #436]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	496a      	ldr	r1, [pc, #424]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003360:	4313      	orrs	r3, r2
 8003362:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	d010      	beq.n	8003392 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	4b64      	ldr	r3, [pc, #400]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800337c:	429a      	cmp	r2, r3
 800337e:	d908      	bls.n	8003392 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003380:	4b61      	ldr	r3, [pc, #388]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	495e      	ldr	r1, [pc, #376]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 800338e:	4313      	orrs	r3, r2
 8003390:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d010      	beq.n	80033c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	4b59      	ldr	r3, [pc, #356]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d908      	bls.n	80033c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033ae:	4b56      	ldr	r3, [pc, #344]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	4953      	ldr	r1, [pc, #332]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d010      	beq.n	80033ee <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	4b4d      	ldr	r3, [pc, #308]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	429a      	cmp	r2, r3
 80033da:	d908      	bls.n	80033ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033dc:	4b4a      	ldr	r3, [pc, #296]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f023 020f 	bic.w	r2, r3, #15
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4947      	ldr	r1, [pc, #284]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d055      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033fa:	4b43      	ldr	r3, [pc, #268]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	4940      	ldr	r1, [pc, #256]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003408:	4313      	orrs	r3, r2
 800340a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d107      	bne.n	8003424 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003414:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d121      	bne.n	8003464 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0f6      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d107      	bne.n	800343c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800342c:	4b36      	ldr	r3, [pc, #216]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d115      	bne.n	8003464 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0ea      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d107      	bne.n	8003454 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003444:	4b30      	ldr	r3, [pc, #192]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d109      	bne.n	8003464 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0de      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003454:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0d6      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003464:	4b28      	ldr	r3, [pc, #160]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f023 0207 	bic.w	r2, r3, #7
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4925      	ldr	r1, [pc, #148]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003472:	4313      	orrs	r3, r2
 8003474:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003476:	f7fe f857 	bl	8001528 <HAL_GetTick>
 800347a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347c:	e00a      	b.n	8003494 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347e:	f7fe f853 	bl	8001528 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	; 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0be      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003494:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d1eb      	bne.n	800347e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d010      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	429a      	cmp	r2, r3
 80034c0:	d208      	bcs.n	80034d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f023 020f 	bic.w	r2, r3, #15
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	490e      	ldr	r1, [pc, #56]	; (8003508 <HAL_RCC_ClockConfig+0x244>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_ClockConfig+0x240>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d214      	bcs.n	800350c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <HAL_RCC_ClockConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 020f 	bic.w	r2, r3, #15
 80034ea:	4906      	ldr	r1, [pc, #24]	; (8003504 <HAL_RCC_ClockConfig+0x240>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <HAL_RCC_ClockConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e086      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
 8003504:	52002000 	.word	0x52002000
 8003508:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d010      	beq.n	800353a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	4b3f      	ldr	r3, [pc, #252]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003524:	429a      	cmp	r2, r3
 8003526:	d208      	bcs.n	800353a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003528:	4b3c      	ldr	r3, [pc, #240]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	4939      	ldr	r1, [pc, #228]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 8003536:	4313      	orrs	r3, r2
 8003538:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d010      	beq.n	8003568 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	4b34      	ldr	r3, [pc, #208]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003552:	429a      	cmp	r2, r3
 8003554:	d208      	bcs.n	8003568 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003556:	4b31      	ldr	r3, [pc, #196]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	492e      	ldr	r1, [pc, #184]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 8003564:	4313      	orrs	r3, r2
 8003566:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	4b28      	ldr	r3, [pc, #160]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003580:	429a      	cmp	r2, r3
 8003582:	d208      	bcs.n	8003596 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003584:	4b25      	ldr	r3, [pc, #148]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	4922      	ldr	r1, [pc, #136]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 8003592:	4313      	orrs	r3, r2
 8003594:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d010      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d208      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035b2:	4b1a      	ldr	r3, [pc, #104]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4917      	ldr	r1, [pc, #92]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80035c4:	f000 f834 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b14      	ldr	r3, [pc, #80]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	4912      	ldr	r1, [pc, #72]	; (8003620 <HAL_RCC_ClockConfig+0x35c>)
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
 80035e0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_RCC_ClockConfig+0x358>)
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <HAL_RCC_ClockConfig+0x35c>)
 80035ec:	5cd3      	ldrb	r3, [r2, r3]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
 80035f8:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <HAL_RCC_ClockConfig+0x360>)
 80035fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035fc:	4a0a      	ldr	r2, [pc, #40]	; (8003628 <HAL_RCC_ClockConfig+0x364>)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <HAL_RCC_ClockConfig+0x368>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd ff44 	bl	8001494 <HAL_InitTick>
 800360c:	4603      	mov	r3, r0
 800360e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	58024400 	.word	0x58024400
 8003620:	08008938 	.word	0x08008938
 8003624:	24000004 	.word	0x24000004
 8003628:	24000000 	.word	0x24000000
 800362c:	24000008 	.word	0x24000008

08003630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003636:	4bb3      	ldr	r3, [pc, #716]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800363e:	2b18      	cmp	r3, #24
 8003640:	f200 8155 	bhi.w	80038ee <HAL_RCC_GetSysClockFreq+0x2be>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	080036b1 	.word	0x080036b1
 8003650:	080038ef 	.word	0x080038ef
 8003654:	080038ef 	.word	0x080038ef
 8003658:	080038ef 	.word	0x080038ef
 800365c:	080038ef 	.word	0x080038ef
 8003660:	080038ef 	.word	0x080038ef
 8003664:	080038ef 	.word	0x080038ef
 8003668:	080038ef 	.word	0x080038ef
 800366c:	080036d7 	.word	0x080036d7
 8003670:	080038ef 	.word	0x080038ef
 8003674:	080038ef 	.word	0x080038ef
 8003678:	080038ef 	.word	0x080038ef
 800367c:	080038ef 	.word	0x080038ef
 8003680:	080038ef 	.word	0x080038ef
 8003684:	080038ef 	.word	0x080038ef
 8003688:	080038ef 	.word	0x080038ef
 800368c:	080036dd 	.word	0x080036dd
 8003690:	080038ef 	.word	0x080038ef
 8003694:	080038ef 	.word	0x080038ef
 8003698:	080038ef 	.word	0x080038ef
 800369c:	080038ef 	.word	0x080038ef
 80036a0:	080038ef 	.word	0x080038ef
 80036a4:	080038ef 	.word	0x080038ef
 80036a8:	080038ef 	.word	0x080038ef
 80036ac:	080036e3 	.word	0x080036e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036b0:	4b94      	ldr	r3, [pc, #592]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d009      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036bc:	4b91      	ldr	r3, [pc, #580]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	08db      	lsrs	r3, r3, #3
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	4a90      	ldr	r2, [pc, #576]	; (8003908 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
 80036cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80036ce:	e111      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036d0:	4b8d      	ldr	r3, [pc, #564]	; (8003908 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036d2:	61bb      	str	r3, [r7, #24]
      break;
 80036d4:	e10e      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80036d6:	4b8d      	ldr	r3, [pc, #564]	; (800390c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036d8:	61bb      	str	r3, [r7, #24]
      break;
 80036da:	e10b      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80036dc:	4b8c      	ldr	r3, [pc, #560]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036de:	61bb      	str	r3, [r7, #24]
      break;
 80036e0:	e108      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036e2:	4b88      	ldr	r3, [pc, #544]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80036ec:	4b85      	ldr	r3, [pc, #532]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036f8:	4b82      	ldr	r3, [pc, #520]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003702:	4b80      	ldr	r3, [pc, #512]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003706:	08db      	lsrs	r3, r3, #3
 8003708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80e1 	beq.w	80038e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b02      	cmp	r3, #2
 800372a:	f000 8083 	beq.w	8003834 <HAL_RCC_GetSysClockFreq+0x204>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b02      	cmp	r3, #2
 8003732:	f200 80a1 	bhi.w	8003878 <HAL_RCC_GetSysClockFreq+0x248>
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x114>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d056      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003742:	e099      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003744:	4b6f      	ldr	r3, [pc, #444]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d02d      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003750:	4b6c      	ldr	r3, [pc, #432]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	08db      	lsrs	r3, r3, #3
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	4a6b      	ldr	r2, [pc, #428]	; (8003908 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
 8003760:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800377a:	4b62      	ldr	r3, [pc, #392]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800378a:	ed97 6a02 	vldr	s12, [r7, #8]
 800378e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003914 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800379a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80037aa:	e087      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003918 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037be:	4b51      	ldr	r3, [pc, #324]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80037d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003914 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037ee:	e065      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800391c <HAL_RCC_GetSysClockFreq+0x2ec>
 80037fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003802:	4b40      	ldr	r3, [pc, #256]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003812:	ed97 6a02 	vldr	s12, [r7, #8]
 8003816:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003914 <HAL_RCC_GetSysClockFreq+0x2e4>
 800381a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800382a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003832:	e043      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003920 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003846:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003856:	ed97 6a02 	vldr	s12, [r7, #8]
 800385a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003914 <HAL_RCC_GetSysClockFreq+0x2e4>
 800385e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800386a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003872:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003876:	e021      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003882:	eddf 6a26 	vldr	s13, [pc, #152]	; 800391c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800388a:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389a:	ed97 6a02 	vldr	s12, [r7, #8]
 800389e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003914 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	0a5b      	lsrs	r3, r3, #9
 80038c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038c6:	3301      	adds	r3, #1
 80038c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	ee07 3a90 	vmov	s15, r3
 80038d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80038d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038e0:	ee17 3a90 	vmov	r3, s15
 80038e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80038e6:	e005      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
      break;
 80038ec:	e002      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80038ee:	4b07      	ldr	r3, [pc, #28]	; (800390c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038f0:	61bb      	str	r3, [r7, #24]
      break;
 80038f2:	bf00      	nop
  }

  return sysclockfreq;
 80038f4:	69bb      	ldr	r3, [r7, #24]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	; 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	58024400 	.word	0x58024400
 8003908:	03d09000 	.word	0x03d09000
 800390c:	003d0900 	.word	0x003d0900
 8003910:	007a1200 	.word	0x007a1200
 8003914:	46000000 	.word	0x46000000
 8003918:	4c742400 	.word	0x4c742400
 800391c:	4a742400 	.word	0x4a742400
 8003920:	4af42400 	.word	0x4af42400

08003924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800392a:	f7ff fe81 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 800392e:	4602      	mov	r2, r0
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <HAL_RCC_GetHCLKFreq+0x50>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	490f      	ldr	r1, [pc, #60]	; (8003978 <HAL_RCC_GetHCLKFreq+0x54>)
 800393c:	5ccb      	ldrb	r3, [r1, r3]
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <HAL_RCC_GetHCLKFreq+0x50>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	4a09      	ldr	r2, [pc, #36]	; (8003978 <HAL_RCC_GetHCLKFreq+0x54>)
 8003952:	5cd3      	ldrb	r3, [r2, r3]
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	fa22 f303 	lsr.w	r3, r2, r3
 800395e:	4a07      	ldr	r2, [pc, #28]	; (800397c <HAL_RCC_GetHCLKFreq+0x58>)
 8003960:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003962:	4a07      	ldr	r2, [pc, #28]	; (8003980 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <HAL_RCC_GetHCLKFreq+0x58>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	58024400 	.word	0x58024400
 8003978:	08008938 	.word	0x08008938
 800397c:	24000004 	.word	0x24000004
 8003980:	24000000 	.word	0x24000000

08003984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003988:	f7ff ffcc 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4904      	ldr	r1, [pc, #16]	; (80039ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	58024400 	.word	0x58024400
 80039ac:	08008938 	.word	0x08008938

080039b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80039b4:	f7ff ffb6 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4904      	ldr	r1, [pc, #16]	; (80039d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	58024400 	.word	0x58024400
 80039d8:	08008938 	.word	0x08008938

080039dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e0:	b0c8      	sub	sp, #288	; 0x120
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039e8:	2300      	movs	r3, #0
 80039ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039ee:	2300      	movs	r3, #0
 80039f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003a00:	2500      	movs	r5, #0
 8003a02:	ea54 0305 	orrs.w	r3, r4, r5
 8003a06:	d049      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a12:	d02f      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a18:	d828      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a1e:	d01a      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a24:	d822      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a2e:	d007      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a30:	e01c      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a32:	4ba7      	ldr	r3, [pc, #668]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	4aa6      	ldr	r2, [pc, #664]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a3e:	e01a      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a44:	3308      	adds	r3, #8
 8003a46:	2102      	movs	r1, #2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f002 fa6d 	bl	8005f28 <RCCEx_PLL2_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a54:	e00f      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a5a:	3328      	adds	r3, #40	; 0x28
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f002 fb14 	bl	800608c <RCCEx_PLL3_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a6a:	e004      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a7e:	4b94      	ldr	r3, [pc, #592]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a82:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8c:	4a90      	ldr	r2, [pc, #576]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	6513      	str	r3, [r2, #80]	; 0x50
 8003a92:	e003      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003aa8:	f04f 0900 	mov.w	r9, #0
 8003aac:	ea58 0309 	orrs.w	r3, r8, r9
 8003ab0:	d047      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d82a      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003abc:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003ad9 	.word	0x08003ad9
 8003ac8:	08003ae7 	.word	0x08003ae7
 8003acc:	08003afd 	.word	0x08003afd
 8003ad0:	08003b1b 	.word	0x08003b1b
 8003ad4:	08003b1b 	.word	0x08003b1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad8:	4b7d      	ldr	r3, [pc, #500]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	4a7c      	ldr	r2, [pc, #496]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ae4:	e01a      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aea:	3308      	adds	r3, #8
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f002 fa1a 	bl	8005f28 <RCCEx_PLL2_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003afa:	e00f      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b00:	3328      	adds	r3, #40	; 0x28
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f002 fac1 	bl	800608c <RCCEx_PLL3_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b10:	e004      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b24:	4b6a      	ldr	r3, [pc, #424]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b28:	f023 0107 	bic.w	r1, r3, #7
 8003b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	4a67      	ldr	r2, [pc, #412]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6513      	str	r3, [r2, #80]	; 0x50
 8003b38:	e003      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003b4e:	f04f 0b00 	mov.w	fp, #0
 8003b52:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b56:	d054      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b62:	d036      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003b64:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b68:	d82f      	bhi.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6e:	d032      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b74:	d829      	bhi.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b76:	2bc0      	cmp	r3, #192	; 0xc0
 8003b78:	d02f      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b7c:	d825      	bhi.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b7e:	2b80      	cmp	r3, #128	; 0x80
 8003b80:	d018      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003b82:	2b80      	cmp	r3, #128	; 0x80
 8003b84:	d821      	bhi.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d007      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003b8e:	e01c      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b90:	4b4f      	ldr	r3, [pc, #316]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	4a4e      	ldr	r2, [pc, #312]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003b9c:	e01e      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f002 f9be 	bl	8005f28 <RCCEx_PLL2_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003bb2:	e013      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb8:	3328      	adds	r3, #40	; 0x28
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f002 fa65 	bl	800608c <RCCEx_PLL3_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003bc8:	e008      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bd0:	e004      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003bd2:	bf00      	nop
 8003bd4:	e002      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bdc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003be4:	4b3a      	ldr	r3, [pc, #232]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	4a37      	ldr	r2, [pc, #220]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6513      	str	r3, [r2, #80]	; 0x50
 8003bf8:	e003      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bfe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003c0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c12:	2300      	movs	r3, #0
 8003c14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	d05c      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c28:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003c2c:	d03b      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c2e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003c32:	d834      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c38:	d037      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c3e:	d82e      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c44:	d033      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c46:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c4a:	d828      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c50:	d01a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c56:	d822      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c60:	d007      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003c62:	e01c      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c64:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c70:	e01e      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c76:	3308      	adds	r3, #8
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f002 f954 	bl	8005f28 <RCCEx_PLL2_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c86:	e013      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c8c:	3328      	adds	r3, #40	; 0x28
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f002 f9fb 	bl	800608c <RCCEx_PLL3_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ca4:	e004      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ca6:	bf00      	nop
 8003ca8:	e002      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003caa:	bf00      	nop
 8003cac:	e000      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10d      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc6:	4a02      	ldr	r2, [pc, #8]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	6513      	str	r3, [r2, #80]	; 0x50
 8003ccc:	e006      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003cce:	bf00      	nop
 8003cd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003ce8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003cf2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	d03a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	2b30      	cmp	r3, #48	; 0x30
 8003d04:	d01f      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003d06:	2b30      	cmp	r3, #48	; 0x30
 8003d08:	d819      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d00c      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d815      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d019      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d111      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1a:	4bae      	ldr	r3, [pc, #696]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	4aad      	ldr	r2, [pc, #692]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003d26:	e011      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	2102      	movs	r1, #2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f002 f8f9 	bl	8005f28 <RCCEx_PLL2_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003d3c:	e006      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d44:	e002      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003d46:	bf00      	nop
 8003d48:	e000      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003d54:	4b9f      	ldr	r3, [pc, #636]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d58:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d62:	4a9c      	ldr	r2, [pc, #624]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d64:	430b      	orrs	r3, r1
 8003d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d68:	e003      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003d7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d82:	2300      	movs	r3, #0
 8003d84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d88:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	d051      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9c:	d035      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da2:	d82e      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003da4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003da8:	d031      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003daa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dae:	d828      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	d01a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dba:	d822      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d007      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003dc6:	e01c      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc8:	4b82      	ldr	r3, [pc, #520]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	4a81      	ldr	r2, [pc, #516]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dd4:	e01c      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dda:	3308      	adds	r3, #8
 8003ddc:	2100      	movs	r1, #0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f002 f8a2 	bl	8005f28 <RCCEx_PLL2_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dea:	e011      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df0:	3328      	adds	r3, #40	; 0x28
 8003df2:	2100      	movs	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	f002 f949 	bl	800608c <RCCEx_PLL3_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e00:	e006      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e08:	e002      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e18:	4b6e      	ldr	r3, [pc, #440]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e26:	4a6b      	ldr	r2, [pc, #428]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6513      	str	r3, [r2, #80]	; 0x50
 8003e2c:	e003      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003e42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e46:	2300      	movs	r3, #0
 8003e48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e4c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003e50:	460b      	mov	r3, r1
 8003e52:	4313      	orrs	r3, r2
 8003e54:	d053      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e60:	d033      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003e62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e66:	d82c      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e6c:	d02f      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003e6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e72:	d826      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e78:	d02b      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e7e:	d820      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e84:	d012      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003e86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e8a:	d81a      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d022      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e94:	d115      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f002 f842 	bl	8005f28 <RCCEx_PLL2_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003eaa:	e015      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb0:	3328      	adds	r3, #40	; 0x28
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f002 f8e9 	bl	800608c <RCCEx_PLL3_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ec8:	e006      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e004      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e002      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ed2:	bf00      	nop
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10a      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ee0:	4b3c      	ldr	r3, [pc, #240]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eee:	4a39      	ldr	r2, [pc, #228]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	6513      	str	r3, [r2, #80]	; 0x50
 8003ef4:	e003      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003efa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003f0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f14:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	d060      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f26:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003f2a:	d039      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003f2c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003f30:	d832      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f36:	d035      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f3c:	d82c      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f42:	d031      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f48:	d826      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f4e:	d02d      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003f50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f54:	d820      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f5a:	d012      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f60:	d81a      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d024      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f6a:	d115      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f70:	3308      	adds	r3, #8
 8003f72:	2101      	movs	r1, #1
 8003f74:	4618      	mov	r0, r3
 8003f76:	f001 ffd7 	bl	8005f28 <RCCEx_PLL2_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f80:	e017      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f86:	3328      	adds	r3, #40	; 0x28
 8003f88:	2101      	movs	r1, #1
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f002 f87e 	bl	800608c <RCCEx_PLL3_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f96:	e00c      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fa0:	bf00      	nop
 8003fa2:	e006      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fa4:	bf00      	nop
 8003fa6:	e004      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fa8:	bf00      	nop
 8003faa:	e002      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fca:	4a02      	ldr	r2, [pc, #8]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd0:	e006      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003fd2:	bf00      	nop
 8003fd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fdc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003ff6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	d037      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800400a:	d00e      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800400c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004010:	d816      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d018      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800401a:	d111      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401c:	4bc4      	ldr	r3, [pc, #784]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	4ac3      	ldr	r2, [pc, #780]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004026:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004028:	e00f      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800402a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402e:	3308      	adds	r3, #8
 8004030:	2101      	movs	r1, #1
 8004032:	4618      	mov	r0, r3
 8004034:	f001 ff78 	bl	8005f28 <RCCEx_PLL2_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800403e:	e004      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004046:	e000      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004052:	4bb7      	ldr	r3, [pc, #732]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004056:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800405a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800405e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004060:	4ab3      	ldr	r2, [pc, #716]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004062:	430b      	orrs	r3, r1
 8004064:	6513      	str	r3, [r2, #80]	; 0x50
 8004066:	e003      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800406c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800407c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004080:	2300      	movs	r3, #0
 8004082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004086:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800408a:	460b      	mov	r3, r1
 800408c:	4313      	orrs	r3, r2
 800408e:	d039      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004096:	2b03      	cmp	r3, #3
 8004098:	d81c      	bhi.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800409a:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040dd 	.word	0x080040dd
 80040a4:	080040b1 	.word	0x080040b1
 80040a8:	080040bf 	.word	0x080040bf
 80040ac:	080040dd 	.word	0x080040dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b0:	4b9f      	ldr	r3, [pc, #636]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	4a9e      	ldr	r2, [pc, #632]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040bc:	e00f      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c2:	3308      	adds	r3, #8
 80040c4:	2102      	movs	r1, #2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 ff2e 	bl	8005f28 <RCCEx_PLL2_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040d2:	e004      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040da:	e000      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80040dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80040e6:	4b92      	ldr	r3, [pc, #584]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ea:	f023 0103 	bic.w	r1, r3, #3
 80040ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f4:	4a8e      	ldr	r2, [pc, #568]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040f6:	430b      	orrs	r3, r1
 80040f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040fa:	e003      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004100:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004114:	2300      	movs	r3, #0
 8004116:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800411a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800411e:	460b      	mov	r3, r1
 8004120:	4313      	orrs	r3, r2
 8004122:	f000 8099 	beq.w	8004258 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004126:	4b83      	ldr	r3, [pc, #524]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a82      	ldr	r2, [pc, #520]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800412c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004130:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004132:	f7fd f9f9 	bl	8001528 <HAL_GetTick>
 8004136:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800413a:	e00b      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413c:	f7fd f9f4 	bl	8001528 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	; 0x64
 800414a:	d903      	bls.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004152:	e005      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004154:	4b77      	ldr	r3, [pc, #476]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ed      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004160:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004164:	2b00      	cmp	r3, #0
 8004166:	d173      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004168:	4b71      	ldr	r3, [pc, #452]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800416a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800416c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004170:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004174:	4053      	eors	r3, r2
 8004176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417a:	2b00      	cmp	r3, #0
 800417c:	d015      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800417e:	4b6c      	ldr	r3, [pc, #432]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004186:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800418a:	4b69      	ldr	r3, [pc, #420]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	4a68      	ldr	r2, [pc, #416]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004194:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004196:	4b66      	ldr	r3, [pc, #408]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	4a65      	ldr	r2, [pc, #404]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800419c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041a2:	4a63      	ldr	r2, [pc, #396]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b6:	d118      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fd f9b6 	bl	8001528 <HAL_GetTick>
 80041bc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041c0:	e00d      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fd f9b1 	bl	8001528 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041cc:	1ad2      	subs	r2, r2, r3
 80041ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d903      	bls.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80041dc:	e005      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041de:	4b54      	ldr	r3, [pc, #336]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0eb      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80041ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d129      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004202:	d10e      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004204:	4b4a      	ldr	r3, [pc, #296]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800420c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004210:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004214:	091a      	lsrs	r2, r3, #4
 8004216:	4b48      	ldr	r3, [pc, #288]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004218:	4013      	ands	r3, r2
 800421a:	4a45      	ldr	r2, [pc, #276]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800421c:	430b      	orrs	r3, r1
 800421e:	6113      	str	r3, [r2, #16]
 8004220:	e005      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004222:	4b43      	ldr	r3, [pc, #268]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	4a42      	ldr	r2, [pc, #264]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004228:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800422c:	6113      	str	r3, [r2, #16]
 800422e:	4b40      	ldr	r3, [pc, #256]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004230:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004236:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800423a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423e:	4a3c      	ldr	r2, [pc, #240]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004240:	430b      	orrs	r3, r1
 8004242:	6713      	str	r3, [r2, #112]	; 0x70
 8004244:	e008      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004246:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800424a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800424e:	e003      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004250:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004254:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f002 0301 	and.w	r3, r2, #1
 8004264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800426e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004272:	460b      	mov	r3, r1
 8004274:	4313      	orrs	r3, r2
 8004276:	f000 8090 	beq.w	800439a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800427a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004282:	2b28      	cmp	r3, #40	; 0x28
 8004284:	d870      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004286:	a201      	add	r2, pc, #4	; (adr r2, 800428c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428c:	08004371 	.word	0x08004371
 8004290:	08004369 	.word	0x08004369
 8004294:	08004369 	.word	0x08004369
 8004298:	08004369 	.word	0x08004369
 800429c:	08004369 	.word	0x08004369
 80042a0:	08004369 	.word	0x08004369
 80042a4:	08004369 	.word	0x08004369
 80042a8:	08004369 	.word	0x08004369
 80042ac:	0800433d 	.word	0x0800433d
 80042b0:	08004369 	.word	0x08004369
 80042b4:	08004369 	.word	0x08004369
 80042b8:	08004369 	.word	0x08004369
 80042bc:	08004369 	.word	0x08004369
 80042c0:	08004369 	.word	0x08004369
 80042c4:	08004369 	.word	0x08004369
 80042c8:	08004369 	.word	0x08004369
 80042cc:	08004353 	.word	0x08004353
 80042d0:	08004369 	.word	0x08004369
 80042d4:	08004369 	.word	0x08004369
 80042d8:	08004369 	.word	0x08004369
 80042dc:	08004369 	.word	0x08004369
 80042e0:	08004369 	.word	0x08004369
 80042e4:	08004369 	.word	0x08004369
 80042e8:	08004369 	.word	0x08004369
 80042ec:	08004371 	.word	0x08004371
 80042f0:	08004369 	.word	0x08004369
 80042f4:	08004369 	.word	0x08004369
 80042f8:	08004369 	.word	0x08004369
 80042fc:	08004369 	.word	0x08004369
 8004300:	08004369 	.word	0x08004369
 8004304:	08004369 	.word	0x08004369
 8004308:	08004369 	.word	0x08004369
 800430c:	08004371 	.word	0x08004371
 8004310:	08004369 	.word	0x08004369
 8004314:	08004369 	.word	0x08004369
 8004318:	08004369 	.word	0x08004369
 800431c:	08004369 	.word	0x08004369
 8004320:	08004369 	.word	0x08004369
 8004324:	08004369 	.word	0x08004369
 8004328:	08004369 	.word	0x08004369
 800432c:	08004371 	.word	0x08004371
 8004330:	58024400 	.word	0x58024400
 8004334:	58024800 	.word	0x58024800
 8004338:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800433c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004340:	3308      	adds	r3, #8
 8004342:	2101      	movs	r1, #1
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fdef 	bl	8005f28 <RCCEx_PLL2_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004350:	e00f      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004356:	3328      	adds	r3, #40	; 0x28
 8004358:	2101      	movs	r1, #1
 800435a:	4618      	mov	r0, r3
 800435c:	f001 fe96 	bl	800608c <RCCEx_PLL3_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004366:	e004      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800436e:	e000      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004372:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800437a:	4bc0      	ldr	r3, [pc, #768]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800438a:	4abc      	ldr	r2, [pc, #752]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800438c:	430b      	orrs	r3, r1
 800438e:	6553      	str	r3, [r2, #84]	; 0x54
 8004390:	e003      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004392:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004396:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800439a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f002 0302 	and.w	r3, r2, #2
 80043a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043aa:	2300      	movs	r3, #0
 80043ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80043b0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80043b4:	460b      	mov	r3, r1
 80043b6:	4313      	orrs	r3, r2
 80043b8:	d043      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c2:	2b05      	cmp	r3, #5
 80043c4:	d824      	bhi.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	08004419 	.word	0x08004419
 80043d0:	080043e5 	.word	0x080043e5
 80043d4:	080043fb 	.word	0x080043fb
 80043d8:	08004419 	.word	0x08004419
 80043dc:	08004419 	.word	0x08004419
 80043e0:	08004419 	.word	0x08004419
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e8:	3308      	adds	r3, #8
 80043ea:	2101      	movs	r1, #1
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 fd9b 	bl	8005f28 <RCCEx_PLL2_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043f8:	e00f      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043fe:	3328      	adds	r3, #40	; 0x28
 8004400:	2101      	movs	r1, #1
 8004402:	4618      	mov	r0, r3
 8004404:	f001 fe42 	bl	800608c <RCCEx_PLL3_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800440e:	e004      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10b      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004422:	4b96      	ldr	r3, [pc, #600]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	f023 0107 	bic.w	r1, r3, #7
 800442a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800442e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004432:	4a92      	ldr	r2, [pc, #584]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004434:	430b      	orrs	r3, r1
 8004436:	6553      	str	r3, [r2, #84]	; 0x54
 8004438:	e003      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800443e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	f002 0304 	and.w	r3, r2, #4
 800444e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004452:	2300      	movs	r3, #0
 8004454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004458:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800445c:	460b      	mov	r3, r1
 800445e:	4313      	orrs	r3, r2
 8004460:	d043      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004466:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800446a:	2b05      	cmp	r3, #5
 800446c:	d824      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	080044c1 	.word	0x080044c1
 8004478:	0800448d 	.word	0x0800448d
 800447c:	080044a3 	.word	0x080044a3
 8004480:	080044c1 	.word	0x080044c1
 8004484:	080044c1 	.word	0x080044c1
 8004488:	080044c1 	.word	0x080044c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800448c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004490:	3308      	adds	r3, #8
 8004492:	2101      	movs	r1, #1
 8004494:	4618      	mov	r0, r3
 8004496:	f001 fd47 	bl	8005f28 <RCCEx_PLL2_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044a0:	e00f      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a6:	3328      	adds	r3, #40	; 0x28
 80044a8:	2101      	movs	r1, #1
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 fdee 	bl	800608c <RCCEx_PLL3_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044b6:	e004      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044be:	e000      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80044c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ca:	4b6c      	ldr	r3, [pc, #432]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ce:	f023 0107 	bic.w	r1, r3, #7
 80044d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044da:	4a68      	ldr	r2, [pc, #416]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6593      	str	r3, [r2, #88]	; 0x58
 80044e0:	e003      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	f002 0320 	and.w	r3, r2, #32
 80044f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044fa:	2300      	movs	r3, #0
 80044fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004504:	460b      	mov	r3, r1
 8004506:	4313      	orrs	r3, r2
 8004508:	d055      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800450a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800450e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004516:	d033      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800451c:	d82c      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800451e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004522:	d02f      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004528:	d826      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800452a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800452e:	d02b      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004530:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004534:	d820      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800453a:	d012      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800453c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004540:	d81a      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d022      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800454a:	d115      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800454c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004550:	3308      	adds	r3, #8
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f001 fce7 	bl	8005f28 <RCCEx_PLL2_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004560:	e015      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004566:	3328      	adds	r3, #40	; 0x28
 8004568:	2102      	movs	r1, #2
 800456a:	4618      	mov	r0, r3
 800456c:	f001 fd8e 	bl	800608c <RCCEx_PLL3_Config>
 8004570:	4603      	mov	r3, r0
 8004572:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004576:	e00a      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800457e:	e006      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004580:	bf00      	nop
 8004582:	e004      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004584:	bf00      	nop
 8004586:	e002      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004588:	bf00      	nop
 800458a:	e000      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800458c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10b      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004596:	4b39      	ldr	r3, [pc, #228]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800459e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045a6:	4a35      	ldr	r2, [pc, #212]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6553      	str	r3, [r2, #84]	; 0x54
 80045ac:	e003      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80045c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045c6:	2300      	movs	r3, #0
 80045c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80045cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4313      	orrs	r3, r2
 80045d4:	d058      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80045d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045e2:	d033      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80045e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045e8:	d82c      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ee:	d02f      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80045f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f4:	d826      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045fa:	d02b      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80045fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004600:	d820      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004606:	d012      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800460c:	d81a      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800460e:	2b00      	cmp	r3, #0
 8004610:	d022      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004616:	d115      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800461c:	3308      	adds	r3, #8
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f001 fc81 	bl	8005f28 <RCCEx_PLL2_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800462c:	e015      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800462e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004632:	3328      	adds	r3, #40	; 0x28
 8004634:	2102      	movs	r1, #2
 8004636:	4618      	mov	r0, r3
 8004638:	f001 fd28 	bl	800608c <RCCEx_PLL3_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004642:	e00a      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800464a:	e006      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800464c:	bf00      	nop
 800464e:	e004      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004650:	bf00      	nop
 8004652:	e002      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004654:	bf00      	nop
 8004656:	e000      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10e      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800466a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800466e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004672:	4a02      	ldr	r2, [pc, #8]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004674:	430b      	orrs	r3, r1
 8004676:	6593      	str	r3, [r2, #88]	; 0x58
 8004678:	e006      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800467a:	bf00      	nop
 800467c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004684:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004698:	2300      	movs	r3, #0
 800469a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800469e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80046a2:	460b      	mov	r3, r1
 80046a4:	4313      	orrs	r3, r2
 80046a6:	d055      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046b4:	d033      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80046b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046ba:	d82c      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c0:	d02f      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80046c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c6:	d826      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046cc:	d02b      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80046ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046d2:	d820      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d8:	d012      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80046da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046de:	d81a      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d022      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80046e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e8:	d115      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ee:	3308      	adds	r3, #8
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f001 fc18 	bl	8005f28 <RCCEx_PLL2_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046fe:	e015      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004704:	3328      	adds	r3, #40	; 0x28
 8004706:	2102      	movs	r1, #2
 8004708:	4618      	mov	r0, r3
 800470a:	f001 fcbf 	bl	800608c <RCCEx_PLL3_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004714:	e00a      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800471c:	e006      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800471e:	bf00      	nop
 8004720:	e004      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004722:	bf00      	nop
 8004724:	e002      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004726:	bf00      	nop
 8004728:	e000      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800472a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800472c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004734:	4ba1      	ldr	r3, [pc, #644]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004738:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800473c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004740:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004744:	4a9d      	ldr	r2, [pc, #628]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004746:	430b      	orrs	r3, r1
 8004748:	6593      	str	r3, [r2, #88]	; 0x58
 800474a:	e003      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004750:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	f002 0308 	and.w	r3, r2, #8
 8004760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004764:	2300      	movs	r3, #0
 8004766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800476a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800476e:	460b      	mov	r3, r1
 8004770:	4313      	orrs	r3, r2
 8004772:	d01e      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800477c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004780:	d10c      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004786:	3328      	adds	r3, #40	; 0x28
 8004788:	2102      	movs	r1, #2
 800478a:	4618      	mov	r0, r3
 800478c:	f001 fc7e 	bl	800608c <RCCEx_PLL3_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800479c:	4b87      	ldr	r3, [pc, #540]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ac:	4a83      	ldr	r2, [pc, #524]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047ae:	430b      	orrs	r3, r1
 80047b0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	f002 0310 	and.w	r3, r2, #16
 80047be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047c2:	2300      	movs	r3, #0
 80047c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80047cc:	460b      	mov	r3, r1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	d01e      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80047d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047de:	d10c      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e4:	3328      	adds	r3, #40	; 0x28
 80047e6:	2102      	movs	r1, #2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 fc4f 	bl	800608c <RCCEx_PLL3_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047fa:	4b70      	ldr	r3, [pc, #448]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004806:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800480a:	4a6c      	ldr	r2, [pc, #432]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800480c:	430b      	orrs	r3, r1
 800480e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800481c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004820:	2300      	movs	r3, #0
 8004822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004826:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800482a:	460b      	mov	r3, r1
 800482c:	4313      	orrs	r3, r2
 800482e:	d03e      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004834:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800483c:	d022      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800483e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004842:	d81b      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484c:	d00b      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800484e:	e015      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004854:	3308      	adds	r3, #8
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f001 fb65 	bl	8005f28 <RCCEx_PLL2_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004864:	e00f      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800486a:	3328      	adds	r3, #40	; 0x28
 800486c:	2102      	movs	r1, #2
 800486e:	4618      	mov	r0, r3
 8004870:	f001 fc0c 	bl	800608c <RCCEx_PLL3_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800487a:	e004      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004882:	e000      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004886:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10b      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800488e:	4b4b      	ldr	r3, [pc, #300]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004892:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004896:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800489a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800489e:	4a47      	ldr	r2, [pc, #284]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6593      	str	r3, [r2, #88]	; 0x58
 80048a4:	e003      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80048ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80048bc:	2300      	movs	r3, #0
 80048be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80048c4:	460b      	mov	r3, r1
 80048c6:	4313      	orrs	r3, r2
 80048c8:	d03b      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048d6:	d01f      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80048d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048dc:	d818      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80048de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048e2:	d003      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80048e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048e8:	d007      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80048ea:	e011      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ec:	4b33      	ldr	r3, [pc, #204]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	4a32      	ldr	r2, [pc, #200]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80048f8:	e00f      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048fe:	3328      	adds	r3, #40	; 0x28
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f001 fbc2 	bl	800608c <RCCEx_PLL3_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800490e:	e004      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004916:	e000      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10b      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004922:	4b26      	ldr	r3, [pc, #152]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800492a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	4a22      	ldr	r2, [pc, #136]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004934:	430b      	orrs	r3, r1
 8004936:	6553      	str	r3, [r2, #84]	; 0x54
 8004938:	e003      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800493e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800494e:	673b      	str	r3, [r7, #112]	; 0x70
 8004950:	2300      	movs	r3, #0
 8004952:	677b      	str	r3, [r7, #116]	; 0x74
 8004954:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004958:	460b      	mov	r3, r1
 800495a:	4313      	orrs	r3, r2
 800495c:	d034      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800495e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496c:	d007      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800496e:	e011      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004970:	4b12      	ldr	r3, [pc, #72]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	4a11      	ldr	r2, [pc, #68]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800497a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800497c:	e00e      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800497e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004982:	3308      	adds	r3, #8
 8004984:	2102      	movs	r1, #2
 8004986:	4618      	mov	r0, r3
 8004988:	f001 face 	bl	8005f28 <RCCEx_PLL2_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004992:	e003      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800499a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800499c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10d      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b2:	4a02      	ldr	r2, [pc, #8]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049b4:	430b      	orrs	r3, r1
 80049b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049b8:	e006      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80049ba:	bf00      	nop
 80049bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80049d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80049d6:	2300      	movs	r3, #0
 80049d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80049de:	460b      	mov	r3, r1
 80049e0:	4313      	orrs	r3, r2
 80049e2:	d00c      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e8:	3328      	adds	r3, #40	; 0x28
 80049ea:	2102      	movs	r1, #2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fb4d 	bl	800608c <RCCEx_PLL3_Config>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004a0a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	667b      	str	r3, [r7, #100]	; 0x64
 8004a10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004a14:	460b      	mov	r3, r1
 8004a16:	4313      	orrs	r3, r2
 8004a18:	d038      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a26:	d018      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004a28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a2c:	d811      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a32:	d014      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a38:	d80b      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d011      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a42:	d106      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a44:	4bc3      	ldr	r3, [pc, #780]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	4ac2      	ldr	r2, [pc, #776]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a50:	e008      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a58:	e004      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004a5a:	bf00      	nop
 8004a5c:	e002      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004a5e:	bf00      	nop
 8004a60:	e000      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10b      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a6c:	4bb9      	ldr	r3, [pc, #740]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	4ab5      	ldr	r2, [pc, #724]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	6553      	str	r3, [r2, #84]	; 0x54
 8004a82:	e003      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004a98:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	d009      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aa8:	4baa      	ldr	r3, [pc, #680]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab6:	4aa7      	ldr	r2, [pc, #668]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004ac8:	653b      	str	r3, [r7, #80]	; 0x50
 8004aca:	2300      	movs	r3, #0
 8004acc:	657b      	str	r3, [r7, #84]	; 0x54
 8004ace:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ad8:	4b9e      	ldr	r3, [pc, #632]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004adc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	4a9b      	ldr	r2, [pc, #620]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004afa:	2300      	movs	r3, #0
 8004afc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004afe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004b02:	460b      	mov	r3, r1
 8004b04:	4313      	orrs	r3, r2
 8004b06:	d009      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004b08:	4b92      	ldr	r3, [pc, #584]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b16:	4a8f      	ldr	r2, [pc, #572]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004b28:	643b      	str	r3, [r7, #64]	; 0x40
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b2e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004b32:	460b      	mov	r3, r1
 8004b34:	4313      	orrs	r3, r2
 8004b36:	d00e      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b38:	4b86      	ldr	r3, [pc, #536]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	4a85      	ldr	r2, [pc, #532]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b42:	6113      	str	r3, [r2, #16]
 8004b44:	4b83      	ldr	r3, [pc, #524]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b46:	6919      	ldr	r1, [r3, #16]
 8004b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b50:	4a80      	ldr	r2, [pc, #512]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b52:	430b      	orrs	r3, r1
 8004b54:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004b62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b64:	2300      	movs	r3, #0
 8004b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b68:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	d009      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b72:	4b78      	ldr	r3, [pc, #480]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b76:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b80:	4a74      	ldr	r2, [pc, #464]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b82:	430b      	orrs	r3, r1
 8004b84:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004b92:	633b      	str	r3, [r7, #48]	; 0x30
 8004b94:	2300      	movs	r3, #0
 8004b96:	637b      	str	r3, [r7, #52]	; 0x34
 8004b98:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ba2:	4b6c      	ldr	r3, [pc, #432]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb2:	4a68      	ldr	r2, [pc, #416]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	d011      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd8:	3308      	adds	r3, #8
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f001 f9a3 	bl	8005f28 <RCCEx_PLL2_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004be8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bf4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	2100      	movs	r1, #0
 8004c02:	6239      	str	r1, [r7, #32]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	d011      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c18:	3308      	adds	r3, #8
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f983 	bl	8005f28 <RCCEx_PLL2_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004c28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	2100      	movs	r1, #0
 8004c42:	61b9      	str	r1, [r7, #24]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4313      	orrs	r3, r2
 8004c52:	d011      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c58:	3308      	adds	r3, #8
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f001 f963 	bl	8005f28 <RCCEx_PLL2_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004c68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	2100      	movs	r1, #0
 8004c82:	6139      	str	r1, [r7, #16]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4313      	orrs	r3, r2
 8004c92:	d011      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c98:	3328      	adds	r3, #40	; 0x28
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 f9f5 	bl	800608c <RCCEx_PLL3_Config>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004ca8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	d011      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd8:	3328      	adds	r3, #40	; 0x28
 8004cda:	2101      	movs	r1, #1
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 f9d5 	bl	800608c <RCCEx_PLL3_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004ce8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cf4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	2100      	movs	r1, #0
 8004d02:	6039      	str	r1, [r7, #0]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4313      	orrs	r3, r2
 8004d12:	d011      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d18:	3328      	adds	r3, #40	; 0x28
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f001 f9b5 	bl	800608c <RCCEx_PLL3_Config>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004d28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004d38:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	e000      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d52:	bf00      	nop
 8004d54:	58024400 	.word	0x58024400

08004d58 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b090      	sub	sp, #64	; 0x40
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d66:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	f040 8094 	bne.w	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004d70:	4b97      	ldr	r3, [pc, #604]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	f200 8087 	bhi.w	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004d9d 	.word	0x08004d9d
 8004d8c:	08004dc5 	.word	0x08004dc5
 8004d90:	08004ded 	.word	0x08004ded
 8004d94:	08004e89 	.word	0x08004e89
 8004d98:	08004e15 	.word	0x08004e15
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d9c:	4b8c      	ldr	r3, [pc, #560]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004da8:	d108      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 ff68 	bl	8005c84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004db8:	f000 bc97 	b.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dc0:	f000 bc93 	b.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dc4:	4b82      	ldr	r3, [pc, #520]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd0:	d108      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dd2:	f107 0318 	add.w	r3, r7, #24
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fcac 	bl	8005734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004de0:	f000 bc83 	b.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004de8:	f000 bc7f 	b.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004dec:	4b78      	ldr	r3, [pc, #480]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004df8:	d108      	bne.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dfa:	f107 030c 	add.w	r3, r7, #12
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fdec 	bl	80059dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e08:	f000 bc6f 	b.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e10:	f000 bc6b 	b.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e14:	4b6e      	ldr	r3, [pc, #440]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e1c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e1e:	4b6c      	ldr	r3, [pc, #432]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d109      	bne.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e30:	4b67      	ldr	r3, [pc, #412]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	08db      	lsrs	r3, r3, #3
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	4a66      	ldr	r2, [pc, #408]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e42:	e01f      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e44:	4b62      	ldr	r3, [pc, #392]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e50:	d106      	bne.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e58:	d102      	bne.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004e5a:	4b5f      	ldr	r3, [pc, #380]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e5e:	e011      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e60:	4b5b      	ldr	r3, [pc, #364]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e6c:	d106      	bne.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e74:	d102      	bne.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004e76:	4b59      	ldr	r3, [pc, #356]	; (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e7a:	e003      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004e80:	f000 bc33 	b.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004e84:	f000 bc31 	b.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004e88:	4b55      	ldr	r3, [pc, #340]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e8c:	f000 bc2d 	b.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e94:	f000 bc29 	b.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e9c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	f040 809f 	bne.w	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eaa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004eae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb6:	d04d      	beq.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ebe:	f200 8084 	bhi.w	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	2bc0      	cmp	r3, #192	; 0xc0
 8004ec6:	d07d      	beq.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	2bc0      	cmp	r3, #192	; 0xc0
 8004ecc:	d87d      	bhi.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d02d      	beq.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	d877      	bhi.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee2:	2b40      	cmp	r3, #64	; 0x40
 8004ee4:	d012      	beq.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8004ee6:	e070      	b.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ee8:	4b39      	ldr	r3, [pc, #228]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fec2 	bl	8005c84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f04:	e3f1      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f0a:	e3ee      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f0c:	4b30      	ldr	r3, [pc, #192]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f18:	d107      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f1a:	f107 0318 	add.w	r3, r7, #24
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fc08 	bl	8005734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f28:	e3df      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f2e:	e3dc      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f30:	4b27      	ldr	r3, [pc, #156]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f3e:	f107 030c 	add.w	r3, r7, #12
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fd4a 	bl	80059dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f4c:	e3cd      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f52:	e3ca      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f54:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f5c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f5e:	4b1c      	ldr	r3, [pc, #112]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d109      	bne.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f70:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	08db      	lsrs	r3, r3, #3
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f82:	e01e      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f84:	4b12      	ldr	r3, [pc, #72]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f90:	d106      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f98:	d102      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004f9a:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f9e:	e010      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fac:	d106      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb4:	d102      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004fb6:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fba:	e002      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004fc0:	e393      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004fc2:	e392      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004fc4:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fc8:	e38f      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fce:	e38c      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004fd0:	58024400 	.word	0x58024400
 8004fd4:	03d09000 	.word	0x03d09000
 8004fd8:	003d0900 	.word	0x003d0900
 8004fdc:	007a1200 	.word	0x007a1200
 8004fe0:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fe8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004fec:	430b      	orrs	r3, r1
 8004fee:	f040 809c 	bne.w	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8004ff2:	4b9e      	ldr	r3, [pc, #632]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004ffa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005002:	d054      	beq.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800500a:	f200 808b 	bhi.w	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005014:	f000 8083 	beq.w	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800501e:	f200 8081 	bhi.w	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005028:	d02f      	beq.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005030:	d878      	bhi.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	2b00      	cmp	r3, #0
 8005036:	d004      	beq.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800503e:	d012      	beq.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8005040:	e070      	b.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005042:	4b8a      	ldr	r3, [pc, #552]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800504e:	d107      	bne.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fe15 	bl	8005c84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800505e:	e344      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005064:	e341      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005066:	4b81      	ldr	r3, [pc, #516]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800506e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005072:	d107      	bne.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005074:	f107 0318 	add.w	r3, r7, #24
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fb5b 	bl	8005734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005082:	e332      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005088:	e32f      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800508a:	4b78      	ldr	r3, [pc, #480]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005096:	d107      	bne.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005098:	f107 030c 	add.w	r3, r7, #12
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fc9d 	bl	80059dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050a6:	e320      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050ac:	e31d      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050ae:	4b6f      	ldr	r3, [pc, #444]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80050b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050b8:	4b6c      	ldr	r3, [pc, #432]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d10c      	bne.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80050c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050ca:	4b68      	ldr	r3, [pc, #416]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	08db      	lsrs	r3, r3, #3
 80050d0:	f003 0303 	and.w	r3, r3, #3
 80050d4:	4a66      	ldr	r2, [pc, #408]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80050d6:	fa22 f303 	lsr.w	r3, r2, r3
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050dc:	e01e      	b.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050de:	4b63      	ldr	r3, [pc, #396]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ea:	d106      	bne.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80050ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050f2:	d102      	bne.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80050f4:	4b5f      	ldr	r3, [pc, #380]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f8:	e010      	b.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050fa:	4b5c      	ldr	r3, [pc, #368]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005106:	d106      	bne.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510e:	d102      	bne.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005110:	4b59      	ldr	r3, [pc, #356]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005114:	e002      	b.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800511a:	e2e6      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800511c:	e2e5      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800511e:	4b57      	ldr	r3, [pc, #348]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005122:	e2e2      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005124:	2300      	movs	r3, #0
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005128:	e2df      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800512a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800512e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005132:	430b      	orrs	r3, r1
 8005134:	f040 80a7 	bne.w	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005138:	4b4c      	ldr	r3, [pc, #304]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800513a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005140:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005148:	d055      	beq.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005150:	f200 8096 	bhi.w	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800515a:	f000 8084 	beq.w	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005164:	f200 808c 	bhi.w	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800516e:	d030      	beq.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005176:	f200 8083 	bhi.w	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005186:	d012      	beq.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8005188:	e07a      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800518a:	4b38      	ldr	r3, [pc, #224]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005196:	d107      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fd71 	bl	8005c84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051a6:	e2a0      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051ac:	e29d      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051ae:	4b2f      	ldr	r3, [pc, #188]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ba:	d107      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051bc:	f107 0318 	add.w	r3, r7, #24
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fab7 	bl	8005734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051ca:	e28e      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051d0:	e28b      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051d2:	4b26      	ldr	r3, [pc, #152]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051de:	d107      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051e0:	f107 030c 	add.w	r3, r7, #12
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fbf9 	bl	80059dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051ee:	e27c      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051f4:	e279      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051f6:	4b1d      	ldr	r3, [pc, #116]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80051f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005200:	4b1a      	ldr	r3, [pc, #104]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b04      	cmp	r3, #4
 800520a:	d10c      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800520c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520e:	2b00      	cmp	r3, #0
 8005210:	d109      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005212:	4b16      	ldr	r3, [pc, #88]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	08db      	lsrs	r3, r3, #3
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	4a14      	ldr	r2, [pc, #80]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800521e:	fa22 f303 	lsr.w	r3, r2, r3
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005224:	e01e      	b.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005232:	d106      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800523a:	d102      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800523c:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800523e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005240:	e010      	b.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005242:	4b0a      	ldr	r3, [pc, #40]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800524e:	d106      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005256:	d102      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005258:	4b07      	ldr	r3, [pc, #28]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800525c:	e002      	b.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005262:	e242      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005264:	e241      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005268:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800526a:	e23e      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800526c:	58024400 	.word	0x58024400
 8005270:	03d09000 	.word	0x03d09000
 8005274:	003d0900 	.word	0x003d0900
 8005278:	007a1200 	.word	0x007a1200
 800527c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005284:	e231      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800528a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800528e:	430b      	orrs	r3, r1
 8005290:	f040 8085 	bne.w	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005294:	4b9c      	ldr	r3, [pc, #624]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005298:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800529c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052a4:	d06b      	beq.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ac:	d874      	bhi.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80052ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052b4:	d056      	beq.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80052b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052bc:	d86c      	bhi.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052c4:	d03b      	beq.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052cc:	d864      	bhi.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052d4:	d021      	beq.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052dc:	d85c      	bhi.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ea:	d004      	beq.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80052ec:	e054      	b.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80052ee:	f7fe fb49 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 80052f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052f4:	e1f9      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052f6:	4b84      	ldr	r3, [pc, #528]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005302:	d107      	bne.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005304:	f107 0318 	add.w	r3, r7, #24
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fa13 	bl	8005734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005312:	e1ea      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005318:	e1e7      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800531a:	4b7b      	ldr	r3, [pc, #492]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005326:	d107      	bne.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005328:	f107 030c 	add.w	r3, r7, #12
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fb55 	bl	80059dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005336:	e1d8      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005338:	2300      	movs	r3, #0
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800533c:	e1d5      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800533e:	4b72      	ldr	r3, [pc, #456]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b04      	cmp	r3, #4
 8005348:	d109      	bne.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800534a:	4b6f      	ldr	r3, [pc, #444]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	08db      	lsrs	r3, r3, #3
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	4a6d      	ldr	r2, [pc, #436]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005356:	fa22 f303 	lsr.w	r3, r2, r3
 800535a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800535c:	e1c5      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005362:	e1c2      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005364:	4b68      	ldr	r3, [pc, #416]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005370:	d102      	bne.n	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8005372:	4b67      	ldr	r3, [pc, #412]	; (8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005376:	e1b8      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800537c:	e1b5      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800537e:	4b62      	ldr	r3, [pc, #392]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005386:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800538a:	d102      	bne.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800538c:	4b61      	ldr	r3, [pc, #388]	; (8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800538e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005390:	e1ab      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005396:	e1a8      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800539c:	e1a5      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800539e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053a2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80053a6:	430b      	orrs	r3, r1
 80053a8:	d173      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80053aa:	4b57      	ldr	r3, [pc, #348]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80053ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053b2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ba:	d02f      	beq.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053c2:	d863      	bhi.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d0:	d012      	beq.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80053d2:	e05b      	b.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053d4:	4b4c      	ldr	r3, [pc, #304]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053e0:	d107      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053e2:	f107 0318 	add.w	r3, r7, #24
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 f9a4 	bl	8005734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053f0:	e17b      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053f6:	e178      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053f8:	4b43      	ldr	r3, [pc, #268]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005404:	d107      	bne.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005406:	f107 030c 	add.w	r3, r7, #12
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fae6 	bl	80059dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005414:	e169      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800541a:	e166      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800541c:	4b3a      	ldr	r3, [pc, #232]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800541e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005420:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005424:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005426:	4b38      	ldr	r3, [pc, #224]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b04      	cmp	r3, #4
 8005430:	d10c      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8005432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005434:	2b00      	cmp	r3, #0
 8005436:	d109      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005438:	4b33      	ldr	r3, [pc, #204]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	08db      	lsrs	r3, r3, #3
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	4a32      	ldr	r2, [pc, #200]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005444:	fa22 f303 	lsr.w	r3, r2, r3
 8005448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800544a:	e01e      	b.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800544c:	4b2e      	ldr	r3, [pc, #184]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005458:	d106      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005460:	d102      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005462:	4b2b      	ldr	r3, [pc, #172]	; (8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005466:	e010      	b.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005468:	4b27      	ldr	r3, [pc, #156]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005474:	d106      	bne.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800547c:	d102      	bne.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800547e:	4b25      	ldr	r3, [pc, #148]	; (8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005482:	e002      	b.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005488:	e12f      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800548a:	e12e      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005490:	e12b      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005496:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800549a:	430b      	orrs	r3, r1
 800549c:	d13c      	bne.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800549e:	4b1a      	ldr	r3, [pc, #104]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80054a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b4:	d012      	beq.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80054b6:	e023      	b.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054b8:	4b13      	ldr	r3, [pc, #76]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054c4:	d107      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fbda 	bl	8005c84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054d4:	e109      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054da:	e106      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054dc:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054e8:	d107      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054ea:	f107 0318 	add.w	r3, r7, #24
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 f920 	bl	8005734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054f8:	e0f7      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054fe:	e0f4      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005504:	e0f1      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005506:	bf00      	nop
 8005508:	58024400 	.word	0x58024400
 800550c:	03d09000 	.word	0x03d09000
 8005510:	003d0900 	.word	0x003d0900
 8005514:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800551c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005520:	430b      	orrs	r3, r1
 8005522:	f040 8091 	bne.w	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005526:	4b73      	ldr	r3, [pc, #460]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800552e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005536:	f000 8081 	beq.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005540:	d87f      	bhi.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005548:	d06b      	beq.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005550:	d877      	bhi.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005558:	d056      	beq.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005560:	d86f      	bhi.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005568:	d03b      	beq.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005570:	d867      	bhi.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005578:	d021      	beq.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005580:	d85f      	bhi.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	2b00      	cmp	r3, #0
 8005586:	d004      	beq.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800558e:	d004      	beq.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005590:	e057      	b.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005592:	f000 f8b9 	bl	8005708 <HAL_RCCEx_GetD3PCLK1Freq>
 8005596:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005598:	e0a7      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800559a:	4b56      	ldr	r3, [pc, #344]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055a6:	d107      	bne.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055a8:	f107 0318 	add.w	r3, r7, #24
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f8c1 	bl	8005734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055b6:	e098      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055bc:	e095      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055be:	4b4d      	ldr	r3, [pc, #308]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ca:	d107      	bne.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055cc:	f107 030c 	add.w	r3, r7, #12
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 fa03 	bl	80059dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055da:	e086      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055e0:	e083      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055e2:	4b44      	ldr	r3, [pc, #272]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d109      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055ee:	4b41      	ldr	r3, [pc, #260]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	08db      	lsrs	r3, r3, #3
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	4a3f      	ldr	r2, [pc, #252]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80055fa:	fa22 f303 	lsr.w	r3, r2, r3
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005600:	e073      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005606:	e070      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005608:	4b3a      	ldr	r3, [pc, #232]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005614:	d102      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8005616:	4b39      	ldr	r3, [pc, #228]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800561a:	e066      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005620:	e063      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005622:	4b34      	ldr	r3, [pc, #208]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800562e:	d102      	bne.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8005630:	4b33      	ldr	r3, [pc, #204]	; (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005632:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005634:	e059      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800563a:	e056      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800563c:	4b31      	ldr	r3, [pc, #196]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005640:	e053      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005646:	e050      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800564c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005650:	430b      	orrs	r3, r1
 8005652:	d148      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005654:	4b27      	ldr	r3, [pc, #156]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005658:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800565c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005664:	d02a      	beq.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800566c:	d838      	bhi.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8005674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800567a:	d00d      	beq.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800567c:	e030      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800567e:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005686:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800568a:	d102      	bne.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800568c:	4b1c      	ldr	r3, [pc, #112]	; (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005690:	e02b      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005696:	e028      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005698:	4b16      	ldr	r3, [pc, #88]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056a4:	d107      	bne.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 faea 	bl	8005c84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056b4:	e019      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ba:	e016      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056bc:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056c8:	d107      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ca:	f107 0318 	add.w	r3, r7, #24
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f830 	bl	8005734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056d8:	e007      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056de:	e004      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056e4:	e001      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80056ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3740      	adds	r7, #64	; 0x40
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	58024400 	.word	0x58024400
 80056f8:	03d09000 	.word	0x03d09000
 80056fc:	003d0900 	.word	0x003d0900
 8005700:	007a1200 	.word	0x007a1200
 8005704:	00bb8000 	.word	0x00bb8000

08005708 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800570c:	f7fe f90a 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8005710:	4602      	mov	r2, r0
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	091b      	lsrs	r3, r3, #4
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	4904      	ldr	r1, [pc, #16]	; (8005730 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800571e:	5ccb      	ldrb	r3, [r1, r3]
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005728:	4618      	mov	r0, r3
 800572a:	bd80      	pop	{r7, pc}
 800572c:	58024400 	.word	0x58024400
 8005730:	08008938 	.word	0x08008938

08005734 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005734:	b480      	push	{r7}
 8005736:	b089      	sub	sp, #36	; 0x24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800573c:	4ba1      	ldr	r3, [pc, #644]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005746:	4b9f      	ldr	r3, [pc, #636]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574a:	0b1b      	lsrs	r3, r3, #12
 800574c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005750:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005752:	4b9c      	ldr	r3, [pc, #624]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	091b      	lsrs	r3, r3, #4
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800575e:	4b99      	ldr	r3, [pc, #612]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	08db      	lsrs	r3, r3, #3
 8005764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8111 	beq.w	80059a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b02      	cmp	r3, #2
 8005786:	f000 8083 	beq.w	8005890 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b02      	cmp	r3, #2
 800578e:	f200 80a1 	bhi.w	80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d056      	beq.n	800584c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800579e:	e099      	b.n	80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057a0:	4b88      	ldr	r3, [pc, #544]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d02d      	beq.n	8005808 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057ac:	4b85      	ldr	r3, [pc, #532]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	08db      	lsrs	r3, r3, #3
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	4a84      	ldr	r2, [pc, #528]	; (80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
 80057bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	ee07 3a90 	vmov	s15, r3
 80057c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057d6:	4b7b      	ldr	r3, [pc, #492]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005802:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005806:	e087      	b.n	8005918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005812:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581a:	4b6a      	ldr	r3, [pc, #424]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582a:	ed97 6a03 	vldr	s12, [r7, #12]
 800582e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800583e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800584a:	e065      	b.n	8005918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005856:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80059d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800585a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800585e:	4b59      	ldr	r3, [pc, #356]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800586e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005872:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800587e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800588e:	e043      	b.n	8005918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800589e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a2:	4b48      	ldr	r3, [pc, #288]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058d2:	e021      	b.n	8005918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80059d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e6:	4b37      	ldr	r3, [pc, #220]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800590a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005916:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005918:	4b2a      	ldr	r3, [pc, #168]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	0a5b      	lsrs	r3, r3, #9
 800591e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800592e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005932:	edd7 6a07 	vldr	s13, [r7, #28]
 8005936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593e:	ee17 2a90 	vmov	r2, s15
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005946:	4b1f      	ldr	r3, [pc, #124]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	0c1b      	lsrs	r3, r3, #16
 800594c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005950:	ee07 3a90 	vmov	s15, r3
 8005954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800595c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005960:	edd7 6a07 	vldr	s13, [r7, #28]
 8005964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800596c:	ee17 2a90 	vmov	r2, s15
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005974:	4b13      	ldr	r3, [pc, #76]	; (80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	0e1b      	lsrs	r3, r3, #24
 800597a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800598a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800598e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800599a:	ee17 2a90 	vmov	r2, s15
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80059a2:	e008      	b.n	80059b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	609a      	str	r2, [r3, #8]
}
 80059b6:	bf00      	nop
 80059b8:	3724      	adds	r7, #36	; 0x24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	58024400 	.word	0x58024400
 80059c8:	03d09000 	.word	0x03d09000
 80059cc:	46000000 	.word	0x46000000
 80059d0:	4c742400 	.word	0x4c742400
 80059d4:	4a742400 	.word	0x4a742400
 80059d8:	4af42400 	.word	0x4af42400

080059dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80059dc:	b480      	push	{r7}
 80059de:	b089      	sub	sp, #36	; 0x24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059e4:	4ba1      	ldr	r3, [pc, #644]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	f003 0303 	and.w	r3, r3, #3
 80059ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80059ee:	4b9f      	ldr	r3, [pc, #636]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	0d1b      	lsrs	r3, r3, #20
 80059f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80059fa:	4b9c      	ldr	r3, [pc, #624]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	0a1b      	lsrs	r3, r3, #8
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005a06:	4b99      	ldr	r3, [pc, #612]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0a:	08db      	lsrs	r3, r3, #3
 8005a0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	fb02 f303 	mul.w	r3, r2, r3
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8111 	beq.w	8005c4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	f000 8083 	beq.w	8005b38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	f200 80a1 	bhi.w	8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d056      	beq.n	8005af4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005a46:	e099      	b.n	8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a48:	4b88      	ldr	r3, [pc, #544]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d02d      	beq.n	8005ab0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a54:	4b85      	ldr	r3, [pc, #532]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	08db      	lsrs	r3, r3, #3
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	4a84      	ldr	r2, [pc, #528]	; (8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
 8005a64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	ee07 3a90 	vmov	s15, r3
 8005a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7e:	4b7b      	ldr	r3, [pc, #492]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005aae:	e087      	b.n	8005bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ac2:	4b6a      	ldr	r3, [pc, #424]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ad6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005af2:	e065      	b.n	8005bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	ee07 3a90 	vmov	s15, r3
 8005afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005afe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b06:	4b59      	ldr	r3, [pc, #356]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b36:	e043      	b.n	8005bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b4a:	4b48      	ldr	r3, [pc, #288]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b7a:	e021      	b.n	8005bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b8e:	4b37      	ldr	r3, [pc, #220]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ba2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005bc0:	4b2a      	ldr	r3, [pc, #168]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	0a5b      	lsrs	r3, r3, #9
 8005bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005be6:	ee17 2a90 	vmov	r2, s15
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005bee:	4b1f      	ldr	r3, [pc, #124]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	0c1b      	lsrs	r3, r3, #16
 8005bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf8:	ee07 3a90 	vmov	s15, r3
 8005bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c08:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c14:	ee17 2a90 	vmov	r2, s15
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c1c:	4b13      	ldr	r3, [pc, #76]	; (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	0e1b      	lsrs	r3, r3, #24
 8005c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c42:	ee17 2a90 	vmov	r2, s15
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005c4a:	e008      	b.n	8005c5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	609a      	str	r2, [r3, #8]
}
 8005c5e:	bf00      	nop
 8005c60:	3724      	adds	r7, #36	; 0x24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	58024400 	.word	0x58024400
 8005c70:	03d09000 	.word	0x03d09000
 8005c74:	46000000 	.word	0x46000000
 8005c78:	4c742400 	.word	0x4c742400
 8005c7c:	4a742400 	.word	0x4a742400
 8005c80:	4af42400 	.word	0x4af42400

08005c84 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b089      	sub	sp, #36	; 0x24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c8c:	4ba0      	ldr	r3, [pc, #640]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	f003 0303 	and.w	r3, r3, #3
 8005c94:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005c96:	4b9e      	ldr	r3, [pc, #632]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	091b      	lsrs	r3, r3, #4
 8005c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005ca2:	4b9b      	ldr	r3, [pc, #620]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cac:	4b98      	ldr	r3, [pc, #608]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb0:	08db      	lsrs	r3, r3, #3
 8005cb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	fb02 f303 	mul.w	r3, r2, r3
 8005cbc:	ee07 3a90 	vmov	s15, r3
 8005cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 8111 	beq.w	8005ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	f000 8083 	beq.w	8005dde <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	f200 80a1 	bhi.w	8005e22 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d056      	beq.n	8005d9a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005cec:	e099      	b.n	8005e22 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cee:	4b88      	ldr	r3, [pc, #544]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d02d      	beq.n	8005d56 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cfa:	4b85      	ldr	r3, [pc, #532]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	08db      	lsrs	r3, r3, #3
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	4a83      	ldr	r2, [pc, #524]	; (8005f14 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005d06:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	ee07 3a90 	vmov	s15, r3
 8005d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d24:	4b7a      	ldr	r3, [pc, #488]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2c:	ee07 3a90 	vmov	s15, r3
 8005d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d34:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005f18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d50:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d54:	e087      	b.n	8005e66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005f1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d68:	4b69      	ldr	r3, [pc, #420]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d70:	ee07 3a90 	vmov	s15, r3
 8005d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d78:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005f18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d98:	e065      	b.n	8005e66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	ee07 3a90 	vmov	s15, r3
 8005da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005f20 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005da8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dac:	4b58      	ldr	r3, [pc, #352]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db4:	ee07 3a90 	vmov	s15, r3
 8005db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dc0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005f18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005dc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ddc:	e043      	b.n	8005e66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005dec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df0:	4b47      	ldr	r3, [pc, #284]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e00:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e04:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005f18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e20:	e021      	b.n	8005e66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	ee07 3a90 	vmov	s15, r3
 8005e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005f1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005e30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e34:	4b36      	ldr	r3, [pc, #216]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e44:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e48:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005f18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e64:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005e66:	4b2a      	ldr	r3, [pc, #168]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	0a5b      	lsrs	r3, r3, #9
 8005e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e70:	ee07 3a90 	vmov	s15, r3
 8005e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e8c:	ee17 2a90 	vmov	r2, s15
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005e94:	4b1e      	ldr	r3, [pc, #120]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	0c1b      	lsrs	r3, r3, #16
 8005e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eba:	ee17 2a90 	vmov	r2, s15
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005ec2:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	0e1b      	lsrs	r3, r3, #24
 8005ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ecc:	ee07 3a90 	vmov	s15, r3
 8005ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee8:	ee17 2a90 	vmov	r2, s15
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005ef0:	e008      	b.n	8005f04 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	609a      	str	r2, [r3, #8]
}
 8005f04:	bf00      	nop
 8005f06:	3724      	adds	r7, #36	; 0x24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	58024400 	.word	0x58024400
 8005f14:	03d09000 	.word	0x03d09000
 8005f18:	46000000 	.word	0x46000000
 8005f1c:	4c742400 	.word	0x4c742400
 8005f20:	4a742400 	.word	0x4a742400
 8005f24:	4af42400 	.word	0x4af42400

08005f28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f36:	4b53      	ldr	r3, [pc, #332]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d101      	bne.n	8005f46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e099      	b.n	800607a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005f46:	4b4f      	ldr	r3, [pc, #316]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a4e      	ldr	r2, [pc, #312]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005f4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f52:	f7fb fae9 	bl	8001528 <HAL_GetTick>
 8005f56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f58:	e008      	b.n	8005f6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f5a:	f7fb fae5 	bl	8001528 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e086      	b.n	800607a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f6c:	4b45      	ldr	r3, [pc, #276]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f0      	bne.n	8005f5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f78:	4b42      	ldr	r3, [pc, #264]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	031b      	lsls	r3, r3, #12
 8005f86:	493f      	ldr	r1, [pc, #252]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	628b      	str	r3, [r1, #40]	; 0x28
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	025b      	lsls	r3, r3, #9
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	041b      	lsls	r3, r3, #16
 8005faa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	061b      	lsls	r3, r3, #24
 8005fb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fbc:	4931      	ldr	r1, [pc, #196]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005fc2:	4b30      	ldr	r3, [pc, #192]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	492d      	ldr	r1, [pc, #180]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005fd4:	4b2b      	ldr	r3, [pc, #172]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	f023 0220 	bic.w	r2, r3, #32
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	4928      	ldr	r1, [pc, #160]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005fe6:	4b27      	ldr	r3, [pc, #156]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	4a26      	ldr	r2, [pc, #152]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005fec:	f023 0310 	bic.w	r3, r3, #16
 8005ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ff2:	4b24      	ldr	r3, [pc, #144]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8005ff4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ff6:	4b24      	ldr	r3, [pc, #144]	; (8006088 <RCCEx_PLL2_Config+0x160>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	69d2      	ldr	r2, [r2, #28]
 8005ffe:	00d2      	lsls	r2, r2, #3
 8006000:	4920      	ldr	r1, [pc, #128]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8006002:	4313      	orrs	r3, r2
 8006004:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006006:	4b1f      	ldr	r3, [pc, #124]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	4a1e      	ldr	r2, [pc, #120]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 800600c:	f043 0310 	orr.w	r3, r3, #16
 8006010:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006018:	4b1a      	ldr	r3, [pc, #104]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	4a19      	ldr	r2, [pc, #100]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 800601e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006022:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006024:	e00f      	b.n	8006046 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d106      	bne.n	800603a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800602c:	4b15      	ldr	r3, [pc, #84]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	4a14      	ldr	r2, [pc, #80]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8006032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006036:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006038:	e005      	b.n	8006046 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800603a:	4b12      	ldr	r3, [pc, #72]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	4a11      	ldr	r2, [pc, #68]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8006040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006044:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006046:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a0e      	ldr	r2, [pc, #56]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 800604c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006052:	f7fb fa69 	bl	8001528 <HAL_GetTick>
 8006056:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006058:	e008      	b.n	800606c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800605a:	f7fb fa65 	bl	8001528 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e006      	b.n	800607a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <RCCEx_PLL2_Config+0x15c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0f0      	beq.n	800605a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	58024400 	.word	0x58024400
 8006088:	ffff0007 	.word	0xffff0007

0800608c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800609a:	4b53      	ldr	r3, [pc, #332]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d101      	bne.n	80060aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e099      	b.n	80061de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80060aa:	4b4f      	ldr	r3, [pc, #316]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a4e      	ldr	r2, [pc, #312]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 80060b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b6:	f7fb fa37 	bl	8001528 <HAL_GetTick>
 80060ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060bc:	e008      	b.n	80060d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80060be:	f7fb fa33 	bl	8001528 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e086      	b.n	80061de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060d0:	4b45      	ldr	r3, [pc, #276]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f0      	bne.n	80060be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80060dc:	4b42      	ldr	r3, [pc, #264]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	051b      	lsls	r3, r3, #20
 80060ea:	493f      	ldr	r1, [pc, #252]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	628b      	str	r3, [r1, #40]	; 0x28
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	3b01      	subs	r3, #1
 8006100:	025b      	lsls	r3, r3, #9
 8006102:	b29b      	uxth	r3, r3
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	3b01      	subs	r3, #1
 800610c:	041b      	lsls	r3, r3, #16
 800610e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	3b01      	subs	r3, #1
 800611a:	061b      	lsls	r3, r3, #24
 800611c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006120:	4931      	ldr	r1, [pc, #196]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 8006122:	4313      	orrs	r3, r2
 8006124:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006126:	4b30      	ldr	r3, [pc, #192]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	492d      	ldr	r1, [pc, #180]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 8006134:	4313      	orrs	r3, r2
 8006136:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006138:	4b2b      	ldr	r3, [pc, #172]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	4928      	ldr	r1, [pc, #160]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 8006146:	4313      	orrs	r3, r2
 8006148:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800614a:	4b27      	ldr	r3, [pc, #156]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	4a26      	ldr	r2, [pc, #152]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 8006150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006154:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006156:	4b24      	ldr	r3, [pc, #144]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 8006158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800615a:	4b24      	ldr	r3, [pc, #144]	; (80061ec <RCCEx_PLL3_Config+0x160>)
 800615c:	4013      	ands	r3, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	69d2      	ldr	r2, [r2, #28]
 8006162:	00d2      	lsls	r2, r2, #3
 8006164:	4920      	ldr	r1, [pc, #128]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 8006166:	4313      	orrs	r3, r2
 8006168:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800616a:	4b1f      	ldr	r3, [pc, #124]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 800616c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616e:	4a1e      	ldr	r2, [pc, #120]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 8006170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006174:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d106      	bne.n	800618a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800617c:	4b1a      	ldr	r3, [pc, #104]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	4a19      	ldr	r2, [pc, #100]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 8006182:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006186:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006188:	e00f      	b.n	80061aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d106      	bne.n	800619e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006190:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	4a14      	ldr	r2, [pc, #80]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 8006196:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800619a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800619c:	e005      	b.n	80061aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800619e:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	4a11      	ldr	r2, [pc, #68]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 80061a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80061aa:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a0e      	ldr	r2, [pc, #56]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 80061b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b6:	f7fb f9b7 	bl	8001528 <HAL_GetTick>
 80061ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061bc:	e008      	b.n	80061d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061be:	f7fb f9b3 	bl	8001528 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e006      	b.n	80061de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <RCCEx_PLL3_Config+0x15c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0f0      	beq.n	80061be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	58024400 	.word	0x58024400
 80061ec:	ffff0007 	.word	0xffff0007

080061f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e049      	b.n	8006296 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fa ff4a 	bl	80010b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f000 fabc 	bl	80067ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e08f      	b.n	80063d4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7fa fea7 	bl	800101c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6899      	ldr	r1, [r3, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	4b3e      	ldr	r3, [pc, #248]	; (80063dc <HAL_TIM_Encoder_Init+0x13c>)
 80062e2:	400b      	ands	r3, r1
 80062e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f000 fa5b 	bl	80067ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4b31      	ldr	r3, [pc, #196]	; (80063e0 <HAL_TIM_Encoder_Init+0x140>)
 800631c:	4013      	ands	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	4313      	orrs	r3, r2
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4b2b      	ldr	r3, [pc, #172]	; (80063e4 <HAL_TIM_Encoder_Init+0x144>)
 8006336:	4013      	ands	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4b2a      	ldr	r3, [pc, #168]	; (80063e8 <HAL_TIM_Encoder_Init+0x148>)
 800633e:	4013      	ands	r3, r2
 8006340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	4313      	orrs	r3, r2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	011a      	lsls	r2, r3, #4
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	031b      	lsls	r3, r3, #12
 8006360:	4313      	orrs	r3, r2
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800636e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006376:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	4313      	orrs	r3, r2
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	fffebff8 	.word	0xfffebff8
 80063e0:	fffffcfc 	.word	0xfffffcfc
 80063e4:	fffff3f3 	.word	0xfffff3f3
 80063e8:	ffff0f0f 	.word	0xffff0f0f

080063ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006404:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800640c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006414:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d110      	bne.n	800643e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d102      	bne.n	8006428 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006422:	7b7b      	ldrb	r3, [r7, #13]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d001      	beq.n	800642c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e069      	b.n	8006500 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800643c:	e031      	b.n	80064a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b04      	cmp	r3, #4
 8006442:	d110      	bne.n	8006466 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d102      	bne.n	8006450 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800644a:	7b3b      	ldrb	r3, [r7, #12]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d001      	beq.n	8006454 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e055      	b.n	8006500 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006464:	e01d      	b.n	80064a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d108      	bne.n	800647e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d105      	bne.n	800647e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006472:	7b7b      	ldrb	r3, [r7, #13]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d102      	bne.n	800647e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006478:	7b3b      	ldrb	r3, [r7, #12]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d001      	beq.n	8006482 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e03e      	b.n	8006500 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2202      	movs	r2, #2
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2202      	movs	r2, #2
 800648e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2202      	movs	r2, #2
 8006496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_TIM_Encoder_Start+0xc4>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d008      	beq.n	80064c0 <HAL_TIM_Encoder_Start+0xd4>
 80064ae:	e00f      	b.n	80064d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2201      	movs	r2, #1
 80064b6:	2100      	movs	r1, #0
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fa11 	bl	80068e0 <TIM_CCxChannelCmd>
      break;
 80064be:	e016      	b.n	80064ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2201      	movs	r2, #1
 80064c6:	2104      	movs	r1, #4
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fa09 	bl	80068e0 <TIM_CCxChannelCmd>
      break;
 80064ce:	e00e      	b.n	80064ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2201      	movs	r2, #1
 80064d6:	2100      	movs	r1, #0
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fa01 	bl	80068e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2201      	movs	r2, #1
 80064e4:	2104      	movs	r1, #4
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f9fa 	bl	80068e0 <TIM_CCxChannelCmd>
      break;
 80064ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0201 	orr.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b02      	cmp	r3, #2
 800651c:	d122      	bne.n	8006564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b02      	cmp	r3, #2
 800652a:	d11b      	bne.n	8006564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0202 	mvn.w	r2, #2
 8006534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f90f 	bl	800676e <HAL_TIM_IC_CaptureCallback>
 8006550:	e005      	b.n	800655e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f901 	bl	800675a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f912 	bl	8006782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b04      	cmp	r3, #4
 8006570:	d122      	bne.n	80065b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b04      	cmp	r3, #4
 800657e:	d11b      	bne.n	80065b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0204 	mvn.w	r2, #4
 8006588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2202      	movs	r2, #2
 800658e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f8e5 	bl	800676e <HAL_TIM_IC_CaptureCallback>
 80065a4:	e005      	b.n	80065b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f8d7 	bl	800675a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f8e8 	bl	8006782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d122      	bne.n	800660c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d11b      	bne.n	800660c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0208 	mvn.w	r2, #8
 80065dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2204      	movs	r2, #4
 80065e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f8bb 	bl	800676e <HAL_TIM_IC_CaptureCallback>
 80065f8:	e005      	b.n	8006606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f8ad 	bl	800675a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f8be 	bl	8006782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	2b10      	cmp	r3, #16
 8006618:	d122      	bne.n	8006660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b10      	cmp	r3, #16
 8006626:	d11b      	bne.n	8006660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0210 	mvn.w	r2, #16
 8006630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2208      	movs	r2, #8
 8006636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f891 	bl	800676e <HAL_TIM_IC_CaptureCallback>
 800664c:	e005      	b.n	800665a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f883 	bl	800675a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f894 	bl	8006782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b01      	cmp	r3, #1
 800666c:	d10e      	bne.n	800668c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b01      	cmp	r3, #1
 800667a:	d107      	bne.n	800668c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f06f 0201 	mvn.w	r2, #1
 8006684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f85d 	bl	8006746 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b80      	cmp	r3, #128	; 0x80
 8006698:	d10e      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a4:	2b80      	cmp	r3, #128	; 0x80
 80066a6:	d107      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f9d2 	bl	8006a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c6:	d10e      	bne.n	80066e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b80      	cmp	r3, #128	; 0x80
 80066d4:	d107      	bne.n	80066e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f9c5 	bl	8006a70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f0:	2b40      	cmp	r3, #64	; 0x40
 80066f2:	d10e      	bne.n	8006712 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fe:	2b40      	cmp	r3, #64	; 0x40
 8006700:	d107      	bne.n	8006712 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800670a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f842 	bl	8006796 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b20      	cmp	r3, #32
 800671e:	d10e      	bne.n	800673e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b20      	cmp	r3, #32
 800672c:	d107      	bne.n	800673e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f06f 0220 	mvn.w	r2, #32
 8006736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f985 	bl	8006a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a40      	ldr	r2, [pc, #256]	; (80068c0 <TIM_Base_SetConfig+0x114>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d013      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ca:	d00f      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a3d      	ldr	r2, [pc, #244]	; (80068c4 <TIM_Base_SetConfig+0x118>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00b      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a3c      	ldr	r2, [pc, #240]	; (80068c8 <TIM_Base_SetConfig+0x11c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d007      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a3b      	ldr	r2, [pc, #236]	; (80068cc <TIM_Base_SetConfig+0x120>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a3a      	ldr	r2, [pc, #232]	; (80068d0 <TIM_Base_SetConfig+0x124>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d108      	bne.n	80067fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a2f      	ldr	r2, [pc, #188]	; (80068c0 <TIM_Base_SetConfig+0x114>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d01f      	beq.n	8006846 <TIM_Base_SetConfig+0x9a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800680c:	d01b      	beq.n	8006846 <TIM_Base_SetConfig+0x9a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a2c      	ldr	r2, [pc, #176]	; (80068c4 <TIM_Base_SetConfig+0x118>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d017      	beq.n	8006846 <TIM_Base_SetConfig+0x9a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a2b      	ldr	r2, [pc, #172]	; (80068c8 <TIM_Base_SetConfig+0x11c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d013      	beq.n	8006846 <TIM_Base_SetConfig+0x9a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a2a      	ldr	r2, [pc, #168]	; (80068cc <TIM_Base_SetConfig+0x120>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00f      	beq.n	8006846 <TIM_Base_SetConfig+0x9a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a29      	ldr	r2, [pc, #164]	; (80068d0 <TIM_Base_SetConfig+0x124>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00b      	beq.n	8006846 <TIM_Base_SetConfig+0x9a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a28      	ldr	r2, [pc, #160]	; (80068d4 <TIM_Base_SetConfig+0x128>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d007      	beq.n	8006846 <TIM_Base_SetConfig+0x9a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a27      	ldr	r2, [pc, #156]	; (80068d8 <TIM_Base_SetConfig+0x12c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d003      	beq.n	8006846 <TIM_Base_SetConfig+0x9a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a26      	ldr	r2, [pc, #152]	; (80068dc <TIM_Base_SetConfig+0x130>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d108      	bne.n	8006858 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a10      	ldr	r2, [pc, #64]	; (80068c0 <TIM_Base_SetConfig+0x114>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00f      	beq.n	80068a4 <TIM_Base_SetConfig+0xf8>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a12      	ldr	r2, [pc, #72]	; (80068d0 <TIM_Base_SetConfig+0x124>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00b      	beq.n	80068a4 <TIM_Base_SetConfig+0xf8>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a11      	ldr	r2, [pc, #68]	; (80068d4 <TIM_Base_SetConfig+0x128>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d007      	beq.n	80068a4 <TIM_Base_SetConfig+0xf8>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a10      	ldr	r2, [pc, #64]	; (80068d8 <TIM_Base_SetConfig+0x12c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d003      	beq.n	80068a4 <TIM_Base_SetConfig+0xf8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a0f      	ldr	r2, [pc, #60]	; (80068dc <TIM_Base_SetConfig+0x130>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d103      	bne.n	80068ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	615a      	str	r2, [r3, #20]
}
 80068b2:	bf00      	nop
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40010000 	.word	0x40010000
 80068c4:	40000400 	.word	0x40000400
 80068c8:	40000800 	.word	0x40000800
 80068cc:	40000c00 	.word	0x40000c00
 80068d0:	40010400 	.word	0x40010400
 80068d4:	40014000 	.word	0x40014000
 80068d8:	40014400 	.word	0x40014400
 80068dc:	40014800 	.word	0x40014800

080068e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	2201      	movs	r2, #1
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a1a      	ldr	r2, [r3, #32]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	43db      	mvns	r3, r3
 8006902:	401a      	ands	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1a      	ldr	r2, [r3, #32]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f003 031f 	and.w	r3, r3, #31
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	fa01 f303 	lsl.w	r3, r1, r3
 8006918:	431a      	orrs	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	621a      	str	r2, [r3, #32]
}
 800691e:	bf00      	nop
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006940:	2302      	movs	r3, #2
 8006942:	e06d      	b.n	8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a30      	ldr	r2, [pc, #192]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a2f      	ldr	r2, [pc, #188]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d108      	bne.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800697e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006990:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a20      	ldr	r2, [pc, #128]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d022      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b6:	d01d      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1d      	ldr	r2, [pc, #116]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d018      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1c      	ldr	r2, [pc, #112]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1a      	ldr	r2, [pc, #104]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00e      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d009      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a16      	ldr	r2, [pc, #88]	; (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a15      	ldr	r2, [pc, #84]	; (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d10c      	bne.n	8006a0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	40010000 	.word	0x40010000
 8006a30:	40010400 	.word	0x40010400
 8006a34:	40000400 	.word	0x40000400
 8006a38:	40000800 	.word	0x40000800
 8006a3c:	40000c00 	.word	0x40000c00
 8006a40:	40001800 	.word	0x40001800
 8006a44:	40014000 	.word	0x40014000

08006a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e042      	b.n	8006b1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d106      	bne.n	8006aae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7fa fb41 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2224      	movs	r2, #36	; 0x24
 8006ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0201 	bic.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f8ba 	bl	8006c40 <UART_SetConfig>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e022      	b.n	8006b1c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 ff1a 	bl	8007918 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006af2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 ffa1 	bl	8007a5c <UART_CheckIdleState>
 8006b1a:	4603      	mov	r3, r0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	; 0x28
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	4613      	mov	r3, r2
 8006b32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3a:	2b20      	cmp	r3, #32
 8006b3c:	d17b      	bne.n	8006c36 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <HAL_UART_Transmit+0x26>
 8006b44:	88fb      	ldrh	r3, [r7, #6]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e074      	b.n	8006c38 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2221      	movs	r2, #33	; 0x21
 8006b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b5e:	f7fa fce3 	bl	8001528 <HAL_GetTick>
 8006b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	88fa      	ldrh	r2, [r7, #6]
 8006b68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7c:	d108      	bne.n	8006b90 <HAL_UART_Transmit+0x6c>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d104      	bne.n	8006b90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b86:	2300      	movs	r3, #0
 8006b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	e003      	b.n	8006b98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b98:	e030      	b.n	8006bfc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2180      	movs	r1, #128	; 0x80
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f001 f803 	bl	8007bb0 <UART_WaitOnFlagUntilTimeout>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e03d      	b.n	8006c38 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10b      	bne.n	8006bda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	3302      	adds	r3, #2
 8006bd6:	61bb      	str	r3, [r7, #24]
 8006bd8:	e007      	b.n	8006bea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	781a      	ldrb	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	3301      	adds	r3, #1
 8006be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1c8      	bne.n	8006b9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2140      	movs	r1, #64	; 0x40
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 ffcc 	bl	8007bb0 <UART_WaitOnFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e006      	b.n	8006c38 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	e000      	b.n	8006c38 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c36:	2302      	movs	r3, #2
  }
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c44:	b092      	sub	sp, #72	; 0x48
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	4bbe      	ldr	r3, [pc, #760]	; (8006f68 <UART_SetConfig+0x328>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4ab3      	ldr	r2, [pc, #716]	; (8006f6c <UART_SetConfig+0x32c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d004      	beq.n	8006cac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689a      	ldr	r2, [r3, #8]
 8006cb2:	4baf      	ldr	r3, [pc, #700]	; (8006f70 <UART_SetConfig+0x330>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	6812      	ldr	r2, [r2, #0]
 8006cba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cbc:	430b      	orrs	r3, r1
 8006cbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	f023 010f 	bic.w	r1, r3, #15
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4aa6      	ldr	r2, [pc, #664]	; (8006f74 <UART_SetConfig+0x334>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d177      	bne.n	8006dd0 <UART_SetConfig+0x190>
 8006ce0:	4ba5      	ldr	r3, [pc, #660]	; (8006f78 <UART_SetConfig+0x338>)
 8006ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ce8:	2b28      	cmp	r3, #40	; 0x28
 8006cea:	d86d      	bhi.n	8006dc8 <UART_SetConfig+0x188>
 8006cec:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <UART_SetConfig+0xb4>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d99 	.word	0x08006d99
 8006cf8:	08006dc9 	.word	0x08006dc9
 8006cfc:	08006dc9 	.word	0x08006dc9
 8006d00:	08006dc9 	.word	0x08006dc9
 8006d04:	08006dc9 	.word	0x08006dc9
 8006d08:	08006dc9 	.word	0x08006dc9
 8006d0c:	08006dc9 	.word	0x08006dc9
 8006d10:	08006dc9 	.word	0x08006dc9
 8006d14:	08006da1 	.word	0x08006da1
 8006d18:	08006dc9 	.word	0x08006dc9
 8006d1c:	08006dc9 	.word	0x08006dc9
 8006d20:	08006dc9 	.word	0x08006dc9
 8006d24:	08006dc9 	.word	0x08006dc9
 8006d28:	08006dc9 	.word	0x08006dc9
 8006d2c:	08006dc9 	.word	0x08006dc9
 8006d30:	08006dc9 	.word	0x08006dc9
 8006d34:	08006da9 	.word	0x08006da9
 8006d38:	08006dc9 	.word	0x08006dc9
 8006d3c:	08006dc9 	.word	0x08006dc9
 8006d40:	08006dc9 	.word	0x08006dc9
 8006d44:	08006dc9 	.word	0x08006dc9
 8006d48:	08006dc9 	.word	0x08006dc9
 8006d4c:	08006dc9 	.word	0x08006dc9
 8006d50:	08006dc9 	.word	0x08006dc9
 8006d54:	08006db1 	.word	0x08006db1
 8006d58:	08006dc9 	.word	0x08006dc9
 8006d5c:	08006dc9 	.word	0x08006dc9
 8006d60:	08006dc9 	.word	0x08006dc9
 8006d64:	08006dc9 	.word	0x08006dc9
 8006d68:	08006dc9 	.word	0x08006dc9
 8006d6c:	08006dc9 	.word	0x08006dc9
 8006d70:	08006dc9 	.word	0x08006dc9
 8006d74:	08006db9 	.word	0x08006db9
 8006d78:	08006dc9 	.word	0x08006dc9
 8006d7c:	08006dc9 	.word	0x08006dc9
 8006d80:	08006dc9 	.word	0x08006dc9
 8006d84:	08006dc9 	.word	0x08006dc9
 8006d88:	08006dc9 	.word	0x08006dc9
 8006d8c:	08006dc9 	.word	0x08006dc9
 8006d90:	08006dc9 	.word	0x08006dc9
 8006d94:	08006dc1 	.word	0x08006dc1
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d9e:	e326      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006da0:	2304      	movs	r3, #4
 8006da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006da6:	e322      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006da8:	2308      	movs	r3, #8
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dae:	e31e      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006db0:	2310      	movs	r3, #16
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db6:	e31a      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006db8:	2320      	movs	r3, #32
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dbe:	e316      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006dc0:	2340      	movs	r3, #64	; 0x40
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc6:	e312      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006dc8:	2380      	movs	r3, #128	; 0x80
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dce:	e30e      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a69      	ldr	r2, [pc, #420]	; (8006f7c <UART_SetConfig+0x33c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d130      	bne.n	8006e3c <UART_SetConfig+0x1fc>
 8006dda:	4b67      	ldr	r3, [pc, #412]	; (8006f78 <UART_SetConfig+0x338>)
 8006ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	2b05      	cmp	r3, #5
 8006de4:	d826      	bhi.n	8006e34 <UART_SetConfig+0x1f4>
 8006de6:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <UART_SetConfig+0x1ac>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e05 	.word	0x08006e05
 8006df0:	08006e0d 	.word	0x08006e0d
 8006df4:	08006e15 	.word	0x08006e15
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e25 	.word	0x08006e25
 8006e00:	08006e2d 	.word	0x08006e2d
 8006e04:	2300      	movs	r3, #0
 8006e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0a:	e2f0      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e12:	e2ec      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006e14:	2308      	movs	r3, #8
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1a:	e2e8      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e22:	e2e4      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006e24:	2320      	movs	r3, #32
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2a:	e2e0      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006e2c:	2340      	movs	r3, #64	; 0x40
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e32:	e2dc      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006e34:	2380      	movs	r3, #128	; 0x80
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3a:	e2d8      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a4f      	ldr	r2, [pc, #316]	; (8006f80 <UART_SetConfig+0x340>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d130      	bne.n	8006ea8 <UART_SetConfig+0x268>
 8006e46:	4b4c      	ldr	r3, [pc, #304]	; (8006f78 <UART_SetConfig+0x338>)
 8006e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	2b05      	cmp	r3, #5
 8006e50:	d826      	bhi.n	8006ea0 <UART_SetConfig+0x260>
 8006e52:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <UART_SetConfig+0x218>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006e71 	.word	0x08006e71
 8006e5c:	08006e79 	.word	0x08006e79
 8006e60:	08006e81 	.word	0x08006e81
 8006e64:	08006e89 	.word	0x08006e89
 8006e68:	08006e91 	.word	0x08006e91
 8006e6c:	08006e99 	.word	0x08006e99
 8006e70:	2300      	movs	r3, #0
 8006e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e76:	e2ba      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7e:	e2b6      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006e80:	2308      	movs	r3, #8
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e86:	e2b2      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8e:	e2ae      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006e90:	2320      	movs	r3, #32
 8006e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e96:	e2aa      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006e98:	2340      	movs	r3, #64	; 0x40
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e9e:	e2a6      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006ea0:	2380      	movs	r3, #128	; 0x80
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea6:	e2a2      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a35      	ldr	r2, [pc, #212]	; (8006f84 <UART_SetConfig+0x344>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d130      	bne.n	8006f14 <UART_SetConfig+0x2d4>
 8006eb2:	4b31      	ldr	r3, [pc, #196]	; (8006f78 <UART_SetConfig+0x338>)
 8006eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	2b05      	cmp	r3, #5
 8006ebc:	d826      	bhi.n	8006f0c <UART_SetConfig+0x2cc>
 8006ebe:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <UART_SetConfig+0x284>)
 8006ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec4:	08006edd 	.word	0x08006edd
 8006ec8:	08006ee5 	.word	0x08006ee5
 8006ecc:	08006eed 	.word	0x08006eed
 8006ed0:	08006ef5 	.word	0x08006ef5
 8006ed4:	08006efd 	.word	0x08006efd
 8006ed8:	08006f05 	.word	0x08006f05
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee2:	e284      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eea:	e280      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006eec:	2308      	movs	r3, #8
 8006eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef2:	e27c      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efa:	e278      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006efc:	2320      	movs	r3, #32
 8006efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f02:	e274      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006f04:	2340      	movs	r3, #64	; 0x40
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f0a:	e270      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006f0c:	2380      	movs	r3, #128	; 0x80
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f12:	e26c      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a1b      	ldr	r2, [pc, #108]	; (8006f88 <UART_SetConfig+0x348>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d142      	bne.n	8006fa4 <UART_SetConfig+0x364>
 8006f1e:	4b16      	ldr	r3, [pc, #88]	; (8006f78 <UART_SetConfig+0x338>)
 8006f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d838      	bhi.n	8006f9c <UART_SetConfig+0x35c>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <UART_SetConfig+0x2f0>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f49 	.word	0x08006f49
 8006f34:	08006f51 	.word	0x08006f51
 8006f38:	08006f59 	.word	0x08006f59
 8006f3c:	08006f61 	.word	0x08006f61
 8006f40:	08006f8d 	.word	0x08006f8d
 8006f44:	08006f95 	.word	0x08006f95
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4e:	e24e      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006f50:	2304      	movs	r3, #4
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f56:	e24a      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006f58:	2308      	movs	r3, #8
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5e:	e246      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006f60:	2310      	movs	r3, #16
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f66:	e242      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006f68:	cfff69f3 	.word	0xcfff69f3
 8006f6c:	58000c00 	.word	0x58000c00
 8006f70:	11fff4ff 	.word	0x11fff4ff
 8006f74:	40011000 	.word	0x40011000
 8006f78:	58024400 	.word	0x58024400
 8006f7c:	40004400 	.word	0x40004400
 8006f80:	40004800 	.word	0x40004800
 8006f84:	40004c00 	.word	0x40004c00
 8006f88:	40005000 	.word	0x40005000
 8006f8c:	2320      	movs	r3, #32
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f92:	e22c      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006f94:	2340      	movs	r3, #64	; 0x40
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9a:	e228      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006f9c:	2380      	movs	r3, #128	; 0x80
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa2:	e224      	b.n	80073ee <UART_SetConfig+0x7ae>
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4ab1      	ldr	r2, [pc, #708]	; (8007270 <UART_SetConfig+0x630>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d176      	bne.n	800709c <UART_SetConfig+0x45c>
 8006fae:	4bb1      	ldr	r3, [pc, #708]	; (8007274 <UART_SetConfig+0x634>)
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fb6:	2b28      	cmp	r3, #40	; 0x28
 8006fb8:	d86c      	bhi.n	8007094 <UART_SetConfig+0x454>
 8006fba:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <UART_SetConfig+0x380>)
 8006fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc0:	08007065 	.word	0x08007065
 8006fc4:	08007095 	.word	0x08007095
 8006fc8:	08007095 	.word	0x08007095
 8006fcc:	08007095 	.word	0x08007095
 8006fd0:	08007095 	.word	0x08007095
 8006fd4:	08007095 	.word	0x08007095
 8006fd8:	08007095 	.word	0x08007095
 8006fdc:	08007095 	.word	0x08007095
 8006fe0:	0800706d 	.word	0x0800706d
 8006fe4:	08007095 	.word	0x08007095
 8006fe8:	08007095 	.word	0x08007095
 8006fec:	08007095 	.word	0x08007095
 8006ff0:	08007095 	.word	0x08007095
 8006ff4:	08007095 	.word	0x08007095
 8006ff8:	08007095 	.word	0x08007095
 8006ffc:	08007095 	.word	0x08007095
 8007000:	08007075 	.word	0x08007075
 8007004:	08007095 	.word	0x08007095
 8007008:	08007095 	.word	0x08007095
 800700c:	08007095 	.word	0x08007095
 8007010:	08007095 	.word	0x08007095
 8007014:	08007095 	.word	0x08007095
 8007018:	08007095 	.word	0x08007095
 800701c:	08007095 	.word	0x08007095
 8007020:	0800707d 	.word	0x0800707d
 8007024:	08007095 	.word	0x08007095
 8007028:	08007095 	.word	0x08007095
 800702c:	08007095 	.word	0x08007095
 8007030:	08007095 	.word	0x08007095
 8007034:	08007095 	.word	0x08007095
 8007038:	08007095 	.word	0x08007095
 800703c:	08007095 	.word	0x08007095
 8007040:	08007085 	.word	0x08007085
 8007044:	08007095 	.word	0x08007095
 8007048:	08007095 	.word	0x08007095
 800704c:	08007095 	.word	0x08007095
 8007050:	08007095 	.word	0x08007095
 8007054:	08007095 	.word	0x08007095
 8007058:	08007095 	.word	0x08007095
 800705c:	08007095 	.word	0x08007095
 8007060:	0800708d 	.word	0x0800708d
 8007064:	2301      	movs	r3, #1
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706a:	e1c0      	b.n	80073ee <UART_SetConfig+0x7ae>
 800706c:	2304      	movs	r3, #4
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007072:	e1bc      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007074:	2308      	movs	r3, #8
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707a:	e1b8      	b.n	80073ee <UART_SetConfig+0x7ae>
 800707c:	2310      	movs	r3, #16
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007082:	e1b4      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007084:	2320      	movs	r3, #32
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708a:	e1b0      	b.n	80073ee <UART_SetConfig+0x7ae>
 800708c:	2340      	movs	r3, #64	; 0x40
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007092:	e1ac      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007094:	2380      	movs	r3, #128	; 0x80
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709a:	e1a8      	b.n	80073ee <UART_SetConfig+0x7ae>
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a75      	ldr	r2, [pc, #468]	; (8007278 <UART_SetConfig+0x638>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d130      	bne.n	8007108 <UART_SetConfig+0x4c8>
 80070a6:	4b73      	ldr	r3, [pc, #460]	; (8007274 <UART_SetConfig+0x634>)
 80070a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	d826      	bhi.n	8007100 <UART_SetConfig+0x4c0>
 80070b2:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <UART_SetConfig+0x478>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	080070d1 	.word	0x080070d1
 80070bc:	080070d9 	.word	0x080070d9
 80070c0:	080070e1 	.word	0x080070e1
 80070c4:	080070e9 	.word	0x080070e9
 80070c8:	080070f1 	.word	0x080070f1
 80070cc:	080070f9 	.word	0x080070f9
 80070d0:	2300      	movs	r3, #0
 80070d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d6:	e18a      	b.n	80073ee <UART_SetConfig+0x7ae>
 80070d8:	2304      	movs	r3, #4
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070de:	e186      	b.n	80073ee <UART_SetConfig+0x7ae>
 80070e0:	2308      	movs	r3, #8
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e6:	e182      	b.n	80073ee <UART_SetConfig+0x7ae>
 80070e8:	2310      	movs	r3, #16
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ee:	e17e      	b.n	80073ee <UART_SetConfig+0x7ae>
 80070f0:	2320      	movs	r3, #32
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f6:	e17a      	b.n	80073ee <UART_SetConfig+0x7ae>
 80070f8:	2340      	movs	r3, #64	; 0x40
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fe:	e176      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007100:	2380      	movs	r3, #128	; 0x80
 8007102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007106:	e172      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a5b      	ldr	r2, [pc, #364]	; (800727c <UART_SetConfig+0x63c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d130      	bne.n	8007174 <UART_SetConfig+0x534>
 8007112:	4b58      	ldr	r3, [pc, #352]	; (8007274 <UART_SetConfig+0x634>)
 8007114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	2b05      	cmp	r3, #5
 800711c:	d826      	bhi.n	800716c <UART_SetConfig+0x52c>
 800711e:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <UART_SetConfig+0x4e4>)
 8007120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007124:	0800713d 	.word	0x0800713d
 8007128:	08007145 	.word	0x08007145
 800712c:	0800714d 	.word	0x0800714d
 8007130:	08007155 	.word	0x08007155
 8007134:	0800715d 	.word	0x0800715d
 8007138:	08007165 	.word	0x08007165
 800713c:	2300      	movs	r3, #0
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007142:	e154      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007144:	2304      	movs	r3, #4
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714a:	e150      	b.n	80073ee <UART_SetConfig+0x7ae>
 800714c:	2308      	movs	r3, #8
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007152:	e14c      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007154:	2310      	movs	r3, #16
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715a:	e148      	b.n	80073ee <UART_SetConfig+0x7ae>
 800715c:	2320      	movs	r3, #32
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007162:	e144      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007164:	2340      	movs	r3, #64	; 0x40
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716a:	e140      	b.n	80073ee <UART_SetConfig+0x7ae>
 800716c:	2380      	movs	r3, #128	; 0x80
 800716e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007172:	e13c      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a41      	ldr	r2, [pc, #260]	; (8007280 <UART_SetConfig+0x640>)
 800717a:	4293      	cmp	r3, r2
 800717c:	f040 8082 	bne.w	8007284 <UART_SetConfig+0x644>
 8007180:	4b3c      	ldr	r3, [pc, #240]	; (8007274 <UART_SetConfig+0x634>)
 8007182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007188:	2b28      	cmp	r3, #40	; 0x28
 800718a:	d86d      	bhi.n	8007268 <UART_SetConfig+0x628>
 800718c:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <UART_SetConfig+0x554>)
 800718e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007192:	bf00      	nop
 8007194:	08007239 	.word	0x08007239
 8007198:	08007269 	.word	0x08007269
 800719c:	08007269 	.word	0x08007269
 80071a0:	08007269 	.word	0x08007269
 80071a4:	08007269 	.word	0x08007269
 80071a8:	08007269 	.word	0x08007269
 80071ac:	08007269 	.word	0x08007269
 80071b0:	08007269 	.word	0x08007269
 80071b4:	08007241 	.word	0x08007241
 80071b8:	08007269 	.word	0x08007269
 80071bc:	08007269 	.word	0x08007269
 80071c0:	08007269 	.word	0x08007269
 80071c4:	08007269 	.word	0x08007269
 80071c8:	08007269 	.word	0x08007269
 80071cc:	08007269 	.word	0x08007269
 80071d0:	08007269 	.word	0x08007269
 80071d4:	08007249 	.word	0x08007249
 80071d8:	08007269 	.word	0x08007269
 80071dc:	08007269 	.word	0x08007269
 80071e0:	08007269 	.word	0x08007269
 80071e4:	08007269 	.word	0x08007269
 80071e8:	08007269 	.word	0x08007269
 80071ec:	08007269 	.word	0x08007269
 80071f0:	08007269 	.word	0x08007269
 80071f4:	08007251 	.word	0x08007251
 80071f8:	08007269 	.word	0x08007269
 80071fc:	08007269 	.word	0x08007269
 8007200:	08007269 	.word	0x08007269
 8007204:	08007269 	.word	0x08007269
 8007208:	08007269 	.word	0x08007269
 800720c:	08007269 	.word	0x08007269
 8007210:	08007269 	.word	0x08007269
 8007214:	08007259 	.word	0x08007259
 8007218:	08007269 	.word	0x08007269
 800721c:	08007269 	.word	0x08007269
 8007220:	08007269 	.word	0x08007269
 8007224:	08007269 	.word	0x08007269
 8007228:	08007269 	.word	0x08007269
 800722c:	08007269 	.word	0x08007269
 8007230:	08007269 	.word	0x08007269
 8007234:	08007261 	.word	0x08007261
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723e:	e0d6      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007240:	2304      	movs	r3, #4
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e0d2      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007248:	2308      	movs	r3, #8
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e0ce      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007250:	2310      	movs	r3, #16
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e0ca      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007258:	2320      	movs	r3, #32
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725e:	e0c6      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007260:	2340      	movs	r3, #64	; 0x40
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007266:	e0c2      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007268:	2380      	movs	r3, #128	; 0x80
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726e:	e0be      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007270:	40011400 	.word	0x40011400
 8007274:	58024400 	.word	0x58024400
 8007278:	40007800 	.word	0x40007800
 800727c:	40007c00 	.word	0x40007c00
 8007280:	40011800 	.word	0x40011800
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4aad      	ldr	r2, [pc, #692]	; (8007540 <UART_SetConfig+0x900>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d176      	bne.n	800737c <UART_SetConfig+0x73c>
 800728e:	4bad      	ldr	r3, [pc, #692]	; (8007544 <UART_SetConfig+0x904>)
 8007290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007292:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007296:	2b28      	cmp	r3, #40	; 0x28
 8007298:	d86c      	bhi.n	8007374 <UART_SetConfig+0x734>
 800729a:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <UART_SetConfig+0x660>)
 800729c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a0:	08007345 	.word	0x08007345
 80072a4:	08007375 	.word	0x08007375
 80072a8:	08007375 	.word	0x08007375
 80072ac:	08007375 	.word	0x08007375
 80072b0:	08007375 	.word	0x08007375
 80072b4:	08007375 	.word	0x08007375
 80072b8:	08007375 	.word	0x08007375
 80072bc:	08007375 	.word	0x08007375
 80072c0:	0800734d 	.word	0x0800734d
 80072c4:	08007375 	.word	0x08007375
 80072c8:	08007375 	.word	0x08007375
 80072cc:	08007375 	.word	0x08007375
 80072d0:	08007375 	.word	0x08007375
 80072d4:	08007375 	.word	0x08007375
 80072d8:	08007375 	.word	0x08007375
 80072dc:	08007375 	.word	0x08007375
 80072e0:	08007355 	.word	0x08007355
 80072e4:	08007375 	.word	0x08007375
 80072e8:	08007375 	.word	0x08007375
 80072ec:	08007375 	.word	0x08007375
 80072f0:	08007375 	.word	0x08007375
 80072f4:	08007375 	.word	0x08007375
 80072f8:	08007375 	.word	0x08007375
 80072fc:	08007375 	.word	0x08007375
 8007300:	0800735d 	.word	0x0800735d
 8007304:	08007375 	.word	0x08007375
 8007308:	08007375 	.word	0x08007375
 800730c:	08007375 	.word	0x08007375
 8007310:	08007375 	.word	0x08007375
 8007314:	08007375 	.word	0x08007375
 8007318:	08007375 	.word	0x08007375
 800731c:	08007375 	.word	0x08007375
 8007320:	08007365 	.word	0x08007365
 8007324:	08007375 	.word	0x08007375
 8007328:	08007375 	.word	0x08007375
 800732c:	08007375 	.word	0x08007375
 8007330:	08007375 	.word	0x08007375
 8007334:	08007375 	.word	0x08007375
 8007338:	08007375 	.word	0x08007375
 800733c:	08007375 	.word	0x08007375
 8007340:	0800736d 	.word	0x0800736d
 8007344:	2301      	movs	r3, #1
 8007346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734a:	e050      	b.n	80073ee <UART_SetConfig+0x7ae>
 800734c:	2304      	movs	r3, #4
 800734e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007352:	e04c      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007354:	2308      	movs	r3, #8
 8007356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800735a:	e048      	b.n	80073ee <UART_SetConfig+0x7ae>
 800735c:	2310      	movs	r3, #16
 800735e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007362:	e044      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007364:	2320      	movs	r3, #32
 8007366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800736a:	e040      	b.n	80073ee <UART_SetConfig+0x7ae>
 800736c:	2340      	movs	r3, #64	; 0x40
 800736e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007372:	e03c      	b.n	80073ee <UART_SetConfig+0x7ae>
 8007374:	2380      	movs	r3, #128	; 0x80
 8007376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800737a:	e038      	b.n	80073ee <UART_SetConfig+0x7ae>
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a71      	ldr	r2, [pc, #452]	; (8007548 <UART_SetConfig+0x908>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d130      	bne.n	80073e8 <UART_SetConfig+0x7a8>
 8007386:	4b6f      	ldr	r3, [pc, #444]	; (8007544 <UART_SetConfig+0x904>)
 8007388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738a:	f003 0307 	and.w	r3, r3, #7
 800738e:	2b05      	cmp	r3, #5
 8007390:	d826      	bhi.n	80073e0 <UART_SetConfig+0x7a0>
 8007392:	a201      	add	r2, pc, #4	; (adr r2, 8007398 <UART_SetConfig+0x758>)
 8007394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007398:	080073b1 	.word	0x080073b1
 800739c:	080073b9 	.word	0x080073b9
 80073a0:	080073c1 	.word	0x080073c1
 80073a4:	080073c9 	.word	0x080073c9
 80073a8:	080073d1 	.word	0x080073d1
 80073ac:	080073d9 	.word	0x080073d9
 80073b0:	2302      	movs	r3, #2
 80073b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b6:	e01a      	b.n	80073ee <UART_SetConfig+0x7ae>
 80073b8:	2304      	movs	r3, #4
 80073ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073be:	e016      	b.n	80073ee <UART_SetConfig+0x7ae>
 80073c0:	2308      	movs	r3, #8
 80073c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073c6:	e012      	b.n	80073ee <UART_SetConfig+0x7ae>
 80073c8:	2310      	movs	r3, #16
 80073ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ce:	e00e      	b.n	80073ee <UART_SetConfig+0x7ae>
 80073d0:	2320      	movs	r3, #32
 80073d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073d6:	e00a      	b.n	80073ee <UART_SetConfig+0x7ae>
 80073d8:	2340      	movs	r3, #64	; 0x40
 80073da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073de:	e006      	b.n	80073ee <UART_SetConfig+0x7ae>
 80073e0:	2380      	movs	r3, #128	; 0x80
 80073e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073e6:	e002      	b.n	80073ee <UART_SetConfig+0x7ae>
 80073e8:	2380      	movs	r3, #128	; 0x80
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a55      	ldr	r2, [pc, #340]	; (8007548 <UART_SetConfig+0x908>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	f040 80f8 	bne.w	80075ea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80073fe:	2b20      	cmp	r3, #32
 8007400:	dc46      	bgt.n	8007490 <UART_SetConfig+0x850>
 8007402:	2b02      	cmp	r3, #2
 8007404:	db75      	blt.n	80074f2 <UART_SetConfig+0x8b2>
 8007406:	3b02      	subs	r3, #2
 8007408:	2b1e      	cmp	r3, #30
 800740a:	d872      	bhi.n	80074f2 <UART_SetConfig+0x8b2>
 800740c:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <UART_SetConfig+0x7d4>)
 800740e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007412:	bf00      	nop
 8007414:	08007497 	.word	0x08007497
 8007418:	080074f3 	.word	0x080074f3
 800741c:	0800749f 	.word	0x0800749f
 8007420:	080074f3 	.word	0x080074f3
 8007424:	080074f3 	.word	0x080074f3
 8007428:	080074f3 	.word	0x080074f3
 800742c:	080074af 	.word	0x080074af
 8007430:	080074f3 	.word	0x080074f3
 8007434:	080074f3 	.word	0x080074f3
 8007438:	080074f3 	.word	0x080074f3
 800743c:	080074f3 	.word	0x080074f3
 8007440:	080074f3 	.word	0x080074f3
 8007444:	080074f3 	.word	0x080074f3
 8007448:	080074f3 	.word	0x080074f3
 800744c:	080074bf 	.word	0x080074bf
 8007450:	080074f3 	.word	0x080074f3
 8007454:	080074f3 	.word	0x080074f3
 8007458:	080074f3 	.word	0x080074f3
 800745c:	080074f3 	.word	0x080074f3
 8007460:	080074f3 	.word	0x080074f3
 8007464:	080074f3 	.word	0x080074f3
 8007468:	080074f3 	.word	0x080074f3
 800746c:	080074f3 	.word	0x080074f3
 8007470:	080074f3 	.word	0x080074f3
 8007474:	080074f3 	.word	0x080074f3
 8007478:	080074f3 	.word	0x080074f3
 800747c:	080074f3 	.word	0x080074f3
 8007480:	080074f3 	.word	0x080074f3
 8007484:	080074f3 	.word	0x080074f3
 8007488:	080074f3 	.word	0x080074f3
 800748c:	080074e5 	.word	0x080074e5
 8007490:	2b40      	cmp	r3, #64	; 0x40
 8007492:	d02a      	beq.n	80074ea <UART_SetConfig+0x8aa>
 8007494:	e02d      	b.n	80074f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007496:	f7fe f937 	bl	8005708 <HAL_RCCEx_GetD3PCLK1Freq>
 800749a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800749c:	e02f      	b.n	80074fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800749e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fe f946 	bl	8005734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074ac:	e027      	b.n	80074fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ae:	f107 0318 	add.w	r3, r7, #24
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fa92 	bl	80059dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074bc:	e01f      	b.n	80074fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074be:	4b21      	ldr	r3, [pc, #132]	; (8007544 <UART_SetConfig+0x904>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d009      	beq.n	80074de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074ca:	4b1e      	ldr	r3, [pc, #120]	; (8007544 <UART_SetConfig+0x904>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	08db      	lsrs	r3, r3, #3
 80074d0:	f003 0303 	and.w	r3, r3, #3
 80074d4:	4a1d      	ldr	r2, [pc, #116]	; (800754c <UART_SetConfig+0x90c>)
 80074d6:	fa22 f303 	lsr.w	r3, r2, r3
 80074da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074dc:	e00f      	b.n	80074fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80074de:	4b1b      	ldr	r3, [pc, #108]	; (800754c <UART_SetConfig+0x90c>)
 80074e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074e2:	e00c      	b.n	80074fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074e4:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <UART_SetConfig+0x910>)
 80074e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074e8:	e009      	b.n	80074fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074f0:	e005      	b.n	80074fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80074fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 81ee 	beq.w	80078e2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	4a12      	ldr	r2, [pc, #72]	; (8007554 <UART_SetConfig+0x914>)
 800750c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007510:	461a      	mov	r2, r3
 8007512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007514:	fbb3 f3f2 	udiv	r3, r3, r2
 8007518:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	4413      	add	r3, r2
 8007524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007526:	429a      	cmp	r2, r3
 8007528:	d305      	bcc.n	8007536 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007532:	429a      	cmp	r2, r3
 8007534:	d910      	bls.n	8007558 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800753c:	e1d1      	b.n	80078e2 <UART_SetConfig+0xca2>
 800753e:	bf00      	nop
 8007540:	40011c00 	.word	0x40011c00
 8007544:	58024400 	.word	0x58024400
 8007548:	58000c00 	.word	0x58000c00
 800754c:	03d09000 	.word	0x03d09000
 8007550:	003d0900 	.word	0x003d0900
 8007554:	08008948 	.word	0x08008948
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755a:	2200      	movs	r2, #0
 800755c:	60bb      	str	r3, [r7, #8]
 800755e:	60fa      	str	r2, [r7, #12]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	4ac0      	ldr	r2, [pc, #768]	; (8007868 <UART_SetConfig+0xc28>)
 8007566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800756a:	b29b      	uxth	r3, r3
 800756c:	2200      	movs	r2, #0
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	607a      	str	r2, [r7, #4]
 8007572:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007576:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800757a:	f7f8 ff09 	bl	8000390 <__aeabi_uldivmod>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4610      	mov	r0, r2
 8007584:	4619      	mov	r1, r3
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	f04f 0300 	mov.w	r3, #0
 800758e:	020b      	lsls	r3, r1, #8
 8007590:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007594:	0202      	lsls	r2, r0, #8
 8007596:	6979      	ldr	r1, [r7, #20]
 8007598:	6849      	ldr	r1, [r1, #4]
 800759a:	0849      	lsrs	r1, r1, #1
 800759c:	2000      	movs	r0, #0
 800759e:	460c      	mov	r4, r1
 80075a0:	4605      	mov	r5, r0
 80075a2:	eb12 0804 	adds.w	r8, r2, r4
 80075a6:	eb43 0905 	adc.w	r9, r3, r5
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	469a      	mov	sl, r3
 80075b2:	4693      	mov	fp, r2
 80075b4:	4652      	mov	r2, sl
 80075b6:	465b      	mov	r3, fp
 80075b8:	4640      	mov	r0, r8
 80075ba:	4649      	mov	r1, r9
 80075bc:	f7f8 fee8 	bl	8000390 <__aeabi_uldivmod>
 80075c0:	4602      	mov	r2, r0
 80075c2:	460b      	mov	r3, r1
 80075c4:	4613      	mov	r3, r2
 80075c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ce:	d308      	bcc.n	80075e2 <UART_SetConfig+0x9a2>
 80075d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075d6:	d204      	bcs.n	80075e2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075de:	60da      	str	r2, [r3, #12]
 80075e0:	e17f      	b.n	80078e2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80075e8:	e17b      	b.n	80078e2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f2:	f040 80bd 	bne.w	8007770 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80075f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	dc48      	bgt.n	8007690 <UART_SetConfig+0xa50>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	db7b      	blt.n	80076fa <UART_SetConfig+0xaba>
 8007602:	2b20      	cmp	r3, #32
 8007604:	d879      	bhi.n	80076fa <UART_SetConfig+0xaba>
 8007606:	a201      	add	r2, pc, #4	; (adr r2, 800760c <UART_SetConfig+0x9cc>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	08007697 	.word	0x08007697
 8007610:	0800769f 	.word	0x0800769f
 8007614:	080076fb 	.word	0x080076fb
 8007618:	080076fb 	.word	0x080076fb
 800761c:	080076a7 	.word	0x080076a7
 8007620:	080076fb 	.word	0x080076fb
 8007624:	080076fb 	.word	0x080076fb
 8007628:	080076fb 	.word	0x080076fb
 800762c:	080076b7 	.word	0x080076b7
 8007630:	080076fb 	.word	0x080076fb
 8007634:	080076fb 	.word	0x080076fb
 8007638:	080076fb 	.word	0x080076fb
 800763c:	080076fb 	.word	0x080076fb
 8007640:	080076fb 	.word	0x080076fb
 8007644:	080076fb 	.word	0x080076fb
 8007648:	080076fb 	.word	0x080076fb
 800764c:	080076c7 	.word	0x080076c7
 8007650:	080076fb 	.word	0x080076fb
 8007654:	080076fb 	.word	0x080076fb
 8007658:	080076fb 	.word	0x080076fb
 800765c:	080076fb 	.word	0x080076fb
 8007660:	080076fb 	.word	0x080076fb
 8007664:	080076fb 	.word	0x080076fb
 8007668:	080076fb 	.word	0x080076fb
 800766c:	080076fb 	.word	0x080076fb
 8007670:	080076fb 	.word	0x080076fb
 8007674:	080076fb 	.word	0x080076fb
 8007678:	080076fb 	.word	0x080076fb
 800767c:	080076fb 	.word	0x080076fb
 8007680:	080076fb 	.word	0x080076fb
 8007684:	080076fb 	.word	0x080076fb
 8007688:	080076fb 	.word	0x080076fb
 800768c:	080076ed 	.word	0x080076ed
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	d02e      	beq.n	80076f2 <UART_SetConfig+0xab2>
 8007694:	e031      	b.n	80076fa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007696:	f7fc f975 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 800769a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800769c:	e033      	b.n	8007706 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800769e:	f7fc f987 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 80076a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076a4:	e02f      	b.n	8007706 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe f842 	bl	8005734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076b4:	e027      	b.n	8007706 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076b6:	f107 0318 	add.w	r3, r7, #24
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fe f98e 	bl	80059dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076c4:	e01f      	b.n	8007706 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076c6:	4b69      	ldr	r3, [pc, #420]	; (800786c <UART_SetConfig+0xc2c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d009      	beq.n	80076e6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076d2:	4b66      	ldr	r3, [pc, #408]	; (800786c <UART_SetConfig+0xc2c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	08db      	lsrs	r3, r3, #3
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	4a64      	ldr	r2, [pc, #400]	; (8007870 <UART_SetConfig+0xc30>)
 80076de:	fa22 f303 	lsr.w	r3, r2, r3
 80076e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076e4:	e00f      	b.n	8007706 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80076e6:	4b62      	ldr	r3, [pc, #392]	; (8007870 <UART_SetConfig+0xc30>)
 80076e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ea:	e00c      	b.n	8007706 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076ec:	4b61      	ldr	r3, [pc, #388]	; (8007874 <UART_SetConfig+0xc34>)
 80076ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076f0:	e009      	b.n	8007706 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076f8:	e005      	b.n	8007706 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007704:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 80ea 	beq.w	80078e2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	4a55      	ldr	r2, [pc, #340]	; (8007868 <UART_SetConfig+0xc28>)
 8007714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007718:	461a      	mov	r2, r3
 800771a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800771c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007720:	005a      	lsls	r2, r3, #1
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	085b      	lsrs	r3, r3, #1
 8007728:	441a      	add	r2, r3
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007732:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007736:	2b0f      	cmp	r3, #15
 8007738:	d916      	bls.n	8007768 <UART_SetConfig+0xb28>
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007740:	d212      	bcs.n	8007768 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	b29b      	uxth	r3, r3
 8007746:	f023 030f 	bic.w	r3, r3, #15
 800774a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	085b      	lsrs	r3, r3, #1
 8007750:	b29b      	uxth	r3, r3
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	b29a      	uxth	r2, r3
 8007758:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800775a:	4313      	orrs	r3, r2
 800775c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007764:	60da      	str	r2, [r3, #12]
 8007766:	e0bc      	b.n	80078e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800776e:	e0b8      	b.n	80078e2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007770:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007774:	2b20      	cmp	r3, #32
 8007776:	dc4b      	bgt.n	8007810 <UART_SetConfig+0xbd0>
 8007778:	2b00      	cmp	r3, #0
 800777a:	f2c0 8087 	blt.w	800788c <UART_SetConfig+0xc4c>
 800777e:	2b20      	cmp	r3, #32
 8007780:	f200 8084 	bhi.w	800788c <UART_SetConfig+0xc4c>
 8007784:	a201      	add	r2, pc, #4	; (adr r2, 800778c <UART_SetConfig+0xb4c>)
 8007786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778a:	bf00      	nop
 800778c:	08007817 	.word	0x08007817
 8007790:	0800781f 	.word	0x0800781f
 8007794:	0800788d 	.word	0x0800788d
 8007798:	0800788d 	.word	0x0800788d
 800779c:	08007827 	.word	0x08007827
 80077a0:	0800788d 	.word	0x0800788d
 80077a4:	0800788d 	.word	0x0800788d
 80077a8:	0800788d 	.word	0x0800788d
 80077ac:	08007837 	.word	0x08007837
 80077b0:	0800788d 	.word	0x0800788d
 80077b4:	0800788d 	.word	0x0800788d
 80077b8:	0800788d 	.word	0x0800788d
 80077bc:	0800788d 	.word	0x0800788d
 80077c0:	0800788d 	.word	0x0800788d
 80077c4:	0800788d 	.word	0x0800788d
 80077c8:	0800788d 	.word	0x0800788d
 80077cc:	08007847 	.word	0x08007847
 80077d0:	0800788d 	.word	0x0800788d
 80077d4:	0800788d 	.word	0x0800788d
 80077d8:	0800788d 	.word	0x0800788d
 80077dc:	0800788d 	.word	0x0800788d
 80077e0:	0800788d 	.word	0x0800788d
 80077e4:	0800788d 	.word	0x0800788d
 80077e8:	0800788d 	.word	0x0800788d
 80077ec:	0800788d 	.word	0x0800788d
 80077f0:	0800788d 	.word	0x0800788d
 80077f4:	0800788d 	.word	0x0800788d
 80077f8:	0800788d 	.word	0x0800788d
 80077fc:	0800788d 	.word	0x0800788d
 8007800:	0800788d 	.word	0x0800788d
 8007804:	0800788d 	.word	0x0800788d
 8007808:	0800788d 	.word	0x0800788d
 800780c:	0800787f 	.word	0x0800787f
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	d037      	beq.n	8007884 <UART_SetConfig+0xc44>
 8007814:	e03a      	b.n	800788c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007816:	f7fc f8b5 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 800781a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800781c:	e03c      	b.n	8007898 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800781e:	f7fc f8c7 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 8007822:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007824:	e038      	b.n	8007898 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800782a:	4618      	mov	r0, r3
 800782c:	f7fd ff82 	bl	8005734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007834:	e030      	b.n	8007898 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007836:	f107 0318 	add.w	r3, r7, #24
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe f8ce 	bl	80059dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007844:	e028      	b.n	8007898 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007846:	4b09      	ldr	r3, [pc, #36]	; (800786c <UART_SetConfig+0xc2c>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d012      	beq.n	8007878 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007852:	4b06      	ldr	r3, [pc, #24]	; (800786c <UART_SetConfig+0xc2c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	08db      	lsrs	r3, r3, #3
 8007858:	f003 0303 	and.w	r3, r3, #3
 800785c:	4a04      	ldr	r2, [pc, #16]	; (8007870 <UART_SetConfig+0xc30>)
 800785e:	fa22 f303 	lsr.w	r3, r2, r3
 8007862:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007864:	e018      	b.n	8007898 <UART_SetConfig+0xc58>
 8007866:	bf00      	nop
 8007868:	08008948 	.word	0x08008948
 800786c:	58024400 	.word	0x58024400
 8007870:	03d09000 	.word	0x03d09000
 8007874:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007878:	4b24      	ldr	r3, [pc, #144]	; (800790c <UART_SetConfig+0xccc>)
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800787c:	e00c      	b.n	8007898 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800787e:	4b24      	ldr	r3, [pc, #144]	; (8007910 <UART_SetConfig+0xcd0>)
 8007880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007882:	e009      	b.n	8007898 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007888:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800788a:	e005      	b.n	8007898 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007896:	bf00      	nop
    }

    if (pclk != 0U)
 8007898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d021      	beq.n	80078e2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	4a1c      	ldr	r2, [pc, #112]	; (8007914 <UART_SetConfig+0xcd4>)
 80078a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078a8:	461a      	mov	r2, r3
 80078aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	085b      	lsrs	r3, r3, #1
 80078b6:	441a      	add	r2, r3
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	2b0f      	cmp	r3, #15
 80078c6:	d909      	bls.n	80078dc <UART_SetConfig+0xc9c>
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ce:	d205      	bcs.n	80078dc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	60da      	str	r2, [r3, #12]
 80078da:	e002      	b.n	80078e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2200      	movs	r2, #0
 80078f6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2200      	movs	r2, #0
 80078fc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80078fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007902:	4618      	mov	r0, r3
 8007904:	3748      	adds	r7, #72	; 0x48
 8007906:	46bd      	mov	sp, r7
 8007908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800790c:	03d09000 	.word	0x03d09000
 8007910:	003d0900 	.word	0x003d0900
 8007914:	08008948 	.word	0x08008948

08007918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798a:	f003 0308 	and.w	r3, r3, #8
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ac:	f003 0310 	and.w	r3, r3, #16
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01a      	beq.n	8007a2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a16:	d10a      	bne.n	8007a2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	605a      	str	r2, [r3, #4]
  }
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b098      	sub	sp, #96	; 0x60
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a6c:	f7f9 fd5c 	bl	8001528 <HAL_GetTick>
 8007a70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0308 	and.w	r3, r3, #8
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d12f      	bne.n	8007ae0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f88e 	bl	8007bb0 <UART_WaitOnFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d022      	beq.n	8007ae0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aae:	653b      	str	r3, [r7, #80]	; 0x50
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8007aba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e6      	bne.n	8007a9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e063      	b.n	8007ba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d149      	bne.n	8007b82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007af6:	2200      	movs	r2, #0
 8007af8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f857 	bl	8007bb0 <UART_WaitOnFlagUntilTimeout>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d03c      	beq.n	8007b82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	623b      	str	r3, [r7, #32]
   return(result);
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b26:	633b      	str	r3, [r7, #48]	; 0x30
 8007b28:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e6      	bne.n	8007b08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f023 0301 	bic.w	r3, r3, #1
 8007b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b5a:	61fa      	str	r2, [r7, #28]
 8007b5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	69b9      	ldr	r1, [r7, #24]
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	617b      	str	r3, [r7, #20]
   return(result);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e5      	bne.n	8007b3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e012      	b.n	8007ba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3758      	adds	r7, #88	; 0x58
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bc0:	e049      	b.n	8007c56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bc8:	d045      	beq.n	8007c56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bca:	f7f9 fcad 	bl	8001528 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d302      	bcc.n	8007be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e048      	b.n	8007c76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0304 	and.w	r3, r3, #4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d031      	beq.n	8007c56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d110      	bne.n	8007c22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2208      	movs	r2, #8
 8007c06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 f839 	bl	8007c80 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2208      	movs	r2, #8
 8007c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e029      	b.n	8007c76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c30:	d111      	bne.n	8007c56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f81f 	bl	8007c80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e00f      	b.n	8007c76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69da      	ldr	r2, [r3, #28]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	bf0c      	ite	eq
 8007c66:	2301      	moveq	r3, #1
 8007c68:	2300      	movne	r3, #0
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d0a6      	beq.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b095      	sub	sp, #84	; 0x54
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ca8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e6      	bne.n	8007c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cca:	69fa      	ldr	r2, [r7, #28]
 8007ccc:	4b1e      	ldr	r3, [pc, #120]	; (8007d48 <UART_EndRxTransfer+0xc8>)
 8007cce:	4013      	ands	r3, r2
 8007cd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e5      	bne.n	8007cba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d118      	bne.n	8007d28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f023 0310 	bic.w	r3, r3, #16
 8007d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d14:	61bb      	str	r3, [r7, #24]
 8007d16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6979      	ldr	r1, [r7, #20]
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	613b      	str	r3, [r7, #16]
   return(result);
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e6      	bne.n	8007cf6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d3c:	bf00      	nop
 8007d3e:	3754      	adds	r7, #84	; 0x54
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	effffffe 	.word	0xeffffffe

08007d4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d101      	bne.n	8007d62 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d5e:	2302      	movs	r3, #2
 8007d60:	e027      	b.n	8007db2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2224      	movs	r2, #36	; 0x24
 8007d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0201 	bic.w	r2, r2, #1
 8007d88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2220      	movs	r2, #32
 8007da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d101      	bne.n	8007dd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e02d      	b.n	8007e32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2224      	movs	r2, #36	; 0x24
 8007de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0201 	bic.w	r2, r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f850 	bl	8007eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d101      	bne.n	8007e52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e02d      	b.n	8007eae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2224      	movs	r2, #36	; 0x24
 8007e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0201 	bic.w	r2, r2, #1
 8007e78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	683a      	ldr	r2, [r7, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f812 	bl	8007eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
	...

08007eb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d108      	bne.n	8007eda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ed8:	e031      	b.n	8007f3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007eda:	2310      	movs	r3, #16
 8007edc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ede:	2310      	movs	r3, #16
 8007ee0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	0e5b      	lsrs	r3, r3, #25
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	0f5b      	lsrs	r3, r3, #29
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	f003 0307 	and.w	r3, r3, #7
 8007f00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	7b3a      	ldrb	r2, [r7, #12]
 8007f06:	4911      	ldr	r1, [pc, #68]	; (8007f4c <UARTEx_SetNbDataToProcess+0x94>)
 8007f08:	5c8a      	ldrb	r2, [r1, r2]
 8007f0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f0e:	7b3a      	ldrb	r2, [r7, #12]
 8007f10:	490f      	ldr	r1, [pc, #60]	; (8007f50 <UARTEx_SetNbDataToProcess+0x98>)
 8007f12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f14:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	7b7a      	ldrb	r2, [r7, #13]
 8007f24:	4909      	ldr	r1, [pc, #36]	; (8007f4c <UARTEx_SetNbDataToProcess+0x94>)
 8007f26:	5c8a      	ldrb	r2, [r1, r2]
 8007f28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f2c:	7b7a      	ldrb	r2, [r7, #13]
 8007f2e:	4908      	ldr	r1, [pc, #32]	; (8007f50 <UARTEx_SetNbDataToProcess+0x98>)
 8007f30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f32:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f3e:	bf00      	nop
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	08008960 	.word	0x08008960
 8007f50:	08008968 	.word	0x08008968

08007f54 <siprintf>:
 8007f54:	b40e      	push	{r1, r2, r3}
 8007f56:	b500      	push	{lr}
 8007f58:	b09c      	sub	sp, #112	; 0x70
 8007f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8007f5c:	9002      	str	r0, [sp, #8]
 8007f5e:	9006      	str	r0, [sp, #24]
 8007f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f64:	4809      	ldr	r0, [pc, #36]	; (8007f8c <siprintf+0x38>)
 8007f66:	9107      	str	r1, [sp, #28]
 8007f68:	9104      	str	r1, [sp, #16]
 8007f6a:	4909      	ldr	r1, [pc, #36]	; (8007f90 <siprintf+0x3c>)
 8007f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f70:	9105      	str	r1, [sp, #20]
 8007f72:	6800      	ldr	r0, [r0, #0]
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	a902      	add	r1, sp, #8
 8007f78:	f000 f992 	bl	80082a0 <_svfiprintf_r>
 8007f7c:	9b02      	ldr	r3, [sp, #8]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	701a      	strb	r2, [r3, #0]
 8007f82:	b01c      	add	sp, #112	; 0x70
 8007f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f88:	b003      	add	sp, #12
 8007f8a:	4770      	bx	lr
 8007f8c:	2400005c 	.word	0x2400005c
 8007f90:	ffff0208 	.word	0xffff0208

08007f94 <memset>:
 8007f94:	4402      	add	r2, r0
 8007f96:	4603      	mov	r3, r0
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d100      	bne.n	8007f9e <memset+0xa>
 8007f9c:	4770      	bx	lr
 8007f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007fa2:	e7f9      	b.n	8007f98 <memset+0x4>

08007fa4 <__errno>:
 8007fa4:	4b01      	ldr	r3, [pc, #4]	; (8007fac <__errno+0x8>)
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	2400005c 	.word	0x2400005c

08007fb0 <__libc_init_array>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	4d0d      	ldr	r5, [pc, #52]	; (8007fe8 <__libc_init_array+0x38>)
 8007fb4:	4c0d      	ldr	r4, [pc, #52]	; (8007fec <__libc_init_array+0x3c>)
 8007fb6:	1b64      	subs	r4, r4, r5
 8007fb8:	10a4      	asrs	r4, r4, #2
 8007fba:	2600      	movs	r6, #0
 8007fbc:	42a6      	cmp	r6, r4
 8007fbe:	d109      	bne.n	8007fd4 <__libc_init_array+0x24>
 8007fc0:	4d0b      	ldr	r5, [pc, #44]	; (8007ff0 <__libc_init_array+0x40>)
 8007fc2:	4c0c      	ldr	r4, [pc, #48]	; (8007ff4 <__libc_init_array+0x44>)
 8007fc4:	f000 fc6a 	bl	800889c <_init>
 8007fc8:	1b64      	subs	r4, r4, r5
 8007fca:	10a4      	asrs	r4, r4, #2
 8007fcc:	2600      	movs	r6, #0
 8007fce:	42a6      	cmp	r6, r4
 8007fd0:	d105      	bne.n	8007fde <__libc_init_array+0x2e>
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd8:	4798      	blx	r3
 8007fda:	3601      	adds	r6, #1
 8007fdc:	e7ee      	b.n	8007fbc <__libc_init_array+0xc>
 8007fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe2:	4798      	blx	r3
 8007fe4:	3601      	adds	r6, #1
 8007fe6:	e7f2      	b.n	8007fce <__libc_init_array+0x1e>
 8007fe8:	080089ac 	.word	0x080089ac
 8007fec:	080089ac 	.word	0x080089ac
 8007ff0:	080089ac 	.word	0x080089ac
 8007ff4:	080089b0 	.word	0x080089b0

08007ff8 <__retarget_lock_acquire_recursive>:
 8007ff8:	4770      	bx	lr

08007ffa <__retarget_lock_release_recursive>:
 8007ffa:	4770      	bx	lr

08007ffc <_free_r>:
 8007ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ffe:	2900      	cmp	r1, #0
 8008000:	d044      	beq.n	800808c <_free_r+0x90>
 8008002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008006:	9001      	str	r0, [sp, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f1a1 0404 	sub.w	r4, r1, #4
 800800e:	bfb8      	it	lt
 8008010:	18e4      	addlt	r4, r4, r3
 8008012:	f000 f8df 	bl	80081d4 <__malloc_lock>
 8008016:	4a1e      	ldr	r2, [pc, #120]	; (8008090 <_free_r+0x94>)
 8008018:	9801      	ldr	r0, [sp, #4]
 800801a:	6813      	ldr	r3, [r2, #0]
 800801c:	b933      	cbnz	r3, 800802c <_free_r+0x30>
 800801e:	6063      	str	r3, [r4, #4]
 8008020:	6014      	str	r4, [r2, #0]
 8008022:	b003      	add	sp, #12
 8008024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008028:	f000 b8da 	b.w	80081e0 <__malloc_unlock>
 800802c:	42a3      	cmp	r3, r4
 800802e:	d908      	bls.n	8008042 <_free_r+0x46>
 8008030:	6825      	ldr	r5, [r4, #0]
 8008032:	1961      	adds	r1, r4, r5
 8008034:	428b      	cmp	r3, r1
 8008036:	bf01      	itttt	eq
 8008038:	6819      	ldreq	r1, [r3, #0]
 800803a:	685b      	ldreq	r3, [r3, #4]
 800803c:	1949      	addeq	r1, r1, r5
 800803e:	6021      	streq	r1, [r4, #0]
 8008040:	e7ed      	b.n	800801e <_free_r+0x22>
 8008042:	461a      	mov	r2, r3
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	b10b      	cbz	r3, 800804c <_free_r+0x50>
 8008048:	42a3      	cmp	r3, r4
 800804a:	d9fa      	bls.n	8008042 <_free_r+0x46>
 800804c:	6811      	ldr	r1, [r2, #0]
 800804e:	1855      	adds	r5, r2, r1
 8008050:	42a5      	cmp	r5, r4
 8008052:	d10b      	bne.n	800806c <_free_r+0x70>
 8008054:	6824      	ldr	r4, [r4, #0]
 8008056:	4421      	add	r1, r4
 8008058:	1854      	adds	r4, r2, r1
 800805a:	42a3      	cmp	r3, r4
 800805c:	6011      	str	r1, [r2, #0]
 800805e:	d1e0      	bne.n	8008022 <_free_r+0x26>
 8008060:	681c      	ldr	r4, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	6053      	str	r3, [r2, #4]
 8008066:	440c      	add	r4, r1
 8008068:	6014      	str	r4, [r2, #0]
 800806a:	e7da      	b.n	8008022 <_free_r+0x26>
 800806c:	d902      	bls.n	8008074 <_free_r+0x78>
 800806e:	230c      	movs	r3, #12
 8008070:	6003      	str	r3, [r0, #0]
 8008072:	e7d6      	b.n	8008022 <_free_r+0x26>
 8008074:	6825      	ldr	r5, [r4, #0]
 8008076:	1961      	adds	r1, r4, r5
 8008078:	428b      	cmp	r3, r1
 800807a:	bf04      	itt	eq
 800807c:	6819      	ldreq	r1, [r3, #0]
 800807e:	685b      	ldreq	r3, [r3, #4]
 8008080:	6063      	str	r3, [r4, #4]
 8008082:	bf04      	itt	eq
 8008084:	1949      	addeq	r1, r1, r5
 8008086:	6021      	streq	r1, [r4, #0]
 8008088:	6054      	str	r4, [r2, #4]
 800808a:	e7ca      	b.n	8008022 <_free_r+0x26>
 800808c:	b003      	add	sp, #12
 800808e:	bd30      	pop	{r4, r5, pc}
 8008090:	240003f8 	.word	0x240003f8

08008094 <sbrk_aligned>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	4e0e      	ldr	r6, [pc, #56]	; (80080d0 <sbrk_aligned+0x3c>)
 8008098:	460c      	mov	r4, r1
 800809a:	6831      	ldr	r1, [r6, #0]
 800809c:	4605      	mov	r5, r0
 800809e:	b911      	cbnz	r1, 80080a6 <sbrk_aligned+0x12>
 80080a0:	f000 fba6 	bl	80087f0 <_sbrk_r>
 80080a4:	6030      	str	r0, [r6, #0]
 80080a6:	4621      	mov	r1, r4
 80080a8:	4628      	mov	r0, r5
 80080aa:	f000 fba1 	bl	80087f0 <_sbrk_r>
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	d00a      	beq.n	80080c8 <sbrk_aligned+0x34>
 80080b2:	1cc4      	adds	r4, r0, #3
 80080b4:	f024 0403 	bic.w	r4, r4, #3
 80080b8:	42a0      	cmp	r0, r4
 80080ba:	d007      	beq.n	80080cc <sbrk_aligned+0x38>
 80080bc:	1a21      	subs	r1, r4, r0
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 fb96 	bl	80087f0 <_sbrk_r>
 80080c4:	3001      	adds	r0, #1
 80080c6:	d101      	bne.n	80080cc <sbrk_aligned+0x38>
 80080c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80080cc:	4620      	mov	r0, r4
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	240003fc 	.word	0x240003fc

080080d4 <_malloc_r>:
 80080d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d8:	1ccd      	adds	r5, r1, #3
 80080da:	f025 0503 	bic.w	r5, r5, #3
 80080de:	3508      	adds	r5, #8
 80080e0:	2d0c      	cmp	r5, #12
 80080e2:	bf38      	it	cc
 80080e4:	250c      	movcc	r5, #12
 80080e6:	2d00      	cmp	r5, #0
 80080e8:	4607      	mov	r7, r0
 80080ea:	db01      	blt.n	80080f0 <_malloc_r+0x1c>
 80080ec:	42a9      	cmp	r1, r5
 80080ee:	d905      	bls.n	80080fc <_malloc_r+0x28>
 80080f0:	230c      	movs	r3, #12
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	2600      	movs	r6, #0
 80080f6:	4630      	mov	r0, r6
 80080f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80081d0 <_malloc_r+0xfc>
 8008100:	f000 f868 	bl	80081d4 <__malloc_lock>
 8008104:	f8d8 3000 	ldr.w	r3, [r8]
 8008108:	461c      	mov	r4, r3
 800810a:	bb5c      	cbnz	r4, 8008164 <_malloc_r+0x90>
 800810c:	4629      	mov	r1, r5
 800810e:	4638      	mov	r0, r7
 8008110:	f7ff ffc0 	bl	8008094 <sbrk_aligned>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	4604      	mov	r4, r0
 8008118:	d155      	bne.n	80081c6 <_malloc_r+0xf2>
 800811a:	f8d8 4000 	ldr.w	r4, [r8]
 800811e:	4626      	mov	r6, r4
 8008120:	2e00      	cmp	r6, #0
 8008122:	d145      	bne.n	80081b0 <_malloc_r+0xdc>
 8008124:	2c00      	cmp	r4, #0
 8008126:	d048      	beq.n	80081ba <_malloc_r+0xe6>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	4631      	mov	r1, r6
 800812c:	4638      	mov	r0, r7
 800812e:	eb04 0903 	add.w	r9, r4, r3
 8008132:	f000 fb5d 	bl	80087f0 <_sbrk_r>
 8008136:	4581      	cmp	r9, r0
 8008138:	d13f      	bne.n	80081ba <_malloc_r+0xe6>
 800813a:	6821      	ldr	r1, [r4, #0]
 800813c:	1a6d      	subs	r5, r5, r1
 800813e:	4629      	mov	r1, r5
 8008140:	4638      	mov	r0, r7
 8008142:	f7ff ffa7 	bl	8008094 <sbrk_aligned>
 8008146:	3001      	adds	r0, #1
 8008148:	d037      	beq.n	80081ba <_malloc_r+0xe6>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	442b      	add	r3, r5
 800814e:	6023      	str	r3, [r4, #0]
 8008150:	f8d8 3000 	ldr.w	r3, [r8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d038      	beq.n	80081ca <_malloc_r+0xf6>
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	42a2      	cmp	r2, r4
 800815c:	d12b      	bne.n	80081b6 <_malloc_r+0xe2>
 800815e:	2200      	movs	r2, #0
 8008160:	605a      	str	r2, [r3, #4]
 8008162:	e00f      	b.n	8008184 <_malloc_r+0xb0>
 8008164:	6822      	ldr	r2, [r4, #0]
 8008166:	1b52      	subs	r2, r2, r5
 8008168:	d41f      	bmi.n	80081aa <_malloc_r+0xd6>
 800816a:	2a0b      	cmp	r2, #11
 800816c:	d917      	bls.n	800819e <_malloc_r+0xca>
 800816e:	1961      	adds	r1, r4, r5
 8008170:	42a3      	cmp	r3, r4
 8008172:	6025      	str	r5, [r4, #0]
 8008174:	bf18      	it	ne
 8008176:	6059      	strne	r1, [r3, #4]
 8008178:	6863      	ldr	r3, [r4, #4]
 800817a:	bf08      	it	eq
 800817c:	f8c8 1000 	streq.w	r1, [r8]
 8008180:	5162      	str	r2, [r4, r5]
 8008182:	604b      	str	r3, [r1, #4]
 8008184:	4638      	mov	r0, r7
 8008186:	f104 060b 	add.w	r6, r4, #11
 800818a:	f000 f829 	bl	80081e0 <__malloc_unlock>
 800818e:	f026 0607 	bic.w	r6, r6, #7
 8008192:	1d23      	adds	r3, r4, #4
 8008194:	1af2      	subs	r2, r6, r3
 8008196:	d0ae      	beq.n	80080f6 <_malloc_r+0x22>
 8008198:	1b9b      	subs	r3, r3, r6
 800819a:	50a3      	str	r3, [r4, r2]
 800819c:	e7ab      	b.n	80080f6 <_malloc_r+0x22>
 800819e:	42a3      	cmp	r3, r4
 80081a0:	6862      	ldr	r2, [r4, #4]
 80081a2:	d1dd      	bne.n	8008160 <_malloc_r+0x8c>
 80081a4:	f8c8 2000 	str.w	r2, [r8]
 80081a8:	e7ec      	b.n	8008184 <_malloc_r+0xb0>
 80081aa:	4623      	mov	r3, r4
 80081ac:	6864      	ldr	r4, [r4, #4]
 80081ae:	e7ac      	b.n	800810a <_malloc_r+0x36>
 80081b0:	4634      	mov	r4, r6
 80081b2:	6876      	ldr	r6, [r6, #4]
 80081b4:	e7b4      	b.n	8008120 <_malloc_r+0x4c>
 80081b6:	4613      	mov	r3, r2
 80081b8:	e7cc      	b.n	8008154 <_malloc_r+0x80>
 80081ba:	230c      	movs	r3, #12
 80081bc:	603b      	str	r3, [r7, #0]
 80081be:	4638      	mov	r0, r7
 80081c0:	f000 f80e 	bl	80081e0 <__malloc_unlock>
 80081c4:	e797      	b.n	80080f6 <_malloc_r+0x22>
 80081c6:	6025      	str	r5, [r4, #0]
 80081c8:	e7dc      	b.n	8008184 <_malloc_r+0xb0>
 80081ca:	605b      	str	r3, [r3, #4]
 80081cc:	deff      	udf	#255	; 0xff
 80081ce:	bf00      	nop
 80081d0:	240003f8 	.word	0x240003f8

080081d4 <__malloc_lock>:
 80081d4:	4801      	ldr	r0, [pc, #4]	; (80081dc <__malloc_lock+0x8>)
 80081d6:	f7ff bf0f 	b.w	8007ff8 <__retarget_lock_acquire_recursive>
 80081da:	bf00      	nop
 80081dc:	240003f4 	.word	0x240003f4

080081e0 <__malloc_unlock>:
 80081e0:	4801      	ldr	r0, [pc, #4]	; (80081e8 <__malloc_unlock+0x8>)
 80081e2:	f7ff bf0a 	b.w	8007ffa <__retarget_lock_release_recursive>
 80081e6:	bf00      	nop
 80081e8:	240003f4 	.word	0x240003f4

080081ec <__ssputs_r>:
 80081ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f0:	688e      	ldr	r6, [r1, #8]
 80081f2:	461f      	mov	r7, r3
 80081f4:	42be      	cmp	r6, r7
 80081f6:	680b      	ldr	r3, [r1, #0]
 80081f8:	4682      	mov	sl, r0
 80081fa:	460c      	mov	r4, r1
 80081fc:	4690      	mov	r8, r2
 80081fe:	d82c      	bhi.n	800825a <__ssputs_r+0x6e>
 8008200:	898a      	ldrh	r2, [r1, #12]
 8008202:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008206:	d026      	beq.n	8008256 <__ssputs_r+0x6a>
 8008208:	6965      	ldr	r5, [r4, #20]
 800820a:	6909      	ldr	r1, [r1, #16]
 800820c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008210:	eba3 0901 	sub.w	r9, r3, r1
 8008214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008218:	1c7b      	adds	r3, r7, #1
 800821a:	444b      	add	r3, r9
 800821c:	106d      	asrs	r5, r5, #1
 800821e:	429d      	cmp	r5, r3
 8008220:	bf38      	it	cc
 8008222:	461d      	movcc	r5, r3
 8008224:	0553      	lsls	r3, r2, #21
 8008226:	d527      	bpl.n	8008278 <__ssputs_r+0x8c>
 8008228:	4629      	mov	r1, r5
 800822a:	f7ff ff53 	bl	80080d4 <_malloc_r>
 800822e:	4606      	mov	r6, r0
 8008230:	b360      	cbz	r0, 800828c <__ssputs_r+0xa0>
 8008232:	6921      	ldr	r1, [r4, #16]
 8008234:	464a      	mov	r2, r9
 8008236:	f000 faeb 	bl	8008810 <memcpy>
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	6126      	str	r6, [r4, #16]
 8008248:	6165      	str	r5, [r4, #20]
 800824a:	444e      	add	r6, r9
 800824c:	eba5 0509 	sub.w	r5, r5, r9
 8008250:	6026      	str	r6, [r4, #0]
 8008252:	60a5      	str	r5, [r4, #8]
 8008254:	463e      	mov	r6, r7
 8008256:	42be      	cmp	r6, r7
 8008258:	d900      	bls.n	800825c <__ssputs_r+0x70>
 800825a:	463e      	mov	r6, r7
 800825c:	6820      	ldr	r0, [r4, #0]
 800825e:	4632      	mov	r2, r6
 8008260:	4641      	mov	r1, r8
 8008262:	f000 faab 	bl	80087bc <memmove>
 8008266:	68a3      	ldr	r3, [r4, #8]
 8008268:	1b9b      	subs	r3, r3, r6
 800826a:	60a3      	str	r3, [r4, #8]
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	4433      	add	r3, r6
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	2000      	movs	r0, #0
 8008274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008278:	462a      	mov	r2, r5
 800827a:	f000 fad7 	bl	800882c <_realloc_r>
 800827e:	4606      	mov	r6, r0
 8008280:	2800      	cmp	r0, #0
 8008282:	d1e0      	bne.n	8008246 <__ssputs_r+0x5a>
 8008284:	6921      	ldr	r1, [r4, #16]
 8008286:	4650      	mov	r0, sl
 8008288:	f7ff feb8 	bl	8007ffc <_free_r>
 800828c:	230c      	movs	r3, #12
 800828e:	f8ca 3000 	str.w	r3, [sl]
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008298:	81a3      	strh	r3, [r4, #12]
 800829a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800829e:	e7e9      	b.n	8008274 <__ssputs_r+0x88>

080082a0 <_svfiprintf_r>:
 80082a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a4:	4698      	mov	r8, r3
 80082a6:	898b      	ldrh	r3, [r1, #12]
 80082a8:	061b      	lsls	r3, r3, #24
 80082aa:	b09d      	sub	sp, #116	; 0x74
 80082ac:	4607      	mov	r7, r0
 80082ae:	460d      	mov	r5, r1
 80082b0:	4614      	mov	r4, r2
 80082b2:	d50e      	bpl.n	80082d2 <_svfiprintf_r+0x32>
 80082b4:	690b      	ldr	r3, [r1, #16]
 80082b6:	b963      	cbnz	r3, 80082d2 <_svfiprintf_r+0x32>
 80082b8:	2140      	movs	r1, #64	; 0x40
 80082ba:	f7ff ff0b 	bl	80080d4 <_malloc_r>
 80082be:	6028      	str	r0, [r5, #0]
 80082c0:	6128      	str	r0, [r5, #16]
 80082c2:	b920      	cbnz	r0, 80082ce <_svfiprintf_r+0x2e>
 80082c4:	230c      	movs	r3, #12
 80082c6:	603b      	str	r3, [r7, #0]
 80082c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082cc:	e0d0      	b.n	8008470 <_svfiprintf_r+0x1d0>
 80082ce:	2340      	movs	r3, #64	; 0x40
 80082d0:	616b      	str	r3, [r5, #20]
 80082d2:	2300      	movs	r3, #0
 80082d4:	9309      	str	r3, [sp, #36]	; 0x24
 80082d6:	2320      	movs	r3, #32
 80082d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80082e0:	2330      	movs	r3, #48	; 0x30
 80082e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008488 <_svfiprintf_r+0x1e8>
 80082e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082ea:	f04f 0901 	mov.w	r9, #1
 80082ee:	4623      	mov	r3, r4
 80082f0:	469a      	mov	sl, r3
 80082f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082f6:	b10a      	cbz	r2, 80082fc <_svfiprintf_r+0x5c>
 80082f8:	2a25      	cmp	r2, #37	; 0x25
 80082fa:	d1f9      	bne.n	80082f0 <_svfiprintf_r+0x50>
 80082fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008300:	d00b      	beq.n	800831a <_svfiprintf_r+0x7a>
 8008302:	465b      	mov	r3, fp
 8008304:	4622      	mov	r2, r4
 8008306:	4629      	mov	r1, r5
 8008308:	4638      	mov	r0, r7
 800830a:	f7ff ff6f 	bl	80081ec <__ssputs_r>
 800830e:	3001      	adds	r0, #1
 8008310:	f000 80a9 	beq.w	8008466 <_svfiprintf_r+0x1c6>
 8008314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008316:	445a      	add	r2, fp
 8008318:	9209      	str	r2, [sp, #36]	; 0x24
 800831a:	f89a 3000 	ldrb.w	r3, [sl]
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 80a1 	beq.w	8008466 <_svfiprintf_r+0x1c6>
 8008324:	2300      	movs	r3, #0
 8008326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800832a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800832e:	f10a 0a01 	add.w	sl, sl, #1
 8008332:	9304      	str	r3, [sp, #16]
 8008334:	9307      	str	r3, [sp, #28]
 8008336:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800833a:	931a      	str	r3, [sp, #104]	; 0x68
 800833c:	4654      	mov	r4, sl
 800833e:	2205      	movs	r2, #5
 8008340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008344:	4850      	ldr	r0, [pc, #320]	; (8008488 <_svfiprintf_r+0x1e8>)
 8008346:	f7f7 ffd3 	bl	80002f0 <memchr>
 800834a:	9a04      	ldr	r2, [sp, #16]
 800834c:	b9d8      	cbnz	r0, 8008386 <_svfiprintf_r+0xe6>
 800834e:	06d0      	lsls	r0, r2, #27
 8008350:	bf44      	itt	mi
 8008352:	2320      	movmi	r3, #32
 8008354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008358:	0711      	lsls	r1, r2, #28
 800835a:	bf44      	itt	mi
 800835c:	232b      	movmi	r3, #43	; 0x2b
 800835e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008362:	f89a 3000 	ldrb.w	r3, [sl]
 8008366:	2b2a      	cmp	r3, #42	; 0x2a
 8008368:	d015      	beq.n	8008396 <_svfiprintf_r+0xf6>
 800836a:	9a07      	ldr	r2, [sp, #28]
 800836c:	4654      	mov	r4, sl
 800836e:	2000      	movs	r0, #0
 8008370:	f04f 0c0a 	mov.w	ip, #10
 8008374:	4621      	mov	r1, r4
 8008376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800837a:	3b30      	subs	r3, #48	; 0x30
 800837c:	2b09      	cmp	r3, #9
 800837e:	d94d      	bls.n	800841c <_svfiprintf_r+0x17c>
 8008380:	b1b0      	cbz	r0, 80083b0 <_svfiprintf_r+0x110>
 8008382:	9207      	str	r2, [sp, #28]
 8008384:	e014      	b.n	80083b0 <_svfiprintf_r+0x110>
 8008386:	eba0 0308 	sub.w	r3, r0, r8
 800838a:	fa09 f303 	lsl.w	r3, r9, r3
 800838e:	4313      	orrs	r3, r2
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	46a2      	mov	sl, r4
 8008394:	e7d2      	b.n	800833c <_svfiprintf_r+0x9c>
 8008396:	9b03      	ldr	r3, [sp, #12]
 8008398:	1d19      	adds	r1, r3, #4
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	9103      	str	r1, [sp, #12]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	bfbb      	ittet	lt
 80083a2:	425b      	neglt	r3, r3
 80083a4:	f042 0202 	orrlt.w	r2, r2, #2
 80083a8:	9307      	strge	r3, [sp, #28]
 80083aa:	9307      	strlt	r3, [sp, #28]
 80083ac:	bfb8      	it	lt
 80083ae:	9204      	strlt	r2, [sp, #16]
 80083b0:	7823      	ldrb	r3, [r4, #0]
 80083b2:	2b2e      	cmp	r3, #46	; 0x2e
 80083b4:	d10c      	bne.n	80083d0 <_svfiprintf_r+0x130>
 80083b6:	7863      	ldrb	r3, [r4, #1]
 80083b8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ba:	d134      	bne.n	8008426 <_svfiprintf_r+0x186>
 80083bc:	9b03      	ldr	r3, [sp, #12]
 80083be:	1d1a      	adds	r2, r3, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	9203      	str	r2, [sp, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	bfb8      	it	lt
 80083c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80083cc:	3402      	adds	r4, #2
 80083ce:	9305      	str	r3, [sp, #20]
 80083d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008498 <_svfiprintf_r+0x1f8>
 80083d4:	7821      	ldrb	r1, [r4, #0]
 80083d6:	2203      	movs	r2, #3
 80083d8:	4650      	mov	r0, sl
 80083da:	f7f7 ff89 	bl	80002f0 <memchr>
 80083de:	b138      	cbz	r0, 80083f0 <_svfiprintf_r+0x150>
 80083e0:	9b04      	ldr	r3, [sp, #16]
 80083e2:	eba0 000a 	sub.w	r0, r0, sl
 80083e6:	2240      	movs	r2, #64	; 0x40
 80083e8:	4082      	lsls	r2, r0
 80083ea:	4313      	orrs	r3, r2
 80083ec:	3401      	adds	r4, #1
 80083ee:	9304      	str	r3, [sp, #16]
 80083f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f4:	4825      	ldr	r0, [pc, #148]	; (800848c <_svfiprintf_r+0x1ec>)
 80083f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083fa:	2206      	movs	r2, #6
 80083fc:	f7f7 ff78 	bl	80002f0 <memchr>
 8008400:	2800      	cmp	r0, #0
 8008402:	d038      	beq.n	8008476 <_svfiprintf_r+0x1d6>
 8008404:	4b22      	ldr	r3, [pc, #136]	; (8008490 <_svfiprintf_r+0x1f0>)
 8008406:	bb1b      	cbnz	r3, 8008450 <_svfiprintf_r+0x1b0>
 8008408:	9b03      	ldr	r3, [sp, #12]
 800840a:	3307      	adds	r3, #7
 800840c:	f023 0307 	bic.w	r3, r3, #7
 8008410:	3308      	adds	r3, #8
 8008412:	9303      	str	r3, [sp, #12]
 8008414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008416:	4433      	add	r3, r6
 8008418:	9309      	str	r3, [sp, #36]	; 0x24
 800841a:	e768      	b.n	80082ee <_svfiprintf_r+0x4e>
 800841c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008420:	460c      	mov	r4, r1
 8008422:	2001      	movs	r0, #1
 8008424:	e7a6      	b.n	8008374 <_svfiprintf_r+0xd4>
 8008426:	2300      	movs	r3, #0
 8008428:	3401      	adds	r4, #1
 800842a:	9305      	str	r3, [sp, #20]
 800842c:	4619      	mov	r1, r3
 800842e:	f04f 0c0a 	mov.w	ip, #10
 8008432:	4620      	mov	r0, r4
 8008434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008438:	3a30      	subs	r2, #48	; 0x30
 800843a:	2a09      	cmp	r2, #9
 800843c:	d903      	bls.n	8008446 <_svfiprintf_r+0x1a6>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0c6      	beq.n	80083d0 <_svfiprintf_r+0x130>
 8008442:	9105      	str	r1, [sp, #20]
 8008444:	e7c4      	b.n	80083d0 <_svfiprintf_r+0x130>
 8008446:	fb0c 2101 	mla	r1, ip, r1, r2
 800844a:	4604      	mov	r4, r0
 800844c:	2301      	movs	r3, #1
 800844e:	e7f0      	b.n	8008432 <_svfiprintf_r+0x192>
 8008450:	ab03      	add	r3, sp, #12
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	462a      	mov	r2, r5
 8008456:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <_svfiprintf_r+0x1f4>)
 8008458:	a904      	add	r1, sp, #16
 800845a:	4638      	mov	r0, r7
 800845c:	f3af 8000 	nop.w
 8008460:	1c42      	adds	r2, r0, #1
 8008462:	4606      	mov	r6, r0
 8008464:	d1d6      	bne.n	8008414 <_svfiprintf_r+0x174>
 8008466:	89ab      	ldrh	r3, [r5, #12]
 8008468:	065b      	lsls	r3, r3, #25
 800846a:	f53f af2d 	bmi.w	80082c8 <_svfiprintf_r+0x28>
 800846e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008470:	b01d      	add	sp, #116	; 0x74
 8008472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008476:	ab03      	add	r3, sp, #12
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	462a      	mov	r2, r5
 800847c:	4b05      	ldr	r3, [pc, #20]	; (8008494 <_svfiprintf_r+0x1f4>)
 800847e:	a904      	add	r1, sp, #16
 8008480:	4638      	mov	r0, r7
 8008482:	f000 f879 	bl	8008578 <_printf_i>
 8008486:	e7eb      	b.n	8008460 <_svfiprintf_r+0x1c0>
 8008488:	08008970 	.word	0x08008970
 800848c:	0800897a 	.word	0x0800897a
 8008490:	00000000 	.word	0x00000000
 8008494:	080081ed 	.word	0x080081ed
 8008498:	08008976 	.word	0x08008976

0800849c <_printf_common>:
 800849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a0:	4616      	mov	r6, r2
 80084a2:	4699      	mov	r9, r3
 80084a4:	688a      	ldr	r2, [r1, #8]
 80084a6:	690b      	ldr	r3, [r1, #16]
 80084a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084ac:	4293      	cmp	r3, r2
 80084ae:	bfb8      	it	lt
 80084b0:	4613      	movlt	r3, r2
 80084b2:	6033      	str	r3, [r6, #0]
 80084b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084b8:	4607      	mov	r7, r0
 80084ba:	460c      	mov	r4, r1
 80084bc:	b10a      	cbz	r2, 80084c2 <_printf_common+0x26>
 80084be:	3301      	adds	r3, #1
 80084c0:	6033      	str	r3, [r6, #0]
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	0699      	lsls	r1, r3, #26
 80084c6:	bf42      	ittt	mi
 80084c8:	6833      	ldrmi	r3, [r6, #0]
 80084ca:	3302      	addmi	r3, #2
 80084cc:	6033      	strmi	r3, [r6, #0]
 80084ce:	6825      	ldr	r5, [r4, #0]
 80084d0:	f015 0506 	ands.w	r5, r5, #6
 80084d4:	d106      	bne.n	80084e4 <_printf_common+0x48>
 80084d6:	f104 0a19 	add.w	sl, r4, #25
 80084da:	68e3      	ldr	r3, [r4, #12]
 80084dc:	6832      	ldr	r2, [r6, #0]
 80084de:	1a9b      	subs	r3, r3, r2
 80084e0:	42ab      	cmp	r3, r5
 80084e2:	dc26      	bgt.n	8008532 <_printf_common+0x96>
 80084e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084e8:	1e13      	subs	r3, r2, #0
 80084ea:	6822      	ldr	r2, [r4, #0]
 80084ec:	bf18      	it	ne
 80084ee:	2301      	movne	r3, #1
 80084f0:	0692      	lsls	r2, r2, #26
 80084f2:	d42b      	bmi.n	800854c <_printf_common+0xb0>
 80084f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084f8:	4649      	mov	r1, r9
 80084fa:	4638      	mov	r0, r7
 80084fc:	47c0      	blx	r8
 80084fe:	3001      	adds	r0, #1
 8008500:	d01e      	beq.n	8008540 <_printf_common+0xa4>
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	6922      	ldr	r2, [r4, #16]
 8008506:	f003 0306 	and.w	r3, r3, #6
 800850a:	2b04      	cmp	r3, #4
 800850c:	bf02      	ittt	eq
 800850e:	68e5      	ldreq	r5, [r4, #12]
 8008510:	6833      	ldreq	r3, [r6, #0]
 8008512:	1aed      	subeq	r5, r5, r3
 8008514:	68a3      	ldr	r3, [r4, #8]
 8008516:	bf0c      	ite	eq
 8008518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800851c:	2500      	movne	r5, #0
 800851e:	4293      	cmp	r3, r2
 8008520:	bfc4      	itt	gt
 8008522:	1a9b      	subgt	r3, r3, r2
 8008524:	18ed      	addgt	r5, r5, r3
 8008526:	2600      	movs	r6, #0
 8008528:	341a      	adds	r4, #26
 800852a:	42b5      	cmp	r5, r6
 800852c:	d11a      	bne.n	8008564 <_printf_common+0xc8>
 800852e:	2000      	movs	r0, #0
 8008530:	e008      	b.n	8008544 <_printf_common+0xa8>
 8008532:	2301      	movs	r3, #1
 8008534:	4652      	mov	r2, sl
 8008536:	4649      	mov	r1, r9
 8008538:	4638      	mov	r0, r7
 800853a:	47c0      	blx	r8
 800853c:	3001      	adds	r0, #1
 800853e:	d103      	bne.n	8008548 <_printf_common+0xac>
 8008540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008548:	3501      	adds	r5, #1
 800854a:	e7c6      	b.n	80084da <_printf_common+0x3e>
 800854c:	18e1      	adds	r1, r4, r3
 800854e:	1c5a      	adds	r2, r3, #1
 8008550:	2030      	movs	r0, #48	; 0x30
 8008552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008556:	4422      	add	r2, r4
 8008558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800855c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008560:	3302      	adds	r3, #2
 8008562:	e7c7      	b.n	80084f4 <_printf_common+0x58>
 8008564:	2301      	movs	r3, #1
 8008566:	4622      	mov	r2, r4
 8008568:	4649      	mov	r1, r9
 800856a:	4638      	mov	r0, r7
 800856c:	47c0      	blx	r8
 800856e:	3001      	adds	r0, #1
 8008570:	d0e6      	beq.n	8008540 <_printf_common+0xa4>
 8008572:	3601      	adds	r6, #1
 8008574:	e7d9      	b.n	800852a <_printf_common+0x8e>
	...

08008578 <_printf_i>:
 8008578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800857c:	7e0f      	ldrb	r7, [r1, #24]
 800857e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008580:	2f78      	cmp	r7, #120	; 0x78
 8008582:	4691      	mov	r9, r2
 8008584:	4680      	mov	r8, r0
 8008586:	460c      	mov	r4, r1
 8008588:	469a      	mov	sl, r3
 800858a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800858e:	d807      	bhi.n	80085a0 <_printf_i+0x28>
 8008590:	2f62      	cmp	r7, #98	; 0x62
 8008592:	d80a      	bhi.n	80085aa <_printf_i+0x32>
 8008594:	2f00      	cmp	r7, #0
 8008596:	f000 80d4 	beq.w	8008742 <_printf_i+0x1ca>
 800859a:	2f58      	cmp	r7, #88	; 0x58
 800859c:	f000 80c0 	beq.w	8008720 <_printf_i+0x1a8>
 80085a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085a8:	e03a      	b.n	8008620 <_printf_i+0xa8>
 80085aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085ae:	2b15      	cmp	r3, #21
 80085b0:	d8f6      	bhi.n	80085a0 <_printf_i+0x28>
 80085b2:	a101      	add	r1, pc, #4	; (adr r1, 80085b8 <_printf_i+0x40>)
 80085b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085b8:	08008611 	.word	0x08008611
 80085bc:	08008625 	.word	0x08008625
 80085c0:	080085a1 	.word	0x080085a1
 80085c4:	080085a1 	.word	0x080085a1
 80085c8:	080085a1 	.word	0x080085a1
 80085cc:	080085a1 	.word	0x080085a1
 80085d0:	08008625 	.word	0x08008625
 80085d4:	080085a1 	.word	0x080085a1
 80085d8:	080085a1 	.word	0x080085a1
 80085dc:	080085a1 	.word	0x080085a1
 80085e0:	080085a1 	.word	0x080085a1
 80085e4:	08008729 	.word	0x08008729
 80085e8:	08008651 	.word	0x08008651
 80085ec:	080086e3 	.word	0x080086e3
 80085f0:	080085a1 	.word	0x080085a1
 80085f4:	080085a1 	.word	0x080085a1
 80085f8:	0800874b 	.word	0x0800874b
 80085fc:	080085a1 	.word	0x080085a1
 8008600:	08008651 	.word	0x08008651
 8008604:	080085a1 	.word	0x080085a1
 8008608:	080085a1 	.word	0x080085a1
 800860c:	080086eb 	.word	0x080086eb
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	1d1a      	adds	r2, r3, #4
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	602a      	str	r2, [r5, #0]
 8008618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800861c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008620:	2301      	movs	r3, #1
 8008622:	e09f      	b.n	8008764 <_printf_i+0x1ec>
 8008624:	6820      	ldr	r0, [r4, #0]
 8008626:	682b      	ldr	r3, [r5, #0]
 8008628:	0607      	lsls	r7, r0, #24
 800862a:	f103 0104 	add.w	r1, r3, #4
 800862e:	6029      	str	r1, [r5, #0]
 8008630:	d501      	bpl.n	8008636 <_printf_i+0xbe>
 8008632:	681e      	ldr	r6, [r3, #0]
 8008634:	e003      	b.n	800863e <_printf_i+0xc6>
 8008636:	0646      	lsls	r6, r0, #25
 8008638:	d5fb      	bpl.n	8008632 <_printf_i+0xba>
 800863a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800863e:	2e00      	cmp	r6, #0
 8008640:	da03      	bge.n	800864a <_printf_i+0xd2>
 8008642:	232d      	movs	r3, #45	; 0x2d
 8008644:	4276      	negs	r6, r6
 8008646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800864a:	485a      	ldr	r0, [pc, #360]	; (80087b4 <_printf_i+0x23c>)
 800864c:	230a      	movs	r3, #10
 800864e:	e012      	b.n	8008676 <_printf_i+0xfe>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	6820      	ldr	r0, [r4, #0]
 8008654:	1d19      	adds	r1, r3, #4
 8008656:	6029      	str	r1, [r5, #0]
 8008658:	0605      	lsls	r5, r0, #24
 800865a:	d501      	bpl.n	8008660 <_printf_i+0xe8>
 800865c:	681e      	ldr	r6, [r3, #0]
 800865e:	e002      	b.n	8008666 <_printf_i+0xee>
 8008660:	0641      	lsls	r1, r0, #25
 8008662:	d5fb      	bpl.n	800865c <_printf_i+0xe4>
 8008664:	881e      	ldrh	r6, [r3, #0]
 8008666:	4853      	ldr	r0, [pc, #332]	; (80087b4 <_printf_i+0x23c>)
 8008668:	2f6f      	cmp	r7, #111	; 0x6f
 800866a:	bf0c      	ite	eq
 800866c:	2308      	moveq	r3, #8
 800866e:	230a      	movne	r3, #10
 8008670:	2100      	movs	r1, #0
 8008672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008676:	6865      	ldr	r5, [r4, #4]
 8008678:	60a5      	str	r5, [r4, #8]
 800867a:	2d00      	cmp	r5, #0
 800867c:	bfa2      	ittt	ge
 800867e:	6821      	ldrge	r1, [r4, #0]
 8008680:	f021 0104 	bicge.w	r1, r1, #4
 8008684:	6021      	strge	r1, [r4, #0]
 8008686:	b90e      	cbnz	r6, 800868c <_printf_i+0x114>
 8008688:	2d00      	cmp	r5, #0
 800868a:	d04b      	beq.n	8008724 <_printf_i+0x1ac>
 800868c:	4615      	mov	r5, r2
 800868e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008692:	fb03 6711 	mls	r7, r3, r1, r6
 8008696:	5dc7      	ldrb	r7, [r0, r7]
 8008698:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800869c:	4637      	mov	r7, r6
 800869e:	42bb      	cmp	r3, r7
 80086a0:	460e      	mov	r6, r1
 80086a2:	d9f4      	bls.n	800868e <_printf_i+0x116>
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d10b      	bne.n	80086c0 <_printf_i+0x148>
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	07de      	lsls	r6, r3, #31
 80086ac:	d508      	bpl.n	80086c0 <_printf_i+0x148>
 80086ae:	6923      	ldr	r3, [r4, #16]
 80086b0:	6861      	ldr	r1, [r4, #4]
 80086b2:	4299      	cmp	r1, r3
 80086b4:	bfde      	ittt	le
 80086b6:	2330      	movle	r3, #48	; 0x30
 80086b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80086c0:	1b52      	subs	r2, r2, r5
 80086c2:	6122      	str	r2, [r4, #16]
 80086c4:	f8cd a000 	str.w	sl, [sp]
 80086c8:	464b      	mov	r3, r9
 80086ca:	aa03      	add	r2, sp, #12
 80086cc:	4621      	mov	r1, r4
 80086ce:	4640      	mov	r0, r8
 80086d0:	f7ff fee4 	bl	800849c <_printf_common>
 80086d4:	3001      	adds	r0, #1
 80086d6:	d14a      	bne.n	800876e <_printf_i+0x1f6>
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086dc:	b004      	add	sp, #16
 80086de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	f043 0320 	orr.w	r3, r3, #32
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	4833      	ldr	r0, [pc, #204]	; (80087b8 <_printf_i+0x240>)
 80086ec:	2778      	movs	r7, #120	; 0x78
 80086ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	6829      	ldr	r1, [r5, #0]
 80086f6:	061f      	lsls	r7, r3, #24
 80086f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80086fc:	d402      	bmi.n	8008704 <_printf_i+0x18c>
 80086fe:	065f      	lsls	r7, r3, #25
 8008700:	bf48      	it	mi
 8008702:	b2b6      	uxthmi	r6, r6
 8008704:	07df      	lsls	r7, r3, #31
 8008706:	bf48      	it	mi
 8008708:	f043 0320 	orrmi.w	r3, r3, #32
 800870c:	6029      	str	r1, [r5, #0]
 800870e:	bf48      	it	mi
 8008710:	6023      	strmi	r3, [r4, #0]
 8008712:	b91e      	cbnz	r6, 800871c <_printf_i+0x1a4>
 8008714:	6823      	ldr	r3, [r4, #0]
 8008716:	f023 0320 	bic.w	r3, r3, #32
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	2310      	movs	r3, #16
 800871e:	e7a7      	b.n	8008670 <_printf_i+0xf8>
 8008720:	4824      	ldr	r0, [pc, #144]	; (80087b4 <_printf_i+0x23c>)
 8008722:	e7e4      	b.n	80086ee <_printf_i+0x176>
 8008724:	4615      	mov	r5, r2
 8008726:	e7bd      	b.n	80086a4 <_printf_i+0x12c>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	6826      	ldr	r6, [r4, #0]
 800872c:	6961      	ldr	r1, [r4, #20]
 800872e:	1d18      	adds	r0, r3, #4
 8008730:	6028      	str	r0, [r5, #0]
 8008732:	0635      	lsls	r5, r6, #24
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	d501      	bpl.n	800873c <_printf_i+0x1c4>
 8008738:	6019      	str	r1, [r3, #0]
 800873a:	e002      	b.n	8008742 <_printf_i+0x1ca>
 800873c:	0670      	lsls	r0, r6, #25
 800873e:	d5fb      	bpl.n	8008738 <_printf_i+0x1c0>
 8008740:	8019      	strh	r1, [r3, #0]
 8008742:	2300      	movs	r3, #0
 8008744:	6123      	str	r3, [r4, #16]
 8008746:	4615      	mov	r5, r2
 8008748:	e7bc      	b.n	80086c4 <_printf_i+0x14c>
 800874a:	682b      	ldr	r3, [r5, #0]
 800874c:	1d1a      	adds	r2, r3, #4
 800874e:	602a      	str	r2, [r5, #0]
 8008750:	681d      	ldr	r5, [r3, #0]
 8008752:	6862      	ldr	r2, [r4, #4]
 8008754:	2100      	movs	r1, #0
 8008756:	4628      	mov	r0, r5
 8008758:	f7f7 fdca 	bl	80002f0 <memchr>
 800875c:	b108      	cbz	r0, 8008762 <_printf_i+0x1ea>
 800875e:	1b40      	subs	r0, r0, r5
 8008760:	6060      	str	r0, [r4, #4]
 8008762:	6863      	ldr	r3, [r4, #4]
 8008764:	6123      	str	r3, [r4, #16]
 8008766:	2300      	movs	r3, #0
 8008768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800876c:	e7aa      	b.n	80086c4 <_printf_i+0x14c>
 800876e:	6923      	ldr	r3, [r4, #16]
 8008770:	462a      	mov	r2, r5
 8008772:	4649      	mov	r1, r9
 8008774:	4640      	mov	r0, r8
 8008776:	47d0      	blx	sl
 8008778:	3001      	adds	r0, #1
 800877a:	d0ad      	beq.n	80086d8 <_printf_i+0x160>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	079b      	lsls	r3, r3, #30
 8008780:	d413      	bmi.n	80087aa <_printf_i+0x232>
 8008782:	68e0      	ldr	r0, [r4, #12]
 8008784:	9b03      	ldr	r3, [sp, #12]
 8008786:	4298      	cmp	r0, r3
 8008788:	bfb8      	it	lt
 800878a:	4618      	movlt	r0, r3
 800878c:	e7a6      	b.n	80086dc <_printf_i+0x164>
 800878e:	2301      	movs	r3, #1
 8008790:	4632      	mov	r2, r6
 8008792:	4649      	mov	r1, r9
 8008794:	4640      	mov	r0, r8
 8008796:	47d0      	blx	sl
 8008798:	3001      	adds	r0, #1
 800879a:	d09d      	beq.n	80086d8 <_printf_i+0x160>
 800879c:	3501      	adds	r5, #1
 800879e:	68e3      	ldr	r3, [r4, #12]
 80087a0:	9903      	ldr	r1, [sp, #12]
 80087a2:	1a5b      	subs	r3, r3, r1
 80087a4:	42ab      	cmp	r3, r5
 80087a6:	dcf2      	bgt.n	800878e <_printf_i+0x216>
 80087a8:	e7eb      	b.n	8008782 <_printf_i+0x20a>
 80087aa:	2500      	movs	r5, #0
 80087ac:	f104 0619 	add.w	r6, r4, #25
 80087b0:	e7f5      	b.n	800879e <_printf_i+0x226>
 80087b2:	bf00      	nop
 80087b4:	08008981 	.word	0x08008981
 80087b8:	08008992 	.word	0x08008992

080087bc <memmove>:
 80087bc:	4288      	cmp	r0, r1
 80087be:	b510      	push	{r4, lr}
 80087c0:	eb01 0402 	add.w	r4, r1, r2
 80087c4:	d902      	bls.n	80087cc <memmove+0x10>
 80087c6:	4284      	cmp	r4, r0
 80087c8:	4623      	mov	r3, r4
 80087ca:	d807      	bhi.n	80087dc <memmove+0x20>
 80087cc:	1e43      	subs	r3, r0, #1
 80087ce:	42a1      	cmp	r1, r4
 80087d0:	d008      	beq.n	80087e4 <memmove+0x28>
 80087d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087da:	e7f8      	b.n	80087ce <memmove+0x12>
 80087dc:	4402      	add	r2, r0
 80087de:	4601      	mov	r1, r0
 80087e0:	428a      	cmp	r2, r1
 80087e2:	d100      	bne.n	80087e6 <memmove+0x2a>
 80087e4:	bd10      	pop	{r4, pc}
 80087e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087ee:	e7f7      	b.n	80087e0 <memmove+0x24>

080087f0 <_sbrk_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4d06      	ldr	r5, [pc, #24]	; (800880c <_sbrk_r+0x1c>)
 80087f4:	2300      	movs	r3, #0
 80087f6:	4604      	mov	r4, r0
 80087f8:	4608      	mov	r0, r1
 80087fa:	602b      	str	r3, [r5, #0]
 80087fc:	f7f8 fd36 	bl	800126c <_sbrk>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d102      	bne.n	800880a <_sbrk_r+0x1a>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	b103      	cbz	r3, 800880a <_sbrk_r+0x1a>
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	240003f0 	.word	0x240003f0

08008810 <memcpy>:
 8008810:	440a      	add	r2, r1
 8008812:	4291      	cmp	r1, r2
 8008814:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008818:	d100      	bne.n	800881c <memcpy+0xc>
 800881a:	4770      	bx	lr
 800881c:	b510      	push	{r4, lr}
 800881e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008826:	4291      	cmp	r1, r2
 8008828:	d1f9      	bne.n	800881e <memcpy+0xe>
 800882a:	bd10      	pop	{r4, pc}

0800882c <_realloc_r>:
 800882c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008830:	4680      	mov	r8, r0
 8008832:	4614      	mov	r4, r2
 8008834:	460e      	mov	r6, r1
 8008836:	b921      	cbnz	r1, 8008842 <_realloc_r+0x16>
 8008838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800883c:	4611      	mov	r1, r2
 800883e:	f7ff bc49 	b.w	80080d4 <_malloc_r>
 8008842:	b92a      	cbnz	r2, 8008850 <_realloc_r+0x24>
 8008844:	f7ff fbda 	bl	8007ffc <_free_r>
 8008848:	4625      	mov	r5, r4
 800884a:	4628      	mov	r0, r5
 800884c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008850:	f000 f81b 	bl	800888a <_malloc_usable_size_r>
 8008854:	4284      	cmp	r4, r0
 8008856:	4607      	mov	r7, r0
 8008858:	d802      	bhi.n	8008860 <_realloc_r+0x34>
 800885a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800885e:	d812      	bhi.n	8008886 <_realloc_r+0x5a>
 8008860:	4621      	mov	r1, r4
 8008862:	4640      	mov	r0, r8
 8008864:	f7ff fc36 	bl	80080d4 <_malloc_r>
 8008868:	4605      	mov	r5, r0
 800886a:	2800      	cmp	r0, #0
 800886c:	d0ed      	beq.n	800884a <_realloc_r+0x1e>
 800886e:	42bc      	cmp	r4, r7
 8008870:	4622      	mov	r2, r4
 8008872:	4631      	mov	r1, r6
 8008874:	bf28      	it	cs
 8008876:	463a      	movcs	r2, r7
 8008878:	f7ff ffca 	bl	8008810 <memcpy>
 800887c:	4631      	mov	r1, r6
 800887e:	4640      	mov	r0, r8
 8008880:	f7ff fbbc 	bl	8007ffc <_free_r>
 8008884:	e7e1      	b.n	800884a <_realloc_r+0x1e>
 8008886:	4635      	mov	r5, r6
 8008888:	e7df      	b.n	800884a <_realloc_r+0x1e>

0800888a <_malloc_usable_size_r>:
 800888a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800888e:	1f18      	subs	r0, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	bfbc      	itt	lt
 8008894:	580b      	ldrlt	r3, [r1, r0]
 8008896:	18c0      	addlt	r0, r0, r3
 8008898:	4770      	bx	lr
	...

0800889c <_init>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	bf00      	nop
 80088a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a2:	bc08      	pop	{r3}
 80088a4:	469e      	mov	lr, r3
 80088a6:	4770      	bx	lr

080088a8 <_fini>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	bf00      	nop
 80088ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ae:	bc08      	pop	{r3}
 80088b0:	469e      	mov	lr, r3
 80088b2:	4770      	bx	lr
