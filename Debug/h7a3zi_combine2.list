
h7a3zi_combine2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b18  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08008dc8  08008dc8  00018dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f1c  08008f1c  00018f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f24  08008f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f28  08008f28  00018f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08008f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00031120  24000060  08008f8c  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24031180  08008f8c  00021180  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001857f  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000298b  00000000  00000000  00038650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001438  00000000  00000000  0003afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000fd3  00000000  00000000  0003c418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003272a  00000000  00000000  0003d3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017e9a  00000000  00000000  0006fb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00153867  00000000  00000000  000879af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005d00  00000000  00000000  001db218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  001e0f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008db0 	.word	0x08008db0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	08008db0 	.word	0x08008db0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 ffb3 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f86b 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 fa2d 	bl	8000af8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800069e:	f000 f9d7 	bl	8000a50 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006a2:	f000 fa21 	bl	8000ae8 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006a6:	f000 f8d9 	bl	800085c <MX_ADC1_Init>
  MX_TIM16_Init();
 80006aa:	f000 f9a9 	bl	8000a00 <MX_TIM16_Init>
  MX_TIM3_Init();
 80006ae:	f000 f94d 	bl	800094c <MX_TIM3_Init>

  /////////////////START/////////////////////////

  // pump on
  // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
  HAL_Delay(1000);
 80006b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b6:	f001 f833 	bl	8001720 <HAL_Delay>

  uart_buf_len = sprintf(uart_buf, "MeasurementNr.,Pulses,Hightime[ms],t_vibration[ms],t_responce[ms],bad[bool]\r\n");
 80006ba:	4927      	ldr	r1, [pc, #156]	; (8000758 <main+0xcc>)
 80006bc:	4827      	ldr	r0, [pc, #156]	; (800075c <main+0xd0>)
 80006be:	f007 fed3 	bl	8008468 <siprintf>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a26      	ldr	r2, [pc, #152]	; (8000760 <main+0xd4>)
 80006c6:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <main+0xd4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	2364      	movs	r3, #100	; 0x64
 80006d0:	4922      	ldr	r1, [pc, #136]	; (800075c <main+0xd0>)
 80006d2:	4824      	ldr	r0, [pc, #144]	; (8000764 <main+0xd8>)
 80006d4:	f006 fcb0 	bl	8007038 <HAL_UART_Transmit>

  for (int i = 0; i < 10; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	e038      	b.n	8000750 <main+0xc4>
    measure(&Meas);
 80006de:	4822      	ldr	r0, [pc, #136]	; (8000768 <main+0xdc>)
 80006e0:	f000 fb4e 	bl	8000d80 <measure>
    analyse(&Meas);
 80006e4:	4820      	ldr	r0, [pc, #128]	; (8000768 <main+0xdc>)
 80006e6:	f000 fc01 	bl	8000eec <analyse>
    
    uart_buf_len = sprintf(uart_buf, "%d, %d, %d, %d, %d, %d\r\n",
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	1c58      	adds	r0, r3, #1
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <main+0xdc>)
 80006f0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80006f4:	f8d3 4d50 	ldr.w	r4, [r3, #3408]	; 0xd50
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <main+0xdc>)
 80006fa:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80006fe:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000702:	4a19      	ldr	r2, [pc, #100]	; (8000768 <main+0xdc>)
 8000704:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000708:	f8d2 2d40 	ldr.w	r2, [r2, #3392]	; 0xd40
 800070c:	4916      	ldr	r1, [pc, #88]	; (8000768 <main+0xdc>)
 800070e:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
 8000712:	f8d1 1d44 	ldr.w	r1, [r1, #3396]	; 0xd44
                           i+1, Meas.htime, Meas.pulses, Meas.t_vibr_start, Meas.t_first_pulse, Meas.bad);
 8000716:	4d14      	ldr	r5, [pc, #80]	; (8000768 <main+0xdc>)
 8000718:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
 800071c:	f895 5d54 	ldrb.w	r5, [r5, #3412]	; 0xd54
    uart_buf_len = sprintf(uart_buf, "%d, %d, %d, %d, %d, %d\r\n",
 8000720:	9503      	str	r5, [sp, #12]
 8000722:	9102      	str	r1, [sp, #8]
 8000724:	9201      	str	r2, [sp, #4]
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	4623      	mov	r3, r4
 800072a:	4602      	mov	r2, r0
 800072c:	490f      	ldr	r1, [pc, #60]	; (800076c <main+0xe0>)
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <main+0xd0>)
 8000730:	f007 fe9a 	bl	8008468 <siprintf>
 8000734:	4603      	mov	r3, r0
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <main+0xd4>)
 8000738:	6013      	str	r3, [r2, #0]

    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <main+0xd4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	b29a      	uxth	r2, r3
 8000740:	2364      	movs	r3, #100	; 0x64
 8000742:	4906      	ldr	r1, [pc, #24]	; (800075c <main+0xd0>)
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <main+0xd8>)
 8000746:	f006 fc77 	bl	8007038 <HAL_UART_Transmit>
  for (int i = 0; i < 10; i++) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3301      	adds	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b09      	cmp	r3, #9
 8000754:	ddc3      	ble.n	80006de <main+0x52>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000756:	e7fe      	b.n	8000756 <main+0xca>
 8000758:	08008dc8 	.word	0x08008dc8
 800075c:	24030f64 	.word	0x24030f64
 8000760:	2403102c 	.word	0x2403102c
 8000764:	24030ed0 	.word	0x24030ed0
 8000768:	2400007c 	.word	0x2400007c
 800076c:	08008e18 	.word	0x08008e18

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b09c      	sub	sp, #112	; 0x70
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077a:	224c      	movs	r2, #76	; 0x4c
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f007 fe92 	bl	80084a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2220      	movs	r2, #32
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f007 fe8c 	bl	80084a8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000790:	4b30      	ldr	r3, [pc, #192]	; (8000854 <SystemClock_Config+0xe4>)
 8000792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000796:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800079a:	2004      	movs	r0, #4
 800079c:	f002 fc60 	bl	8003060 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <SystemClock_Config+0xe8>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a2b      	ldr	r2, [pc, #172]	; (8000858 <SystemClock_Config+0xe8>)
 80007aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b29      	ldr	r3, [pc, #164]	; (8000858 <SystemClock_Config+0xe8>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007bc:	bf00      	nop
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <SystemClock_Config+0xe8>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ca:	d1f8      	bne.n	80007be <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007cc:	2321      	movs	r3, #33	; 0x21
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007d6:	2301      	movs	r3, #1
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007de:	2302      	movs	r3, #2
 80007e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007e6:	2318      	movs	r3, #24
 80007e8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007f6:	230c      	movs	r3, #12
 80007f8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	4618      	mov	r0, r3
 8000808:	f002 fc84 	bl	8003114 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000812:	f000 fc8a 	bl	800112a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	233f      	movs	r3, #63	; 0x3f
 8000818:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2303      	movs	r3, #3
 800081c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2102      	movs	r1, #2
 800083a:	4618      	mov	r0, r3
 800083c:	f003 f89c 	bl	8003978 <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000846:	f000 fc70 	bl	800112a <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3770      	adds	r7, #112	; 0x70
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	58024400 	.word	0x58024400
 8000858:	58024800 	.word	0x58024800

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
 800087c:	615a      	str	r2, [r3, #20]
 800087e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000880:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <MX_ADC1_Init+0xe4>)
 8000882:	4a30      	ldr	r2, [pc, #192]	; (8000944 <MX_ADC1_Init+0xe8>)
 8000884:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <MX_ADC1_Init+0xe4>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_ADC1_Init+0xe4>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_ADC1_Init+0xe4>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_ADC1_Init+0xe4>)
 800089a:	2204      	movs	r2, #4
 800089c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800089e:	4b28      	ldr	r3, [pc, #160]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b6:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008bc:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008dc:	4818      	ldr	r0, [pc, #96]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008de:	f001 f925 	bl	8001b2c <HAL_ADC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e8:	f000 fc1f 	bl	800112a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4812      	ldr	r0, [pc, #72]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008f8:	f002 f868 	bl	80029cc <HAL_ADCEx_MultiModeConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000902:	f000 fc12 	bl	800112a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_ADC1_Init+0xec>)
 8000908:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090a:	2306      	movs	r3, #6
 800090c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000912:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000916:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000918:	2304      	movs	r3, #4
 800091a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_ADC1_Init+0xe4>)
 800092a:	f001 fbf9 	bl	8002120 <HAL_ADC_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000934:	f000 fbf9 	bl	800112a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	24030dd4 	.word	0x24030dd4
 8000944:	40022000 	.word	0x40022000
 8000948:	3ef08000 	.word	0x3ef08000

0800094c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	; 0x30
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	2224      	movs	r2, #36	; 0x24
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 fda4 	bl	80084a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <MX_TIM3_Init+0xac>)
 800096c:	4a23      	ldr	r2, [pc, #140]	; (80009fc <MX_TIM3_Init+0xb0>)
 800096e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_TIM3_Init+0xac>)
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <MX_TIM3_Init+0xac>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_TIM3_Init+0xac>)
 800097e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000982:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_TIM3_Init+0xac>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_TIM3_Init+0xac>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000990:	2303      	movs	r3, #3
 8000992:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000998:	2301      	movs	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009a8:	2301      	movs	r3, #1
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4619      	mov	r1, r3
 80009ba:	480f      	ldr	r0, [pc, #60]	; (80009f8 <MX_TIM3_Init+0xac>)
 80009bc:	f006 f86a 	bl	8006a94 <HAL_TIM_Encoder_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80009c6:	f000 fbb0 	bl	800112a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	4808      	ldr	r0, [pc, #32]	; (80009f8 <MX_TIM3_Init+0xac>)
 80009d8:	f006 fa50 	bl	8006e7c <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80009e2:	f000 fba2 	bl	800112a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80009e6:	213c      	movs	r1, #60	; 0x3c
 80009e8:	4803      	ldr	r0, [pc, #12]	; (80009f8 <MX_TIM3_Init+0xac>)
 80009ea:	f006 f8f9 	bl	8006be0 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	; 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	24030e38 	.word	0x24030e38
 80009fc:	40000400 	.word	0x40000400

08000a00 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_TIM16_Init+0x48>)
 8000a06:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <MX_TIM16_Init+0x4c>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600-1;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_TIM16_Init+0x48>)
 8000a0c:	f242 527f 	movw	r2, #9599	; 0x257f
 8000a10:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <MX_TIM16_Init+0x48>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000-1;
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_TIM16_Init+0x48>)
 8000a1a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a1e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_TIM16_Init+0x48>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_TIM16_Init+0x48>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_TIM16_Init+0x48>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_TIM16_Init+0x48>)
 8000a34:	f005 ff36 	bl	80068a4 <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000a3e:	f000 fb74 	bl	800112a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	24030e84 	.word	0x24030e84
 8000a4c:	40014400 	.word	0x40014400

08000a50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a56:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <MX_USART3_UART_Init+0x94>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a76:	2208      	movs	r2, #8
 8000a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a98:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a9a:	f006 fa7d 	bl	8006f98 <HAL_UART_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa4:	f000 fb41 	bl	800112a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000aac:	f007 fc11 	bl	80082d2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ab6:	f000 fb38 	bl	800112a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000abe:	f007 fc46 	bl	800834e <HAL_UARTEx_SetRxFifoThreshold>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac8:	f000 fb2f 	bl	800112a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000ace:	f007 fbc7 	bl	8008260 <HAL_UARTEx_DisableFifoMode>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad8:	f000 fb27 	bl	800112a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	24030ed0 	.word	0x24030ed0
 8000ae4:	40004800 	.word	0x40004800

08000ae8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	; 0x38
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	4b95      	ldr	r3, [pc, #596]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b14:	4a93      	ldr	r2, [pc, #588]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b1e:	4b91      	ldr	r3, [pc, #580]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	623b      	str	r3, [r7, #32]
 8000b2a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b2c:	4b8d      	ldr	r3, [pc, #564]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b32:	4a8c      	ldr	r2, [pc, #560]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b34:	f043 0320 	orr.w	r3, r3, #32
 8000b38:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b3c:	4b89      	ldr	r3, [pc, #548]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b42:	f003 0320 	and.w	r3, r3, #32
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	4b86      	ldr	r3, [pc, #536]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b50:	4a84      	ldr	r2, [pc, #528]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b56:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b5a:	4b82      	ldr	r3, [pc, #520]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b7e      	ldr	r3, [pc, #504]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b6e:	4a7d      	ldr	r2, [pc, #500]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b78:	4b7a      	ldr	r3, [pc, #488]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b77      	ldr	r3, [pc, #476]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b8c:	4a75      	ldr	r2, [pc, #468]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b96:	4b73      	ldr	r3, [pc, #460]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000b98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba4:	4b6f      	ldr	r3, [pc, #444]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000ba6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000baa:	4a6e      	ldr	r2, [pc, #440]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bb4:	4b6b      	ldr	r3, [pc, #428]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000bb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	4b68      	ldr	r3, [pc, #416]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000bc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc8:	4a66      	ldr	r2, [pc, #408]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000bca:	f043 0308 	orr.w	r3, r3, #8
 8000bce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bd2:	4b64      	ldr	r3, [pc, #400]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000bd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be0:	4b60      	ldr	r3, [pc, #384]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000be2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be6:	4a5f      	ldr	r2, [pc, #380]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bf0:	4b5c      	ldr	r3, [pc, #368]	; (8000d64 <MX_GPIO_Init+0x26c>)
 8000bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c04:	4858      	ldr	r0, [pc, #352]	; (8000d68 <MX_GPIO_Init+0x270>)
 8000c06:	f002 fa11 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUMP_PA5_Pin_GPIO_Port, PUMP_PA5_Pin_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4857      	ldr	r0, [pc, #348]	; (8000d6c <MX_GPIO_Init+0x274>)
 8000c10:	f002 fa0c 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|ENCMOTOR_PB6_Pin|ENCMOTOR_PB7_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000c1a:	4855      	ldr	r0, [pc, #340]	; (8000d70 <MX_GPIO_Init+0x278>)
 8000c1c:	f002 fa06 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f246 0102 	movw	r1, #24578	; 0x6002
 8000c26:	4853      	ldr	r0, [pc, #332]	; (8000d74 <MX_GPIO_Init+0x27c>)
 8000c28:	f002 fa00 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 8000c32:	4851      	ldr	r0, [pc, #324]	; (8000d78 <MX_GPIO_Init+0x280>)
 8000c34:	f002 f9fa 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	484b      	ldr	r0, [pc, #300]	; (8000d7c <MX_GPIO_Init+0x284>)
 8000c4e:	f002 f83d 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	483f      	ldr	r0, [pc, #252]	; (8000d68 <MX_GPIO_Init+0x270>)
 8000c6c:	f002 f82e 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PUMP_PA5_Pin_Pin */
  GPIO_InitStruct.Pin = PUMP_PA5_Pin_Pin;
 8000c70:	2320      	movs	r3, #32
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PUMP_PA5_Pin_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4839      	ldr	r0, [pc, #228]	; (8000d6c <MX_GPIO_Init+0x274>)
 8000c88:	f002 f820 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin ENCMOTOR_PB6_Pin ENCMOTOR_PB7_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|ENCMOTOR_PB6_Pin|ENCMOTOR_PB7_Pin;
 8000c8c:	f244 03c1 	movw	r3, #16577	; 0x40c1
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4832      	ldr	r0, [pc, #200]	; (8000d70 <MX_GPIO_Init+0x278>)
 8000ca6:	f002 f811 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER3_PE13_Pin_Pin STEPPER4_PE14_Pin_Pin LD2_Pin */
  GPIO_InitStruct.Pin = STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin;
 8000caa:	f246 0302 	movw	r3, #24578	; 0x6002
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	482c      	ldr	r0, [pc, #176]	; (8000d74 <MX_GPIO_Init+0x27c>)
 8000cc4:	f002 f802 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ccc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4826      	ldr	r0, [pc, #152]	; (8000d78 <MX_GPIO_Init+0x280>)
 8000cde:	f001 fff5 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481d      	ldr	r0, [pc, #116]	; (8000d6c <MX_GPIO_Init+0x274>)
 8000cf8:	f001 ffe8 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d0e:	230a      	movs	r3, #10
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	4814      	ldr	r0, [pc, #80]	; (8000d6c <MX_GPIO_Init+0x274>)
 8000d1a:	f001 ffd7 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <MX_GPIO_Init+0x274>)
 8000d38:	f001 ffc8 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : HELP_SIGNAL_PG9_Pin_Pin VIBROMOTOR_PG12_Pin_Pin STEPPER2_PG14_Pin_Pin */
  GPIO_InitStruct.Pin = HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin;
 8000d3c:	f44f 43a4 	mov.w	r3, #20992	; 0x5200
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <MX_GPIO_Init+0x280>)
 8000d56:	f001 ffb9 	bl	8002ccc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5a:	bf00      	nop
 8000d5c:	3738      	adds	r7, #56	; 0x38
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	58024400 	.word	0x58024400
 8000d68:	58021400 	.word	0x58021400
 8000d6c:	58020000 	.word	0x58020000
 8000d70:	58020400 	.word	0x58020400
 8000d74:	58021000 	.word	0x58021000
 8000d78:	58021800 	.word	0x58021800
 8000d7c:	58020800 	.word	0x58020800

08000d80 <measure>:
// calling an ISR for STEPPER
// void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
//   STEPPER_TMR_OVF_ISR(htim);
// }

void measure(struct MeasureData *s) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  const int ONESEC = 10000 - 1;
 8000d88:	f242 730f 	movw	r3, #9999	; 0x270f
 8000d8c:	613b      	str	r3, [r7, #16]
  // store our counter value
  int tim_val_ms = 0; // tick is 0.1 ms
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]

  bool is_vibrating = false;
 8000d92:	2300      	movs	r3, #0
 8000d94:	76fb      	strb	r3, [r7, #27]
  // store our 16bit ADC reading
  uint16_t raw;
  // starting timer 16
  HAL_TIM_Base_Start(&htim16);
 8000d96:	4852      	ldr	r0, [pc, #328]	; (8000ee0 <measure+0x160>)
 8000d98:	f005 fddc 	bl	8006954 <HAL_TIM_Base_Start>
  // set help signal (yellow led)
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);

  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	e079      	b.n	8000e96 <measure+0x116>

    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000da2:	7efb      	ldrb	r3, [r7, #27]
 8000da4:	f083 0301 	eor.w	r3, r3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d035      	beq.n	8000e1a <measure+0x9a>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	ee07 3a90 	vmov	s15, r3
 8000dbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000dc2:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8000ed0 <measure+0x150>
 8000dc6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000dca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd2:	db22      	blt.n	8000e1a <measure+0x9a>
        tim_val_ms < ONESEC * 0.3) {
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000de8:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8000ed8 <measure+0x158>
 8000dec:	ee27 7b05 	vmul.f64	d7, d7, d5
    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000df0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df8:	d50f      	bpl.n	8000e1a <measure+0x9a>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); // vibrator ON
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e00:	4838      	ldr	r0, [pc, #224]	; (8000ee4 <measure+0x164>)
 8000e02:	f002 f913 	bl	800302c <HAL_GPIO_WritePin>
      // saving time of begin vibration
      s->t_vibr_start = i;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
      is_vibrating = true;
 8000e14:	2301      	movs	r3, #1
 8000e16:	76fb      	strb	r3, [r7, #27]
 8000e18:	e01d      	b.n	8000e56 <measure+0xd6>
    } else if (is_vibrating && tim_val_ms >= ONESEC * 0.3) {
 8000e1a:	7efb      	ldrb	r3, [r7, #27]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d01a      	beq.n	8000e56 <measure+0xd6>
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	ee07 3a90 	vmov	s15, r3
 8000e26:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	ee07 3a90 	vmov	s15, r3
 8000e30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e34:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8000ed8 <measure+0x158>
 8000e38:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e44:	db07      	blt.n	8000e56 <measure+0xd6>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); // vibrator OFF
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4c:	4825      	ldr	r0, [pc, #148]	; (8000ee4 <measure+0x164>)
 8000e4e:	f002 f8ed 	bl	800302c <HAL_GPIO_WritePin>
      is_vibrating = false;
 8000e52:	2300      	movs	r3, #0
 8000e54:	76fb      	strb	r3, [r7, #27]
    }

    // ADC routine
    HAL_ADC_Start(&hadc1);
 8000e56:	4824      	ldr	r0, [pc, #144]	; (8000ee8 <measure+0x168>)
 8000e58:	f000 ffc2 	bl	8001de0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e60:	4821      	ldr	r0, [pc, #132]	; (8000ee8 <measure+0x168>)
 8000e62:	f001 f877 	bl	8001f54 <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc1);
 8000e66:	4820      	ldr	r0, [pc, #128]	; (8000ee8 <measure+0x168>)
 8000e68:	f001 f94c 	bl	8002104 <HAL_ADC_GetValue>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	81fb      	strh	r3, [r7, #14]
    // needed to save the last iterator i
    s->t_end = i;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e76:	461a      	mov	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f8c2 3d48 	str.w	r3, [r2, #3400]	; 0xd48
    // remember the last element of array will be 0, the counter will be
    // increased but array not filled
    s->signal[i] = raw;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	89f9      	ldrh	r1, [r7, #14]
 8000e84:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    tim_val_ms = __HAL_TIM_GET_COUNTER(&htim16);
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <measure+0x160>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8e:	61fb      	str	r3, [r7, #28]
  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	db81      	blt.n	8000da2 <measure+0x22>
  }
  // stoping and reseting timer 16
  HAL_TIM_Base_Stop_IT(&htim16);
 8000e9e:	4810      	ldr	r0, [pc, #64]	; (8000ee0 <measure+0x160>)
 8000ea0:	f005 fdc8 	bl	8006a34 <HAL_TIM_Base_Stop_IT>
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <measure+0x160>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
  s->pulses = 0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
  s->htime = 0;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c2 3d50 	str.w	r3, [r2, #3408]	; 0xd50
  // reset help signal (yellow led)
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	9999999a 	.word	0x9999999a
 8000ed4:	3fc99999 	.word	0x3fc99999
 8000ed8:	33333333 	.word	0x33333333
 8000edc:	3fd33333 	.word	0x3fd33333
 8000ee0:	24030e84 	.word	0x24030e84
 8000ee4:	58021800 	.word	0x58021800
 8000ee8:	24030dd4 	.word	0x24030dd4

08000eec <analyse>:

// TODO: reaktionszeit ausrechnen vibr to first pulse
void analyse(struct MeasureData *s) {
 8000eec:	b480      	push	{r7}
 8000eee:	b08b      	sub	sp, #44	; 0x2c
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  // digitalize signal v:[0,1]
  const int TRIGGER = 39718;
 8000ef4:	f649 3326 	movw	r3, #39718	; 0x9b26
 8000ef8:	613b      	str	r3, [r7, #16]
  const int SCALE = 1000;
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < s->t_end; i++) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
 8000f04:	e015      	b.n	8000f32 <analyse+0x46>
    if (s->signal[i] < TRIGGER) { // aprox. 2V TODO change it to 1V
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	dd05      	ble.n	8000f22 <analyse+0x36>
      s->signal[i] = 0;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000f20:	e004      	b.n	8000f2c <analyse+0x40>
    } else {
      s->signal[i] = 1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f26:	2101      	movs	r1, #1
 8000f28:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i = 0; i < s->t_end; i++) {
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	3301      	adds	r3, #1
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f38:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	dbe1      	blt.n	8000f06 <analyse+0x1a>
    }
  }
  // count pulses
  for (int i = 0; i < s->t_end; i++) {
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
 8000f46:	e02d      	b.n	8000fa4 <analyse+0xb8>
    int edge = s->signal[i + 1] - s->signal[i];
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f52:	4619      	mov	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a3a      	ldr	r2, [r7, #32]
 8000f58:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f5c:	1acb      	subs	r3, r1, r3
 8000f5e:	60bb      	str	r3, [r7, #8]
    if (edge == 1) { // count only negative pulses
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d10a      	bne.n	8000f7c <analyse+0x90>
      s->pulses++;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f6c:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000f70:	3301      	adds	r3, #1
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000f78:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
    }
    if (s->signal[i] == 1) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a3a      	ldr	r2, [r7, #32]
 8000f80:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d10a      	bne.n	8000f9e <analyse+0xb2>
      s->htime++;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f8e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000f92:	3301      	adds	r3, #1
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000f9a:	f8c2 3d50 	str.w	r3, [r2, #3408]	; 0xd50
  for (int i = 0; i < s->t_end; i++) {
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	623b      	str	r3, [r7, #32]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000faa:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000fae:	6a3a      	ldr	r2, [r7, #32]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbc9      	blt.n	8000f48 <analyse+0x5c>
    }
  }
  // check if sensor has been open before vibration
  s->bad = false;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2d54 	strb.w	r2, [r3, #3412]	; 0xd54
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
 8000fc4:	e00f      	b.n	8000fe6 <analyse+0xfa>
    if (s->signal[i] == 0) {
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d106      	bne.n	8000fe0 <analyse+0xf4>
      s->bad = true;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2d54 	strb.w	r2, [r3, #3412]	; 0xd54
      break;
 8000fde:	e00a      	b.n	8000ff6 <analyse+0x10a>
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fec:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dde7      	ble.n	8000fc6 <analyse+0xda>
    }
  }
  // check if sensor has been open after vibration + Einschwingungszeit
  for (int i = (int)(s->t_end * 0.75); i < s->t_end; i++) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000ffc:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001008:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 800100c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001010:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001014:	ee17 3a90 	vmov	r3, s15
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	e00f      	b.n	800103c <analyse+0x150>
    if (s->signal[i] == 0) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d106      	bne.n	8001036 <analyse+0x14a>
      s->bad = true;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2d54 	strb.w	r2, [r3, #3412]	; 0xd54
      break;
 8001034:	e00a      	b.n	800104c <analyse+0x160>
  for (int i = (int)(s->t_end * 0.75); i < s->t_end; i++) {
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	3301      	adds	r3, #1
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001042:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbe7      	blt.n	800101c <analyse+0x130>
    }
  }
  // check if sensor is not kurzgeschlossen all time
  if (s->pulses == 0) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001052:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8001056:	2b00      	cmp	r3, #0
 8001058:	d105      	bne.n	8001066 <analyse+0x17a>
    s->bad = true;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2d54 	strb.w	r2, [r3, #3412]	; 0xd54
  }

  for (int i = s->t_vibr_start; i <= s->t_end; i++) {
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800106c:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e010      	b.n	8001096 <analyse+0x1aa>
    if (s->signal[i] == 0) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d107      	bne.n	8001090 <analyse+0x1a4>
      s->t_first_pulse = i;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001086:	461a      	mov	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f8c2 3d44 	str.w	r3, [r2, #3396]	; 0xd44
      break;
 800108e:	e00a      	b.n	80010a6 <analyse+0x1ba>
  for (int i = s->t_vibr_start; i <= s->t_end; i++) {
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800109c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dde6      	ble.n	8001074 <analyse+0x188>
    }
  
  }
  // resolve the variables to human readable values
  s->htime = s->htime * SCALE / s->t_end;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010ac:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	fb03 f202 	mul.w	r2, r3, r2
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010bc:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80010c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 80010ca:	f8c2 3d50 	str.w	r3, [r2, #3408]	; 0xd50
  s->t_vibr_start = s->t_vibr_start * SCALE / s->t_end;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010d4:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	fb03 f202 	mul.w	r2, r3, r2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010e4:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80010e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 80010f2:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
  s->t_first_pulse = s->t_first_pulse * SCALE / s->t_end;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010fc:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	fb03 f202 	mul.w	r2, r3, r2
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800110c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8001110:	fb92 f3f3 	sdiv	r3, r2, r3
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 800111a:	f8c2 3d44 	str.w	r3, [r2, #3396]	; 0xd44
}
 800111e:	bf00      	nop
 8001120:	372c      	adds	r7, #44	; 0x2c
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112e:	b672      	cpsid	i
}
 8001130:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 8001132:	e7fe      	b.n	8001132 <Error_Handler+0x8>

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_MspInit+0x30>)
 800113c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001140:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_MspInit+0x30>)
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_MspInit+0x30>)
 800114c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	58024400 	.word	0x58024400

08001168 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0ba      	sub	sp, #232	; 0xe8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	22c0      	movs	r2, #192	; 0xc0
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f007 f98d 	bl	80084a8 <memset>
  if(hadc->Instance==ADC1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a2b      	ldr	r2, [pc, #172]	; (8001240 <HAL_ADC_MspInit+0xd8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d14f      	bne.n	8001238 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001198:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80011a8:	2310      	movs	r3, #16
 80011aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80011ac:	2304      	movs	r3, #4
 80011ae:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011b8:	23c0      	movs	r3, #192	; 0xc0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011bc:	2300      	movs	r3, #0
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 ff5e 	bl	8004090 <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80011da:	f7ff ffa6 	bl	800112a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_ADC_MspInit+0xdc>)
 80011e0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_ADC_MspInit+0xdc>)
 80011e6:	f043 0320 	orr.w	r3, r3, #32
 80011ea:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_ADC_MspInit+0xdc>)
 80011f0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80011f4:	f003 0320 	and.w	r3, r3, #32
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_ADC_MspInit+0xdc>)
 80011fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001202:	4a10      	ldr	r2, [pc, #64]	; (8001244 <HAL_ADC_MspInit+0xdc>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_ADC_MspInit+0xdc>)
 800120e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|ANALOG_READ_PA3_Pin_Pin;
 800121a:	2309      	movs	r3, #9
 800121c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001220:	2303      	movs	r3, #3
 8001222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_ADC_MspInit+0xe0>)
 8001234:	f001 fd4a 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001238:	bf00      	nop
 800123a:	37e8      	adds	r7, #232	; 0xe8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40022000 	.word	0x40022000
 8001244:	58024400 	.word	0x58024400
 8001248:	58020000 	.word	0x58020000

0800124c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <HAL_TIM_Encoder_MspInit+0x88>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d12d      	bne.n	80012ca <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001270:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001274:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001280:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800128e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001292:	4a11      	ldr	r2, [pc, #68]	; (80012d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800129e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = encoder1PA6_Pin|encoder2PA7_Pin;
 80012aa:	23c0      	movs	r3, #192	; 0xc0
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ba:	2302      	movs	r3, #2
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_TIM_Encoder_MspInit+0x90>)
 80012c6:	f001 fd01 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40000400 	.word	0x40000400
 80012d8:	58024400 	.word	0x58024400
 80012dc:	58020000 	.word	0x58020000

080012e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_TIM_Base_MspInit+0x3c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10e      	bne.n	8001310 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_TIM_Base_MspInit+0x40>)
 80012f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012f8:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_TIM_Base_MspInit+0x40>)
 80012fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fe:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <HAL_TIM_Base_MspInit+0x40>)
 8001304:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40014400 	.word	0x40014400
 8001320:	58024400 	.word	0x58024400

08001324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0ba      	sub	sp, #232	; 0xe8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	22c0      	movs	r2, #192	; 0xc0
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f007 f8af 	bl	80084a8 <memset>
  if(huart->Instance==USART3)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a27      	ldr	r2, [pc, #156]	; (80013ec <HAL_UART_MspInit+0xc8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d146      	bne.n	80013e2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001354:	f04f 0202 	mov.w	r2, #2
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fe90 	bl	8004090 <HAL_RCCEx_PeriphCLKConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001376:	f7ff fed8 	bl	800112a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_UART_MspInit+0xcc>)
 800137c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001380:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <HAL_UART_MspInit+0xcc>)
 8001382:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001386:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_UART_MspInit+0xcc>)
 800138c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_UART_MspInit+0xcc>)
 800139a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_UART_MspInit+0xcc>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_UART_MspInit+0xcc>)
 80013aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013d0:	2307      	movs	r3, #7
 80013d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <HAL_UART_MspInit+0xd0>)
 80013de:	f001 fc75 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	37e8      	adds	r7, #232	; 0xe8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40004800 	.word	0x40004800
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58020c00 	.word	0x58020c00

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler+0x4>

0800140a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <UsageFault_Handler+0x4>

08001416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001444:	f000 f94c 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f007 f81c 	bl	80084b8 <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	24100000 	.word	0x24100000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	24031030 	.word	0x24031030
 80014b4:	24031180 	.word	0x24031180

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <SystemInit+0xd0>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a31      	ldr	r2, [pc, #196]	; (8001588 <SystemInit+0xd0>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <SystemInit+0xd4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d807      	bhi.n	80014e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <SystemInit+0xd4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 030f 	bic.w	r3, r3, #15
 80014e0:	4a2a      	ldr	r2, [pc, #168]	; (800158c <SystemInit+0xd4>)
 80014e2:	f043 0303 	orr.w	r3, r3, #3
 80014e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <SystemInit+0xd8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a28      	ldr	r2, [pc, #160]	; (8001590 <SystemInit+0xd8>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <SystemInit+0xd8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014fa:	4b25      	ldr	r3, [pc, #148]	; (8001590 <SystemInit+0xd8>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4924      	ldr	r1, [pc, #144]	; (8001590 <SystemInit+0xd8>)
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <SystemInit+0xdc>)
 8001502:	4013      	ands	r3, r2
 8001504:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <SystemInit+0xd4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <SystemInit+0xd4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 030f 	bic.w	r3, r3, #15
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <SystemInit+0xd4>)
 800151c:	f043 0303 	orr.w	r3, r3, #3
 8001520:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001522:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <SystemInit+0xd8>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <SystemInit+0xd8>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <SystemInit+0xd8>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <SystemInit+0xd8>)
 8001536:	4a18      	ldr	r2, [pc, #96]	; (8001598 <SystemInit+0xe0>)
 8001538:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <SystemInit+0xd8>)
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <SystemInit+0xe4>)
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <SystemInit+0xd8>)
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <SystemInit+0xe8>)
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <SystemInit+0xd8>)
 8001548:	2200      	movs	r2, #0
 800154a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <SystemInit+0xd8>)
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <SystemInit+0xe8>)
 8001550:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <SystemInit+0xd8>)
 8001554:	2200      	movs	r2, #0
 8001556:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <SystemInit+0xd8>)
 800155a:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <SystemInit+0xe8>)
 800155c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <SystemInit+0xd8>)
 8001560:	2200      	movs	r2, #0
 8001562:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <SystemInit+0xd8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a09      	ldr	r2, [pc, #36]	; (8001590 <SystemInit+0xd8>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <SystemInit+0xd8>)
 8001572:	2200      	movs	r2, #0
 8001574:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <SystemInit+0xec>)
 8001578:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800157c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00
 800158c:	52002000 	.word	0x52002000
 8001590:	58024400 	.word	0x58024400
 8001594:	eaf6ed7f 	.word	0xeaf6ed7f
 8001598:	02020200 	.word	0x02020200
 800159c:	01ff0000 	.word	0x01ff0000
 80015a0:	01010280 	.word	0x01010280
 80015a4:	52004000 	.word	0x52004000

080015a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015ac:	f7ff ff84 	bl	80014b8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015b2:	490d      	ldr	r1, [pc, #52]	; (80015e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015c8:	4c0a      	ldr	r4, [pc, #40]	; (80015f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015d6:	f006 ff75 	bl	80084c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015da:	f7ff f857 	bl	800068c <main>
  bx  lr
 80015de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80015e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015e8:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80015ec:	08008f2c 	.word	0x08008f2c
  ldr r2, =_sbss
 80015f0:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80015f4:	24031180 	.word	0x24031180

080015f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001602:	2003      	movs	r0, #3
 8001604:	f001 fb30 	bl	8002c68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001608:	f002 fb6c 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 800160c:	4602      	mov	r2, r0
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_Init+0x68>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	4913      	ldr	r1, [pc, #76]	; (8001668 <HAL_Init+0x6c>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
 8001624:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_Init+0x68>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_Init+0x6c>)
 8001630:	5cd3      	ldrb	r3, [r2, r3]
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <HAL_Init+0x70>)
 800163e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <HAL_Init+0x74>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001646:	2000      	movs	r0, #0
 8001648:	f000 f814 	bl	8001674 <HAL_InitTick>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e002      	b.n	800165c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001656:	f7ff fd6d 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	58024400 	.word	0x58024400
 8001668:	08008eb0 	.word	0x08008eb0
 800166c:	24000004 	.word	0x24000004
 8001670:	24000000 	.word	0x24000000

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_InitTick+0x60>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e021      	b.n	80016cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_InitTick+0x64>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_InitTick+0x60>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f001 fb07 	bl	8002cb2 <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00e      	b.n	80016cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d80a      	bhi.n	80016ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016bc:	f001 fadf 	bl	8002c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <HAL_InitTick+0x68>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2400000c 	.word	0x2400000c
 80016d8:	24000000 	.word	0x24000000
 80016dc:	24000008 	.word	0x24000008

080016e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_IncTick+0x24>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2400000c 	.word	0x2400000c
 8001704:	24031034 	.word	0x24031034

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	24031034 	.word	0x24031034

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff ffee 	bl	8001708 <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001746:	bf00      	nop
 8001748:	f7ff ffde 	bl	8001708 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2400000c 	.word	0x2400000c

08001768 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	609a      	str	r2, [r3, #8]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3360      	adds	r3, #96	; 0x60
 80017e2:	461a      	mov	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	430b      	orrs	r3, r1
 80017fe:	431a      	orrs	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001804:	bf00      	nop
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	fa01 f303 	lsl.w	r3, r1, r3
 8001830:	431a      	orrs	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	611a      	str	r2, [r3, #16]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001842:	b480      	push	{r7}
 8001844:	b087      	sub	sp, #28
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3360      	adds	r3, #96	; 0x60
 8001852:	461a      	mov	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	431a      	orrs	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	601a      	str	r2, [r3, #0]
  }
}
 800186c:	bf00      	nop
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800189e:	b480      	push	{r7}
 80018a0:	b087      	sub	sp, #28
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3330      	adds	r3, #48	; 0x30
 80018ae:	461a      	mov	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	4413      	add	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	211f      	movs	r1, #31
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	401a      	ands	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0e9b      	lsrs	r3, r3, #26
 80018d6:	f003 011f 	and.w	r1, r3, #31
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018ea:	bf00      	nop
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b087      	sub	sp, #28
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3314      	adds	r3, #20
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	0e5b      	lsrs	r3, r3, #25
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	4413      	add	r3, r2
 8001914:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	0d1b      	lsrs	r3, r3, #20
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	2107      	movs	r1, #7
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	401a      	ands	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	0d1b      	lsrs	r3, r3, #20
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	431a      	orrs	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001940:	bf00      	nop
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001964:	43db      	mvns	r3, r3
 8001966:	401a      	ands	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0318 	and.w	r3, r3, #24
 800196e:	4908      	ldr	r1, [pc, #32]	; (8001990 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001970:	40d9      	lsrs	r1, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	400b      	ands	r3, r1
 8001976:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800197a:	431a      	orrs	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	000fffff 	.word	0x000fffff

08001994 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 031f 	and.w	r3, r3, #31
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <LL_ADC_DisableDeepPowerDown+0x20>)
 80019da:	4013      	ands	r3, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6093      	str	r3, [r2, #8]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	5fffffc0 	.word	0x5fffffc0

080019f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a04:	d101      	bne.n	8001a0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <LL_ADC_EnableInternalRegulator+0x24>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	6fffffc0 	.word	0x6fffffc0

08001a40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a54:	d101      	bne.n	8001a5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <LL_ADC_Enable+0x24>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	f043 0201 	orr.w	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	7fffffc0 	.word	0x7fffffc0

08001a90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <LL_ADC_IsEnabled+0x18>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <LL_ADC_IsEnabled+0x1a>
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <LL_ADC_REG_StartConversion+0x24>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	f043 0204 	orr.w	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	7fffffc0 	.word	0x7fffffc0

08001ae0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d101      	bne.n	8001af8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d101      	bne.n	8001b1e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e138      	b.n	8001db8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d109      	bne.n	8001b68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fb07 	bl	8001168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff3f 	bl	80019f0 <LL_ADC_IsDeepPowerDownEnabled>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d004      	beq.n	8001b82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff25 	bl	80019cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff5a 	bl	8001a40 <LL_ADC_IsInternalRegulatorEnabled>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d114      	bne.n	8001bbc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff3e 	bl	8001a18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b9c:	4b88      	ldr	r3, [pc, #544]	; (8001dc0 <HAL_ADC_Init+0x294>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	099b      	lsrs	r3, r3, #6
 8001ba2:	4a88      	ldr	r2, [pc, #544]	; (8001dc4 <HAL_ADC_Init+0x298>)
 8001ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba8:	099b      	lsrs	r3, r3, #6
 8001baa:	3301      	adds	r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bae:	e002      	b.n	8001bb6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f9      	bne.n	8001bb0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff3d 	bl	8001a40 <LL_ADC_IsInternalRegulatorEnabled>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10d      	bne.n	8001be8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd0:	f043 0210 	orr.w	r2, r3, #16
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff77 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001bf2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f040 80d2 	bne.w	8001da6 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f040 80ce 	bne.w	8001da6 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c12:	f043 0202 	orr.w	r2, r3, #2
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff36 	bl	8001a90 <LL_ADC_IsEnabled>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d110      	bne.n	8001c4c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c2a:	4867      	ldr	r0, [pc, #412]	; (8001dc8 <HAL_ADC_Init+0x29c>)
 8001c2c:	f7ff ff30 	bl	8001a90 <LL_ADC_IsEnabled>
 8001c30:	4604      	mov	r4, r0
 8001c32:	4866      	ldr	r0, [pc, #408]	; (8001dcc <HAL_ADC_Init+0x2a0>)
 8001c34:	f7ff ff2c 	bl	8001a90 <LL_ADC_IsEnabled>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4323      	orrs	r3, r4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4619      	mov	r1, r3
 8001c46:	4862      	ldr	r0, [pc, #392]	; (8001dd0 <HAL_ADC_Init+0x2a4>)
 8001c48:	f7ff fd8e 	bl	8001768 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7d5b      	ldrb	r3, [r3, #21]
 8001c50:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c56:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001c5c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7f1b      	ldrb	r3, [r3, #28]
 8001c62:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7f1b      	ldrb	r3, [r3, #28]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d106      	bne.n	8001c7e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	045b      	lsls	r3, r3, #17
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <HAL_ADC_Init+0x2a8>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	69b9      	ldr	r1, [r7, #24]
 8001caa:	430b      	orrs	r3, r1
 8001cac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff14 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001cb8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff21 	bl	8001b06 <LL_ADC_INJ_IsConversionOngoing>
 8001cc4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d14a      	bne.n	8001d62 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d147      	bne.n	8001d62 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7d1b      	ldrb	r3, [r3, #20]
 8001cd6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	; (8001dd8 <HAL_ADC_Init+0x2ac>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	69b9      	ldr	r1, [r7, #24]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d11b      	bne.n	8001d36 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <HAL_ADC_Init+0x2b0>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d12:	3a01      	subs	r2, #1
 8001d14:	0411      	lsls	r1, r2, #16
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d1a:	4311      	orrs	r1, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d20:	4311      	orrs	r1, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d26:	430a      	orrs	r2, r1
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	611a      	str	r2, [r3, #16]
 8001d34:	e007      	b.n	8001d46 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 fd41 	bl	80027e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d10c      	bne.n	8001d84 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	f023 010f 	bic.w	r1, r3, #15
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	1e5a      	subs	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	631a      	str	r2, [r3, #48]	; 0x30
 8001d82:	e007      	b.n	8001d94 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 020f 	bic.w	r2, r2, #15
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	f023 0303 	bic.w	r3, r3, #3
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
 8001da4:	e007      	b.n	8001db6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	f043 0210 	orr.w	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001db6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3724      	adds	r7, #36	; 0x24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd90      	pop	{r4, r7, pc}
 8001dc0:	24000000 	.word	0x24000000
 8001dc4:	053e2d63 	.word	0x053e2d63
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40022100 	.word	0x40022100
 8001dd0:	40022300 	.word	0x40022300
 8001dd4:	fff0c003 	.word	0xfff0c003
 8001dd8:	ffffbffc 	.word	0xffffbffc
 8001ddc:	fc00f81e 	.word	0xfc00f81e

08001de0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de8:	4856      	ldr	r0, [pc, #344]	; (8001f44 <HAL_ADC_Start+0x164>)
 8001dea:	f7ff fdd3 	bl	8001994 <LL_ADC_GetMultimode>
 8001dee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fe73 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 809a 	bne.w	8001f36 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADC_Start+0x30>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e095      	b.n	8001f3c <HAL_ADC_Start+0x15c>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fc67 	bl	80026ec <ADC_Enable>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f040 8081 	bne.w	8001f2c <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e2e:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <HAL_ADC_Start+0x168>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a43      	ldr	r2, [pc, #268]	; (8001f4c <HAL_ADC_Start+0x16c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d002      	beq.n	8001e4a <HAL_ADC_Start+0x6a>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	e000      	b.n	8001e4c <HAL_ADC_Start+0x6c>
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_ADC_Start+0x170>)
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d002      	beq.n	8001e5a <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d105      	bne.n	8001e66 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e72:	d106      	bne.n	8001e82 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	f023 0206 	bic.w	r2, r3, #6
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e80:	e002      	b.n	8001e88 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	221c      	movs	r2, #28
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2b      	ldr	r2, [pc, #172]	; (8001f4c <HAL_ADC_Start+0x16c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d002      	beq.n	8001ea8 <HAL_ADC_Start+0xc8>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	e000      	b.n	8001eaa <HAL_ADC_Start+0xca>
 8001ea8:	4b29      	ldr	r3, [pc, #164]	; (8001f50 <HAL_ADC_Start+0x170>)
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d008      	beq.n	8001ec4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d002      	beq.n	8001ec4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b09      	cmp	r3, #9
 8001ec2:	d114      	bne.n	8001eee <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fde6 	bl	8001ab8 <LL_ADC_REG_StartConversion>
 8001eec:	e025      	b.n	8001f3a <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <HAL_ADC_Start+0x16c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d002      	beq.n	8001f0a <HAL_ADC_Start+0x12a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	e000      	b.n	8001f0c <HAL_ADC_Start+0x12c>
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_ADC_Start+0x170>)
 8001f0c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00f      	beq.n	8001f3a <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
 8001f2a:	e006      	b.n	8001f3a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f34:	e001      	b.n	8001f3a <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
 8001f38:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40022300 	.word	0x40022300
 8001f48:	fffff0fe 	.word	0xfffff0fe
 8001f4c:	40022100 	.word	0x40022100
 8001f50:	40022000 	.word	0x40022000

08001f54 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f5e:	4866      	ldr	r0, [pc, #408]	; (80020f8 <HAL_ADC_PollForConversion+0x1a4>)
 8001f60:	f7ff fd18 	bl	8001994 <LL_ADC_GetMultimode>
 8001f64:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d102      	bne.n	8001f74 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f6e:	2308      	movs	r3, #8
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	e02a      	b.n	8001fca <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d002      	beq.n	8001f86 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b09      	cmp	r3, #9
 8001f84:	d111      	bne.n	8001faa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0a4      	b.n	80020ee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001fa8:	e00f      	b.n	8001fca <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001faa:	4853      	ldr	r0, [pc, #332]	; (80020f8 <HAL_ADC_PollForConversion+0x1a4>)
 8001fac:	f7ff fd00 	bl	80019b0 <LL_ADC_GetMultiDMATransfer>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	f043 0220 	orr.w	r2, r3, #32
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e093      	b.n	80020ee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001fca:	f7ff fb9d 	bl	8001708 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fd0:	e021      	b.n	8002016 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fd8:	d01d      	beq.n	8002016 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001fda:	f7ff fb95 	bl	8001708 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d302      	bcc.n	8001ff0 <HAL_ADC_PollForConversion+0x9c>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d112      	bne.n	8002016 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10b      	bne.n	8002016 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f043 0204 	orr.w	r2, r3, #4
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e06b      	b.n	80020ee <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0d6      	beq.n	8001fd2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fc1f 	bl	8001878 <LL_ADC_REG_IsTriggerSourceSWStart>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01c      	beq.n	800207a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7d5b      	ldrb	r3, [r3, #21]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d118      	bne.n	800207a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b08      	cmp	r3, #8
 8002054:	d111      	bne.n	800207a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <HAL_ADC_PollForConversion+0x1a8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d002      	beq.n	800208a <HAL_ADC_PollForConversion+0x136>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	e000      	b.n	800208c <HAL_ADC_PollForConversion+0x138>
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_ADC_PollForConversion+0x1ac>)
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	4293      	cmp	r3, r2
 8002092:	d008      	beq.n	80020a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d002      	beq.n	80020a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2b09      	cmp	r3, #9
 80020a4:	d104      	bne.n	80020b0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	e00c      	b.n	80020ca <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a11      	ldr	r2, [pc, #68]	; (80020fc <HAL_ADC_PollForConversion+0x1a8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d002      	beq.n	80020c0 <HAL_ADC_PollForConversion+0x16c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	e000      	b.n	80020c2 <HAL_ADC_PollForConversion+0x16e>
 80020c0:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_ADC_PollForConversion+0x1ac>)
 80020c2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d104      	bne.n	80020da <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2208      	movs	r2, #8
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	e008      	b.n	80020ec <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d103      	bne.n	80020ec <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	220c      	movs	r2, #12
 80020ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40022300 	.word	0x40022300
 80020fc:	40022100 	.word	0x40022100
 8002100:	40022000 	.word	0x40022000

08002104 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b0a1      	sub	sp, #132	; 0x84
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4a9a      	ldr	r2, [pc, #616]	; (80023a4 <HAL_ADC_ConfigChannel+0x284>)
 800213a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_ADC_ConfigChannel+0x2a>
 8002146:	2302      	movs	r3, #2
 8002148:	e2bc      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x5a4>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fcc2 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 82a1 	bne.w	80026a6 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800216c:	2b00      	cmp	r3, #0
 800216e:	d108      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x62>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	0e9b      	lsrs	r3, r3, #26
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	2201      	movs	r2, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	e016      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x90>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002192:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800219a:	2320      	movs	r3, #32
 800219c:	e003      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800219e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	2201      	movs	r2, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	69d1      	ldr	r1, [r2, #28]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	430b      	orrs	r3, r1
 80021bc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6859      	ldr	r1, [r3, #4]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	f7ff fb67 	bl	800189e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fc83 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 80021da:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fc90 	bl	8001b06 <LL_ADC_INJ_IsConversionOngoing>
 80021e6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 80a0 	bne.w	8002330 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 809c 	bne.w	8002330 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	461a      	mov	r2, r3
 8002206:	f7ff fb76 	bl	80018f6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x110>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	e00a      	b.n	8002246 <HAL_ADC_ConfigChannel+0x126>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d027      	beq.n	80022a0 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6919      	ldr	r1, [r3, #16]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800225e:	f7ff fab7 	bl	80017d0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6919      	ldr	r1, [r3, #16]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	7e5b      	ldrb	r3, [r3, #25]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d102      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x158>
 8002272:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002276:	e000      	b.n	800227a <HAL_ADC_ConfigChannel+0x15a>
 8002278:	2300      	movs	r3, #0
 800227a:	461a      	mov	r2, r3
 800227c:	f7ff fae1 	bl	8001842 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6919      	ldr	r1, [r3, #16]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	7e1b      	ldrb	r3, [r3, #24]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d102      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x176>
 8002290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002294:	e000      	b.n	8002298 <HAL_ADC_ConfigChannel+0x178>
 8002296:	2300      	movs	r3, #0
 8002298:	461a      	mov	r2, r3
 800229a:	f7ff fab9 	bl	8001810 <LL_ADC_SetDataRightShift>
 800229e:	e047      	b.n	8002330 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	069b      	lsls	r3, r3, #26
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d107      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022c2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	069b      	lsls	r3, r3, #26
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d107      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022e6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	069b      	lsls	r3, r3, #26
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d107      	bne.n	800230c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800230a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002312:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	069b      	lsls	r3, r3, #26
 800231c:	429a      	cmp	r2, r3
 800231e:	d107      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800232e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fbab 	bl	8001a90 <LL_ADC_IsEnabled>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 81bb 	bne.w	80026b8 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6819      	ldr	r1, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	461a      	mov	r2, r3
 8002350:	f7ff fafc 	bl	800194c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <HAL_ADC_ConfigChannel+0x284>)
 800235a:	4293      	cmp	r3, r2
 800235c:	f040 8130 	bne.w	80025c0 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10b      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x268>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	3301      	adds	r3, #1
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2b09      	cmp	r3, #9
 800237e:	bf94      	ite	ls
 8002380:	2301      	movls	r3, #1
 8002382:	2300      	movhi	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	e01b      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x2a0>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002398:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800239a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d103      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e005      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x290>
 80023a4:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80023a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2b09      	cmp	r3, #9
 80023b8:	bf94      	ite	ls
 80023ba:	2301      	movls	r3, #1
 80023bc:	2300      	movhi	r3, #0
 80023be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d079      	beq.n	80024b8 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x2c0>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0e9b      	lsrs	r3, r3, #26
 80023d6:	3301      	adds	r3, #1
 80023d8:	069b      	lsls	r3, r3, #26
 80023da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023de:	e015      	b.n	800240c <HAL_ADC_ConfigChannel+0x2ec>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80023ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80023f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80023f8:	2320      	movs	r3, #32
 80023fa:	e003      	b.n	8002404 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80023fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	3301      	adds	r3, #1
 8002406:	069b      	lsls	r3, r3, #26
 8002408:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_ADC_ConfigChannel+0x30c>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0e9b      	lsrs	r3, r3, #26
 800241e:	3301      	adds	r3, #1
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	2101      	movs	r1, #1
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	e017      	b.n	800245c <HAL_ADC_ConfigChannel+0x33c>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800243a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800243e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002444:	2320      	movs	r3, #32
 8002446:	e003      	b.n	8002450 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	ea42 0103 	orr.w	r1, r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x362>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	3301      	adds	r3, #1
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	051b      	lsls	r3, r3, #20
 8002480:	e018      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x394>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800249a:	2320      	movs	r3, #32
 800249c:	e003      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b4:	430b      	orrs	r3, r1
 80024b6:	e07e      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d107      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x3b4>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0e9b      	lsrs	r3, r3, #26
 80024ca:	3301      	adds	r3, #1
 80024cc:	069b      	lsls	r3, r3, #26
 80024ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024d2:	e015      	b.n	8002500 <HAL_ADC_ConfigChannel+0x3e0>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e003      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	069b      	lsls	r3, r3, #26
 80024fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x400>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0e9b      	lsrs	r3, r3, #26
 8002512:	3301      	adds	r3, #1
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	e017      	b.n	8002550 <HAL_ADC_ConfigChannel+0x430>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	61bb      	str	r3, [r7, #24]
  return result;
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002538:	2320      	movs	r3, #32
 800253a:	e003      	b.n	8002544 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	3301      	adds	r3, #1
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	2101      	movs	r1, #1
 800254c:	fa01 f303 	lsl.w	r3, r1, r3
 8002550:	ea42 0103 	orr.w	r1, r2, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10d      	bne.n	800257c <HAL_ADC_ConfigChannel+0x45c>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0e9b      	lsrs	r3, r3, #26
 8002566:	3301      	adds	r3, #1
 8002568:	f003 021f 	and.w	r2, r3, #31
 800256c:	4613      	mov	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4413      	add	r3, r2
 8002572:	3b1e      	subs	r3, #30
 8002574:	051b      	lsls	r3, r3, #20
 8002576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800257a:	e01b      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x494>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	60fb      	str	r3, [r7, #12]
  return result;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002594:	2320      	movs	r3, #32
 8002596:	e003      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	f003 021f 	and.w	r2, r3, #31
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	3b1e      	subs	r3, #30
 80025ae:	051b      	lsls	r3, r3, #20
 80025b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b4:	430b      	orrs	r3, r1
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	6892      	ldr	r2, [r2, #8]
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7ff f99b 	bl	80018f6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	da77      	bge.n	80026b8 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025c8:	4840      	ldr	r0, [pc, #256]	; (80026cc <HAL_ADC_ConfigChannel+0x5ac>)
 80025ca:	f7ff f8f3 	bl	80017b4 <LL_ADC_GetCommonPathInternalCh>
 80025ce:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025d0:	483f      	ldr	r0, [pc, #252]	; (80026d0 <HAL_ADC_ConfigChannel+0x5b0>)
 80025d2:	f7ff fa5d 	bl	8001a90 <LL_ADC_IsEnabled>
 80025d6:	4604      	mov	r4, r0
 80025d8:	483e      	ldr	r0, [pc, #248]	; (80026d4 <HAL_ADC_ConfigChannel+0x5b4>)
 80025da:	f7ff fa59 	bl	8001a90 <LL_ADC_IsEnabled>
 80025de:	4603      	mov	r3, r0
 80025e0:	4323      	orrs	r3, r4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d155      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a3b      	ldr	r2, [pc, #236]	; (80026d8 <HAL_ADC_ConfigChannel+0x5b8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d122      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x516>
 80025f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d11d      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a35      	ldr	r2, [pc, #212]	; (80026d4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d159      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002606:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800260a:	4619      	mov	r1, r3
 800260c:	482f      	ldr	r0, [pc, #188]	; (80026cc <HAL_ADC_ConfigChannel+0x5ac>)
 800260e:	f7ff f8be 	bl	800178e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002612:	4b32      	ldr	r3, [pc, #200]	; (80026dc <HAL_ADC_ConfigChannel+0x5bc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	4a31      	ldr	r2, [pc, #196]	; (80026e0 <HAL_ADC_ConfigChannel+0x5c0>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	099b      	lsrs	r3, r3, #6
 8002620:	3301      	adds	r3, #1
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002626:	e002      	b.n	800262e <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	3b01      	subs	r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f9      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002634:	e040      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2a      	ldr	r2, [pc, #168]	; (80026e4 <HAL_ADC_ConfigChannel+0x5c4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d111      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x544>
 8002640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002642:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d131      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800265a:	4619      	mov	r1, r3
 800265c:	481b      	ldr	r0, [pc, #108]	; (80026cc <HAL_ADC_ConfigChannel+0x5ac>)
 800265e:	f7ff f896 	bl	800178e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002662:	e029      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <HAL_ADC_ConfigChannel+0x5c8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d124      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x598>
 800266e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d11f      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a15      	ldr	r2, [pc, #84]	; (80026d4 <HAL_ADC_ConfigChannel+0x5b4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d11a      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002684:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002688:	4619      	mov	r1, r3
 800268a:	4810      	ldr	r0, [pc, #64]	; (80026cc <HAL_ADC_ConfigChannel+0x5ac>)
 800268c:	f7ff f87f 	bl	800178e <LL_ADC_SetCommonPathInternalCh>
 8002690:	e012      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f043 0220 	orr.w	r2, r3, #32
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80026a4:	e008      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	f043 0220 	orr.w	r2, r3, #32
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3784      	adds	r7, #132	; 0x84
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd90      	pop	{r4, r7, pc}
 80026cc:	40022300 	.word	0x40022300
 80026d0:	40022000 	.word	0x40022000
 80026d4:	40022100 	.word	0x40022100
 80026d8:	cb840000 	.word	0xcb840000
 80026dc:	24000000 	.word	0x24000000
 80026e0:	053e2d63 	.word	0x053e2d63
 80026e4:	bac04000 	.word	0xbac04000
 80026e8:	cfb80000 	.word	0xcfb80000

080026ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff f9c9 	bl	8001a90 <LL_ADC_IsEnabled>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d161      	bne.n	80027c8 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <ADC_Enable+0xe8>)
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f043 0210 	orr.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e04d      	b.n	80027ca <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff f998 	bl	8001a68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002738:	f7fe ffe6 	bl	8001708 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800273e:	4826      	ldr	r0, [pc, #152]	; (80027d8 <ADC_Enable+0xec>)
 8002740:	f7ff f928 	bl	8001994 <LL_ADC_GetMultimode>
 8002744:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a24      	ldr	r2, [pc, #144]	; (80027dc <ADC_Enable+0xf0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d002      	beq.n	8002756 <ADC_Enable+0x6a>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	e000      	b.n	8002758 <ADC_Enable+0x6c>
 8002756:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <ADC_Enable+0xf4>)
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	4293      	cmp	r3, r2
 800275e:	d02c      	beq.n	80027ba <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d130      	bne.n	80027c8 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002766:	e028      	b.n	80027ba <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff f98f 	bl	8001a90 <LL_ADC_IsEnabled>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d104      	bne.n	8002782 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff f973 	bl	8001a68 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002782:	f7fe ffc1 	bl	8001708 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d914      	bls.n	80027ba <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d00d      	beq.n	80027ba <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	f043 0210 	orr.w	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	f043 0201 	orr.w	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e007      	b.n	80027ca <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d1cf      	bne.n	8002768 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	8000003f 	.word	0x8000003f
 80027d8:	40022300 	.word	0x40022300
 80027dc:	40022100 	.word	0x40022100
 80027e0:	40022000 	.word	0x40022000

080027e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80027ec:	4b60      	ldr	r3, [pc, #384]	; (8002970 <ADC_ConfigureBoostMode+0x18c>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01c      	beq.n	8002832 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027f8:	f001 fbee 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 80027fc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002806:	d010      	beq.n	800282a <ADC_ConfigureBoostMode+0x46>
 8002808:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800280c:	d873      	bhi.n	80028f6 <ADC_ConfigureBoostMode+0x112>
 800280e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002812:	d002      	beq.n	800281a <ADC_ConfigureBoostMode+0x36>
 8002814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002818:	d16d      	bne.n	80028f6 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	fbb2 f3f3 	udiv	r3, r2, r3
 8002826:	60fb      	str	r3, [r7, #12]
        break;
 8002828:	e068      	b.n	80028fc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	60fb      	str	r3, [r7, #12]
        break;
 8002830:	e064      	b.n	80028fc <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002832:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	f002 fde7 	bl	800540c <HAL_RCCEx_GetPeriphCLKFreq>
 800283e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002848:	d051      	beq.n	80028ee <ADC_ConfigureBoostMode+0x10a>
 800284a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800284e:	d854      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x116>
 8002850:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002854:	d047      	beq.n	80028e6 <ADC_ConfigureBoostMode+0x102>
 8002856:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800285a:	d84e      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x116>
 800285c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002860:	d03d      	beq.n	80028de <ADC_ConfigureBoostMode+0xfa>
 8002862:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002866:	d848      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x116>
 8002868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800286c:	d033      	beq.n	80028d6 <ADC_ConfigureBoostMode+0xf2>
 800286e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002872:	d842      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x116>
 8002874:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002878:	d029      	beq.n	80028ce <ADC_ConfigureBoostMode+0xea>
 800287a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800287e:	d83c      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x116>
 8002880:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002884:	d01a      	beq.n	80028bc <ADC_ConfigureBoostMode+0xd8>
 8002886:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800288a:	d836      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x116>
 800288c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002890:	d014      	beq.n	80028bc <ADC_ConfigureBoostMode+0xd8>
 8002892:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002896:	d830      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x116>
 8002898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800289c:	d00e      	beq.n	80028bc <ADC_ConfigureBoostMode+0xd8>
 800289e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028a2:	d82a      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x116>
 80028a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028a8:	d008      	beq.n	80028bc <ADC_ConfigureBoostMode+0xd8>
 80028aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028ae:	d824      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x116>
 80028b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028b4:	d002      	beq.n	80028bc <ADC_ConfigureBoostMode+0xd8>
 80028b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028ba:	d11e      	bne.n	80028fa <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	0c9b      	lsrs	r3, r3, #18
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ca:	60fb      	str	r3, [r7, #12]
        break;
 80028cc:	e016      	b.n	80028fc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	60fb      	str	r3, [r7, #12]
        break;
 80028d4:	e012      	b.n	80028fc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	60fb      	str	r3, [r7, #12]
        break;
 80028dc:	e00e      	b.n	80028fc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	099b      	lsrs	r3, r3, #6
 80028e2:	60fb      	str	r3, [r7, #12]
        break;
 80028e4:	e00a      	b.n	80028fc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	09db      	lsrs	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]
        break;
 80028ec:	e006      	b.n	80028fc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	0a1b      	lsrs	r3, r3, #8
 80028f2:	60fb      	str	r3, [r7, #12]
        break;
 80028f4:	e002      	b.n	80028fc <ADC_ConfigureBoostMode+0x118>
        break;
 80028f6:	bf00      	nop
 80028f8:	e000      	b.n	80028fc <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80028fa:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <ADC_ConfigureBoostMode+0x190>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d808      	bhi.n	800291c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002918:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800291a:	e025      	b.n	8002968 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <ADC_ConfigureBoostMode+0x194>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d80a      	bhi.n	800293a <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002936:	609a      	str	r2, [r3, #8]
}
 8002938:	e016      	b.n	8002968 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a0f      	ldr	r2, [pc, #60]	; (800297c <ADC_ConfigureBoostMode+0x198>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d80a      	bhi.n	8002958 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002954:	609a      	str	r2, [r3, #8]
}
 8002956:	e007      	b.n	8002968 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002966:	609a      	str	r2, [r3, #8]
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40022300 	.word	0x40022300
 8002974:	005f5e10 	.word	0x005f5e10
 8002978:	00bebc20 	.word	0x00bebc20
 800297c:	017d7840 	.word	0x017d7840

08002980 <LL_ADC_IsEnabled>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <LL_ADC_IsEnabled+0x18>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <LL_ADC_IsEnabled+0x1a>
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d101      	bne.n	80029be <LL_ADC_REG_IsConversionOngoing+0x18>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b09f      	sub	sp, #124	; 0x7c
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e080      	b.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a3d      	ldr	r2, [pc, #244]	; (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d102      	bne.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a04:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	e001      	b.n	8002a0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e05f      	b.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ffb9 	bl	80029a6 <LL_ADC_REG_IsConversionOngoing>
 8002a34:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ffb3 	bl	80029a6 <LL_ADC_REG_IsConversionOngoing>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d141      	bne.n	8002aca <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d13e      	bne.n	8002aca <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002a4e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a68:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a6a:	4822      	ldr	r0, [pc, #136]	; (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a6c:	f7ff ff88 	bl	8002980 <LL_ADC_IsEnabled>
 8002a70:	4604      	mov	r4, r0
 8002a72:	4821      	ldr	r0, [pc, #132]	; (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a74:	f7ff ff84 	bl	8002980 <LL_ADC_IsEnabled>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4323      	orrs	r3, r4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d12e      	bne.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	6811      	ldr	r1, [r2, #0]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	6892      	ldr	r2, [r2, #8]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	431a      	orrs	r2, r3
 8002a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a96:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a98:	e021      	b.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa6:	4813      	ldr	r0, [pc, #76]	; (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002aa8:	f7ff ff6a 	bl	8002980 <LL_ADC_IsEnabled>
 8002aac:	4604      	mov	r4, r0
 8002aae:	4812      	ldr	r0, [pc, #72]	; (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002ab0:	f7ff ff66 	bl	8002980 <LL_ADC_IsEnabled>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4323      	orrs	r3, r4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d110      	bne.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ac6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac8:	e009      	b.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ace:	f043 0220 	orr.w	r2, r3, #32
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002adc:	e000      	b.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ade:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ae8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	377c      	adds	r7, #124	; 0x7c
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd90      	pop	{r4, r7, pc}
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40022100 	.word	0x40022100
 8002afc:	40022300 	.word	0x40022300
 8002b00:	fffff0e0 	.word	0xfffff0e0

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <__NVIC_SetPriorityGrouping+0x40>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <__NVIC_SetPriorityGrouping+0x40>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00
 8002b48:	05fa0000 	.word	0x05fa0000

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db0a      	blt.n	8002b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	490c      	ldr	r1, [pc, #48]	; (8002bb4 <__NVIC_SetPriority+0x4c>)
 8002b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b86:	0112      	lsls	r2, r2, #4
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b90:	e00a      	b.n	8002ba8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4908      	ldr	r1, [pc, #32]	; (8002bb8 <__NVIC_SetPriority+0x50>)
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	3b04      	subs	r3, #4
 8002ba0:	0112      	lsls	r2, r2, #4
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	761a      	strb	r2, [r3, #24]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000e100 	.word	0xe000e100
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	; 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f1c3 0307 	rsb	r3, r3, #7
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	bf28      	it	cs
 8002bda:	2304      	movcs	r3, #4
 8002bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3304      	adds	r3, #4
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d902      	bls.n	8002bec <NVIC_EncodePriority+0x30>
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3b03      	subs	r3, #3
 8002bea:	e000      	b.n	8002bee <NVIC_EncodePriority+0x32>
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	401a      	ands	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	43d9      	mvns	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	4313      	orrs	r3, r2
         );
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3724      	adds	r7, #36	; 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c34:	d301      	bcc.n	8002c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00f      	b.n	8002c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <SysTick_Config+0x40>)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c42:	210f      	movs	r1, #15
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c48:	f7ff ff8e 	bl	8002b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <SysTick_Config+0x40>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c52:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <SysTick_Config+0x40>)
 8002c54:	2207      	movs	r2, #7
 8002c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	e000e010 	.word	0xe000e010

08002c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ff47 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c8c:	f7ff ff5e 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002c90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f7ff ff90 	bl	8002bbc <NVIC_EncodePriority>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff5f 	bl	8002b68 <__NVIC_SetPriority>
}
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ffb2 	bl	8002c24 <SysTick_Config>
 8002cc0:	4603      	mov	r3, r0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	; 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002cda:	4b89      	ldr	r3, [pc, #548]	; (8002f00 <HAL_GPIO_Init+0x234>)
 8002cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cde:	e194      	b.n	800300a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8186 	beq.w	8003004 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d005      	beq.n	8002d10 <HAL_GPIO_Init+0x44>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d130      	bne.n	8002d72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d46:	2201      	movs	r2, #1
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 0201 	and.w	r2, r3, #1
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d017      	beq.n	8002dae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	2203      	movs	r2, #3
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d123      	bne.n	8002e02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	08da      	lsrs	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3208      	adds	r2, #8
 8002dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	08da      	lsrs	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3208      	adds	r2, #8
 8002dfc:	69b9      	ldr	r1, [r7, #24]
 8002dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0203 	and.w	r2, r3, #3
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80e0 	beq.w	8003004 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e44:	4b2f      	ldr	r3, [pc, #188]	; (8002f04 <HAL_GPIO_Init+0x238>)
 8002e46:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002e4a:	4a2e      	ldr	r2, [pc, #184]	; (8002f04 <HAL_GPIO_Init+0x238>)
 8002e4c:	f043 0302 	orr.w	r3, r3, #2
 8002e50:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002e54:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <HAL_GPIO_Init+0x238>)
 8002e56:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e62:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <HAL_GPIO_Init+0x23c>)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	3302      	adds	r3, #2
 8002e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	220f      	movs	r2, #15
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a20      	ldr	r2, [pc, #128]	; (8002f0c <HAL_GPIO_Init+0x240>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d052      	beq.n	8002f34 <HAL_GPIO_Init+0x268>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <HAL_GPIO_Init+0x244>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d031      	beq.n	8002efa <HAL_GPIO_Init+0x22e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_GPIO_Init+0x248>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d02b      	beq.n	8002ef6 <HAL_GPIO_Init+0x22a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <HAL_GPIO_Init+0x24c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d025      	beq.n	8002ef2 <HAL_GPIO_Init+0x226>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <HAL_GPIO_Init+0x250>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01f      	beq.n	8002eee <HAL_GPIO_Init+0x222>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <HAL_GPIO_Init+0x254>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d019      	beq.n	8002eea <HAL_GPIO_Init+0x21e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a1a      	ldr	r2, [pc, #104]	; (8002f24 <HAL_GPIO_Init+0x258>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_GPIO_Init+0x21a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a19      	ldr	r2, [pc, #100]	; (8002f28 <HAL_GPIO_Init+0x25c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00d      	beq.n	8002ee2 <HAL_GPIO_Init+0x216>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <HAL_GPIO_Init+0x260>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d007      	beq.n	8002ede <HAL_GPIO_Init+0x212>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <HAL_GPIO_Init+0x264>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d101      	bne.n	8002eda <HAL_GPIO_Init+0x20e>
 8002ed6:	2309      	movs	r3, #9
 8002ed8:	e02d      	b.n	8002f36 <HAL_GPIO_Init+0x26a>
 8002eda:	230a      	movs	r3, #10
 8002edc:	e02b      	b.n	8002f36 <HAL_GPIO_Init+0x26a>
 8002ede:	2308      	movs	r3, #8
 8002ee0:	e029      	b.n	8002f36 <HAL_GPIO_Init+0x26a>
 8002ee2:	2307      	movs	r3, #7
 8002ee4:	e027      	b.n	8002f36 <HAL_GPIO_Init+0x26a>
 8002ee6:	2306      	movs	r3, #6
 8002ee8:	e025      	b.n	8002f36 <HAL_GPIO_Init+0x26a>
 8002eea:	2305      	movs	r3, #5
 8002eec:	e023      	b.n	8002f36 <HAL_GPIO_Init+0x26a>
 8002eee:	2304      	movs	r3, #4
 8002ef0:	e021      	b.n	8002f36 <HAL_GPIO_Init+0x26a>
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e01f      	b.n	8002f36 <HAL_GPIO_Init+0x26a>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e01d      	b.n	8002f36 <HAL_GPIO_Init+0x26a>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e01b      	b.n	8002f36 <HAL_GPIO_Init+0x26a>
 8002efe:	bf00      	nop
 8002f00:	58000080 	.word	0x58000080
 8002f04:	58024400 	.word	0x58024400
 8002f08:	58000400 	.word	0x58000400
 8002f0c:	58020000 	.word	0x58020000
 8002f10:	58020400 	.word	0x58020400
 8002f14:	58020800 	.word	0x58020800
 8002f18:	58020c00 	.word	0x58020c00
 8002f1c:	58021000 	.word	0x58021000
 8002f20:	58021400 	.word	0x58021400
 8002f24:	58021800 	.word	0x58021800
 8002f28:	58021c00 	.word	0x58021c00
 8002f2c:	58022000 	.word	0x58022000
 8002f30:	58022400 	.word	0x58022400
 8002f34:	2300      	movs	r3, #0
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	f002 0203 	and.w	r2, r2, #3
 8002f3c:	0092      	lsls	r2, r2, #2
 8002f3e:	4093      	lsls	r3, r2
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f46:	4938      	ldr	r1, [pc, #224]	; (8003028 <HAL_GPIO_Init+0x35c>)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	3301      	adds	r3, #1
 8003008:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	fa22 f303 	lsr.w	r3, r2, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	f47f ae63 	bne.w	8002ce0 <HAL_GPIO_Init+0x14>
  }
}
 800301a:	bf00      	nop
 800301c:	bf00      	nop
 800301e:	3724      	adds	r7, #36	; 0x24
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	58000400 	.word	0x58000400

0800302c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
 8003038:	4613      	mov	r3, r2
 800303a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800303c:	787b      	ldrb	r3, [r7, #1]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003048:	e003      	b.n	8003052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800304a:	887b      	ldrh	r3, [r7, #2]
 800304c:	041a      	lsls	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	619a      	str	r2, [r3, #24]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003068:	4b29      	ldr	r3, [pc, #164]	; (8003110 <HAL_PWREx_ConfigSupply+0xb0>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	2b06      	cmp	r3, #6
 8003072:	d00a      	beq.n	800308a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003074:	4b26      	ldr	r3, [pc, #152]	; (8003110 <HAL_PWREx_ConfigSupply+0xb0>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	429a      	cmp	r2, r3
 8003080:	d001      	beq.n	8003086 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e040      	b.n	8003108 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e03e      	b.n	8003108 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800308a:	4b21      	ldr	r3, [pc, #132]	; (8003110 <HAL_PWREx_ConfigSupply+0xb0>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003092:	491f      	ldr	r1, [pc, #124]	; (8003110 <HAL_PWREx_ConfigSupply+0xb0>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4313      	orrs	r3, r2
 8003098:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800309a:	f7fe fb35 	bl	8001708 <HAL_GetTick>
 800309e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030a0:	e009      	b.n	80030b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030a2:	f7fe fb31 	bl	8001708 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030b0:	d901      	bls.n	80030b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e028      	b.n	8003108 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030b6:	4b16      	ldr	r3, [pc, #88]	; (8003110 <HAL_PWREx_ConfigSupply+0xb0>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c2:	d1ee      	bne.n	80030a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b1e      	cmp	r3, #30
 80030c8:	d008      	beq.n	80030dc <HAL_PWREx_ConfigSupply+0x7c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b2e      	cmp	r3, #46	; 0x2e
 80030ce:	d005      	beq.n	80030dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b1d      	cmp	r3, #29
 80030d4:	d002      	beq.n	80030dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b2d      	cmp	r3, #45	; 0x2d
 80030da:	d114      	bne.n	8003106 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80030dc:	f7fe fb14 	bl	8001708 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80030e2:	e009      	b.n	80030f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030e4:	f7fe fb10 	bl	8001708 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f2:	d901      	bls.n	80030f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e007      	b.n	8003108 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <HAL_PWREx_ConfigSupply+0xb0>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d1ee      	bne.n	80030e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	58024800 	.word	0x58024800

08003114 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08c      	sub	sp, #48	; 0x30
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f000 bc1f 	b.w	8003966 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80b3 	beq.w	800329c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003136:	4b95      	ldr	r3, [pc, #596]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003140:	4b92      	ldr	r3, [pc, #584]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003148:	2b10      	cmp	r3, #16
 800314a:	d007      	beq.n	800315c <HAL_RCC_OscConfig+0x48>
 800314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314e:	2b18      	cmp	r3, #24
 8003150:	d112      	bne.n	8003178 <HAL_RCC_OscConfig+0x64>
 8003152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d10d      	bne.n	8003178 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315c:	4b8b      	ldr	r3, [pc, #556]	; (800338c <HAL_RCC_OscConfig+0x278>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8098 	beq.w	800329a <HAL_RCC_OscConfig+0x186>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 8093 	bne.w	800329a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e3f6      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003180:	d106      	bne.n	8003190 <HAL_RCC_OscConfig+0x7c>
 8003182:	4b82      	ldr	r3, [pc, #520]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a81      	ldr	r2, [pc, #516]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e058      	b.n	8003242 <HAL_RCC_OscConfig+0x12e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d112      	bne.n	80031be <HAL_RCC_OscConfig+0xaa>
 8003198:	4b7c      	ldr	r3, [pc, #496]	; (800338c <HAL_RCC_OscConfig+0x278>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a7b      	ldr	r2, [pc, #492]	; (800338c <HAL_RCC_OscConfig+0x278>)
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b79      	ldr	r3, [pc, #484]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a78      	ldr	r2, [pc, #480]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80031aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b76      	ldr	r3, [pc, #472]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a75      	ldr	r2, [pc, #468]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	e041      	b.n	8003242 <HAL_RCC_OscConfig+0x12e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c6:	d112      	bne.n	80031ee <HAL_RCC_OscConfig+0xda>
 80031c8:	4b70      	ldr	r3, [pc, #448]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a6f      	ldr	r2, [pc, #444]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80031ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4b6d      	ldr	r3, [pc, #436]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a6c      	ldr	r2, [pc, #432]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80031da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b6a      	ldr	r3, [pc, #424]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a69      	ldr	r2, [pc, #420]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	e029      	b.n	8003242 <HAL_RCC_OscConfig+0x12e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80031f6:	d112      	bne.n	800321e <HAL_RCC_OscConfig+0x10a>
 80031f8:	4b64      	ldr	r3, [pc, #400]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a63      	ldr	r2, [pc, #396]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80031fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b61      	ldr	r3, [pc, #388]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a60      	ldr	r2, [pc, #384]	; (800338c <HAL_RCC_OscConfig+0x278>)
 800320a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b5e      	ldr	r3, [pc, #376]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a5d      	ldr	r2, [pc, #372]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	e011      	b.n	8003242 <HAL_RCC_OscConfig+0x12e>
 800321e:	4b5b      	ldr	r3, [pc, #364]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a5a      	ldr	r2, [pc, #360]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b58      	ldr	r3, [pc, #352]	; (800338c <HAL_RCC_OscConfig+0x278>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a57      	ldr	r2, [pc, #348]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b55      	ldr	r3, [pc, #340]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a54      	ldr	r2, [pc, #336]	; (800338c <HAL_RCC_OscConfig+0x278>)
 800323c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003240:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d013      	beq.n	8003272 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fe fa5d 	bl	8001708 <HAL_GetTick>
 800324e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003252:	f7fe fa59 	bl	8001708 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b64      	cmp	r3, #100	; 0x64
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e380      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003264:	4b49      	ldr	r3, [pc, #292]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x13e>
 8003270:	e014      	b.n	800329c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fe fa49 	bl	8001708 <HAL_GetTick>
 8003276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327a:	f7fe fa45 	bl	8001708 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b64      	cmp	r3, #100	; 0x64
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e36c      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800328c:	4b3f      	ldr	r3, [pc, #252]	; (800338c <HAL_RCC_OscConfig+0x278>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x166>
 8003298:	e000      	b.n	800329c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 808c 	beq.w	80033c2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032aa:	4b38      	ldr	r3, [pc, #224]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032b4:	4b35      	ldr	r3, [pc, #212]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <HAL_RCC_OscConfig+0x1bc>
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	2b18      	cmp	r3, #24
 80032c4:	d137      	bne.n	8003336 <HAL_RCC_OscConfig+0x222>
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d132      	bne.n	8003336 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d0:	4b2e      	ldr	r3, [pc, #184]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_OscConfig+0x1d4>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e33e      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032e8:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f023 0219 	bic.w	r2, r3, #25
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4925      	ldr	r1, [pc, #148]	; (800338c <HAL_RCC_OscConfig+0x278>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fe fa05 	bl	8001708 <HAL_GetTick>
 80032fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003302:	f7fe fa01 	bl	8001708 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e328      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003320:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	4917      	ldr	r1, [pc, #92]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003334:	e045      	b.n	80033c2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d028      	beq.n	8003390 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 0219 	bic.w	r2, r3, #25
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4910      	ldr	r1, [pc, #64]	; (800338c <HAL_RCC_OscConfig+0x278>)
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe f9da 	bl	8001708 <HAL_GetTick>
 8003354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003358:	f7fe f9d6 	bl	8001708 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e2fd      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <HAL_RCC_OscConfig+0x278>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	4901      	ldr	r1, [pc, #4]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]
 800338a:	e01a      	b.n	80033c2 <HAL_RCC_OscConfig+0x2ae>
 800338c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003390:	4b97      	ldr	r3, [pc, #604]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a96      	ldr	r2, [pc, #600]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe f9b4 	bl	8001708 <HAL_GetTick>
 80033a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a4:	f7fe f9b0 	bl	8001708 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e2d7      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033b6:	4b8e      	ldr	r3, [pc, #568]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d06a      	beq.n	80034a4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ce:	4b88      	ldr	r3, [pc, #544]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033d8:	4b85      	ldr	r3, [pc, #532]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d007      	beq.n	80033f4 <HAL_RCC_OscConfig+0x2e0>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b18      	cmp	r3, #24
 80033e8:	d11b      	bne.n	8003422 <HAL_RCC_OscConfig+0x30e>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d116      	bne.n	8003422 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033f4:	4b7e      	ldr	r3, [pc, #504]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_OscConfig+0x2f8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	2b80      	cmp	r3, #128	; 0x80
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e2ac      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800340c:	4b78      	ldr	r3, [pc, #480]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	061b      	lsls	r3, r3, #24
 800341a:	4975      	ldr	r1, [pc, #468]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800341c:	4313      	orrs	r3, r2
 800341e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003420:	e040      	b.n	80034a4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d023      	beq.n	8003472 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800342a:	4b71      	ldr	r3, [pc, #452]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a70      	ldr	r2, [pc, #448]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fe f967 	bl	8001708 <HAL_GetTick>
 800343a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800343e:	f7fe f963 	bl	8001708 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e28a      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003450:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800345c:	4b64      	ldr	r3, [pc, #400]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	4961      	ldr	r1, [pc, #388]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800346c:	4313      	orrs	r3, r2
 800346e:	60cb      	str	r3, [r1, #12]
 8003470:	e018      	b.n	80034a4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003472:	4b5f      	ldr	r3, [pc, #380]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a5e      	ldr	r2, [pc, #376]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800347c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe f943 	bl	8001708 <HAL_GetTick>
 8003482:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003486:	f7fe f93f 	bl	8001708 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e266      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003498:	4b55      	ldr	r3, [pc, #340]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f0      	bne.n	8003486 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d036      	beq.n	800351e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d019      	beq.n	80034ec <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b8:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80034ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034bc:	4a4c      	ldr	r2, [pc, #304]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7fe f920 	bl	8001708 <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034cc:	f7fe f91c 	bl	8001708 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e243      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034de:	4b44      	ldr	r3, [pc, #272]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80034e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x3b8>
 80034ea:	e018      	b.n	800351e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ec:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80034ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f0:	4a3f      	ldr	r2, [pc, #252]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fe f906 	bl	8001708 <HAL_GetTick>
 80034fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003500:	f7fe f902 	bl	8001708 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e229      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003512:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d036      	beq.n	8003598 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d019      	beq.n	8003566 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003532:	4b2f      	ldr	r3, [pc, #188]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2e      	ldr	r2, [pc, #184]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003538:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800353c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800353e:	f7fe f8e3 	bl	8001708 <HAL_GetTick>
 8003542:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003546:	f7fe f8df 	bl	8001708 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e206      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x432>
 8003564:	e018      	b.n	8003598 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003566:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a21      	ldr	r2, [pc, #132]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800356c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003570:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003572:	f7fe f8c9 	bl	8001708 <HAL_GetTick>
 8003576:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800357a:	f7fe f8c5 	bl	8001708 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e1ec      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80af 	beq.w	8003704 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_RCC_OscConfig+0x4e0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <HAL_RCC_OscConfig+0x4e0>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035b2:	f7fe f8a9 	bl	8001708 <HAL_GetTick>
 80035b6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ba:	f7fe f8a5 	bl	8001708 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b64      	cmp	r3, #100	; 0x64
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e1cc      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_OscConfig+0x4e0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d10b      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4e4>
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	4a02      	ldr	r2, [pc, #8]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6713      	str	r3, [r2, #112]	; 0x70
 80035ec:	e05b      	b.n	80036a6 <HAL_RCC_OscConfig+0x592>
 80035ee:	bf00      	nop
 80035f0:	58024400 	.word	0x58024400
 80035f4:	58024800 	.word	0x58024800
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d112      	bne.n	8003626 <HAL_RCC_OscConfig+0x512>
 8003600:	4b9d      	ldr	r3, [pc, #628]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	4a9c      	ldr	r2, [pc, #624]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	6713      	str	r3, [r2, #112]	; 0x70
 800360c:	4b9a      	ldr	r3, [pc, #616]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a99      	ldr	r2, [pc, #612]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
 8003618:	4b97      	ldr	r3, [pc, #604]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a96      	ldr	r2, [pc, #600]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800361e:	f023 0304 	bic.w	r3, r3, #4
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	e03f      	b.n	80036a6 <HAL_RCC_OscConfig+0x592>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b05      	cmp	r3, #5
 800362c:	d112      	bne.n	8003654 <HAL_RCC_OscConfig+0x540>
 800362e:	4b92      	ldr	r3, [pc, #584]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4a91      	ldr	r2, [pc, #580]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003634:	f043 0304 	orr.w	r3, r3, #4
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
 800363a:	4b8f      	ldr	r3, [pc, #572]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	4a8e      	ldr	r2, [pc, #568]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003644:	6713      	str	r3, [r2, #112]	; 0x70
 8003646:	4b8c      	ldr	r3, [pc, #560]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	4a8b      	ldr	r2, [pc, #556]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6713      	str	r3, [r2, #112]	; 0x70
 8003652:	e028      	b.n	80036a6 <HAL_RCC_OscConfig+0x592>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b85      	cmp	r3, #133	; 0x85
 800365a:	d112      	bne.n	8003682 <HAL_RCC_OscConfig+0x56e>
 800365c:	4b86      	ldr	r3, [pc, #536]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a85      	ldr	r2, [pc, #532]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003662:	f043 0304 	orr.w	r3, r3, #4
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
 8003668:	4b83      	ldr	r3, [pc, #524]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a82      	ldr	r2, [pc, #520]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800366e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
 8003674:	4b80      	ldr	r3, [pc, #512]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	4a7f      	ldr	r2, [pc, #508]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6713      	str	r3, [r2, #112]	; 0x70
 8003680:	e011      	b.n	80036a6 <HAL_RCC_OscConfig+0x592>
 8003682:	4b7d      	ldr	r3, [pc, #500]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	4a7c      	ldr	r2, [pc, #496]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	6713      	str	r3, [r2, #112]	; 0x70
 800368e:	4b7a      	ldr	r3, [pc, #488]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003692:	4a79      	ldr	r2, [pc, #484]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003694:	f023 0304 	bic.w	r3, r3, #4
 8003698:	6713      	str	r3, [r2, #112]	; 0x70
 800369a:	4b77      	ldr	r3, [pc, #476]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a76      	ldr	r2, [pc, #472]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80036a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d015      	beq.n	80036da <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ae:	f7fe f82b 	bl	8001708 <HAL_GetTick>
 80036b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036b4:	e00a      	b.n	80036cc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b6:	f7fe f827 	bl	8001708 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e14c      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036cc:	4b6a      	ldr	r3, [pc, #424]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ee      	beq.n	80036b6 <HAL_RCC_OscConfig+0x5a2>
 80036d8:	e014      	b.n	8003704 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fe f815 	bl	8001708 <HAL_GetTick>
 80036de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fe f811 	bl	8001708 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e136      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036f8:	4b5f      	ldr	r3, [pc, #380]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1ee      	bne.n	80036e2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 812b 	beq.w	8003964 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800370e:	4b5a      	ldr	r3, [pc, #360]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003716:	2b18      	cmp	r3, #24
 8003718:	f000 80bb 	beq.w	8003892 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	2b02      	cmp	r3, #2
 8003722:	f040 8095 	bne.w	8003850 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b54      	ldr	r3, [pc, #336]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a53      	ldr	r2, [pc, #332]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800372c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003732:	f7fd ffe9 	bl	8001708 <HAL_GetTick>
 8003736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7fd ffe5 	bl	8001708 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e10c      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800374c:	4b4a      	ldr	r3, [pc, #296]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003758:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800375a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375c:	4b47      	ldr	r3, [pc, #284]	; (800387c <HAL_RCC_OscConfig+0x768>)
 800375e:	4013      	ands	r3, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003768:	0112      	lsls	r2, r2, #4
 800376a:	430a      	orrs	r2, r1
 800376c:	4942      	ldr	r1, [pc, #264]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800376e:	4313      	orrs	r3, r2
 8003770:	628b      	str	r3, [r1, #40]	; 0x28
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	3b01      	subs	r3, #1
 8003778:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003780:	3b01      	subs	r3, #1
 8003782:	025b      	lsls	r3, r3, #9
 8003784:	b29b      	uxth	r3, r3
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	3b01      	subs	r3, #1
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	3b01      	subs	r3, #1
 800379c:	061b      	lsls	r3, r3, #24
 800379e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037a2:	4935      	ldr	r1, [pc, #212]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80037a8:	4b33      	ldr	r3, [pc, #204]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	4a32      	ldr	r2, [pc, #200]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80037ae:	f023 0301 	bic.w	r3, r3, #1
 80037b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037b4:	4b30      	ldr	r3, [pc, #192]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80037b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b8:	4b31      	ldr	r3, [pc, #196]	; (8003880 <HAL_RCC_OscConfig+0x76c>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037c0:	00d2      	lsls	r2, r2, #3
 80037c2:	492d      	ldr	r1, [pc, #180]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037c8:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	f023 020c 	bic.w	r2, r3, #12
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	4928      	ldr	r1, [pc, #160]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037da:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	f023 0202 	bic.w	r2, r3, #2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	4924      	ldr	r1, [pc, #144]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037ec:	4b22      	ldr	r3, [pc, #136]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	4a21      	ldr	r2, [pc, #132]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80037f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f8:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	4a1e      	ldr	r2, [pc, #120]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 80037fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003804:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800380a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800380e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	4a18      	ldr	r2, [pc, #96]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800381c:	4b16      	ldr	r3, [pc, #88]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a15      	ldr	r2, [pc, #84]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fd ff6e 	bl	8001708 <HAL_GetTick>
 800382c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fd ff6a 	bl	8001708 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e091      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x71c>
 800384e:	e089      	b.n	8003964 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a08      	ldr	r2, [pc, #32]	; (8003878 <HAL_RCC_OscConfig+0x764>)
 8003856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800385a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fd ff54 	bl	8001708 <HAL_GetTick>
 8003860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003862:	e00f      	b.n	8003884 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003864:	f7fd ff50 	bl	8001708 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d908      	bls.n	8003884 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e077      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
 8003876:	bf00      	nop
 8003878:	58024400 	.word	0x58024400
 800387c:	fffffc0c 	.word	0xfffffc0c
 8003880:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003884:	4b3a      	ldr	r3, [pc, #232]	; (8003970 <HAL_RCC_OscConfig+0x85c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e9      	bne.n	8003864 <HAL_RCC_OscConfig+0x750>
 8003890:	e068      	b.n	8003964 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003892:	4b37      	ldr	r3, [pc, #220]	; (8003970 <HAL_RCC_OscConfig+0x85c>)
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003898:	4b35      	ldr	r3, [pc, #212]	; (8003970 <HAL_RCC_OscConfig+0x85c>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d031      	beq.n	800390a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f003 0203 	and.w	r2, r3, #3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d12a      	bne.n	800390a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d122      	bne.n	800390a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d11a      	bne.n	800390a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	0a5b      	lsrs	r3, r3, #9
 80038d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d111      	bne.n	800390a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d108      	bne.n	800390a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	0e1b      	lsrs	r3, r3, #24
 80038fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003904:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d001      	beq.n	800390e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e02b      	b.n	8003966 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <HAL_RCC_OscConfig+0x85c>)
 8003910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003912:	08db      	lsrs	r3, r3, #3
 8003914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003918:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	429a      	cmp	r2, r3
 8003922:	d01f      	beq.n	8003964 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_RCC_OscConfig+0x85c>)
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	4a11      	ldr	r2, [pc, #68]	; (8003970 <HAL_RCC_OscConfig+0x85c>)
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003930:	f7fd feea 	bl	8001708 <HAL_GetTick>
 8003934:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003936:	bf00      	nop
 8003938:	f7fd fee6 	bl	8001708 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	4293      	cmp	r3, r2
 8003942:	d0f9      	beq.n	8003938 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <HAL_RCC_OscConfig+0x85c>)
 8003946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <HAL_RCC_OscConfig+0x860>)
 800394a:	4013      	ands	r3, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003950:	00d2      	lsls	r2, r2, #3
 8003952:	4907      	ldr	r1, [pc, #28]	; (8003970 <HAL_RCC_OscConfig+0x85c>)
 8003954:	4313      	orrs	r3, r2
 8003956:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_RCC_OscConfig+0x85c>)
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	4a04      	ldr	r2, [pc, #16]	; (8003970 <HAL_RCC_OscConfig+0x85c>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3730      	adds	r7, #48	; 0x30
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	58024400 	.word	0x58024400
 8003974:	ffff0007 	.word	0xffff0007

08003978 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e19c      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800398c:	4b8a      	ldr	r3, [pc, #552]	; (8003bb8 <HAL_RCC_ClockConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d910      	bls.n	80039bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b87      	ldr	r3, [pc, #540]	; (8003bb8 <HAL_RCC_ClockConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 020f 	bic.w	r2, r3, #15
 80039a2:	4985      	ldr	r1, [pc, #532]	; (8003bb8 <HAL_RCC_ClockConfig+0x240>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b83      	ldr	r3, [pc, #524]	; (8003bb8 <HAL_RCC_ClockConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e184      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d010      	beq.n	80039ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	4b7b      	ldr	r3, [pc, #492]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d908      	bls.n	80039ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039d8:	4b78      	ldr	r3, [pc, #480]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	4975      	ldr	r1, [pc, #468]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d010      	beq.n	8003a18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	4b70      	ldr	r3, [pc, #448]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d908      	bls.n	8003a18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a06:	4b6d      	ldr	r3, [pc, #436]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	496a      	ldr	r1, [pc, #424]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d010      	beq.n	8003a46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	4b64      	ldr	r3, [pc, #400]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d908      	bls.n	8003a46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a34:	4b61      	ldr	r3, [pc, #388]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	495e      	ldr	r1, [pc, #376]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d010      	beq.n	8003a74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	4b59      	ldr	r3, [pc, #356]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d908      	bls.n	8003a74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a62:	4b56      	ldr	r3, [pc, #344]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	4953      	ldr	r1, [pc, #332]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d010      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	4b4d      	ldr	r3, [pc, #308]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d908      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a90:	4b4a      	ldr	r3, [pc, #296]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f023 020f 	bic.w	r2, r3, #15
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4947      	ldr	r1, [pc, #284]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d055      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003aae:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	4940      	ldr	r1, [pc, #256]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d107      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ac8:	4b3c      	ldr	r3, [pc, #240]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d121      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0f6      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d107      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ae0:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d115      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0ea      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003af8:	4b30      	ldr	r3, [pc, #192]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d109      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0de      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b08:	4b2c      	ldr	r3, [pc, #176]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0d6      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b18:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f023 0207 	bic.w	r2, r3, #7
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4925      	ldr	r1, [pc, #148]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b2a:	f7fd fded 	bl	8001708 <HAL_GetTick>
 8003b2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b32:	f7fd fde9 	bl	8001708 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e0be      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b48:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d1eb      	bne.n	8003b32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d010      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d208      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f023 020f 	bic.w	r2, r3, #15
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	490e      	ldr	r1, [pc, #56]	; (8003bbc <HAL_RCC_ClockConfig+0x244>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_ClockConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d214      	bcs.n	8003bc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <HAL_RCC_ClockConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 020f 	bic.w	r2, r3, #15
 8003b9e:	4906      	ldr	r1, [pc, #24]	; (8003bb8 <HAL_RCC_ClockConfig+0x240>)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <HAL_RCC_ClockConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e086      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x34e>
 8003bb8:	52002000 	.word	0x52002000
 8003bbc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d208      	bcs.n	8003bee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bdc:	4b3c      	ldr	r3, [pc, #240]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	4939      	ldr	r1, [pc, #228]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d010      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	4b34      	ldr	r3, [pc, #208]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d208      	bcs.n	8003c1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c0a:	4b31      	ldr	r3, [pc, #196]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	492e      	ldr	r1, [pc, #184]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d010      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699a      	ldr	r2, [r3, #24]
 8003c2c:	4b28      	ldr	r3, [pc, #160]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d208      	bcs.n	8003c4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c38:	4b25      	ldr	r3, [pc, #148]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	4922      	ldr	r1, [pc, #136]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d010      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69da      	ldr	r2, [r3, #28]
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d208      	bcs.n	8003c78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c66:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	4917      	ldr	r1, [pc, #92]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003c78:	f000 f834 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	0a1b      	lsrs	r3, r3, #8
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	4912      	ldr	r1, [pc, #72]	; (8003cd4 <HAL_RCC_ClockConfig+0x35c>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
 8003c94:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003c96:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <HAL_RCC_ClockConfig+0x358>)
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	4a0d      	ldr	r2, [pc, #52]	; (8003cd4 <HAL_RCC_ClockConfig+0x35c>)
 8003ca0:	5cd3      	ldrb	r3, [r2, r3]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cac:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <HAL_RCC_ClockConfig+0x360>)
 8003cae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cb0:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <HAL_RCC_ClockConfig+0x364>)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003cb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <HAL_RCC_ClockConfig+0x368>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fd fcda 	bl	8001674 <HAL_InitTick>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	58024400 	.word	0x58024400
 8003cd4:	08008eb0 	.word	0x08008eb0
 8003cd8:	24000004 	.word	0x24000004
 8003cdc:	24000000 	.word	0x24000000
 8003ce0:	24000008 	.word	0x24000008

08003ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cea:	4bb3      	ldr	r3, [pc, #716]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cf2:	2b18      	cmp	r3, #24
 8003cf4:	f200 8155 	bhi.w	8003fa2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d65 	.word	0x08003d65
 8003d04:	08003fa3 	.word	0x08003fa3
 8003d08:	08003fa3 	.word	0x08003fa3
 8003d0c:	08003fa3 	.word	0x08003fa3
 8003d10:	08003fa3 	.word	0x08003fa3
 8003d14:	08003fa3 	.word	0x08003fa3
 8003d18:	08003fa3 	.word	0x08003fa3
 8003d1c:	08003fa3 	.word	0x08003fa3
 8003d20:	08003d8b 	.word	0x08003d8b
 8003d24:	08003fa3 	.word	0x08003fa3
 8003d28:	08003fa3 	.word	0x08003fa3
 8003d2c:	08003fa3 	.word	0x08003fa3
 8003d30:	08003fa3 	.word	0x08003fa3
 8003d34:	08003fa3 	.word	0x08003fa3
 8003d38:	08003fa3 	.word	0x08003fa3
 8003d3c:	08003fa3 	.word	0x08003fa3
 8003d40:	08003d91 	.word	0x08003d91
 8003d44:	08003fa3 	.word	0x08003fa3
 8003d48:	08003fa3 	.word	0x08003fa3
 8003d4c:	08003fa3 	.word	0x08003fa3
 8003d50:	08003fa3 	.word	0x08003fa3
 8003d54:	08003fa3 	.word	0x08003fa3
 8003d58:	08003fa3 	.word	0x08003fa3
 8003d5c:	08003fa3 	.word	0x08003fa3
 8003d60:	08003d97 	.word	0x08003d97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d64:	4b94      	ldr	r3, [pc, #592]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d009      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d70:	4b91      	ldr	r3, [pc, #580]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	08db      	lsrs	r3, r3, #3
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	4a90      	ldr	r2, [pc, #576]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003d82:	e111      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d84:	4b8d      	ldr	r3, [pc, #564]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d86:	61bb      	str	r3, [r7, #24]
      break;
 8003d88:	e10e      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003d8a:	4b8d      	ldr	r3, [pc, #564]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d8c:	61bb      	str	r3, [r7, #24]
      break;
 8003d8e:	e10b      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003d90:	4b8c      	ldr	r3, [pc, #560]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d92:	61bb      	str	r3, [r7, #24]
      break;
 8003d94:	e108      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d96:	4b88      	ldr	r3, [pc, #544]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003da0:	4b85      	ldr	r3, [pc, #532]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003daa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003dac:	4b82      	ldr	r3, [pc, #520]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003db6:	4b80      	ldr	r3, [pc, #512]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	08db      	lsrs	r3, r3, #3
 8003dbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80e1 	beq.w	8003f9c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	f000 8083 	beq.w	8003ee8 <HAL_RCC_GetSysClockFreq+0x204>
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	f200 80a1 	bhi.w	8003f2c <HAL_RCC_GetSysClockFreq+0x248>
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x114>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d056      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003df6:	e099      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003df8:	4b6f      	ldr	r3, [pc, #444]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d02d      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e04:	4b6c      	ldr	r3, [pc, #432]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	08db      	lsrs	r3, r3, #3
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	4a6b      	ldr	r2, [pc, #428]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
 8003e14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	ee07 3a90 	vmov	s15, r3
 8003e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2e:	4b62      	ldr	r3, [pc, #392]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e42:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003e5e:	e087      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003fcc <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e72:	4b51      	ldr	r3, [pc, #324]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e86:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ea2:	e065      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eae:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003fd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb6:	4b40      	ldr	r3, [pc, #256]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ee6:	e043      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003fd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efa:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f2a:	e021      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003fd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3e:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003f70:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	0a5b      	lsrs	r3, r3, #9
 8003f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	ee07 3a90 	vmov	s15, r3
 8003f84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f94:	ee17 3a90 	vmov	r3, s15
 8003f98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003f9a:	e005      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]
      break;
 8003fa0:	e002      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003fa2:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fa4:	61bb      	str	r3, [r7, #24]
      break;
 8003fa6:	bf00      	nop
  }

  return sysclockfreq;
 8003fa8:	69bb      	ldr	r3, [r7, #24]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3724      	adds	r7, #36	; 0x24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	58024400 	.word	0x58024400
 8003fbc:	03d09000 	.word	0x03d09000
 8003fc0:	003d0900 	.word	0x003d0900
 8003fc4:	007a1200 	.word	0x007a1200
 8003fc8:	46000000 	.word	0x46000000
 8003fcc:	4c742400 	.word	0x4c742400
 8003fd0:	4a742400 	.word	0x4a742400
 8003fd4:	4af42400 	.word	0x4af42400

08003fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003fde:	f7ff fe81 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	4b10      	ldr	r3, [pc, #64]	; (8004028 <HAL_RCC_GetHCLKFreq+0x50>)
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	0a1b      	lsrs	r3, r3, #8
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	490f      	ldr	r1, [pc, #60]	; (800402c <HAL_RCC_GetHCLKFreq+0x54>)
 8003ff0:	5ccb      	ldrb	r3, [r1, r3]
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	4a09      	ldr	r2, [pc, #36]	; (800402c <HAL_RCC_GetHCLKFreq+0x54>)
 8004006:	5cd3      	ldrb	r3, [r2, r3]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	fa22 f303 	lsr.w	r3, r2, r3
 8004012:	4a07      	ldr	r2, [pc, #28]	; (8004030 <HAL_RCC_GetHCLKFreq+0x58>)
 8004014:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004016:	4a07      	ldr	r2, [pc, #28]	; (8004034 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800401c:	4b04      	ldr	r3, [pc, #16]	; (8004030 <HAL_RCC_GetHCLKFreq+0x58>)
 800401e:	681b      	ldr	r3, [r3, #0]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	58024400 	.word	0x58024400
 800402c:	08008eb0 	.word	0x08008eb0
 8004030:	24000004 	.word	0x24000004
 8004034:	24000000 	.word	0x24000000

08004038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800403c:	f7ff ffcc 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	091b      	lsrs	r3, r3, #4
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4904      	ldr	r1, [pc, #16]	; (8004060 <HAL_RCC_GetPCLK1Freq+0x28>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004058:	4618      	mov	r0, r3
 800405a:	bd80      	pop	{r7, pc}
 800405c:	58024400 	.word	0x58024400
 8004060:	08008eb0 	.word	0x08008eb0

08004064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004068:	f7ff ffb6 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4904      	ldr	r1, [pc, #16]	; (800408c <HAL_RCC_GetPCLK2Freq+0x28>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd80      	pop	{r7, pc}
 8004088:	58024400 	.word	0x58024400
 800408c:	08008eb0 	.word	0x08008eb0

08004090 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004094:	b0c8      	sub	sp, #288	; 0x120
 8004096:	af00      	add	r7, sp, #0
 8004098:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800409c:	2300      	movs	r3, #0
 800409e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040a2:	2300      	movs	r3, #0
 80040a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80040b4:	2500      	movs	r5, #0
 80040b6:	ea54 0305 	orrs.w	r3, r4, r5
 80040ba:	d049      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80040bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040c6:	d02f      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80040c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040cc:	d828      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d2:	d01a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d8:	d822      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80040de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e2:	d007      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040e4:	e01c      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e6:	4ba7      	ldr	r3, [pc, #668]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	4aa6      	ldr	r2, [pc, #664]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040f2:	e01a      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f8:	3308      	adds	r3, #8
 80040fa:	2102      	movs	r1, #2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f002 fa6d 	bl	80065dc <RCCEx_PLL2_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004108:	e00f      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800410a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410e:	3328      	adds	r3, #40	; 0x28
 8004110:	2102      	movs	r1, #2
 8004112:	4618      	mov	r0, r3
 8004114:	f002 fb14 	bl	8006740 <RCCEx_PLL3_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800411e:	e004      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004126:	e000      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004132:	4b94      	ldr	r3, [pc, #592]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004136:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800413a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800413e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004140:	4a90      	ldr	r2, [pc, #576]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004142:	430b      	orrs	r3, r1
 8004144:	6513      	str	r3, [r2, #80]	; 0x50
 8004146:	e003      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800414c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800415c:	f04f 0900 	mov.w	r9, #0
 8004160:	ea58 0309 	orrs.w	r3, r8, r9
 8004164:	d047      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	2b04      	cmp	r3, #4
 800416e:	d82a      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	0800418d 	.word	0x0800418d
 800417c:	0800419b 	.word	0x0800419b
 8004180:	080041b1 	.word	0x080041b1
 8004184:	080041cf 	.word	0x080041cf
 8004188:	080041cf 	.word	0x080041cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418c:	4b7d      	ldr	r3, [pc, #500]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	4a7c      	ldr	r2, [pc, #496]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004198:	e01a      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800419a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419e:	3308      	adds	r3, #8
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f002 fa1a 	bl	80065dc <RCCEx_PLL2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041ae:	e00f      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b4:	3328      	adds	r3, #40	; 0x28
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f002 fac1 	bl	8006740 <RCCEx_PLL3_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041c4:	e004      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041cc:	e000      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80041ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041d8:	4b6a      	ldr	r3, [pc, #424]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041dc:	f023 0107 	bic.w	r1, r3, #7
 80041e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	4a67      	ldr	r2, [pc, #412]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6513      	str	r3, [r2, #80]	; 0x50
 80041ec:	e003      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80041f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004202:	f04f 0b00 	mov.w	fp, #0
 8004206:	ea5a 030b 	orrs.w	r3, sl, fp
 800420a:	d054      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800420c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004212:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004216:	d036      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004218:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800421c:	d82f      	bhi.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800421e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004222:	d032      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004228:	d829      	bhi.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800422a:	2bc0      	cmp	r3, #192	; 0xc0
 800422c:	d02f      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800422e:	2bc0      	cmp	r3, #192	; 0xc0
 8004230:	d825      	bhi.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d018      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d821      	bhi.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	d007      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004242:	e01c      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004244:	4b4f      	ldr	r3, [pc, #316]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	4a4e      	ldr	r2, [pc, #312]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800424a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800424e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004250:	e01e      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004256:	3308      	adds	r3, #8
 8004258:	2100      	movs	r1, #0
 800425a:	4618      	mov	r0, r3
 800425c:	f002 f9be 	bl	80065dc <RCCEx_PLL2_Config>
 8004260:	4603      	mov	r3, r0
 8004262:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004266:	e013      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800426c:	3328      	adds	r3, #40	; 0x28
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f002 fa65 	bl	8006740 <RCCEx_PLL3_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800427c:	e008      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004284:	e004      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004286:	bf00      	nop
 8004288:	e002      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800428a:	bf00      	nop
 800428c:	e000      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800428e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004290:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004298:	4b3a      	ldr	r3, [pc, #232]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800429a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80042a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a6:	4a37      	ldr	r2, [pc, #220]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6513      	str	r3, [r2, #80]	; 0x50
 80042ac:	e003      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80042b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80042c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80042c6:	2300      	movs	r3, #0
 80042c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80042cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80042d0:	460b      	mov	r3, r1
 80042d2:	4313      	orrs	r3, r2
 80042d4:	d05c      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80042d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042dc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80042e0:	d03b      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80042e2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80042e6:	d834      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80042e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ec:	d037      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80042ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f2:	d82e      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80042f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042f8:	d033      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80042fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042fe:	d828      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004304:	d01a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430a:	d822      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004314:	d007      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004316:	e01c      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004318:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	4a19      	ldr	r2, [pc, #100]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800431e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004322:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004324:	e01e      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432a:	3308      	adds	r3, #8
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f002 f954 	bl	80065dc <RCCEx_PLL2_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800433a:	e013      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800433c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004340:	3328      	adds	r3, #40	; 0x28
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f002 f9fb 	bl	8006740 <RCCEx_PLL3_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004350:	e008      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004358:	e004      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800435a:	bf00      	nop
 800435c:	e002      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004364:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10d      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800436e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004370:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437a:	4a02      	ldr	r2, [pc, #8]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800437c:	430b      	orrs	r3, r1
 800437e:	6513      	str	r3, [r2, #80]	; 0x50
 8004380:	e006      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004382:	bf00      	nop
 8004384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800438c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800439c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80043a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80043aa:	460b      	mov	r3, r1
 80043ac:	4313      	orrs	r3, r2
 80043ae:	d03a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80043b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b6:	2b30      	cmp	r3, #48	; 0x30
 80043b8:	d01f      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80043ba:	2b30      	cmp	r3, #48	; 0x30
 80043bc:	d819      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d00c      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d815      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d019      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80043ca:	2b10      	cmp	r3, #16
 80043cc:	d111      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ce:	4bae      	ldr	r3, [pc, #696]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	4aad      	ldr	r2, [pc, #692]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80043da:	e011      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e0:	3308      	adds	r3, #8
 80043e2:	2102      	movs	r1, #2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f002 f8f9 	bl	80065dc <RCCEx_PLL2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043f8:	e002      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80043fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004400:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004408:	4b9f      	ldr	r3, [pc, #636]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800440a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004416:	4a9c      	ldr	r2, [pc, #624]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004418:	430b      	orrs	r3, r1
 800441a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800441c:	e003      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004422:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004432:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004436:	2300      	movs	r3, #0
 8004438:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800443c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004440:	460b      	mov	r3, r1
 8004442:	4313      	orrs	r3, r2
 8004444:	d051      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800444a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800444c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004450:	d035      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004456:	d82e      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004458:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800445c:	d031      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800445e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004462:	d828      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004468:	d01a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446e:	d822      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004478:	d007      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800447a:	e01c      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447c:	4b82      	ldr	r3, [pc, #520]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	4a81      	ldr	r2, [pc, #516]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004486:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004488:	e01c      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800448a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800448e:	3308      	adds	r3, #8
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f002 f8a2 	bl	80065dc <RCCEx_PLL2_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800449e:	e011      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a4:	3328      	adds	r3, #40	; 0x28
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f002 f949 	bl	8006740 <RCCEx_PLL3_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044b4:	e006      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044bc:	e002      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80044be:	bf00      	nop
 80044c0:	e000      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80044c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044cc:	4b6e      	ldr	r3, [pc, #440]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80044d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044da:	4a6b      	ldr	r2, [pc, #428]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6513      	str	r3, [r2, #80]	; 0x50
 80044e0:	e003      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80044f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044fa:	2300      	movs	r3, #0
 80044fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004500:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004504:	460b      	mov	r3, r1
 8004506:	4313      	orrs	r3, r2
 8004508:	d053      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800450a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800450e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004514:	d033      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800451a:	d82c      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800451c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004520:	d02f      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004522:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004526:	d826      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004528:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800452c:	d02b      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800452e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004532:	d820      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004538:	d012      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800453a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800453e:	d81a      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004540:	2b00      	cmp	r3, #0
 8004542:	d022      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004548:	d115      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800454a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800454e:	3308      	adds	r3, #8
 8004550:	2101      	movs	r1, #1
 8004552:	4618      	mov	r0, r3
 8004554:	f002 f842 	bl	80065dc <RCCEx_PLL2_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800455e:	e015      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004564:	3328      	adds	r3, #40	; 0x28
 8004566:	2101      	movs	r1, #1
 8004568:	4618      	mov	r0, r3
 800456a:	f002 f8e9 	bl	8006740 <RCCEx_PLL3_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004574:	e00a      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800457c:	e006      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800457e:	bf00      	nop
 8004580:	e004      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004582:	bf00      	nop
 8004584:	e002      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800458a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004594:	4b3c      	ldr	r3, [pc, #240]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004598:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800459c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a2:	4a39      	ldr	r2, [pc, #228]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6513      	str	r3, [r2, #80]	; 0x50
 80045a8:	e003      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80045b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80045be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045c2:	2300      	movs	r3, #0
 80045c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4313      	orrs	r3, r2
 80045d0:	d060      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80045d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045da:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80045de:	d039      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80045e0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80045e4:	d832      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80045e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045ea:	d035      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80045ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f0:	d82c      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80045f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f6:	d031      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80045f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fc:	d826      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80045fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004602:	d02d      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004604:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004608:	d820      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800460a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800460e:	d012      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004614:	d81a      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d024      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800461a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800461e:	d115      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004624:	3308      	adds	r3, #8
 8004626:	2101      	movs	r1, #1
 8004628:	4618      	mov	r0, r3
 800462a:	f001 ffd7 	bl	80065dc <RCCEx_PLL2_Config>
 800462e:	4603      	mov	r3, r0
 8004630:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004634:	e017      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463a:	3328      	adds	r3, #40	; 0x28
 800463c:	2101      	movs	r1, #1
 800463e:	4618      	mov	r0, r3
 8004640:	f002 f87e 	bl	8006740 <RCCEx_PLL3_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800464a:	e00c      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004652:	e008      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004654:	bf00      	nop
 8004656:	e006      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004658:	bf00      	nop
 800465a:	e004      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800465c:	bf00      	nop
 800465e:	e002      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004666:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10e      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800467a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800467e:	4a02      	ldr	r2, [pc, #8]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004680:	430b      	orrs	r3, r1
 8004682:	6593      	str	r3, [r2, #88]	; 0x58
 8004684:	e006      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004686:	bf00      	nop
 8004688:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004690:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80046a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046a4:	2300      	movs	r3, #0
 80046a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80046aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046ae:	460b      	mov	r3, r1
 80046b0:	4313      	orrs	r3, r2
 80046b2:	d037      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80046b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046be:	d00e      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80046c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c4:	d816      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d018      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80046ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ce:	d111      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d0:	4bc4      	ldr	r3, [pc, #784]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4ac3      	ldr	r2, [pc, #780]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046dc:	e00f      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e2:	3308      	adds	r3, #8
 80046e4:	2101      	movs	r1, #1
 80046e6:	4618      	mov	r0, r3
 80046e8:	f001 ff78 	bl	80065dc <RCCEx_PLL2_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046f2:	e004      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046fa:	e000      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80046fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004706:	4bb7      	ldr	r3, [pc, #732]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800470e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004712:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004714:	4ab3      	ldr	r2, [pc, #716]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004716:	430b      	orrs	r3, r1
 8004718:	6513      	str	r3, [r2, #80]	; 0x50
 800471a:	e003      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004720:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004734:	2300      	movs	r3, #0
 8004736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800473a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800473e:	460b      	mov	r3, r1
 8004740:	4313      	orrs	r3, r2
 8004742:	d039      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474a:	2b03      	cmp	r3, #3
 800474c:	d81c      	bhi.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	08004791 	.word	0x08004791
 8004758:	08004765 	.word	0x08004765
 800475c:	08004773 	.word	0x08004773
 8004760:	08004791 	.word	0x08004791
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004764:	4b9f      	ldr	r3, [pc, #636]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	4a9e      	ldr	r2, [pc, #632]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800476a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800476e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004770:	e00f      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004776:	3308      	adds	r3, #8
 8004778:	2102      	movs	r1, #2
 800477a:	4618      	mov	r0, r3
 800477c:	f001 ff2e 	bl	80065dc <RCCEx_PLL2_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004786:	e004      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800478e:	e000      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004792:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800479a:	4b92      	ldr	r3, [pc, #584]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800479c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479e:	f023 0103 	bic.w	r1, r3, #3
 80047a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a8:	4a8e      	ldr	r2, [pc, #568]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047aa:	430b      	orrs	r3, r1
 80047ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047ae:	e003      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80047c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047c8:	2300      	movs	r3, #0
 80047ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80047d2:	460b      	mov	r3, r1
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f000 8099 	beq.w	800490c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047da:	4b83      	ldr	r3, [pc, #524]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a82      	ldr	r2, [pc, #520]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80047e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047e6:	f7fc ff8f 	bl	8001708 <HAL_GetTick>
 80047ea:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ee:	e00b      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f0:	f7fc ff8a 	bl	8001708 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b64      	cmp	r3, #100	; 0x64
 80047fe:	d903      	bls.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004806:	e005      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004808:	4b77      	ldr	r3, [pc, #476]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ed      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004814:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004818:	2b00      	cmp	r3, #0
 800481a:	d173      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800481c:	4b71      	ldr	r3, [pc, #452]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800481e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004824:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004828:	4053      	eors	r3, r2
 800482a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482e:	2b00      	cmp	r3, #0
 8004830:	d015      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004832:	4b6c      	ldr	r3, [pc, #432]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800483e:	4b69      	ldr	r3, [pc, #420]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	4a68      	ldr	r2, [pc, #416]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800484a:	4b66      	ldr	r3, [pc, #408]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	4a65      	ldr	r2, [pc, #404]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004854:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004856:	4a63      	ldr	r2, [pc, #396]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800485e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004862:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486a:	d118      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fc ff4c 	bl	8001708 <HAL_GetTick>
 8004870:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004874:	e00d      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004876:	f7fc ff47 	bl	8001708 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004880:	1ad2      	subs	r2, r2, r3
 8004882:	f241 3388 	movw	r3, #5000	; 0x1388
 8004886:	429a      	cmp	r2, r3
 8004888:	d903      	bls.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8004890:	e005      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004892:	4b54      	ldr	r3, [pc, #336]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0eb      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800489e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d129      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b6:	d10e      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80048b8:	4b4a      	ldr	r3, [pc, #296]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80048c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048c8:	091a      	lsrs	r2, r3, #4
 80048ca:	4b48      	ldr	r3, [pc, #288]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	4a45      	ldr	r2, [pc, #276]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6113      	str	r3, [r2, #16]
 80048d4:	e005      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80048d6:	4b43      	ldr	r3, [pc, #268]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	4a42      	ldr	r2, [pc, #264]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048e0:	6113      	str	r3, [r2, #16]
 80048e2:	4b40      	ldr	r3, [pc, #256]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80048e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f2:	4a3c      	ldr	r2, [pc, #240]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048f4:	430b      	orrs	r3, r1
 80048f6:	6713      	str	r3, [r2, #112]	; 0x70
 80048f8:	e008      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004902:	e003      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004904:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004908:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800490c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f002 0301 	and.w	r3, r2, #1
 8004918:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800491c:	2300      	movs	r3, #0
 800491e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004922:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004926:	460b      	mov	r3, r1
 8004928:	4313      	orrs	r3, r2
 800492a:	f000 8090 	beq.w	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800492e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004936:	2b28      	cmp	r3, #40	; 0x28
 8004938:	d870      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800493a:	a201      	add	r2, pc, #4	; (adr r2, 8004940 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004a25 	.word	0x08004a25
 8004944:	08004a1d 	.word	0x08004a1d
 8004948:	08004a1d 	.word	0x08004a1d
 800494c:	08004a1d 	.word	0x08004a1d
 8004950:	08004a1d 	.word	0x08004a1d
 8004954:	08004a1d 	.word	0x08004a1d
 8004958:	08004a1d 	.word	0x08004a1d
 800495c:	08004a1d 	.word	0x08004a1d
 8004960:	080049f1 	.word	0x080049f1
 8004964:	08004a1d 	.word	0x08004a1d
 8004968:	08004a1d 	.word	0x08004a1d
 800496c:	08004a1d 	.word	0x08004a1d
 8004970:	08004a1d 	.word	0x08004a1d
 8004974:	08004a1d 	.word	0x08004a1d
 8004978:	08004a1d 	.word	0x08004a1d
 800497c:	08004a1d 	.word	0x08004a1d
 8004980:	08004a07 	.word	0x08004a07
 8004984:	08004a1d 	.word	0x08004a1d
 8004988:	08004a1d 	.word	0x08004a1d
 800498c:	08004a1d 	.word	0x08004a1d
 8004990:	08004a1d 	.word	0x08004a1d
 8004994:	08004a1d 	.word	0x08004a1d
 8004998:	08004a1d 	.word	0x08004a1d
 800499c:	08004a1d 	.word	0x08004a1d
 80049a0:	08004a25 	.word	0x08004a25
 80049a4:	08004a1d 	.word	0x08004a1d
 80049a8:	08004a1d 	.word	0x08004a1d
 80049ac:	08004a1d 	.word	0x08004a1d
 80049b0:	08004a1d 	.word	0x08004a1d
 80049b4:	08004a1d 	.word	0x08004a1d
 80049b8:	08004a1d 	.word	0x08004a1d
 80049bc:	08004a1d 	.word	0x08004a1d
 80049c0:	08004a25 	.word	0x08004a25
 80049c4:	08004a1d 	.word	0x08004a1d
 80049c8:	08004a1d 	.word	0x08004a1d
 80049cc:	08004a1d 	.word	0x08004a1d
 80049d0:	08004a1d 	.word	0x08004a1d
 80049d4:	08004a1d 	.word	0x08004a1d
 80049d8:	08004a1d 	.word	0x08004a1d
 80049dc:	08004a1d 	.word	0x08004a1d
 80049e0:	08004a25 	.word	0x08004a25
 80049e4:	58024400 	.word	0x58024400
 80049e8:	58024800 	.word	0x58024800
 80049ec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f4:	3308      	adds	r3, #8
 80049f6:	2101      	movs	r1, #1
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 fdef 	bl	80065dc <RCCEx_PLL2_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a04:	e00f      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0a:	3328      	adds	r3, #40	; 0x28
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 fe96 	bl	8006740 <RCCEx_PLL3_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a1a:	e004      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a22:	e000      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a2e:	4bc0      	ldr	r3, [pc, #768]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a32:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3e:	4abc      	ldr	r2, [pc, #752]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6553      	str	r3, [r2, #84]	; 0x54
 8004a44:	e003      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f002 0302 	and.w	r3, r2, #2
 8004a5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a64:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	d043      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a76:	2b05      	cmp	r3, #5
 8004a78:	d824      	bhi.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004a7a:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004acd 	.word	0x08004acd
 8004a84:	08004a99 	.word	0x08004a99
 8004a88:	08004aaf 	.word	0x08004aaf
 8004a8c:	08004acd 	.word	0x08004acd
 8004a90:	08004acd 	.word	0x08004acd
 8004a94:	08004acd 	.word	0x08004acd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 fd9b 	bl	80065dc <RCCEx_PLL2_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004aac:	e00f      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab2:	3328      	adds	r3, #40	; 0x28
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f001 fe42 	bl	8006740 <RCCEx_PLL3_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004ac2:	e004      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004aca:	e000      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ace:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ad6:	4b96      	ldr	r3, [pc, #600]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	f023 0107 	bic.w	r1, r3, #7
 8004ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ae6:	4a92      	ldr	r2, [pc, #584]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6553      	str	r3, [r2, #84]	; 0x54
 8004aec:	e003      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004af2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f002 0304 	and.w	r3, r2, #4
 8004b02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b06:	2300      	movs	r3, #0
 8004b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b0c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4313      	orrs	r3, r2
 8004b14:	d043      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b1e:	2b05      	cmp	r3, #5
 8004b20:	d824      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004b22:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004b75 	.word	0x08004b75
 8004b2c:	08004b41 	.word	0x08004b41
 8004b30:	08004b57 	.word	0x08004b57
 8004b34:	08004b75 	.word	0x08004b75
 8004b38:	08004b75 	.word	0x08004b75
 8004b3c:	08004b75 	.word	0x08004b75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b44:	3308      	adds	r3, #8
 8004b46:	2101      	movs	r1, #1
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f001 fd47 	bl	80065dc <RCCEx_PLL2_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b54:	e00f      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b5a:	3328      	adds	r3, #40	; 0x28
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 fdee 	bl	8006740 <RCCEx_PLL3_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b6a:	e004      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b72:	e000      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10b      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b7e:	4b6c      	ldr	r3, [pc, #432]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b82:	f023 0107 	bic.w	r1, r3, #7
 8004b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b8e:	4a68      	ldr	r2, [pc, #416]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b90:	430b      	orrs	r3, r1
 8004b92:	6593      	str	r3, [r2, #88]	; 0x58
 8004b94:	e003      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba6:	f002 0320 	and.w	r3, r2, #32
 8004baa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	d055      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bca:	d033      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bd0:	d82c      	bhi.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd6:	d02f      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bdc:	d826      	bhi.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004bde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004be2:	d02b      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004be4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004be8:	d820      	bhi.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bee:	d012      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bf4:	d81a      	bhi.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d022      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bfe:	d115      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c04:	3308      	adds	r3, #8
 8004c06:	2100      	movs	r1, #0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 fce7 	bl	80065dc <RCCEx_PLL2_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c14:	e015      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c1a:	3328      	adds	r3, #40	; 0x28
 8004c1c:	2102      	movs	r1, #2
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f001 fd8e 	bl	8006740 <RCCEx_PLL3_Config>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c32:	e006      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004c34:	bf00      	nop
 8004c36:	e004      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004c38:	bf00      	nop
 8004c3a:	e002      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004c3c:	bf00      	nop
 8004c3e:	e000      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c4a:	4b39      	ldr	r3, [pc, #228]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c5a:	4a35      	ldr	r2, [pc, #212]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	6553      	str	r3, [r2, #84]	; 0x54
 8004c60:	e003      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4313      	orrs	r3, r2
 8004c88:	d058      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c96:	d033      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004c98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c9c:	d82c      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca2:	d02f      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca8:	d826      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004caa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cae:	d02b      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004cb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cb4:	d820      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cba:	d012      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc0:	d81a      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d022      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cca:	d115      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 fc81 	bl	80065dc <RCCEx_PLL2_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ce0:	e015      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce6:	3328      	adds	r3, #40	; 0x28
 8004ce8:	2102      	movs	r1, #2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f001 fd28 	bl	8006740 <RCCEx_PLL3_Config>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004cf6:	e00a      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004cfe:	e006      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d00:	bf00      	nop
 8004d02:	e004      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d04:	bf00      	nop
 8004d06:	e002      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d08:	bf00      	nop
 8004d0a:	e000      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10e      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d16:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d26:	4a02      	ldr	r2, [pc, #8]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d2c:	e006      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004d2e:	bf00      	nop
 8004d30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d52:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004d56:	460b      	mov	r3, r1
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	d055      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d64:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d68:	d033      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004d6a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d6e:	d82c      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d74:	d02f      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7a:	d826      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004d7c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d80:	d02b      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004d82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d86:	d820      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d8c:	d012      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004d8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d92:	d81a      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d022      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d9c:	d115      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da2:	3308      	adds	r3, #8
 8004da4:	2100      	movs	r1, #0
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 fc18 	bl	80065dc <RCCEx_PLL2_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004db2:	e015      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db8:	3328      	adds	r3, #40	; 0x28
 8004dba:	2102      	movs	r1, #2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 fcbf 	bl	8006740 <RCCEx_PLL3_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004dd0:	e006      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004dd2:	bf00      	nop
 8004dd4:	e004      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004dd6:	bf00      	nop
 8004dd8:	e002      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004dda:	bf00      	nop
 8004ddc:	e000      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004de8:	4ba1      	ldr	r3, [pc, #644]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004df8:	4a9d      	ldr	r2, [pc, #628]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8004dfe:	e003      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f002 0308 	and.w	r3, r2, #8
 8004e14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004e22:	460b      	mov	r3, r1
 8004e24:	4313      	orrs	r3, r2
 8004e26:	d01e      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e34:	d10c      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e3a:	3328      	adds	r3, #40	; 0x28
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 fc7e 	bl	8006740 <RCCEx_PLL3_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e50:	4b87      	ldr	r3, [pc, #540]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e60:	4a83      	ldr	r2, [pc, #524]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e62:	430b      	orrs	r3, r1
 8004e64:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f002 0310 	and.w	r3, r2, #16
 8004e72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e76:	2300      	movs	r3, #0
 8004e78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e7c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004e80:	460b      	mov	r3, r1
 8004e82:	4313      	orrs	r3, r2
 8004e84:	d01e      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e92:	d10c      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e98:	3328      	adds	r3, #40	; 0x28
 8004e9a:	2102      	movs	r1, #2
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 fc4f 	bl	8006740 <RCCEx_PLL3_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004eae:	4b70      	ldr	r3, [pc, #448]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ebe:	4a6c      	ldr	r2, [pc, #432]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004ed0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004eda:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	d03e      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef0:	d022      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004ef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef6:	d81b      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f00:	d00b      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004f02:	e015      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f08:	3308      	adds	r3, #8
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f001 fb65 	bl	80065dc <RCCEx_PLL2_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f18:	e00f      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f1e:	3328      	adds	r3, #40	; 0x28
 8004f20:	2102      	movs	r1, #2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f001 fc0c 	bl	8006740 <RCCEx_PLL3_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f2e:	e004      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004f36:	e000      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10b      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f42:	4b4b      	ldr	r3, [pc, #300]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f52:	4a47      	ldr	r2, [pc, #284]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f54:	430b      	orrs	r3, r1
 8004f56:	6593      	str	r3, [r2, #88]	; 0x58
 8004f58:	e003      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004f6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f70:	2300      	movs	r3, #0
 8004f72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	d03b      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f8a:	d01f      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004f8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f90:	d818      	bhi.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f96:	d003      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004f98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f9c:	d007      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004f9e:	e011      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa0:	4b33      	ldr	r3, [pc, #204]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	4a32      	ldr	r2, [pc, #200]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004faa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004fac:	e00f      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb2:	3328      	adds	r3, #40	; 0x28
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f001 fbc2 	bl	8006740 <RCCEx_PLL3_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004fc2:	e004      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004fca:	e000      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10b      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fd6:	4b26      	ldr	r3, [pc, #152]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	4a22      	ldr	r2, [pc, #136]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6553      	str	r3, [r2, #84]	; 0x54
 8004fec:	e003      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ff2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005002:	673b      	str	r3, [r7, #112]	; 0x70
 8005004:	2300      	movs	r3, #0
 8005006:	677b      	str	r3, [r7, #116]	; 0x74
 8005008:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800500c:	460b      	mov	r3, r1
 800500e:	4313      	orrs	r3, r2
 8005010:	d034      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800501c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005020:	d007      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005022:	e011      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005024:	4b12      	ldr	r3, [pc, #72]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	4a11      	ldr	r2, [pc, #68]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800502a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005030:	e00e      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005036:	3308      	adds	r3, #8
 8005038:	2102      	movs	r1, #2
 800503a:	4618      	mov	r0, r3
 800503c:	f001 face 	bl	80065dc <RCCEx_PLL2_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005046:	e003      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800504e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005050:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10d      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800505a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005066:	4a02      	ldr	r2, [pc, #8]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005068:	430b      	orrs	r3, r1
 800506a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800506c:	e006      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800506e:	bf00      	nop
 8005070:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005074:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005078:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800507c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005088:	66bb      	str	r3, [r7, #104]	; 0x68
 800508a:	2300      	movs	r3, #0
 800508c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800508e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005092:	460b      	mov	r3, r1
 8005094:	4313      	orrs	r3, r2
 8005096:	d00c      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800509c:	3328      	adds	r3, #40	; 0x28
 800509e:	2102      	movs	r1, #2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 fb4d 	bl	8006740 <RCCEx_PLL3_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80050b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80050be:	663b      	str	r3, [r7, #96]	; 0x60
 80050c0:	2300      	movs	r3, #0
 80050c2:	667b      	str	r3, [r7, #100]	; 0x64
 80050c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80050c8:	460b      	mov	r3, r1
 80050ca:	4313      	orrs	r3, r2
 80050cc:	d038      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80050ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050da:	d018      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80050dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e0:	d811      	bhi.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80050e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e6:	d014      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80050e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ec:	d80b      	bhi.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d011      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80050f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f6:	d106      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050f8:	4bc3      	ldr	r3, [pc, #780]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	4ac2      	ldr	r2, [pc, #776]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005104:	e008      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800510c:	e004      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800510e:	bf00      	nop
 8005110:	e002      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005112:	bf00      	nop
 8005114:	e000      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005118:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10b      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005120:	4bb9      	ldr	r3, [pc, #740]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005124:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800512c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005130:	4ab5      	ldr	r2, [pc, #724]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005132:	430b      	orrs	r3, r1
 8005134:	6553      	str	r3, [r2, #84]	; 0x54
 8005136:	e003      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005138:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800513c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005140:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800514c:	65bb      	str	r3, [r7, #88]	; 0x58
 800514e:	2300      	movs	r3, #0
 8005150:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005152:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005156:	460b      	mov	r3, r1
 8005158:	4313      	orrs	r3, r2
 800515a:	d009      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800515c:	4baa      	ldr	r3, [pc, #680]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800515e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005160:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800516a:	4aa7      	ldr	r2, [pc, #668]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800516c:	430b      	orrs	r3, r1
 800516e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800517c:	653b      	str	r3, [r7, #80]	; 0x50
 800517e:	2300      	movs	r3, #0
 8005180:	657b      	str	r3, [r7, #84]	; 0x54
 8005182:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005186:	460b      	mov	r3, r1
 8005188:	4313      	orrs	r3, r2
 800518a:	d009      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800518c:	4b9e      	ldr	r3, [pc, #632]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800518e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005190:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	4a9b      	ldr	r2, [pc, #620]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800519c:	430b      	orrs	r3, r1
 800519e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80051a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80051ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80051ae:	2300      	movs	r3, #0
 80051b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80051b6:	460b      	mov	r3, r1
 80051b8:	4313      	orrs	r3, r2
 80051ba:	d009      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80051bc:	4b92      	ldr	r3, [pc, #584]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80051c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ca:	4a8f      	ldr	r2, [pc, #572]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051cc:	430b      	orrs	r3, r1
 80051ce:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80051dc:	643b      	str	r3, [r7, #64]	; 0x40
 80051de:	2300      	movs	r3, #0
 80051e0:	647b      	str	r3, [r7, #68]	; 0x44
 80051e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80051e6:	460b      	mov	r3, r1
 80051e8:	4313      	orrs	r3, r2
 80051ea:	d00e      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051ec:	4b86      	ldr	r3, [pc, #536]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	4a85      	ldr	r2, [pc, #532]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051f6:	6113      	str	r3, [r2, #16]
 80051f8:	4b83      	ldr	r3, [pc, #524]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051fa:	6919      	ldr	r1, [r3, #16]
 80051fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005200:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005204:	4a80      	ldr	r2, [pc, #512]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005206:	430b      	orrs	r3, r1
 8005208:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800520a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005216:	63bb      	str	r3, [r7, #56]	; 0x38
 8005218:	2300      	movs	r3, #0
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800521c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005220:	460b      	mov	r3, r1
 8005222:	4313      	orrs	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005226:	4b78      	ldr	r3, [pc, #480]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800522e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005234:	4a74      	ldr	r2, [pc, #464]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005236:	430b      	orrs	r3, r1
 8005238:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800523a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005246:	633b      	str	r3, [r7, #48]	; 0x30
 8005248:	2300      	movs	r3, #0
 800524a:	637b      	str	r3, [r7, #52]	; 0x34
 800524c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005250:	460b      	mov	r3, r1
 8005252:	4313      	orrs	r3, r2
 8005254:	d00a      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005256:	4b6c      	ldr	r3, [pc, #432]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800525e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005266:	4a68      	ldr	r2, [pc, #416]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005268:	430b      	orrs	r3, r1
 800526a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800526c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	2100      	movs	r1, #0
 8005276:	62b9      	str	r1, [r7, #40]	; 0x28
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800527e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005282:	460b      	mov	r3, r1
 8005284:	4313      	orrs	r3, r2
 8005286:	d011      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800528c:	3308      	adds	r3, #8
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f001 f9a3 	bl	80065dc <RCCEx_PLL2_Config>
 8005296:	4603      	mov	r3, r0
 8005298:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800529c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80052ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	2100      	movs	r1, #0
 80052b6:	6239      	str	r1, [r7, #32]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
 80052be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80052c2:	460b      	mov	r3, r1
 80052c4:	4313      	orrs	r3, r2
 80052c6:	d011      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052cc:	3308      	adds	r3, #8
 80052ce:	2101      	movs	r1, #1
 80052d0:	4618      	mov	r0, r3
 80052d2:	f001 f983 	bl	80065dc <RCCEx_PLL2_Config>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80052dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80052ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	2100      	movs	r1, #0
 80052f6:	61b9      	str	r1, [r7, #24]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005302:	460b      	mov	r3, r1
 8005304:	4313      	orrs	r3, r2
 8005306:	d011      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800530c:	3308      	adds	r3, #8
 800530e:	2102      	movs	r1, #2
 8005310:	4618      	mov	r0, r3
 8005312:	f001 f963 	bl	80065dc <RCCEx_PLL2_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800531c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005324:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005328:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800532c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	2100      	movs	r1, #0
 8005336:	6139      	str	r1, [r7, #16]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005342:	460b      	mov	r3, r1
 8005344:	4313      	orrs	r3, r2
 8005346:	d011      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800534c:	3328      	adds	r3, #40	; 0x28
 800534e:	2100      	movs	r1, #0
 8005350:	4618      	mov	r0, r3
 8005352:	f001 f9f5 	bl	8006740 <RCCEx_PLL3_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800535c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005364:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005368:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800536c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	2100      	movs	r1, #0
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	f003 0310 	and.w	r3, r3, #16
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005382:	460b      	mov	r3, r1
 8005384:	4313      	orrs	r3, r2
 8005386:	d011      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800538c:	3328      	adds	r3, #40	; 0x28
 800538e:	2101      	movs	r1, #1
 8005390:	4618      	mov	r0, r3
 8005392:	f001 f9d5 	bl	8006740 <RCCEx_PLL3_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800539c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80053ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	2100      	movs	r1, #0
 80053b6:	6039      	str	r1, [r7, #0]
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	607b      	str	r3, [r7, #4]
 80053be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80053c2:	460b      	mov	r3, r1
 80053c4:	4313      	orrs	r3, r2
 80053c6:	d011      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053cc:	3328      	adds	r3, #40	; 0x28
 80053ce:	2102      	movs	r1, #2
 80053d0:	4618      	mov	r0, r3
 80053d2:	f001 f9b5 	bl	8006740 <RCCEx_PLL3_Config>
 80053d6:	4603      	mov	r3, r0
 80053d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80053dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80053ec:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	e000      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005400:	46bd      	mov	sp, r7
 8005402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005406:	bf00      	nop
 8005408:	58024400 	.word	0x58024400

0800540c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b090      	sub	sp, #64	; 0x40
 8005410:	af00      	add	r7, sp, #0
 8005412:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800541a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800541e:	430b      	orrs	r3, r1
 8005420:	f040 8094 	bne.w	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005424:	4b97      	ldr	r3, [pc, #604]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	2b04      	cmp	r3, #4
 8005432:	f200 8087 	bhi.w	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005436:	a201      	add	r2, pc, #4	; (adr r2, 800543c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543c:	08005451 	.word	0x08005451
 8005440:	08005479 	.word	0x08005479
 8005444:	080054a1 	.word	0x080054a1
 8005448:	0800553d 	.word	0x0800553d
 800544c:	080054c9 	.word	0x080054c9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005450:	4b8c      	ldr	r3, [pc, #560]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800545c:	d108      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800545e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005462:	4618      	mov	r0, r3
 8005464:	f000 ff68 	bl	8006338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800546c:	f000 bc97 	b.w	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005474:	f000 bc93 	b.w	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005478:	4b82      	ldr	r3, [pc, #520]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005484:	d108      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005486:	f107 0318 	add.w	r3, r7, #24
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fcac 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005494:	f000 bc83 	b.w	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800549c:	f000 bc7f 	b.w	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054a0:	4b78      	ldr	r3, [pc, #480]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ac:	d108      	bne.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054ae:	f107 030c 	add.w	r3, r7, #12
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fdec 	bl	8006090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054bc:	f000 bc6f 	b.w	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054c4:	f000 bc6b 	b.w	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054c8:	4b6e      	ldr	r3, [pc, #440]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054d0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054d2:	4b6c      	ldr	r3, [pc, #432]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0304 	and.w	r3, r3, #4
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80054de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d109      	bne.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054e4:	4b67      	ldr	r3, [pc, #412]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	08db      	lsrs	r3, r3, #3
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	4a66      	ldr	r2, [pc, #408]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80054f0:	fa22 f303 	lsr.w	r3, r2, r3
 80054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f6:	e01f      	b.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054f8:	4b62      	ldr	r3, [pc, #392]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005504:	d106      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005508:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800550c:	d102      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800550e:	4b5f      	ldr	r3, [pc, #380]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005512:	e011      	b.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005514:	4b5b      	ldr	r3, [pc, #364]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005520:	d106      	bne.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005528:	d102      	bne.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800552a:	4b59      	ldr	r3, [pc, #356]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800552c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800552e:	e003      	b.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005534:	f000 bc33 	b.w	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005538:	f000 bc31 	b.w	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800553c:	4b55      	ldr	r3, [pc, #340]	; (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005540:	f000 bc2d 	b.w	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005548:	f000 bc29 	b.w	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800554c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005550:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005554:	430b      	orrs	r3, r1
 8005556:	f040 809f 	bne.w	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800555a:	4b4a      	ldr	r3, [pc, #296]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800555c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005562:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556a:	d04d      	beq.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005572:	f200 8084 	bhi.w	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	2bc0      	cmp	r3, #192	; 0xc0
 800557a:	d07d      	beq.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	2bc0      	cmp	r3, #192	; 0xc0
 8005580:	d87d      	bhi.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	2b80      	cmp	r3, #128	; 0x80
 8005586:	d02d      	beq.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	2b80      	cmp	r3, #128	; 0x80
 800558c:	d877      	bhi.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d012      	beq.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800559a:	e070      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800559c:	4b39      	ldr	r3, [pc, #228]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055a8:	d107      	bne.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fec2 	bl	8006338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055b8:	e3f1      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055be:	e3ee      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055c0:	4b30      	ldr	r3, [pc, #192]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055cc:	d107      	bne.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ce:	f107 0318 	add.w	r3, r7, #24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fc08 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055dc:	e3df      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055e2:	e3dc      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055e4:	4b27      	ldr	r3, [pc, #156]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055f0:	d107      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055f2:	f107 030c 	add.w	r3, r7, #12
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fd4a 	bl	8006090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005600:	e3cd      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005606:	e3ca      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005608:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800560a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005610:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b04      	cmp	r3, #4
 800561c:	d10c      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005620:	2b00      	cmp	r3, #0
 8005622:	d109      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005624:	4b17      	ldr	r3, [pc, #92]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	08db      	lsrs	r3, r3, #3
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	4a16      	ldr	r2, [pc, #88]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
 8005634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005636:	e01e      	b.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005638:	4b12      	ldr	r3, [pc, #72]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005644:	d106      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800564c:	d102      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800564e:	4b0f      	ldr	r3, [pc, #60]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005652:	e010      	b.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005654:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005660:	d106      	bne.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005668:	d102      	bne.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800566a:	4b09      	ldr	r3, [pc, #36]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800566e:	e002      	b.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005674:	e393      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005676:	e392      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005678:	4b06      	ldr	r3, [pc, #24]	; (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800567c:	e38f      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005682:	e38c      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005684:	58024400 	.word	0x58024400
 8005688:	03d09000 	.word	0x03d09000
 800568c:	003d0900 	.word	0x003d0900
 8005690:	007a1200 	.word	0x007a1200
 8005694:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800569c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80056a0:	430b      	orrs	r3, r1
 80056a2:	f040 809c 	bne.w	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80056a6:	4b9e      	ldr	r3, [pc, #632]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80056a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056aa:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80056ae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b6:	d054      	beq.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056be:	f200 808b 	bhi.w	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80056c8:	f000 8083 	beq.w	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80056d2:	f200 8081 	bhi.w	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056dc:	d02f      	beq.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e4:	d878      	bhi.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d004      	beq.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f2:	d012      	beq.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80056f4:	e070      	b.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056f6:	4b8a      	ldr	r3, [pc, #552]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005702:	d107      	bne.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fe15 	bl	8006338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005712:	e344      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005718:	e341      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800571a:	4b81      	ldr	r3, [pc, #516]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005726:	d107      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005728:	f107 0318 	add.w	r3, r7, #24
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fb5b 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005736:	e332      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800573c:	e32f      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800573e:	4b78      	ldr	r3, [pc, #480]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800574a:	d107      	bne.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800574c:	f107 030c 	add.w	r3, r7, #12
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fc9d 	bl	8006090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800575a:	e320      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005760:	e31d      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005762:	4b6f      	ldr	r3, [pc, #444]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005766:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800576a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800576c:	4b6c      	ldr	r3, [pc, #432]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b04      	cmp	r3, #4
 8005776:	d10c      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800577e:	4b68      	ldr	r3, [pc, #416]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	08db      	lsrs	r3, r3, #3
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	4a66      	ldr	r2, [pc, #408]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800578a:	fa22 f303 	lsr.w	r3, r2, r3
 800578e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005790:	e01e      	b.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005792:	4b63      	ldr	r3, [pc, #396]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579e:	d106      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80057a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057a6:	d102      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80057a8:	4b5f      	ldr	r3, [pc, #380]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ac:	e010      	b.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057ae:	4b5c      	ldr	r3, [pc, #368]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ba:	d106      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80057bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c2:	d102      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80057c4:	4b59      	ldr	r3, [pc, #356]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c8:	e002      	b.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 80057ce:	e2e6      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80057d0:	e2e5      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80057d2:	4b57      	ldr	r3, [pc, #348]	; (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d6:	e2e2      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057dc:	e2df      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80057de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057e2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80057e6:	430b      	orrs	r3, r1
 80057e8:	f040 80a7 	bne.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80057ec:	4b4c      	ldr	r3, [pc, #304]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80057f4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057fc:	d055      	beq.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005804:	f200 8096 	bhi.w	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800580e:	f000 8084 	beq.w	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8005812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005814:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005818:	f200 808c 	bhi.w	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005822:	d030      	beq.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800582a:	f200 8083 	bhi.w	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800582e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583a:	d012      	beq.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800583c:	e07a      	b.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800583e:	4b38      	ldr	r3, [pc, #224]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800584a:	d107      	bne.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800584c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fd71 	bl	8006338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800585a:	e2a0      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005860:	e29d      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005862:	4b2f      	ldr	r3, [pc, #188]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800586a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800586e:	d107      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005870:	f107 0318 	add.w	r3, r7, #24
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fab7 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800587e:	e28e      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005884:	e28b      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005886:	4b26      	ldr	r3, [pc, #152]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800588e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005892:	d107      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005894:	f107 030c 	add.w	r3, r7, #12
 8005898:	4618      	mov	r0, r3
 800589a:	f000 fbf9 	bl	8006090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058a2:	e27c      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a8:	e279      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058aa:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80058ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058b4:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d10c      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058c6:	4b16      	ldr	r3, [pc, #88]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	08db      	lsrs	r3, r3, #3
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	4a14      	ldr	r2, [pc, #80]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80058d2:	fa22 f303 	lsr.w	r3, r2, r3
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d8:	e01e      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058da:	4b11      	ldr	r3, [pc, #68]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e6:	d106      	bne.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80058e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ee:	d102      	bne.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80058f0:	4b0d      	ldr	r3, [pc, #52]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f4:	e010      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058f6:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005902:	d106      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590a:	d102      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800590c:	4b07      	ldr	r3, [pc, #28]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005910:	e002      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005916:	e242      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005918:	e241      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800591c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800591e:	e23e      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005920:	58024400 	.word	0x58024400
 8005924:	03d09000 	.word	0x03d09000
 8005928:	003d0900 	.word	0x003d0900
 800592c:	007a1200 	.word	0x007a1200
 8005930:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005938:	e231      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800593a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800593e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005942:	430b      	orrs	r3, r1
 8005944:	f040 8085 	bne.w	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005948:	4b9c      	ldr	r3, [pc, #624]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005950:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005958:	d06b      	beq.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005960:	d874      	bhi.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005968:	d056      	beq.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005970:	d86c      	bhi.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005978:	d03b      	beq.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005980:	d864      	bhi.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005988:	d021      	beq.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005990:	d85c      	bhi.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8005998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800599e:	d004      	beq.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80059a0:	e054      	b.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80059a2:	f7fe fb49 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 80059a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059a8:	e1f9      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059aa:	4b84      	ldr	r3, [pc, #528]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059b6:	d107      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059b8:	f107 0318 	add.w	r3, r7, #24
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fa13 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059c6:	e1ea      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059cc:	e1e7      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059ce:	4b7b      	ldr	r3, [pc, #492]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059da:	d107      	bne.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059dc:	f107 030c 	add.w	r3, r7, #12
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fb55 	bl	8006090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059ea:	e1d8      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059f0:	e1d5      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059f2:	4b72      	ldr	r3, [pc, #456]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d109      	bne.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059fe:	4b6f      	ldr	r3, [pc, #444]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	08db      	lsrs	r3, r3, #3
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	4a6d      	ldr	r2, [pc, #436]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a10:	e1c5      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a16:	e1c2      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005a18:	4b68      	ldr	r3, [pc, #416]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a24:	d102      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8005a26:	4b67      	ldr	r3, [pc, #412]	; (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a2a:	e1b8      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a30:	e1b5      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a32:	4b62      	ldr	r3, [pc, #392]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a3e:	d102      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8005a40:	4b61      	ldr	r3, [pc, #388]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a44:	e1ab      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a46:	2300      	movs	r3, #0
 8005a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a4a:	e1a8      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a50:	e1a5      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a56:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	d173      	bne.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005a5e:	4b57      	ldr	r3, [pc, #348]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a66:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a6e:	d02f      	beq.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a76:	d863      	bhi.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a84:	d012      	beq.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8005a86:	e05b      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a88:	4b4c      	ldr	r3, [pc, #304]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a94:	d107      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a96:	f107 0318 	add.w	r3, r7, #24
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f9a4 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aa4:	e17b      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aaa:	e178      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005aac:	4b43      	ldr	r3, [pc, #268]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ab8:	d107      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aba:	f107 030c 	add.w	r3, r7, #12
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fae6 	bl	8006090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ac8:	e169      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ace:	e166      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ad0:	4b3a      	ldr	r3, [pc, #232]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ad8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ada:	4b38      	ldr	r3, [pc, #224]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d109      	bne.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aec:	4b33      	ldr	r3, [pc, #204]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	08db      	lsrs	r3, r3, #3
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	4a32      	ldr	r2, [pc, #200]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
 8005afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005afe:	e01e      	b.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b00:	4b2e      	ldr	r3, [pc, #184]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b0c:	d106      	bne.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8005b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b14:	d102      	bne.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b16:	4b2b      	ldr	r3, [pc, #172]	; (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b1a:	e010      	b.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b1c:	4b27      	ldr	r3, [pc, #156]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b28:	d106      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b30:	d102      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b32:	4b25      	ldr	r3, [pc, #148]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b36:	e002      	b.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005b3c:	e12f      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005b3e:	e12e      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b44:	e12b      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b4a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	d13c      	bne.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005b52:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b5a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b68:	d012      	beq.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8005b6a:	e023      	b.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b6c:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b78:	d107      	bne.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fbda 	bl	8006338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b88:	e109      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b8e:	e106      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b90:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b9c:	d107      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b9e:	f107 0318 	add.w	r3, r7, #24
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f920 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bac:	e0f7      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bb2:	e0f4      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bb8:	e0f1      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005bba:	bf00      	nop
 8005bbc:	58024400 	.word	0x58024400
 8005bc0:	03d09000 	.word	0x03d09000
 8005bc4:	003d0900 	.word	0x003d0900
 8005bc8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	f040 8091 	bne.w	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005bda:	4b73      	ldr	r3, [pc, #460]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bde:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005be2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005bea:	f000 8081 	beq.w	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005bf4:	d87f      	bhi.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bfc:	d06b      	beq.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c04:	d877      	bhi.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0c:	d056      	beq.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c14:	d86f      	bhi.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c1c:	d03b      	beq.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c24:	d867      	bhi.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c2c:	d021      	beq.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c34:	d85f      	bhi.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d004      	beq.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c42:	d004      	beq.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005c44:	e057      	b.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005c46:	f000 f8b9 	bl	8005dbc <HAL_RCCEx_GetD3PCLK1Freq>
 8005c4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c4c:	e0a7      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c4e:	4b56      	ldr	r3, [pc, #344]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c5a:	d107      	bne.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c5c:	f107 0318 	add.w	r3, r7, #24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 f8c1 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c6a:	e098      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c70:	e095      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c72:	4b4d      	ldr	r3, [pc, #308]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c7e:	d107      	bne.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c80:	f107 030c 	add.w	r3, r7, #12
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fa03 	bl	8006090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c8e:	e086      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c94:	e083      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c96:	4b44      	ldr	r3, [pc, #272]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d109      	bne.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ca2:	4b41      	ldr	r3, [pc, #260]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	08db      	lsrs	r3, r3, #3
 8005ca8:	f003 0303 	and.w	r3, r3, #3
 8005cac:	4a3f      	ldr	r2, [pc, #252]	; (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005cae:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cb4:	e073      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cba:	e070      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005cbc:	4b3a      	ldr	r3, [pc, #232]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc8:	d102      	bne.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8005cca:	4b39      	ldr	r3, [pc, #228]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8005ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cce:	e066      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cd4:	e063      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005cd6:	4b34      	ldr	r3, [pc, #208]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ce2:	d102      	bne.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8005ce4:	4b33      	ldr	r3, [pc, #204]	; (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ce8:	e059      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cee:	e056      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005cf0:	4b31      	ldr	r3, [pc, #196]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf4:	e053      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cfa:	e050      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d00:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005d04:	430b      	orrs	r3, r1
 8005d06:	d148      	bne.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005d08:	4b27      	ldr	r3, [pc, #156]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d10:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d18:	d02a      	beq.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d20:	d838      	bhi.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d004      	beq.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d2e:	d00d      	beq.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005d30:	e030      	b.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d32:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d3e:	d102      	bne.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8005d40:	4b1c      	ldr	r3, [pc, #112]	; (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d44:	e02b      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d4a:	e028      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d4c:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d58:	d107      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 faea 	bl	8006338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d68:	e019      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d6e:	e016      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d70:	4b0d      	ldr	r3, [pc, #52]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d7c:	d107      	bne.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d7e:	f107 0318 	add.w	r3, r7, #24
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 f830 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d8c:	e007      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d92:	e004      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d98:	e001      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3740      	adds	r7, #64	; 0x40
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	58024400 	.word	0x58024400
 8005dac:	03d09000 	.word	0x03d09000
 8005db0:	003d0900 	.word	0x003d0900
 8005db4:	007a1200 	.word	0x007a1200
 8005db8:	00bb8000 	.word	0x00bb8000

08005dbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005dc0:	f7fe f90a 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	091b      	lsrs	r3, r3, #4
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	4904      	ldr	r1, [pc, #16]	; (8005de4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005dd2:	5ccb      	ldrb	r3, [r1, r3]
 8005dd4:	f003 031f 	and.w	r3, r3, #31
 8005dd8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	58024400 	.word	0x58024400
 8005de4:	08008eb0 	.word	0x08008eb0

08005de8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b089      	sub	sp, #36	; 0x24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005df0:	4ba1      	ldr	r3, [pc, #644]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005dfa:	4b9f      	ldr	r3, [pc, #636]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	0b1b      	lsrs	r3, r3, #12
 8005e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e06:	4b9c      	ldr	r3, [pc, #624]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	091b      	lsrs	r3, r3, #4
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005e12:	4b99      	ldr	r3, [pc, #612]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	08db      	lsrs	r3, r3, #3
 8005e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	fb02 f303 	mul.w	r3, r2, r3
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8111 	beq.w	8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	f000 8083 	beq.w	8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	f200 80a1 	bhi.w	8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d056      	beq.n	8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e52:	e099      	b.n	8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e54:	4b88      	ldr	r3, [pc, #544]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d02d      	beq.n	8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e60:	4b85      	ldr	r3, [pc, #532]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	08db      	lsrs	r3, r3, #3
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	4a84      	ldr	r2, [pc, #528]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	ee07 3a90 	vmov	s15, r3
 8005e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8a:	4b7b      	ldr	r3, [pc, #492]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005eba:	e087      	b.n	8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ece:	4b6a      	ldr	r3, [pc, #424]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ee2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005efe:	e065      	b.n	8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006088 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f12:	4b59      	ldr	r3, [pc, #356]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f42:	e043      	b.n	8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800608c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f56:	4b48      	ldr	r3, [pc, #288]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f86:	e021      	b.n	8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006088 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9a:	4b37      	ldr	r3, [pc, #220]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005fcc:	4b2a      	ldr	r3, [pc, #168]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	0a5b      	lsrs	r3, r3, #9
 8005fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff2:	ee17 2a90 	vmov	r2, s15
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005ffa:	4b1f      	ldr	r3, [pc, #124]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	0c1b      	lsrs	r3, r3, #16
 8006000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006014:	edd7 6a07 	vldr	s13, [r7, #28]
 8006018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800601c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006020:	ee17 2a90 	vmov	r2, s15
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006028:	4b13      	ldr	r3, [pc, #76]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	0e1b      	lsrs	r3, r3, #24
 800602e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800603e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006042:	edd7 6a07 	vldr	s13, [r7, #28]
 8006046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800604a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800604e:	ee17 2a90 	vmov	r2, s15
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006056:	e008      	b.n	800606a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	609a      	str	r2, [r3, #8]
}
 800606a:	bf00      	nop
 800606c:	3724      	adds	r7, #36	; 0x24
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	58024400 	.word	0x58024400
 800607c:	03d09000 	.word	0x03d09000
 8006080:	46000000 	.word	0x46000000
 8006084:	4c742400 	.word	0x4c742400
 8006088:	4a742400 	.word	0x4a742400
 800608c:	4af42400 	.word	0x4af42400

08006090 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006090:	b480      	push	{r7}
 8006092:	b089      	sub	sp, #36	; 0x24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006098:	4ba1      	ldr	r3, [pc, #644]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80060a2:	4b9f      	ldr	r3, [pc, #636]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	0d1b      	lsrs	r3, r3, #20
 80060a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80060ae:	4b9c      	ldr	r3, [pc, #624]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	0a1b      	lsrs	r3, r3, #8
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80060ba:	4b99      	ldr	r3, [pc, #612]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	08db      	lsrs	r3, r3, #3
 80060c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	fb02 f303 	mul.w	r3, r2, r3
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 8111 	beq.w	8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	f000 8083 	beq.w	80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	f200 80a1 	bhi.w	8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d056      	beq.n	80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060fa:	e099      	b.n	8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060fc:	4b88      	ldr	r3, [pc, #544]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d02d      	beq.n	8006164 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006108:	4b85      	ldr	r3, [pc, #532]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	08db      	lsrs	r3, r3, #3
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	4a84      	ldr	r2, [pc, #528]	; (8006324 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
 8006118:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006132:	4b7b      	ldr	r3, [pc, #492]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006142:	ed97 6a03 	vldr	s12, [r7, #12]
 8006146:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800614a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006162:	e087      	b.n	8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800632c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006176:	4b6a      	ldr	r3, [pc, #424]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006186:	ed97 6a03 	vldr	s12, [r7, #12]
 800618a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800618e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800619a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061a6:	e065      	b.n	8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ba:	4b59      	ldr	r3, [pc, #356]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ea:	e043      	b.n	8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061fe:	4b48      	ldr	r3, [pc, #288]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800620e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006212:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800621a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800621e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800622e:	e021      	b.n	8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800623e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006242:	4b37      	ldr	r3, [pc, #220]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006252:	ed97 6a03 	vldr	s12, [r7, #12]
 8006256:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800625a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800625e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006272:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006274:	4b2a      	ldr	r3, [pc, #168]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	0a5b      	lsrs	r3, r3, #9
 800627a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800628a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800628e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800629a:	ee17 2a90 	vmov	r2, s15
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80062a2:	4b1f      	ldr	r3, [pc, #124]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	0c1b      	lsrs	r3, r3, #16
 80062a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ac:	ee07 3a90 	vmov	s15, r3
 80062b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062c8:	ee17 2a90 	vmov	r2, s15
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80062d0:	4b13      	ldr	r3, [pc, #76]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	0e1b      	lsrs	r3, r3, #24
 80062d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f6:	ee17 2a90 	vmov	r2, s15
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062fe:	e008      	b.n	8006312 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	609a      	str	r2, [r3, #8]
}
 8006312:	bf00      	nop
 8006314:	3724      	adds	r7, #36	; 0x24
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	58024400 	.word	0x58024400
 8006324:	03d09000 	.word	0x03d09000
 8006328:	46000000 	.word	0x46000000
 800632c:	4c742400 	.word	0x4c742400
 8006330:	4a742400 	.word	0x4a742400
 8006334:	4af42400 	.word	0x4af42400

08006338 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006338:	b480      	push	{r7}
 800633a:	b089      	sub	sp, #36	; 0x24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006340:	4ba0      	ldr	r3, [pc, #640]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800634a:	4b9e      	ldr	r3, [pc, #632]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800634c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634e:	091b      	lsrs	r3, r3, #4
 8006350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006354:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006356:	4b9b      	ldr	r3, [pc, #620]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006360:	4b98      	ldr	r3, [pc, #608]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006364:	08db      	lsrs	r3, r3, #3
 8006366:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	fb02 f303 	mul.w	r3, r2, r3
 8006370:	ee07 3a90 	vmov	s15, r3
 8006374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006378:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 8111 	beq.w	80065a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	2b02      	cmp	r3, #2
 8006388:	f000 8083 	beq.w	8006492 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b02      	cmp	r3, #2
 8006390:	f200 80a1 	bhi.w	80064d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d056      	beq.n	800644e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80063a0:	e099      	b.n	80064d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063a2:	4b88      	ldr	r3, [pc, #544]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d02d      	beq.n	800640a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063ae:	4b85      	ldr	r3, [pc, #532]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	08db      	lsrs	r3, r3, #3
 80063b4:	f003 0303 	and.w	r3, r3, #3
 80063b8:	4a83      	ldr	r2, [pc, #524]	; (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80063ba:	fa22 f303 	lsr.w	r3, r2, r3
 80063be:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	ee07 3a90 	vmov	s15, r3
 80063d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d8:	4b7a      	ldr	r3, [pc, #488]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e0:	ee07 3a90 	vmov	s15, r3
 80063e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ec:	eddf 5a77 	vldr	s11, [pc, #476]	; 80065cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006404:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006408:	e087      	b.n	800651a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	ee07 3a90 	vmov	s15, r3
 8006410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006414:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80065d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800641c:	4b69      	ldr	r3, [pc, #420]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800641e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006424:	ee07 3a90 	vmov	s15, r3
 8006428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006430:	eddf 5a66 	vldr	s11, [pc, #408]	; 80065cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800643c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006448:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800644c:	e065      	b.n	800651a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	ee07 3a90 	vmov	s15, r3
 8006454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006458:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80065d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800645c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006460:	4b58      	ldr	r3, [pc, #352]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006468:	ee07 3a90 	vmov	s15, r3
 800646c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006470:	ed97 6a03 	vldr	s12, [r7, #12]
 8006474:	eddf 5a55 	vldr	s11, [pc, #340]	; 80065cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800647c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006480:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006490:	e043      	b.n	800651a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	ee07 3a90 	vmov	s15, r3
 8006498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800649c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80065d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80064a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064a4:	4b47      	ldr	r3, [pc, #284]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ac:	ee07 3a90 	vmov	s15, r3
 80064b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80064b8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80065cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80064bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064d4:	e021      	b.n	800651a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	ee07 3a90 	vmov	s15, r3
 80064dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80065d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80064e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e8:	4b36      	ldr	r3, [pc, #216]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f0:	ee07 3a90 	vmov	s15, r3
 80064f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80064fc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80065cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006500:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006508:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800650c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006514:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006518:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800651a:	4b2a      	ldr	r3, [pc, #168]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651e:	0a5b      	lsrs	r3, r3, #9
 8006520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006524:	ee07 3a90 	vmov	s15, r3
 8006528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006530:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006534:	edd7 6a07 	vldr	s13, [r7, #28]
 8006538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800653c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006540:	ee17 2a90 	vmov	r2, s15
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006548:	4b1e      	ldr	r3, [pc, #120]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	0c1b      	lsrs	r3, r3, #16
 800654e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800655e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006562:	edd7 6a07 	vldr	s13, [r7, #28]
 8006566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800656a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800656e:	ee17 2a90 	vmov	r2, s15
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006576:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657a:	0e1b      	lsrs	r3, r3, #24
 800657c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006580:	ee07 3a90 	vmov	s15, r3
 8006584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800658c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006590:	edd7 6a07 	vldr	s13, [r7, #28]
 8006594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800659c:	ee17 2a90 	vmov	r2, s15
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80065a4:	e008      	b.n	80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	609a      	str	r2, [r3, #8]
}
 80065b8:	bf00      	nop
 80065ba:	3724      	adds	r7, #36	; 0x24
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	58024400 	.word	0x58024400
 80065c8:	03d09000 	.word	0x03d09000
 80065cc:	46000000 	.word	0x46000000
 80065d0:	4c742400 	.word	0x4c742400
 80065d4:	4a742400 	.word	0x4a742400
 80065d8:	4af42400 	.word	0x4af42400

080065dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065ea:	4b53      	ldr	r3, [pc, #332]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d101      	bne.n	80065fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e099      	b.n	800672e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80065fa:	4b4f      	ldr	r3, [pc, #316]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a4e      	ldr	r2, [pc, #312]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 8006600:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006606:	f7fb f87f 	bl	8001708 <HAL_GetTick>
 800660a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800660c:	e008      	b.n	8006620 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800660e:	f7fb f87b 	bl	8001708 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e086      	b.n	800672e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006620:	4b45      	ldr	r3, [pc, #276]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1f0      	bne.n	800660e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800662c:	4b42      	ldr	r3, [pc, #264]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	031b      	lsls	r3, r3, #12
 800663a:	493f      	ldr	r1, [pc, #252]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 800663c:	4313      	orrs	r3, r2
 800663e:	628b      	str	r3, [r1, #40]	; 0x28
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	3b01      	subs	r3, #1
 8006646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	3b01      	subs	r3, #1
 8006650:	025b      	lsls	r3, r3, #9
 8006652:	b29b      	uxth	r3, r3
 8006654:	431a      	orrs	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	3b01      	subs	r3, #1
 800665c:	041b      	lsls	r3, r3, #16
 800665e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	3b01      	subs	r3, #1
 800666a:	061b      	lsls	r3, r3, #24
 800666c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006670:	4931      	ldr	r1, [pc, #196]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 8006672:	4313      	orrs	r3, r2
 8006674:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006676:	4b30      	ldr	r3, [pc, #192]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	492d      	ldr	r1, [pc, #180]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 8006684:	4313      	orrs	r3, r2
 8006686:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006688:	4b2b      	ldr	r3, [pc, #172]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	f023 0220 	bic.w	r2, r3, #32
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	4928      	ldr	r1, [pc, #160]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 8006696:	4313      	orrs	r3, r2
 8006698:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800669a:	4b27      	ldr	r3, [pc, #156]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 800669c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669e:	4a26      	ldr	r2, [pc, #152]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80066a0:	f023 0310 	bic.w	r3, r3, #16
 80066a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80066a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066aa:	4b24      	ldr	r3, [pc, #144]	; (800673c <RCCEx_PLL2_Config+0x160>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	69d2      	ldr	r2, [r2, #28]
 80066b2:	00d2      	lsls	r2, r2, #3
 80066b4:	4920      	ldr	r1, [pc, #128]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80066ba:	4b1f      	ldr	r3, [pc, #124]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80066c0:	f043 0310 	orr.w	r3, r3, #16
 80066c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d106      	bne.n	80066da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80066cc:	4b1a      	ldr	r3, [pc, #104]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	4a19      	ldr	r2, [pc, #100]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80066d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066d8:	e00f      	b.n	80066fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d106      	bne.n	80066ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80066e0:	4b15      	ldr	r3, [pc, #84]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	4a14      	ldr	r2, [pc, #80]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80066e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066ec:	e005      	b.n	80066fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80066ee:	4b12      	ldr	r3, [pc, #72]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	4a11      	ldr	r2, [pc, #68]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80066f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80066fa:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a0e      	ldr	r2, [pc, #56]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 8006700:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006706:	f7fa ffff 	bl	8001708 <HAL_GetTick>
 800670a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800670c:	e008      	b.n	8006720 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800670e:	f7fa fffb 	bl	8001708 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e006      	b.n	800672e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006720:	4b05      	ldr	r3, [pc, #20]	; (8006738 <RCCEx_PLL2_Config+0x15c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f0      	beq.n	800670e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	58024400 	.word	0x58024400
 800673c:	ffff0007 	.word	0xffff0007

08006740 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800674e:	4b53      	ldr	r3, [pc, #332]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	2b03      	cmp	r3, #3
 8006758:	d101      	bne.n	800675e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e099      	b.n	8006892 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800675e:	4b4f      	ldr	r3, [pc, #316]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a4e      	ldr	r2, [pc, #312]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800676a:	f7fa ffcd 	bl	8001708 <HAL_GetTick>
 800676e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006770:	e008      	b.n	8006784 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006772:	f7fa ffc9 	bl	8001708 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d901      	bls.n	8006784 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e086      	b.n	8006892 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006784:	4b45      	ldr	r3, [pc, #276]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1f0      	bne.n	8006772 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006790:	4b42      	ldr	r3, [pc, #264]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006794:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	051b      	lsls	r3, r3, #20
 800679e:	493f      	ldr	r1, [pc, #252]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	628b      	str	r3, [r1, #40]	; 0x28
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	025b      	lsls	r3, r3, #9
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	3b01      	subs	r3, #1
 80067c0:	041b      	lsls	r3, r3, #16
 80067c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	061b      	lsls	r3, r3, #24
 80067d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067d4:	4931      	ldr	r1, [pc, #196]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80067da:	4b30      	ldr	r3, [pc, #192]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	492d      	ldr	r1, [pc, #180]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80067ec:	4b2b      	ldr	r3, [pc, #172]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	4928      	ldr	r1, [pc, #160]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80067fe:	4b27      	ldr	r3, [pc, #156]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	4a26      	ldr	r2, [pc, #152]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006808:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800680a:	4b24      	ldr	r3, [pc, #144]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 800680c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800680e:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <RCCEx_PLL3_Config+0x160>)
 8006810:	4013      	ands	r3, r2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	69d2      	ldr	r2, [r2, #28]
 8006816:	00d2      	lsls	r2, r2, #3
 8006818:	4920      	ldr	r1, [pc, #128]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 800681a:	4313      	orrs	r3, r2
 800681c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800681e:	4b1f      	ldr	r3, [pc, #124]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	4a1e      	ldr	r2, [pc, #120]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006828:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006830:	4b1a      	ldr	r3, [pc, #104]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	4a19      	ldr	r2, [pc, #100]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006836:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800683a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800683c:	e00f      	b.n	800685e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d106      	bne.n	8006852 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006844:	4b15      	ldr	r3, [pc, #84]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	4a14      	ldr	r2, [pc, #80]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 800684a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800684e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006850:	e005      	b.n	800685e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006856:	4a11      	ldr	r2, [pc, #68]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006858:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800685c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800685e:	4b0f      	ldr	r3, [pc, #60]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a0e      	ldr	r2, [pc, #56]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800686a:	f7fa ff4d 	bl	8001708 <HAL_GetTick>
 800686e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006870:	e008      	b.n	8006884 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006872:	f7fa ff49 	bl	8001708 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d901      	bls.n	8006884 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e006      	b.n	8006892 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006884:	4b05      	ldr	r3, [pc, #20]	; (800689c <RCCEx_PLL3_Config+0x15c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0f0      	beq.n	8006872 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	58024400 	.word	0x58024400
 80068a0:	ffff0007 	.word	0xffff0007

080068a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e049      	b.n	800694a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fa fd08 	bl	80012e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3304      	adds	r3, #4
 80068e0:	4619      	mov	r1, r3
 80068e2:	4610      	mov	r0, r2
 80068e4:	f000 fa0a 	bl	8006cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b01      	cmp	r3, #1
 8006966:	d001      	beq.n	800696c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e04c      	b.n	8006a06 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a26      	ldr	r2, [pc, #152]	; (8006a14 <HAL_TIM_Base_Start+0xc0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d022      	beq.n	80069c4 <HAL_TIM_Base_Start+0x70>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006986:	d01d      	beq.n	80069c4 <HAL_TIM_Base_Start+0x70>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a22      	ldr	r2, [pc, #136]	; (8006a18 <HAL_TIM_Base_Start+0xc4>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d018      	beq.n	80069c4 <HAL_TIM_Base_Start+0x70>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a21      	ldr	r2, [pc, #132]	; (8006a1c <HAL_TIM_Base_Start+0xc8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d013      	beq.n	80069c4 <HAL_TIM_Base_Start+0x70>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <HAL_TIM_Base_Start+0xcc>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00e      	beq.n	80069c4 <HAL_TIM_Base_Start+0x70>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a1e      	ldr	r2, [pc, #120]	; (8006a24 <HAL_TIM_Base_Start+0xd0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d009      	beq.n	80069c4 <HAL_TIM_Base_Start+0x70>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1c      	ldr	r2, [pc, #112]	; (8006a28 <HAL_TIM_Base_Start+0xd4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d004      	beq.n	80069c4 <HAL_TIM_Base_Start+0x70>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1b      	ldr	r2, [pc, #108]	; (8006a2c <HAL_TIM_Base_Start+0xd8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d115      	bne.n	80069f0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	4b19      	ldr	r3, [pc, #100]	; (8006a30 <HAL_TIM_Base_Start+0xdc>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b06      	cmp	r3, #6
 80069d4:	d015      	beq.n	8006a02 <HAL_TIM_Base_Start+0xae>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069dc:	d011      	beq.n	8006a02 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0201 	orr.w	r2, r2, #1
 80069ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ee:	e008      	b.n	8006a02 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	e000      	b.n	8006a04 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	40010000 	.word	0x40010000
 8006a18:	40000400 	.word	0x40000400
 8006a1c:	40000800 	.word	0x40000800
 8006a20:	40000c00 	.word	0x40000c00
 8006a24:	40010400 	.word	0x40010400
 8006a28:	40001800 	.word	0x40001800
 8006a2c:	40014000 	.word	0x40014000
 8006a30:	00010007 	.word	0x00010007

08006a34 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0201 	bic.w	r2, r2, #1
 8006a4a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6a1a      	ldr	r2, [r3, #32]
 8006a52:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a56:	4013      	ands	r3, r2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10f      	bne.n	8006a7c <HAL_TIM_Base_Stop_IT+0x48>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6a1a      	ldr	r2, [r3, #32]
 8006a62:	f240 4344 	movw	r3, #1092	; 0x444
 8006a66:	4013      	ands	r3, r2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d107      	bne.n	8006a7c <HAL_TIM_Base_Stop_IT+0x48>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0201 	bic.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
	...

08006a94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e08f      	b.n	8006bc8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d106      	bne.n	8006ac2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7fa fbc5 	bl	800124c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6899      	ldr	r1, [r3, #8]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	4b3e      	ldr	r3, [pc, #248]	; (8006bd0 <HAL_TIM_Encoder_Init+0x13c>)
 8006ad6:	400b      	ands	r3, r1
 8006ad8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	f000 f909 	bl	8006cfc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4b31      	ldr	r3, [pc, #196]	; (8006bd4 <HAL_TIM_Encoder_Init+0x140>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	021b      	lsls	r3, r3, #8
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4b2b      	ldr	r3, [pc, #172]	; (8006bd8 <HAL_TIM_Encoder_Init+0x144>)
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4b2a      	ldr	r3, [pc, #168]	; (8006bdc <HAL_TIM_Encoder_Init+0x148>)
 8006b32:	4013      	ands	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	4313      	orrs	r3, r2
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	011a      	lsls	r2, r3, #4
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	031b      	lsls	r3, r3, #12
 8006b54:	4313      	orrs	r3, r2
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006b6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	011b      	lsls	r3, r3, #4
 8006b76:	4313      	orrs	r3, r2
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	fffebff8 	.word	0xfffebff8
 8006bd4:	fffffcfc 	.word	0xfffffcfc
 8006bd8:	fffff3f3 	.word	0xfffff3f3
 8006bdc:	ffff0f0f 	.word	0xffff0f0f

08006be0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bf0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bf8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c00:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c08:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d110      	bne.n	8006c32 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d102      	bne.n	8006c1c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c16:	7b7b      	ldrb	r3, [r7, #13]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d001      	beq.n	8006c20 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e069      	b.n	8006cf4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c30:	e031      	b.n	8006c96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d110      	bne.n	8006c5a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d102      	bne.n	8006c44 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c3e:	7b3b      	ldrb	r3, [r7, #12]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d001      	beq.n	8006c48 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e055      	b.n	8006cf4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c58:	e01d      	b.n	8006c96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d108      	bne.n	8006c72 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d105      	bne.n	8006c72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c66:	7b7b      	ldrb	r3, [r7, #13]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d102      	bne.n	8006c72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c6c:	7b3b      	ldrb	r3, [r7, #12]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d001      	beq.n	8006c76 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e03e      	b.n	8006cf4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2202      	movs	r2, #2
 8006c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2202      	movs	r2, #2
 8006c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <HAL_TIM_Encoder_Start+0xc4>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d008      	beq.n	8006cb4 <HAL_TIM_Encoder_Start+0xd4>
 8006ca2:	e00f      	b.n	8006cc4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	2100      	movs	r1, #0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 f8bf 	bl	8006e30 <TIM_CCxChannelCmd>
      break;
 8006cb2:	e016      	b.n	8006ce2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	2104      	movs	r1, #4
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 f8b7 	bl	8006e30 <TIM_CCxChannelCmd>
      break;
 8006cc2:	e00e      	b.n	8006ce2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	2100      	movs	r1, #0
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 f8af 	bl	8006e30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	2104      	movs	r1, #4
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 f8a8 	bl	8006e30 <TIM_CCxChannelCmd>
      break;
 8006ce0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0201 	orr.w	r2, r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a40      	ldr	r2, [pc, #256]	; (8006e10 <TIM_Base_SetConfig+0x114>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d013      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1a:	d00f      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a3d      	ldr	r2, [pc, #244]	; (8006e14 <TIM_Base_SetConfig+0x118>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00b      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a3c      	ldr	r2, [pc, #240]	; (8006e18 <TIM_Base_SetConfig+0x11c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d007      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a3b      	ldr	r2, [pc, #236]	; (8006e1c <TIM_Base_SetConfig+0x120>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a3a      	ldr	r2, [pc, #232]	; (8006e20 <TIM_Base_SetConfig+0x124>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d108      	bne.n	8006d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a2f      	ldr	r2, [pc, #188]	; (8006e10 <TIM_Base_SetConfig+0x114>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d01f      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5c:	d01b      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a2c      	ldr	r2, [pc, #176]	; (8006e14 <TIM_Base_SetConfig+0x118>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d017      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a2b      	ldr	r2, [pc, #172]	; (8006e18 <TIM_Base_SetConfig+0x11c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d013      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a2a      	ldr	r2, [pc, #168]	; (8006e1c <TIM_Base_SetConfig+0x120>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00f      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a29      	ldr	r2, [pc, #164]	; (8006e20 <TIM_Base_SetConfig+0x124>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00b      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a28      	ldr	r2, [pc, #160]	; (8006e24 <TIM_Base_SetConfig+0x128>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d007      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a27      	ldr	r2, [pc, #156]	; (8006e28 <TIM_Base_SetConfig+0x12c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d003      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a26      	ldr	r2, [pc, #152]	; (8006e2c <TIM_Base_SetConfig+0x130>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d108      	bne.n	8006da8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a10      	ldr	r2, [pc, #64]	; (8006e10 <TIM_Base_SetConfig+0x114>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00f      	beq.n	8006df4 <TIM_Base_SetConfig+0xf8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a12      	ldr	r2, [pc, #72]	; (8006e20 <TIM_Base_SetConfig+0x124>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00b      	beq.n	8006df4 <TIM_Base_SetConfig+0xf8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a11      	ldr	r2, [pc, #68]	; (8006e24 <TIM_Base_SetConfig+0x128>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d007      	beq.n	8006df4 <TIM_Base_SetConfig+0xf8>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a10      	ldr	r2, [pc, #64]	; (8006e28 <TIM_Base_SetConfig+0x12c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d003      	beq.n	8006df4 <TIM_Base_SetConfig+0xf8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a0f      	ldr	r2, [pc, #60]	; (8006e2c <TIM_Base_SetConfig+0x130>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d103      	bne.n	8006dfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	615a      	str	r2, [r3, #20]
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40010000 	.word	0x40010000
 8006e14:	40000400 	.word	0x40000400
 8006e18:	40000800 	.word	0x40000800
 8006e1c:	40000c00 	.word	0x40000c00
 8006e20:	40010400 	.word	0x40010400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800

08006e30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 031f 	and.w	r3, r3, #31
 8006e42:	2201      	movs	r2, #1
 8006e44:	fa02 f303 	lsl.w	r3, r2, r3
 8006e48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a1a      	ldr	r2, [r3, #32]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	43db      	mvns	r3, r3
 8006e52:	401a      	ands	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a1a      	ldr	r2, [r3, #32]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f003 031f 	and.w	r3, r3, #31
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	fa01 f303 	lsl.w	r3, r1, r3
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	621a      	str	r2, [r3, #32]
}
 8006e6e:	bf00      	nop
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
	...

08006e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d101      	bne.n	8006e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e90:	2302      	movs	r3, #2
 8006e92:	e06d      	b.n	8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a30      	ldr	r2, [pc, #192]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d004      	beq.n	8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a2f      	ldr	r2, [pc, #188]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d108      	bne.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ece:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a20      	ldr	r2, [pc, #128]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d022      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f06:	d01d      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1d      	ldr	r2, [pc, #116]	; (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d018      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a1c      	ldr	r2, [pc, #112]	; (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d013      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a1a      	ldr	r2, [pc, #104]	; (8006f8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00e      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a15      	ldr	r2, [pc, #84]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d009      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a16      	ldr	r2, [pc, #88]	; (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d004      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a15      	ldr	r2, [pc, #84]	; (8006f94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d10c      	bne.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	40010000 	.word	0x40010000
 8006f80:	40010400 	.word	0x40010400
 8006f84:	40000400 	.word	0x40000400
 8006f88:	40000800 	.word	0x40000800
 8006f8c:	40000c00 	.word	0x40000c00
 8006f90:	40001800 	.word	0x40001800
 8006f94:	40014000 	.word	0x40014000

08006f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e042      	b.n	8007030 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d106      	bne.n	8006fc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7fa f9b1 	bl	8001324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2224      	movs	r2, #36	; 0x24
 8006fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0201 	bic.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f8ba 	bl	8007154 <UART_SetConfig>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d101      	bne.n	8006fea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e022      	b.n	8007030 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 ff1a 	bl	8007e2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0201 	orr.w	r2, r2, #1
 8007026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 ffa1 	bl	8007f70 <UART_CheckIdleState>
 800702e:	4603      	mov	r3, r0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08a      	sub	sp, #40	; 0x28
 800703c:	af02      	add	r7, sp, #8
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	4613      	mov	r3, r2
 8007046:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704e:	2b20      	cmp	r3, #32
 8007050:	d17b      	bne.n	800714a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <HAL_UART_Transmit+0x26>
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e074      	b.n	800714c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2221      	movs	r2, #33	; 0x21
 800706e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007072:	f7fa fb49 	bl	8001708 <HAL_GetTick>
 8007076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	88fa      	ldrh	r2, [r7, #6]
 8007084:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007090:	d108      	bne.n	80070a4 <HAL_UART_Transmit+0x6c>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d104      	bne.n	80070a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	e003      	b.n	80070ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070a8:	2300      	movs	r3, #0
 80070aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070ac:	e030      	b.n	8007110 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2200      	movs	r2, #0
 80070b6:	2180      	movs	r1, #128	; 0x80
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f001 f803 	bl	80080c4 <UART_WaitOnFlagUntilTimeout>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e03d      	b.n	800714c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10b      	bne.n	80070ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	3302      	adds	r3, #2
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	e007      	b.n	80070fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	781a      	ldrb	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	3301      	adds	r3, #1
 80070fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	b29a      	uxth	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1c8      	bne.n	80070ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2200      	movs	r2, #0
 8007124:	2140      	movs	r1, #64	; 0x40
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 ffcc 	bl	80080c4 <UART_WaitOnFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2220      	movs	r2, #32
 8007136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e006      	b.n	800714c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2220      	movs	r2, #32
 8007142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	e000      	b.n	800714c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800714a:	2302      	movs	r3, #2
  }
}
 800714c:	4618      	mov	r0, r3
 800714e:	3720      	adds	r7, #32
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007158:	b092      	sub	sp, #72	; 0x48
 800715a:	af00      	add	r7, sp, #0
 800715c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	431a      	orrs	r2, r3
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	431a      	orrs	r2, r3
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	4313      	orrs	r3, r2
 800717a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4bbe      	ldr	r3, [pc, #760]	; (800747c <UART_SetConfig+0x328>)
 8007184:	4013      	ands	r3, r2
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800718c:	430b      	orrs	r3, r1
 800718e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4ab3      	ldr	r2, [pc, #716]	; (8007480 <UART_SetConfig+0x32c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d004      	beq.n	80071c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071bc:	4313      	orrs	r3, r2
 80071be:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	4baf      	ldr	r3, [pc, #700]	; (8007484 <UART_SetConfig+0x330>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	f023 010f 	bic.w	r1, r3, #15
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4aa6      	ldr	r2, [pc, #664]	; (8007488 <UART_SetConfig+0x334>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d177      	bne.n	80072e4 <UART_SetConfig+0x190>
 80071f4:	4ba5      	ldr	r3, [pc, #660]	; (800748c <UART_SetConfig+0x338>)
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071fc:	2b28      	cmp	r3, #40	; 0x28
 80071fe:	d86d      	bhi.n	80072dc <UART_SetConfig+0x188>
 8007200:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <UART_SetConfig+0xb4>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	080072ad 	.word	0x080072ad
 800720c:	080072dd 	.word	0x080072dd
 8007210:	080072dd 	.word	0x080072dd
 8007214:	080072dd 	.word	0x080072dd
 8007218:	080072dd 	.word	0x080072dd
 800721c:	080072dd 	.word	0x080072dd
 8007220:	080072dd 	.word	0x080072dd
 8007224:	080072dd 	.word	0x080072dd
 8007228:	080072b5 	.word	0x080072b5
 800722c:	080072dd 	.word	0x080072dd
 8007230:	080072dd 	.word	0x080072dd
 8007234:	080072dd 	.word	0x080072dd
 8007238:	080072dd 	.word	0x080072dd
 800723c:	080072dd 	.word	0x080072dd
 8007240:	080072dd 	.word	0x080072dd
 8007244:	080072dd 	.word	0x080072dd
 8007248:	080072bd 	.word	0x080072bd
 800724c:	080072dd 	.word	0x080072dd
 8007250:	080072dd 	.word	0x080072dd
 8007254:	080072dd 	.word	0x080072dd
 8007258:	080072dd 	.word	0x080072dd
 800725c:	080072dd 	.word	0x080072dd
 8007260:	080072dd 	.word	0x080072dd
 8007264:	080072dd 	.word	0x080072dd
 8007268:	080072c5 	.word	0x080072c5
 800726c:	080072dd 	.word	0x080072dd
 8007270:	080072dd 	.word	0x080072dd
 8007274:	080072dd 	.word	0x080072dd
 8007278:	080072dd 	.word	0x080072dd
 800727c:	080072dd 	.word	0x080072dd
 8007280:	080072dd 	.word	0x080072dd
 8007284:	080072dd 	.word	0x080072dd
 8007288:	080072cd 	.word	0x080072cd
 800728c:	080072dd 	.word	0x080072dd
 8007290:	080072dd 	.word	0x080072dd
 8007294:	080072dd 	.word	0x080072dd
 8007298:	080072dd 	.word	0x080072dd
 800729c:	080072dd 	.word	0x080072dd
 80072a0:	080072dd 	.word	0x080072dd
 80072a4:	080072dd 	.word	0x080072dd
 80072a8:	080072d5 	.word	0x080072d5
 80072ac:	2301      	movs	r3, #1
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e326      	b.n	8007902 <UART_SetConfig+0x7ae>
 80072b4:	2304      	movs	r3, #4
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e322      	b.n	8007902 <UART_SetConfig+0x7ae>
 80072bc:	2308      	movs	r3, #8
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e31e      	b.n	8007902 <UART_SetConfig+0x7ae>
 80072c4:	2310      	movs	r3, #16
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ca:	e31a      	b.n	8007902 <UART_SetConfig+0x7ae>
 80072cc:	2320      	movs	r3, #32
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d2:	e316      	b.n	8007902 <UART_SetConfig+0x7ae>
 80072d4:	2340      	movs	r3, #64	; 0x40
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072da:	e312      	b.n	8007902 <UART_SetConfig+0x7ae>
 80072dc:	2380      	movs	r3, #128	; 0x80
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e2:	e30e      	b.n	8007902 <UART_SetConfig+0x7ae>
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a69      	ldr	r2, [pc, #420]	; (8007490 <UART_SetConfig+0x33c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d130      	bne.n	8007350 <UART_SetConfig+0x1fc>
 80072ee:	4b67      	ldr	r3, [pc, #412]	; (800748c <UART_SetConfig+0x338>)
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	2b05      	cmp	r3, #5
 80072f8:	d826      	bhi.n	8007348 <UART_SetConfig+0x1f4>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <UART_SetConfig+0x1ac>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007319 	.word	0x08007319
 8007304:	08007321 	.word	0x08007321
 8007308:	08007329 	.word	0x08007329
 800730c:	08007331 	.word	0x08007331
 8007310:	08007339 	.word	0x08007339
 8007314:	08007341 	.word	0x08007341
 8007318:	2300      	movs	r3, #0
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731e:	e2f0      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007320:	2304      	movs	r3, #4
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007326:	e2ec      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007328:	2308      	movs	r3, #8
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732e:	e2e8      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007330:	2310      	movs	r3, #16
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007336:	e2e4      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007338:	2320      	movs	r3, #32
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733e:	e2e0      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007340:	2340      	movs	r3, #64	; 0x40
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007346:	e2dc      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007348:	2380      	movs	r3, #128	; 0x80
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734e:	e2d8      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a4f      	ldr	r2, [pc, #316]	; (8007494 <UART_SetConfig+0x340>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d130      	bne.n	80073bc <UART_SetConfig+0x268>
 800735a:	4b4c      	ldr	r3, [pc, #304]	; (800748c <UART_SetConfig+0x338>)
 800735c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	2b05      	cmp	r3, #5
 8007364:	d826      	bhi.n	80073b4 <UART_SetConfig+0x260>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <UART_SetConfig+0x218>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	08007385 	.word	0x08007385
 8007370:	0800738d 	.word	0x0800738d
 8007374:	08007395 	.word	0x08007395
 8007378:	0800739d 	.word	0x0800739d
 800737c:	080073a5 	.word	0x080073a5
 8007380:	080073ad 	.word	0x080073ad
 8007384:	2300      	movs	r3, #0
 8007386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800738a:	e2ba      	b.n	8007902 <UART_SetConfig+0x7ae>
 800738c:	2304      	movs	r3, #4
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007392:	e2b6      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007394:	2308      	movs	r3, #8
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739a:	e2b2      	b.n	8007902 <UART_SetConfig+0x7ae>
 800739c:	2310      	movs	r3, #16
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a2:	e2ae      	b.n	8007902 <UART_SetConfig+0x7ae>
 80073a4:	2320      	movs	r3, #32
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073aa:	e2aa      	b.n	8007902 <UART_SetConfig+0x7ae>
 80073ac:	2340      	movs	r3, #64	; 0x40
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b2:	e2a6      	b.n	8007902 <UART_SetConfig+0x7ae>
 80073b4:	2380      	movs	r3, #128	; 0x80
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ba:	e2a2      	b.n	8007902 <UART_SetConfig+0x7ae>
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a35      	ldr	r2, [pc, #212]	; (8007498 <UART_SetConfig+0x344>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d130      	bne.n	8007428 <UART_SetConfig+0x2d4>
 80073c6:	4b31      	ldr	r3, [pc, #196]	; (800748c <UART_SetConfig+0x338>)
 80073c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	d826      	bhi.n	8007420 <UART_SetConfig+0x2cc>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <UART_SetConfig+0x284>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	080073f1 	.word	0x080073f1
 80073dc:	080073f9 	.word	0x080073f9
 80073e0:	08007401 	.word	0x08007401
 80073e4:	08007409 	.word	0x08007409
 80073e8:	08007411 	.word	0x08007411
 80073ec:	08007419 	.word	0x08007419
 80073f0:	2300      	movs	r3, #0
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f6:	e284      	b.n	8007902 <UART_SetConfig+0x7ae>
 80073f8:	2304      	movs	r3, #4
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fe:	e280      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007400:	2308      	movs	r3, #8
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007406:	e27c      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007408:	2310      	movs	r3, #16
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740e:	e278      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007410:	2320      	movs	r3, #32
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007416:	e274      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007418:	2340      	movs	r3, #64	; 0x40
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741e:	e270      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007420:	2380      	movs	r3, #128	; 0x80
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007426:	e26c      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1b      	ldr	r2, [pc, #108]	; (800749c <UART_SetConfig+0x348>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d142      	bne.n	80074b8 <UART_SetConfig+0x364>
 8007432:	4b16      	ldr	r3, [pc, #88]	; (800748c <UART_SetConfig+0x338>)
 8007434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	2b05      	cmp	r3, #5
 800743c:	d838      	bhi.n	80074b0 <UART_SetConfig+0x35c>
 800743e:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <UART_SetConfig+0x2f0>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	0800745d 	.word	0x0800745d
 8007448:	08007465 	.word	0x08007465
 800744c:	0800746d 	.word	0x0800746d
 8007450:	08007475 	.word	0x08007475
 8007454:	080074a1 	.word	0x080074a1
 8007458:	080074a9 	.word	0x080074a9
 800745c:	2300      	movs	r3, #0
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007462:	e24e      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007464:	2304      	movs	r3, #4
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746a:	e24a      	b.n	8007902 <UART_SetConfig+0x7ae>
 800746c:	2308      	movs	r3, #8
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007472:	e246      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007474:	2310      	movs	r3, #16
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747a:	e242      	b.n	8007902 <UART_SetConfig+0x7ae>
 800747c:	cfff69f3 	.word	0xcfff69f3
 8007480:	58000c00 	.word	0x58000c00
 8007484:	11fff4ff 	.word	0x11fff4ff
 8007488:	40011000 	.word	0x40011000
 800748c:	58024400 	.word	0x58024400
 8007490:	40004400 	.word	0x40004400
 8007494:	40004800 	.word	0x40004800
 8007498:	40004c00 	.word	0x40004c00
 800749c:	40005000 	.word	0x40005000
 80074a0:	2320      	movs	r3, #32
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a6:	e22c      	b.n	8007902 <UART_SetConfig+0x7ae>
 80074a8:	2340      	movs	r3, #64	; 0x40
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ae:	e228      	b.n	8007902 <UART_SetConfig+0x7ae>
 80074b0:	2380      	movs	r3, #128	; 0x80
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b6:	e224      	b.n	8007902 <UART_SetConfig+0x7ae>
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4ab1      	ldr	r2, [pc, #708]	; (8007784 <UART_SetConfig+0x630>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d176      	bne.n	80075b0 <UART_SetConfig+0x45c>
 80074c2:	4bb1      	ldr	r3, [pc, #708]	; (8007788 <UART_SetConfig+0x634>)
 80074c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074ca:	2b28      	cmp	r3, #40	; 0x28
 80074cc:	d86c      	bhi.n	80075a8 <UART_SetConfig+0x454>
 80074ce:	a201      	add	r2, pc, #4	; (adr r2, 80074d4 <UART_SetConfig+0x380>)
 80074d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d4:	08007579 	.word	0x08007579
 80074d8:	080075a9 	.word	0x080075a9
 80074dc:	080075a9 	.word	0x080075a9
 80074e0:	080075a9 	.word	0x080075a9
 80074e4:	080075a9 	.word	0x080075a9
 80074e8:	080075a9 	.word	0x080075a9
 80074ec:	080075a9 	.word	0x080075a9
 80074f0:	080075a9 	.word	0x080075a9
 80074f4:	08007581 	.word	0x08007581
 80074f8:	080075a9 	.word	0x080075a9
 80074fc:	080075a9 	.word	0x080075a9
 8007500:	080075a9 	.word	0x080075a9
 8007504:	080075a9 	.word	0x080075a9
 8007508:	080075a9 	.word	0x080075a9
 800750c:	080075a9 	.word	0x080075a9
 8007510:	080075a9 	.word	0x080075a9
 8007514:	08007589 	.word	0x08007589
 8007518:	080075a9 	.word	0x080075a9
 800751c:	080075a9 	.word	0x080075a9
 8007520:	080075a9 	.word	0x080075a9
 8007524:	080075a9 	.word	0x080075a9
 8007528:	080075a9 	.word	0x080075a9
 800752c:	080075a9 	.word	0x080075a9
 8007530:	080075a9 	.word	0x080075a9
 8007534:	08007591 	.word	0x08007591
 8007538:	080075a9 	.word	0x080075a9
 800753c:	080075a9 	.word	0x080075a9
 8007540:	080075a9 	.word	0x080075a9
 8007544:	080075a9 	.word	0x080075a9
 8007548:	080075a9 	.word	0x080075a9
 800754c:	080075a9 	.word	0x080075a9
 8007550:	080075a9 	.word	0x080075a9
 8007554:	08007599 	.word	0x08007599
 8007558:	080075a9 	.word	0x080075a9
 800755c:	080075a9 	.word	0x080075a9
 8007560:	080075a9 	.word	0x080075a9
 8007564:	080075a9 	.word	0x080075a9
 8007568:	080075a9 	.word	0x080075a9
 800756c:	080075a9 	.word	0x080075a9
 8007570:	080075a9 	.word	0x080075a9
 8007574:	080075a1 	.word	0x080075a1
 8007578:	2301      	movs	r3, #1
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757e:	e1c0      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007580:	2304      	movs	r3, #4
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007586:	e1bc      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007588:	2308      	movs	r3, #8
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758e:	e1b8      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007590:	2310      	movs	r3, #16
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007596:	e1b4      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007598:	2320      	movs	r3, #32
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759e:	e1b0      	b.n	8007902 <UART_SetConfig+0x7ae>
 80075a0:	2340      	movs	r3, #64	; 0x40
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075a6:	e1ac      	b.n	8007902 <UART_SetConfig+0x7ae>
 80075a8:	2380      	movs	r3, #128	; 0x80
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ae:	e1a8      	b.n	8007902 <UART_SetConfig+0x7ae>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a75      	ldr	r2, [pc, #468]	; (800778c <UART_SetConfig+0x638>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d130      	bne.n	800761c <UART_SetConfig+0x4c8>
 80075ba:	4b73      	ldr	r3, [pc, #460]	; (8007788 <UART_SetConfig+0x634>)
 80075bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	2b05      	cmp	r3, #5
 80075c4:	d826      	bhi.n	8007614 <UART_SetConfig+0x4c0>
 80075c6:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <UART_SetConfig+0x478>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075e5 	.word	0x080075e5
 80075d0:	080075ed 	.word	0x080075ed
 80075d4:	080075f5 	.word	0x080075f5
 80075d8:	080075fd 	.word	0x080075fd
 80075dc:	08007605 	.word	0x08007605
 80075e0:	0800760d 	.word	0x0800760d
 80075e4:	2300      	movs	r3, #0
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ea:	e18a      	b.n	8007902 <UART_SetConfig+0x7ae>
 80075ec:	2304      	movs	r3, #4
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f2:	e186      	b.n	8007902 <UART_SetConfig+0x7ae>
 80075f4:	2308      	movs	r3, #8
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fa:	e182      	b.n	8007902 <UART_SetConfig+0x7ae>
 80075fc:	2310      	movs	r3, #16
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007602:	e17e      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007604:	2320      	movs	r3, #32
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760a:	e17a      	b.n	8007902 <UART_SetConfig+0x7ae>
 800760c:	2340      	movs	r3, #64	; 0x40
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007612:	e176      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007614:	2380      	movs	r3, #128	; 0x80
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761a:	e172      	b.n	8007902 <UART_SetConfig+0x7ae>
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a5b      	ldr	r2, [pc, #364]	; (8007790 <UART_SetConfig+0x63c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d130      	bne.n	8007688 <UART_SetConfig+0x534>
 8007626:	4b58      	ldr	r3, [pc, #352]	; (8007788 <UART_SetConfig+0x634>)
 8007628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	2b05      	cmp	r3, #5
 8007630:	d826      	bhi.n	8007680 <UART_SetConfig+0x52c>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <UART_SetConfig+0x4e4>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	08007651 	.word	0x08007651
 800763c:	08007659 	.word	0x08007659
 8007640:	08007661 	.word	0x08007661
 8007644:	08007669 	.word	0x08007669
 8007648:	08007671 	.word	0x08007671
 800764c:	08007679 	.word	0x08007679
 8007650:	2300      	movs	r3, #0
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007656:	e154      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007658:	2304      	movs	r3, #4
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765e:	e150      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007660:	2308      	movs	r3, #8
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007666:	e14c      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007668:	2310      	movs	r3, #16
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766e:	e148      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007670:	2320      	movs	r3, #32
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007676:	e144      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007678:	2340      	movs	r3, #64	; 0x40
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767e:	e140      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007680:	2380      	movs	r3, #128	; 0x80
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007686:	e13c      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a41      	ldr	r2, [pc, #260]	; (8007794 <UART_SetConfig+0x640>)
 800768e:	4293      	cmp	r3, r2
 8007690:	f040 8082 	bne.w	8007798 <UART_SetConfig+0x644>
 8007694:	4b3c      	ldr	r3, [pc, #240]	; (8007788 <UART_SetConfig+0x634>)
 8007696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007698:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800769c:	2b28      	cmp	r3, #40	; 0x28
 800769e:	d86d      	bhi.n	800777c <UART_SetConfig+0x628>
 80076a0:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <UART_SetConfig+0x554>)
 80076a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a6:	bf00      	nop
 80076a8:	0800774d 	.word	0x0800774d
 80076ac:	0800777d 	.word	0x0800777d
 80076b0:	0800777d 	.word	0x0800777d
 80076b4:	0800777d 	.word	0x0800777d
 80076b8:	0800777d 	.word	0x0800777d
 80076bc:	0800777d 	.word	0x0800777d
 80076c0:	0800777d 	.word	0x0800777d
 80076c4:	0800777d 	.word	0x0800777d
 80076c8:	08007755 	.word	0x08007755
 80076cc:	0800777d 	.word	0x0800777d
 80076d0:	0800777d 	.word	0x0800777d
 80076d4:	0800777d 	.word	0x0800777d
 80076d8:	0800777d 	.word	0x0800777d
 80076dc:	0800777d 	.word	0x0800777d
 80076e0:	0800777d 	.word	0x0800777d
 80076e4:	0800777d 	.word	0x0800777d
 80076e8:	0800775d 	.word	0x0800775d
 80076ec:	0800777d 	.word	0x0800777d
 80076f0:	0800777d 	.word	0x0800777d
 80076f4:	0800777d 	.word	0x0800777d
 80076f8:	0800777d 	.word	0x0800777d
 80076fc:	0800777d 	.word	0x0800777d
 8007700:	0800777d 	.word	0x0800777d
 8007704:	0800777d 	.word	0x0800777d
 8007708:	08007765 	.word	0x08007765
 800770c:	0800777d 	.word	0x0800777d
 8007710:	0800777d 	.word	0x0800777d
 8007714:	0800777d 	.word	0x0800777d
 8007718:	0800777d 	.word	0x0800777d
 800771c:	0800777d 	.word	0x0800777d
 8007720:	0800777d 	.word	0x0800777d
 8007724:	0800777d 	.word	0x0800777d
 8007728:	0800776d 	.word	0x0800776d
 800772c:	0800777d 	.word	0x0800777d
 8007730:	0800777d 	.word	0x0800777d
 8007734:	0800777d 	.word	0x0800777d
 8007738:	0800777d 	.word	0x0800777d
 800773c:	0800777d 	.word	0x0800777d
 8007740:	0800777d 	.word	0x0800777d
 8007744:	0800777d 	.word	0x0800777d
 8007748:	08007775 	.word	0x08007775
 800774c:	2301      	movs	r3, #1
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007752:	e0d6      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007754:	2304      	movs	r3, #4
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800775a:	e0d2      	b.n	8007902 <UART_SetConfig+0x7ae>
 800775c:	2308      	movs	r3, #8
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007762:	e0ce      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007764:	2310      	movs	r3, #16
 8007766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776a:	e0ca      	b.n	8007902 <UART_SetConfig+0x7ae>
 800776c:	2320      	movs	r3, #32
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007772:	e0c6      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007774:	2340      	movs	r3, #64	; 0x40
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777a:	e0c2      	b.n	8007902 <UART_SetConfig+0x7ae>
 800777c:	2380      	movs	r3, #128	; 0x80
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007782:	e0be      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007784:	40011400 	.word	0x40011400
 8007788:	58024400 	.word	0x58024400
 800778c:	40007800 	.word	0x40007800
 8007790:	40007c00 	.word	0x40007c00
 8007794:	40011800 	.word	0x40011800
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4aad      	ldr	r2, [pc, #692]	; (8007a54 <UART_SetConfig+0x900>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d176      	bne.n	8007890 <UART_SetConfig+0x73c>
 80077a2:	4bad      	ldr	r3, [pc, #692]	; (8007a58 <UART_SetConfig+0x904>)
 80077a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077aa:	2b28      	cmp	r3, #40	; 0x28
 80077ac:	d86c      	bhi.n	8007888 <UART_SetConfig+0x734>
 80077ae:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <UART_SetConfig+0x660>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	08007859 	.word	0x08007859
 80077b8:	08007889 	.word	0x08007889
 80077bc:	08007889 	.word	0x08007889
 80077c0:	08007889 	.word	0x08007889
 80077c4:	08007889 	.word	0x08007889
 80077c8:	08007889 	.word	0x08007889
 80077cc:	08007889 	.word	0x08007889
 80077d0:	08007889 	.word	0x08007889
 80077d4:	08007861 	.word	0x08007861
 80077d8:	08007889 	.word	0x08007889
 80077dc:	08007889 	.word	0x08007889
 80077e0:	08007889 	.word	0x08007889
 80077e4:	08007889 	.word	0x08007889
 80077e8:	08007889 	.word	0x08007889
 80077ec:	08007889 	.word	0x08007889
 80077f0:	08007889 	.word	0x08007889
 80077f4:	08007869 	.word	0x08007869
 80077f8:	08007889 	.word	0x08007889
 80077fc:	08007889 	.word	0x08007889
 8007800:	08007889 	.word	0x08007889
 8007804:	08007889 	.word	0x08007889
 8007808:	08007889 	.word	0x08007889
 800780c:	08007889 	.word	0x08007889
 8007810:	08007889 	.word	0x08007889
 8007814:	08007871 	.word	0x08007871
 8007818:	08007889 	.word	0x08007889
 800781c:	08007889 	.word	0x08007889
 8007820:	08007889 	.word	0x08007889
 8007824:	08007889 	.word	0x08007889
 8007828:	08007889 	.word	0x08007889
 800782c:	08007889 	.word	0x08007889
 8007830:	08007889 	.word	0x08007889
 8007834:	08007879 	.word	0x08007879
 8007838:	08007889 	.word	0x08007889
 800783c:	08007889 	.word	0x08007889
 8007840:	08007889 	.word	0x08007889
 8007844:	08007889 	.word	0x08007889
 8007848:	08007889 	.word	0x08007889
 800784c:	08007889 	.word	0x08007889
 8007850:	08007889 	.word	0x08007889
 8007854:	08007881 	.word	0x08007881
 8007858:	2301      	movs	r3, #1
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785e:	e050      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007860:	2304      	movs	r3, #4
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007866:	e04c      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007868:	2308      	movs	r3, #8
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800786e:	e048      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007870:	2310      	movs	r3, #16
 8007872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007876:	e044      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007878:	2320      	movs	r3, #32
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787e:	e040      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007880:	2340      	movs	r3, #64	; 0x40
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007886:	e03c      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007888:	2380      	movs	r3, #128	; 0x80
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788e:	e038      	b.n	8007902 <UART_SetConfig+0x7ae>
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a71      	ldr	r2, [pc, #452]	; (8007a5c <UART_SetConfig+0x908>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d130      	bne.n	80078fc <UART_SetConfig+0x7a8>
 800789a:	4b6f      	ldr	r3, [pc, #444]	; (8007a58 <UART_SetConfig+0x904>)
 800789c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789e:	f003 0307 	and.w	r3, r3, #7
 80078a2:	2b05      	cmp	r3, #5
 80078a4:	d826      	bhi.n	80078f4 <UART_SetConfig+0x7a0>
 80078a6:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <UART_SetConfig+0x758>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	080078c5 	.word	0x080078c5
 80078b0:	080078cd 	.word	0x080078cd
 80078b4:	080078d5 	.word	0x080078d5
 80078b8:	080078dd 	.word	0x080078dd
 80078bc:	080078e5 	.word	0x080078e5
 80078c0:	080078ed 	.word	0x080078ed
 80078c4:	2302      	movs	r3, #2
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ca:	e01a      	b.n	8007902 <UART_SetConfig+0x7ae>
 80078cc:	2304      	movs	r3, #4
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d2:	e016      	b.n	8007902 <UART_SetConfig+0x7ae>
 80078d4:	2308      	movs	r3, #8
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078da:	e012      	b.n	8007902 <UART_SetConfig+0x7ae>
 80078dc:	2310      	movs	r3, #16
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e2:	e00e      	b.n	8007902 <UART_SetConfig+0x7ae>
 80078e4:	2320      	movs	r3, #32
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ea:	e00a      	b.n	8007902 <UART_SetConfig+0x7ae>
 80078ec:	2340      	movs	r3, #64	; 0x40
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f2:	e006      	b.n	8007902 <UART_SetConfig+0x7ae>
 80078f4:	2380      	movs	r3, #128	; 0x80
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fa:	e002      	b.n	8007902 <UART_SetConfig+0x7ae>
 80078fc:	2380      	movs	r3, #128	; 0x80
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a55      	ldr	r2, [pc, #340]	; (8007a5c <UART_SetConfig+0x908>)
 8007908:	4293      	cmp	r3, r2
 800790a:	f040 80f8 	bne.w	8007afe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800790e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007912:	2b20      	cmp	r3, #32
 8007914:	dc46      	bgt.n	80079a4 <UART_SetConfig+0x850>
 8007916:	2b02      	cmp	r3, #2
 8007918:	db75      	blt.n	8007a06 <UART_SetConfig+0x8b2>
 800791a:	3b02      	subs	r3, #2
 800791c:	2b1e      	cmp	r3, #30
 800791e:	d872      	bhi.n	8007a06 <UART_SetConfig+0x8b2>
 8007920:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <UART_SetConfig+0x7d4>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	080079ab 	.word	0x080079ab
 800792c:	08007a07 	.word	0x08007a07
 8007930:	080079b3 	.word	0x080079b3
 8007934:	08007a07 	.word	0x08007a07
 8007938:	08007a07 	.word	0x08007a07
 800793c:	08007a07 	.word	0x08007a07
 8007940:	080079c3 	.word	0x080079c3
 8007944:	08007a07 	.word	0x08007a07
 8007948:	08007a07 	.word	0x08007a07
 800794c:	08007a07 	.word	0x08007a07
 8007950:	08007a07 	.word	0x08007a07
 8007954:	08007a07 	.word	0x08007a07
 8007958:	08007a07 	.word	0x08007a07
 800795c:	08007a07 	.word	0x08007a07
 8007960:	080079d3 	.word	0x080079d3
 8007964:	08007a07 	.word	0x08007a07
 8007968:	08007a07 	.word	0x08007a07
 800796c:	08007a07 	.word	0x08007a07
 8007970:	08007a07 	.word	0x08007a07
 8007974:	08007a07 	.word	0x08007a07
 8007978:	08007a07 	.word	0x08007a07
 800797c:	08007a07 	.word	0x08007a07
 8007980:	08007a07 	.word	0x08007a07
 8007984:	08007a07 	.word	0x08007a07
 8007988:	08007a07 	.word	0x08007a07
 800798c:	08007a07 	.word	0x08007a07
 8007990:	08007a07 	.word	0x08007a07
 8007994:	08007a07 	.word	0x08007a07
 8007998:	08007a07 	.word	0x08007a07
 800799c:	08007a07 	.word	0x08007a07
 80079a0:	080079f9 	.word	0x080079f9
 80079a4:	2b40      	cmp	r3, #64	; 0x40
 80079a6:	d02a      	beq.n	80079fe <UART_SetConfig+0x8aa>
 80079a8:	e02d      	b.n	8007a06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80079aa:	f7fe fa07 	bl	8005dbc <HAL_RCCEx_GetD3PCLK1Freq>
 80079ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079b0:	e02f      	b.n	8007a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe fa16 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c0:	e027      	b.n	8007a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079c2:	f107 0318 	add.w	r3, r7, #24
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fe fb62 	bl	8006090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079d0:	e01f      	b.n	8007a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079d2:	4b21      	ldr	r3, [pc, #132]	; (8007a58 <UART_SetConfig+0x904>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079de:	4b1e      	ldr	r3, [pc, #120]	; (8007a58 <UART_SetConfig+0x904>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	08db      	lsrs	r3, r3, #3
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	4a1d      	ldr	r2, [pc, #116]	; (8007a60 <UART_SetConfig+0x90c>)
 80079ea:	fa22 f303 	lsr.w	r3, r2, r3
 80079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079f0:	e00f      	b.n	8007a12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80079f2:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <UART_SetConfig+0x90c>)
 80079f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f6:	e00c      	b.n	8007a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079f8:	4b1a      	ldr	r3, [pc, #104]	; (8007a64 <UART_SetConfig+0x910>)
 80079fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079fc:	e009      	b.n	8007a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a04:	e005      	b.n	8007a12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 81ee 	beq.w	8007df6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	4a12      	ldr	r2, [pc, #72]	; (8007a68 <UART_SetConfig+0x914>)
 8007a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a24:	461a      	mov	r2, r3
 8007a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a2c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	4413      	add	r3, r2
 8007a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d305      	bcc.n	8007a4a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d910      	bls.n	8007a6c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a50:	e1d1      	b.n	8007df6 <UART_SetConfig+0xca2>
 8007a52:	bf00      	nop
 8007a54:	40011c00 	.word	0x40011c00
 8007a58:	58024400 	.word	0x58024400
 8007a5c:	58000c00 	.word	0x58000c00
 8007a60:	03d09000 	.word	0x03d09000
 8007a64:	003d0900 	.word	0x003d0900
 8007a68:	08008ec0 	.word	0x08008ec0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a6e:	2200      	movs	r2, #0
 8007a70:	60bb      	str	r3, [r7, #8]
 8007a72:	60fa      	str	r2, [r7, #12]
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	4ac0      	ldr	r2, [pc, #768]	; (8007d7c <UART_SetConfig+0xc28>)
 8007a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	2200      	movs	r2, #0
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	607a      	str	r2, [r7, #4]
 8007a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a8e:	f7f8 fc7f 	bl	8000390 <__aeabi_uldivmod>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4610      	mov	r0, r2
 8007a98:	4619      	mov	r1, r3
 8007a9a:	f04f 0200 	mov.w	r2, #0
 8007a9e:	f04f 0300 	mov.w	r3, #0
 8007aa2:	020b      	lsls	r3, r1, #8
 8007aa4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007aa8:	0202      	lsls	r2, r0, #8
 8007aaa:	6979      	ldr	r1, [r7, #20]
 8007aac:	6849      	ldr	r1, [r1, #4]
 8007aae:	0849      	lsrs	r1, r1, #1
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	eb12 0804 	adds.w	r8, r2, r4
 8007aba:	eb43 0905 	adc.w	r9, r3, r5
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	469a      	mov	sl, r3
 8007ac6:	4693      	mov	fp, r2
 8007ac8:	4652      	mov	r2, sl
 8007aca:	465b      	mov	r3, fp
 8007acc:	4640      	mov	r0, r8
 8007ace:	4649      	mov	r1, r9
 8007ad0:	f7f8 fc5e 	bl	8000390 <__aeabi_uldivmod>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4613      	mov	r3, r2
 8007ada:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ae2:	d308      	bcc.n	8007af6 <UART_SetConfig+0x9a2>
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aea:	d204      	bcs.n	8007af6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007af2:	60da      	str	r2, [r3, #12]
 8007af4:	e17f      	b.n	8007df6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007afc:	e17b      	b.n	8007df6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b06:	f040 80bd 	bne.w	8007c84 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007b0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	dc48      	bgt.n	8007ba4 <UART_SetConfig+0xa50>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	db7b      	blt.n	8007c0e <UART_SetConfig+0xaba>
 8007b16:	2b20      	cmp	r3, #32
 8007b18:	d879      	bhi.n	8007c0e <UART_SetConfig+0xaba>
 8007b1a:	a201      	add	r2, pc, #4	; (adr r2, 8007b20 <UART_SetConfig+0x9cc>)
 8007b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b20:	08007bab 	.word	0x08007bab
 8007b24:	08007bb3 	.word	0x08007bb3
 8007b28:	08007c0f 	.word	0x08007c0f
 8007b2c:	08007c0f 	.word	0x08007c0f
 8007b30:	08007bbb 	.word	0x08007bbb
 8007b34:	08007c0f 	.word	0x08007c0f
 8007b38:	08007c0f 	.word	0x08007c0f
 8007b3c:	08007c0f 	.word	0x08007c0f
 8007b40:	08007bcb 	.word	0x08007bcb
 8007b44:	08007c0f 	.word	0x08007c0f
 8007b48:	08007c0f 	.word	0x08007c0f
 8007b4c:	08007c0f 	.word	0x08007c0f
 8007b50:	08007c0f 	.word	0x08007c0f
 8007b54:	08007c0f 	.word	0x08007c0f
 8007b58:	08007c0f 	.word	0x08007c0f
 8007b5c:	08007c0f 	.word	0x08007c0f
 8007b60:	08007bdb 	.word	0x08007bdb
 8007b64:	08007c0f 	.word	0x08007c0f
 8007b68:	08007c0f 	.word	0x08007c0f
 8007b6c:	08007c0f 	.word	0x08007c0f
 8007b70:	08007c0f 	.word	0x08007c0f
 8007b74:	08007c0f 	.word	0x08007c0f
 8007b78:	08007c0f 	.word	0x08007c0f
 8007b7c:	08007c0f 	.word	0x08007c0f
 8007b80:	08007c0f 	.word	0x08007c0f
 8007b84:	08007c0f 	.word	0x08007c0f
 8007b88:	08007c0f 	.word	0x08007c0f
 8007b8c:	08007c0f 	.word	0x08007c0f
 8007b90:	08007c0f 	.word	0x08007c0f
 8007b94:	08007c0f 	.word	0x08007c0f
 8007b98:	08007c0f 	.word	0x08007c0f
 8007b9c:	08007c0f 	.word	0x08007c0f
 8007ba0:	08007c01 	.word	0x08007c01
 8007ba4:	2b40      	cmp	r3, #64	; 0x40
 8007ba6:	d02e      	beq.n	8007c06 <UART_SetConfig+0xab2>
 8007ba8:	e031      	b.n	8007c0e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007baa:	f7fc fa45 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 8007bae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007bb0:	e033      	b.n	8007c1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bb2:	f7fc fa57 	bl	8004064 <HAL_RCC_GetPCLK2Freq>
 8007bb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007bb8:	e02f      	b.n	8007c1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe f912 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bc8:	e027      	b.n	8007c1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bca:	f107 0318 	add.w	r3, r7, #24
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe fa5e 	bl	8006090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bd8:	e01f      	b.n	8007c1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bda:	4b69      	ldr	r3, [pc, #420]	; (8007d80 <UART_SetConfig+0xc2c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d009      	beq.n	8007bfa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007be6:	4b66      	ldr	r3, [pc, #408]	; (8007d80 <UART_SetConfig+0xc2c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	08db      	lsrs	r3, r3, #3
 8007bec:	f003 0303 	and.w	r3, r3, #3
 8007bf0:	4a64      	ldr	r2, [pc, #400]	; (8007d84 <UART_SetConfig+0xc30>)
 8007bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007bf8:	e00f      	b.n	8007c1a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007bfa:	4b62      	ldr	r3, [pc, #392]	; (8007d84 <UART_SetConfig+0xc30>)
 8007bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bfe:	e00c      	b.n	8007c1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c00:	4b61      	ldr	r3, [pc, #388]	; (8007d88 <UART_SetConfig+0xc34>)
 8007c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c04:	e009      	b.n	8007c1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c0c:	e005      	b.n	8007c1a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 80ea 	beq.w	8007df6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	4a55      	ldr	r2, [pc, #340]	; (8007d7c <UART_SetConfig+0xc28>)
 8007c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c34:	005a      	lsls	r2, r3, #1
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	441a      	add	r2, r3
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c46:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	2b0f      	cmp	r3, #15
 8007c4c:	d916      	bls.n	8007c7c <UART_SetConfig+0xb28>
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c54:	d212      	bcs.n	8007c7c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	f023 030f 	bic.w	r3, r3, #15
 8007c5e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	085b      	lsrs	r3, r3, #1
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007c78:	60da      	str	r2, [r3, #12]
 8007c7a:	e0bc      	b.n	8007df6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007c82:	e0b8      	b.n	8007df6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	dc4b      	bgt.n	8007d24 <UART_SetConfig+0xbd0>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f2c0 8087 	blt.w	8007da0 <UART_SetConfig+0xc4c>
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	f200 8084 	bhi.w	8007da0 <UART_SetConfig+0xc4c>
 8007c98:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <UART_SetConfig+0xb4c>)
 8007c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9e:	bf00      	nop
 8007ca0:	08007d2b 	.word	0x08007d2b
 8007ca4:	08007d33 	.word	0x08007d33
 8007ca8:	08007da1 	.word	0x08007da1
 8007cac:	08007da1 	.word	0x08007da1
 8007cb0:	08007d3b 	.word	0x08007d3b
 8007cb4:	08007da1 	.word	0x08007da1
 8007cb8:	08007da1 	.word	0x08007da1
 8007cbc:	08007da1 	.word	0x08007da1
 8007cc0:	08007d4b 	.word	0x08007d4b
 8007cc4:	08007da1 	.word	0x08007da1
 8007cc8:	08007da1 	.word	0x08007da1
 8007ccc:	08007da1 	.word	0x08007da1
 8007cd0:	08007da1 	.word	0x08007da1
 8007cd4:	08007da1 	.word	0x08007da1
 8007cd8:	08007da1 	.word	0x08007da1
 8007cdc:	08007da1 	.word	0x08007da1
 8007ce0:	08007d5b 	.word	0x08007d5b
 8007ce4:	08007da1 	.word	0x08007da1
 8007ce8:	08007da1 	.word	0x08007da1
 8007cec:	08007da1 	.word	0x08007da1
 8007cf0:	08007da1 	.word	0x08007da1
 8007cf4:	08007da1 	.word	0x08007da1
 8007cf8:	08007da1 	.word	0x08007da1
 8007cfc:	08007da1 	.word	0x08007da1
 8007d00:	08007da1 	.word	0x08007da1
 8007d04:	08007da1 	.word	0x08007da1
 8007d08:	08007da1 	.word	0x08007da1
 8007d0c:	08007da1 	.word	0x08007da1
 8007d10:	08007da1 	.word	0x08007da1
 8007d14:	08007da1 	.word	0x08007da1
 8007d18:	08007da1 	.word	0x08007da1
 8007d1c:	08007da1 	.word	0x08007da1
 8007d20:	08007d93 	.word	0x08007d93
 8007d24:	2b40      	cmp	r3, #64	; 0x40
 8007d26:	d037      	beq.n	8007d98 <UART_SetConfig+0xc44>
 8007d28:	e03a      	b.n	8007da0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d2a:	f7fc f985 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 8007d2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d30:	e03c      	b.n	8007dac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d32:	f7fc f997 	bl	8004064 <HAL_RCC_GetPCLK2Freq>
 8007d36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d38:	e038      	b.n	8007dac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fe f852 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d48:	e030      	b.n	8007dac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d4a:	f107 0318 	add.w	r3, r7, #24
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe f99e 	bl	8006090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d58:	e028      	b.n	8007dac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d5a:	4b09      	ldr	r3, [pc, #36]	; (8007d80 <UART_SetConfig+0xc2c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0320 	and.w	r3, r3, #32
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d012      	beq.n	8007d8c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d66:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <UART_SetConfig+0xc2c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	08db      	lsrs	r3, r3, #3
 8007d6c:	f003 0303 	and.w	r3, r3, #3
 8007d70:	4a04      	ldr	r2, [pc, #16]	; (8007d84 <UART_SetConfig+0xc30>)
 8007d72:	fa22 f303 	lsr.w	r3, r2, r3
 8007d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d78:	e018      	b.n	8007dac <UART_SetConfig+0xc58>
 8007d7a:	bf00      	nop
 8007d7c:	08008ec0 	.word	0x08008ec0
 8007d80:	58024400 	.word	0x58024400
 8007d84:	03d09000 	.word	0x03d09000
 8007d88:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007d8c:	4b24      	ldr	r3, [pc, #144]	; (8007e20 <UART_SetConfig+0xccc>)
 8007d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d90:	e00c      	b.n	8007dac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d92:	4b24      	ldr	r3, [pc, #144]	; (8007e24 <UART_SetConfig+0xcd0>)
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d96:	e009      	b.n	8007dac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d9e:	e005      	b.n	8007dac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007daa:	bf00      	nop
    }

    if (pclk != 0U)
 8007dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d021      	beq.n	8007df6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	4a1c      	ldr	r2, [pc, #112]	; (8007e28 <UART_SetConfig+0xcd4>)
 8007db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc0:	fbb3 f2f2 	udiv	r2, r3, r2
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	085b      	lsrs	r3, r3, #1
 8007dca:	441a      	add	r2, r3
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	2b0f      	cmp	r3, #15
 8007dda:	d909      	bls.n	8007df0 <UART_SetConfig+0xc9c>
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de2:	d205      	bcs.n	8007df0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60da      	str	r2, [r3, #12]
 8007dee:	e002      	b.n	8007df6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007e12:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3748      	adds	r7, #72	; 0x48
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e20:	03d09000 	.word	0x03d09000
 8007e24:	003d0900 	.word	0x003d0900
 8007e28:	08008ec0 	.word	0x08008ec0

08007e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00a      	beq.n	8007e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9e:	f003 0308 	and.w	r3, r3, #8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec0:	f003 0310 	and.w	r3, r3, #16
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00a      	beq.n	8007ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	430a      	orrs	r2, r1
 8007efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d01a      	beq.n	8007f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f2a:	d10a      	bne.n	8007f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	605a      	str	r2, [r3, #4]
  }
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b098      	sub	sp, #96	; 0x60
 8007f74:	af02      	add	r7, sp, #8
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f80:	f7f9 fbc2 	bl	8001708 <HAL_GetTick>
 8007f84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0308 	and.w	r3, r3, #8
 8007f90:	2b08      	cmp	r3, #8
 8007f92:	d12f      	bne.n	8007ff4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f88e 	bl	80080c4 <UART_WaitOnFlagUntilTimeout>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d022      	beq.n	8007ff4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8007fce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fd4:	e841 2300 	strex	r3, r2, [r1]
 8007fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e6      	bne.n	8007fae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e063      	b.n	80080bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d149      	bne.n	8008096 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008002:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800800a:	2200      	movs	r2, #0
 800800c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f857 	bl	80080c4 <UART_WaitOnFlagUntilTimeout>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d03c      	beq.n	8008096 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	623b      	str	r3, [r7, #32]
   return(result);
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008030:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800803a:	633b      	str	r3, [r7, #48]	; 0x30
 800803c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e6      	bne.n	800801c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3308      	adds	r3, #8
 8008054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	60fb      	str	r3, [r7, #12]
   return(result);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f023 0301 	bic.w	r3, r3, #1
 8008064:	64bb      	str	r3, [r7, #72]	; 0x48
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3308      	adds	r3, #8
 800806c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800806e:	61fa      	str	r2, [r7, #28]
 8008070:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	69b9      	ldr	r1, [r7, #24]
 8008074:	69fa      	ldr	r2, [r7, #28]
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	617b      	str	r3, [r7, #20]
   return(result);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e5      	bne.n	800804e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2220      	movs	r2, #32
 8008086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e012      	b.n	80080bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2220      	movs	r2, #32
 80080a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3758      	adds	r7, #88	; 0x58
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	4613      	mov	r3, r2
 80080d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080d4:	e049      	b.n	800816a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080dc:	d045      	beq.n	800816a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080de:	f7f9 fb13 	bl	8001708 <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d302      	bcc.n	80080f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d101      	bne.n	80080f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e048      	b.n	800818a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d031      	beq.n	800816a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	f003 0308 	and.w	r3, r3, #8
 8008110:	2b08      	cmp	r3, #8
 8008112:	d110      	bne.n	8008136 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2208      	movs	r2, #8
 800811a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 f839 	bl	8008194 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2208      	movs	r2, #8
 8008126:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e029      	b.n	800818a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008144:	d111      	bne.n	800816a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800814e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 f81f 	bl	8008194 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2220      	movs	r2, #32
 800815a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e00f      	b.n	800818a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69da      	ldr	r2, [r3, #28]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	4013      	ands	r3, r2
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	429a      	cmp	r2, r3
 8008178:	bf0c      	ite	eq
 800817a:	2301      	moveq	r3, #1
 800817c:	2300      	movne	r3, #0
 800817e:	b2db      	uxtb	r3, r3
 8008180:	461a      	mov	r2, r3
 8008182:	79fb      	ldrb	r3, [r7, #7]
 8008184:	429a      	cmp	r2, r3
 8008186:	d0a6      	beq.n	80080d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008194:	b480      	push	{r7}
 8008196:	b095      	sub	sp, #84	; 0x54
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ba:	643b      	str	r3, [r7, #64]	; 0x40
 80081bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e6      	bne.n	800819c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3308      	adds	r3, #8
 80081d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80081de:	69fa      	ldr	r2, [r7, #28]
 80081e0:	4b1e      	ldr	r3, [pc, #120]	; (800825c <UART_EndRxTransfer+0xc8>)
 80081e2:	4013      	ands	r3, r2
 80081e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3308      	adds	r3, #8
 80081ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1e5      	bne.n	80081ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008206:	2b01      	cmp	r3, #1
 8008208:	d118      	bne.n	800823c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	e853 3f00 	ldrex	r3, [r3]
 8008216:	60bb      	str	r3, [r7, #8]
   return(result);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f023 0310 	bic.w	r3, r3, #16
 800821e:	647b      	str	r3, [r7, #68]	; 0x44
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	461a      	mov	r2, r3
 8008226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008228:	61bb      	str	r3, [r7, #24]
 800822a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	6979      	ldr	r1, [r7, #20]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	e841 2300 	strex	r3, r2, [r1]
 8008234:	613b      	str	r3, [r7, #16]
   return(result);
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e6      	bne.n	800820a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2220      	movs	r2, #32
 8008240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008250:	bf00      	nop
 8008252:	3754      	adds	r7, #84	; 0x54
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	effffffe 	.word	0xeffffffe

08008260 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800826e:	2b01      	cmp	r3, #1
 8008270:	d101      	bne.n	8008276 <HAL_UARTEx_DisableFifoMode+0x16>
 8008272:	2302      	movs	r3, #2
 8008274:	e027      	b.n	80082c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2224      	movs	r2, #36	; 0x24
 8008282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0201 	bic.w	r2, r2, #1
 800829c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082e6:	2302      	movs	r3, #2
 80082e8:	e02d      	b.n	8008346 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2224      	movs	r2, #36	; 0x24
 80082f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f022 0201 	bic.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f850 	bl	80083cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2220      	movs	r2, #32
 8008338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008362:	2302      	movs	r3, #2
 8008364:	e02d      	b.n	80083c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2224      	movs	r2, #36	; 0x24
 8008372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0201 	bic.w	r2, r2, #1
 800838c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f812 	bl	80083cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d108      	bne.n	80083ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083ec:	e031      	b.n	8008452 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083ee:	2310      	movs	r3, #16
 80083f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083f2:	2310      	movs	r3, #16
 80083f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	0e5b      	lsrs	r3, r3, #25
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	f003 0307 	and.w	r3, r3, #7
 8008404:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	0f5b      	lsrs	r3, r3, #29
 800840e:	b2db      	uxtb	r3, r3
 8008410:	f003 0307 	and.w	r3, r3, #7
 8008414:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	7b3a      	ldrb	r2, [r7, #12]
 800841a:	4911      	ldr	r1, [pc, #68]	; (8008460 <UARTEx_SetNbDataToProcess+0x94>)
 800841c:	5c8a      	ldrb	r2, [r1, r2]
 800841e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008422:	7b3a      	ldrb	r2, [r7, #12]
 8008424:	490f      	ldr	r1, [pc, #60]	; (8008464 <UARTEx_SetNbDataToProcess+0x98>)
 8008426:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008428:	fb93 f3f2 	sdiv	r3, r3, r2
 800842c:	b29a      	uxth	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	7b7a      	ldrb	r2, [r7, #13]
 8008438:	4909      	ldr	r1, [pc, #36]	; (8008460 <UARTEx_SetNbDataToProcess+0x94>)
 800843a:	5c8a      	ldrb	r2, [r1, r2]
 800843c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008440:	7b7a      	ldrb	r2, [r7, #13]
 8008442:	4908      	ldr	r1, [pc, #32]	; (8008464 <UARTEx_SetNbDataToProcess+0x98>)
 8008444:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008446:	fb93 f3f2 	sdiv	r3, r3, r2
 800844a:	b29a      	uxth	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008452:	bf00      	nop
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	08008ed8 	.word	0x08008ed8
 8008464:	08008ee0 	.word	0x08008ee0

08008468 <siprintf>:
 8008468:	b40e      	push	{r1, r2, r3}
 800846a:	b500      	push	{lr}
 800846c:	b09c      	sub	sp, #112	; 0x70
 800846e:	ab1d      	add	r3, sp, #116	; 0x74
 8008470:	9002      	str	r0, [sp, #8]
 8008472:	9006      	str	r0, [sp, #24]
 8008474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008478:	4809      	ldr	r0, [pc, #36]	; (80084a0 <siprintf+0x38>)
 800847a:	9107      	str	r1, [sp, #28]
 800847c:	9104      	str	r1, [sp, #16]
 800847e:	4909      	ldr	r1, [pc, #36]	; (80084a4 <siprintf+0x3c>)
 8008480:	f853 2b04 	ldr.w	r2, [r3], #4
 8008484:	9105      	str	r1, [sp, #20]
 8008486:	6800      	ldr	r0, [r0, #0]
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	a902      	add	r1, sp, #8
 800848c:	f000 f992 	bl	80087b4 <_svfiprintf_r>
 8008490:	9b02      	ldr	r3, [sp, #8]
 8008492:	2200      	movs	r2, #0
 8008494:	701a      	strb	r2, [r3, #0]
 8008496:	b01c      	add	sp, #112	; 0x70
 8008498:	f85d eb04 	ldr.w	lr, [sp], #4
 800849c:	b003      	add	sp, #12
 800849e:	4770      	bx	lr
 80084a0:	2400005c 	.word	0x2400005c
 80084a4:	ffff0208 	.word	0xffff0208

080084a8 <memset>:
 80084a8:	4402      	add	r2, r0
 80084aa:	4603      	mov	r3, r0
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d100      	bne.n	80084b2 <memset+0xa>
 80084b0:	4770      	bx	lr
 80084b2:	f803 1b01 	strb.w	r1, [r3], #1
 80084b6:	e7f9      	b.n	80084ac <memset+0x4>

080084b8 <__errno>:
 80084b8:	4b01      	ldr	r3, [pc, #4]	; (80084c0 <__errno+0x8>)
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	2400005c 	.word	0x2400005c

080084c4 <__libc_init_array>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4d0d      	ldr	r5, [pc, #52]	; (80084fc <__libc_init_array+0x38>)
 80084c8:	4c0d      	ldr	r4, [pc, #52]	; (8008500 <__libc_init_array+0x3c>)
 80084ca:	1b64      	subs	r4, r4, r5
 80084cc:	10a4      	asrs	r4, r4, #2
 80084ce:	2600      	movs	r6, #0
 80084d0:	42a6      	cmp	r6, r4
 80084d2:	d109      	bne.n	80084e8 <__libc_init_array+0x24>
 80084d4:	4d0b      	ldr	r5, [pc, #44]	; (8008504 <__libc_init_array+0x40>)
 80084d6:	4c0c      	ldr	r4, [pc, #48]	; (8008508 <__libc_init_array+0x44>)
 80084d8:	f000 fc6a 	bl	8008db0 <_init>
 80084dc:	1b64      	subs	r4, r4, r5
 80084de:	10a4      	asrs	r4, r4, #2
 80084e0:	2600      	movs	r6, #0
 80084e2:	42a6      	cmp	r6, r4
 80084e4:	d105      	bne.n	80084f2 <__libc_init_array+0x2e>
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ec:	4798      	blx	r3
 80084ee:	3601      	adds	r6, #1
 80084f0:	e7ee      	b.n	80084d0 <__libc_init_array+0xc>
 80084f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f6:	4798      	blx	r3
 80084f8:	3601      	adds	r6, #1
 80084fa:	e7f2      	b.n	80084e2 <__libc_init_array+0x1e>
 80084fc:	08008f24 	.word	0x08008f24
 8008500:	08008f24 	.word	0x08008f24
 8008504:	08008f24 	.word	0x08008f24
 8008508:	08008f28 	.word	0x08008f28

0800850c <__retarget_lock_acquire_recursive>:
 800850c:	4770      	bx	lr

0800850e <__retarget_lock_release_recursive>:
 800850e:	4770      	bx	lr

08008510 <_free_r>:
 8008510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008512:	2900      	cmp	r1, #0
 8008514:	d044      	beq.n	80085a0 <_free_r+0x90>
 8008516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800851a:	9001      	str	r0, [sp, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f1a1 0404 	sub.w	r4, r1, #4
 8008522:	bfb8      	it	lt
 8008524:	18e4      	addlt	r4, r4, r3
 8008526:	f000 f8df 	bl	80086e8 <__malloc_lock>
 800852a:	4a1e      	ldr	r2, [pc, #120]	; (80085a4 <_free_r+0x94>)
 800852c:	9801      	ldr	r0, [sp, #4]
 800852e:	6813      	ldr	r3, [r2, #0]
 8008530:	b933      	cbnz	r3, 8008540 <_free_r+0x30>
 8008532:	6063      	str	r3, [r4, #4]
 8008534:	6014      	str	r4, [r2, #0]
 8008536:	b003      	add	sp, #12
 8008538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800853c:	f000 b8da 	b.w	80086f4 <__malloc_unlock>
 8008540:	42a3      	cmp	r3, r4
 8008542:	d908      	bls.n	8008556 <_free_r+0x46>
 8008544:	6825      	ldr	r5, [r4, #0]
 8008546:	1961      	adds	r1, r4, r5
 8008548:	428b      	cmp	r3, r1
 800854a:	bf01      	itttt	eq
 800854c:	6819      	ldreq	r1, [r3, #0]
 800854e:	685b      	ldreq	r3, [r3, #4]
 8008550:	1949      	addeq	r1, r1, r5
 8008552:	6021      	streq	r1, [r4, #0]
 8008554:	e7ed      	b.n	8008532 <_free_r+0x22>
 8008556:	461a      	mov	r2, r3
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	b10b      	cbz	r3, 8008560 <_free_r+0x50>
 800855c:	42a3      	cmp	r3, r4
 800855e:	d9fa      	bls.n	8008556 <_free_r+0x46>
 8008560:	6811      	ldr	r1, [r2, #0]
 8008562:	1855      	adds	r5, r2, r1
 8008564:	42a5      	cmp	r5, r4
 8008566:	d10b      	bne.n	8008580 <_free_r+0x70>
 8008568:	6824      	ldr	r4, [r4, #0]
 800856a:	4421      	add	r1, r4
 800856c:	1854      	adds	r4, r2, r1
 800856e:	42a3      	cmp	r3, r4
 8008570:	6011      	str	r1, [r2, #0]
 8008572:	d1e0      	bne.n	8008536 <_free_r+0x26>
 8008574:	681c      	ldr	r4, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	6053      	str	r3, [r2, #4]
 800857a:	440c      	add	r4, r1
 800857c:	6014      	str	r4, [r2, #0]
 800857e:	e7da      	b.n	8008536 <_free_r+0x26>
 8008580:	d902      	bls.n	8008588 <_free_r+0x78>
 8008582:	230c      	movs	r3, #12
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	e7d6      	b.n	8008536 <_free_r+0x26>
 8008588:	6825      	ldr	r5, [r4, #0]
 800858a:	1961      	adds	r1, r4, r5
 800858c:	428b      	cmp	r3, r1
 800858e:	bf04      	itt	eq
 8008590:	6819      	ldreq	r1, [r3, #0]
 8008592:	685b      	ldreq	r3, [r3, #4]
 8008594:	6063      	str	r3, [r4, #4]
 8008596:	bf04      	itt	eq
 8008598:	1949      	addeq	r1, r1, r5
 800859a:	6021      	streq	r1, [r4, #0]
 800859c:	6054      	str	r4, [r2, #4]
 800859e:	e7ca      	b.n	8008536 <_free_r+0x26>
 80085a0:	b003      	add	sp, #12
 80085a2:	bd30      	pop	{r4, r5, pc}
 80085a4:	24031178 	.word	0x24031178

080085a8 <sbrk_aligned>:
 80085a8:	b570      	push	{r4, r5, r6, lr}
 80085aa:	4e0e      	ldr	r6, [pc, #56]	; (80085e4 <sbrk_aligned+0x3c>)
 80085ac:	460c      	mov	r4, r1
 80085ae:	6831      	ldr	r1, [r6, #0]
 80085b0:	4605      	mov	r5, r0
 80085b2:	b911      	cbnz	r1, 80085ba <sbrk_aligned+0x12>
 80085b4:	f000 fba6 	bl	8008d04 <_sbrk_r>
 80085b8:	6030      	str	r0, [r6, #0]
 80085ba:	4621      	mov	r1, r4
 80085bc:	4628      	mov	r0, r5
 80085be:	f000 fba1 	bl	8008d04 <_sbrk_r>
 80085c2:	1c43      	adds	r3, r0, #1
 80085c4:	d00a      	beq.n	80085dc <sbrk_aligned+0x34>
 80085c6:	1cc4      	adds	r4, r0, #3
 80085c8:	f024 0403 	bic.w	r4, r4, #3
 80085cc:	42a0      	cmp	r0, r4
 80085ce:	d007      	beq.n	80085e0 <sbrk_aligned+0x38>
 80085d0:	1a21      	subs	r1, r4, r0
 80085d2:	4628      	mov	r0, r5
 80085d4:	f000 fb96 	bl	8008d04 <_sbrk_r>
 80085d8:	3001      	adds	r0, #1
 80085da:	d101      	bne.n	80085e0 <sbrk_aligned+0x38>
 80085dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80085e0:	4620      	mov	r0, r4
 80085e2:	bd70      	pop	{r4, r5, r6, pc}
 80085e4:	2403117c 	.word	0x2403117c

080085e8 <_malloc_r>:
 80085e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085ec:	1ccd      	adds	r5, r1, #3
 80085ee:	f025 0503 	bic.w	r5, r5, #3
 80085f2:	3508      	adds	r5, #8
 80085f4:	2d0c      	cmp	r5, #12
 80085f6:	bf38      	it	cc
 80085f8:	250c      	movcc	r5, #12
 80085fa:	2d00      	cmp	r5, #0
 80085fc:	4607      	mov	r7, r0
 80085fe:	db01      	blt.n	8008604 <_malloc_r+0x1c>
 8008600:	42a9      	cmp	r1, r5
 8008602:	d905      	bls.n	8008610 <_malloc_r+0x28>
 8008604:	230c      	movs	r3, #12
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	2600      	movs	r6, #0
 800860a:	4630      	mov	r0, r6
 800860c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008610:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80086e4 <_malloc_r+0xfc>
 8008614:	f000 f868 	bl	80086e8 <__malloc_lock>
 8008618:	f8d8 3000 	ldr.w	r3, [r8]
 800861c:	461c      	mov	r4, r3
 800861e:	bb5c      	cbnz	r4, 8008678 <_malloc_r+0x90>
 8008620:	4629      	mov	r1, r5
 8008622:	4638      	mov	r0, r7
 8008624:	f7ff ffc0 	bl	80085a8 <sbrk_aligned>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	4604      	mov	r4, r0
 800862c:	d155      	bne.n	80086da <_malloc_r+0xf2>
 800862e:	f8d8 4000 	ldr.w	r4, [r8]
 8008632:	4626      	mov	r6, r4
 8008634:	2e00      	cmp	r6, #0
 8008636:	d145      	bne.n	80086c4 <_malloc_r+0xdc>
 8008638:	2c00      	cmp	r4, #0
 800863a:	d048      	beq.n	80086ce <_malloc_r+0xe6>
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	4631      	mov	r1, r6
 8008640:	4638      	mov	r0, r7
 8008642:	eb04 0903 	add.w	r9, r4, r3
 8008646:	f000 fb5d 	bl	8008d04 <_sbrk_r>
 800864a:	4581      	cmp	r9, r0
 800864c:	d13f      	bne.n	80086ce <_malloc_r+0xe6>
 800864e:	6821      	ldr	r1, [r4, #0]
 8008650:	1a6d      	subs	r5, r5, r1
 8008652:	4629      	mov	r1, r5
 8008654:	4638      	mov	r0, r7
 8008656:	f7ff ffa7 	bl	80085a8 <sbrk_aligned>
 800865a:	3001      	adds	r0, #1
 800865c:	d037      	beq.n	80086ce <_malloc_r+0xe6>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	442b      	add	r3, r5
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	f8d8 3000 	ldr.w	r3, [r8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d038      	beq.n	80086de <_malloc_r+0xf6>
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	42a2      	cmp	r2, r4
 8008670:	d12b      	bne.n	80086ca <_malloc_r+0xe2>
 8008672:	2200      	movs	r2, #0
 8008674:	605a      	str	r2, [r3, #4]
 8008676:	e00f      	b.n	8008698 <_malloc_r+0xb0>
 8008678:	6822      	ldr	r2, [r4, #0]
 800867a:	1b52      	subs	r2, r2, r5
 800867c:	d41f      	bmi.n	80086be <_malloc_r+0xd6>
 800867e:	2a0b      	cmp	r2, #11
 8008680:	d917      	bls.n	80086b2 <_malloc_r+0xca>
 8008682:	1961      	adds	r1, r4, r5
 8008684:	42a3      	cmp	r3, r4
 8008686:	6025      	str	r5, [r4, #0]
 8008688:	bf18      	it	ne
 800868a:	6059      	strne	r1, [r3, #4]
 800868c:	6863      	ldr	r3, [r4, #4]
 800868e:	bf08      	it	eq
 8008690:	f8c8 1000 	streq.w	r1, [r8]
 8008694:	5162      	str	r2, [r4, r5]
 8008696:	604b      	str	r3, [r1, #4]
 8008698:	4638      	mov	r0, r7
 800869a:	f104 060b 	add.w	r6, r4, #11
 800869e:	f000 f829 	bl	80086f4 <__malloc_unlock>
 80086a2:	f026 0607 	bic.w	r6, r6, #7
 80086a6:	1d23      	adds	r3, r4, #4
 80086a8:	1af2      	subs	r2, r6, r3
 80086aa:	d0ae      	beq.n	800860a <_malloc_r+0x22>
 80086ac:	1b9b      	subs	r3, r3, r6
 80086ae:	50a3      	str	r3, [r4, r2]
 80086b0:	e7ab      	b.n	800860a <_malloc_r+0x22>
 80086b2:	42a3      	cmp	r3, r4
 80086b4:	6862      	ldr	r2, [r4, #4]
 80086b6:	d1dd      	bne.n	8008674 <_malloc_r+0x8c>
 80086b8:	f8c8 2000 	str.w	r2, [r8]
 80086bc:	e7ec      	b.n	8008698 <_malloc_r+0xb0>
 80086be:	4623      	mov	r3, r4
 80086c0:	6864      	ldr	r4, [r4, #4]
 80086c2:	e7ac      	b.n	800861e <_malloc_r+0x36>
 80086c4:	4634      	mov	r4, r6
 80086c6:	6876      	ldr	r6, [r6, #4]
 80086c8:	e7b4      	b.n	8008634 <_malloc_r+0x4c>
 80086ca:	4613      	mov	r3, r2
 80086cc:	e7cc      	b.n	8008668 <_malloc_r+0x80>
 80086ce:	230c      	movs	r3, #12
 80086d0:	603b      	str	r3, [r7, #0]
 80086d2:	4638      	mov	r0, r7
 80086d4:	f000 f80e 	bl	80086f4 <__malloc_unlock>
 80086d8:	e797      	b.n	800860a <_malloc_r+0x22>
 80086da:	6025      	str	r5, [r4, #0]
 80086dc:	e7dc      	b.n	8008698 <_malloc_r+0xb0>
 80086de:	605b      	str	r3, [r3, #4]
 80086e0:	deff      	udf	#255	; 0xff
 80086e2:	bf00      	nop
 80086e4:	24031178 	.word	0x24031178

080086e8 <__malloc_lock>:
 80086e8:	4801      	ldr	r0, [pc, #4]	; (80086f0 <__malloc_lock+0x8>)
 80086ea:	f7ff bf0f 	b.w	800850c <__retarget_lock_acquire_recursive>
 80086ee:	bf00      	nop
 80086f0:	24031174 	.word	0x24031174

080086f4 <__malloc_unlock>:
 80086f4:	4801      	ldr	r0, [pc, #4]	; (80086fc <__malloc_unlock+0x8>)
 80086f6:	f7ff bf0a 	b.w	800850e <__retarget_lock_release_recursive>
 80086fa:	bf00      	nop
 80086fc:	24031174 	.word	0x24031174

08008700 <__ssputs_r>:
 8008700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008704:	688e      	ldr	r6, [r1, #8]
 8008706:	461f      	mov	r7, r3
 8008708:	42be      	cmp	r6, r7
 800870a:	680b      	ldr	r3, [r1, #0]
 800870c:	4682      	mov	sl, r0
 800870e:	460c      	mov	r4, r1
 8008710:	4690      	mov	r8, r2
 8008712:	d82c      	bhi.n	800876e <__ssputs_r+0x6e>
 8008714:	898a      	ldrh	r2, [r1, #12]
 8008716:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800871a:	d026      	beq.n	800876a <__ssputs_r+0x6a>
 800871c:	6965      	ldr	r5, [r4, #20]
 800871e:	6909      	ldr	r1, [r1, #16]
 8008720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008724:	eba3 0901 	sub.w	r9, r3, r1
 8008728:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800872c:	1c7b      	adds	r3, r7, #1
 800872e:	444b      	add	r3, r9
 8008730:	106d      	asrs	r5, r5, #1
 8008732:	429d      	cmp	r5, r3
 8008734:	bf38      	it	cc
 8008736:	461d      	movcc	r5, r3
 8008738:	0553      	lsls	r3, r2, #21
 800873a:	d527      	bpl.n	800878c <__ssputs_r+0x8c>
 800873c:	4629      	mov	r1, r5
 800873e:	f7ff ff53 	bl	80085e8 <_malloc_r>
 8008742:	4606      	mov	r6, r0
 8008744:	b360      	cbz	r0, 80087a0 <__ssputs_r+0xa0>
 8008746:	6921      	ldr	r1, [r4, #16]
 8008748:	464a      	mov	r2, r9
 800874a:	f000 faeb 	bl	8008d24 <memcpy>
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008758:	81a3      	strh	r3, [r4, #12]
 800875a:	6126      	str	r6, [r4, #16]
 800875c:	6165      	str	r5, [r4, #20]
 800875e:	444e      	add	r6, r9
 8008760:	eba5 0509 	sub.w	r5, r5, r9
 8008764:	6026      	str	r6, [r4, #0]
 8008766:	60a5      	str	r5, [r4, #8]
 8008768:	463e      	mov	r6, r7
 800876a:	42be      	cmp	r6, r7
 800876c:	d900      	bls.n	8008770 <__ssputs_r+0x70>
 800876e:	463e      	mov	r6, r7
 8008770:	6820      	ldr	r0, [r4, #0]
 8008772:	4632      	mov	r2, r6
 8008774:	4641      	mov	r1, r8
 8008776:	f000 faab 	bl	8008cd0 <memmove>
 800877a:	68a3      	ldr	r3, [r4, #8]
 800877c:	1b9b      	subs	r3, r3, r6
 800877e:	60a3      	str	r3, [r4, #8]
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	4433      	add	r3, r6
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	2000      	movs	r0, #0
 8008788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878c:	462a      	mov	r2, r5
 800878e:	f000 fad7 	bl	8008d40 <_realloc_r>
 8008792:	4606      	mov	r6, r0
 8008794:	2800      	cmp	r0, #0
 8008796:	d1e0      	bne.n	800875a <__ssputs_r+0x5a>
 8008798:	6921      	ldr	r1, [r4, #16]
 800879a:	4650      	mov	r0, sl
 800879c:	f7ff feb8 	bl	8008510 <_free_r>
 80087a0:	230c      	movs	r3, #12
 80087a2:	f8ca 3000 	str.w	r3, [sl]
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ac:	81a3      	strh	r3, [r4, #12]
 80087ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087b2:	e7e9      	b.n	8008788 <__ssputs_r+0x88>

080087b4 <_svfiprintf_r>:
 80087b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b8:	4698      	mov	r8, r3
 80087ba:	898b      	ldrh	r3, [r1, #12]
 80087bc:	061b      	lsls	r3, r3, #24
 80087be:	b09d      	sub	sp, #116	; 0x74
 80087c0:	4607      	mov	r7, r0
 80087c2:	460d      	mov	r5, r1
 80087c4:	4614      	mov	r4, r2
 80087c6:	d50e      	bpl.n	80087e6 <_svfiprintf_r+0x32>
 80087c8:	690b      	ldr	r3, [r1, #16]
 80087ca:	b963      	cbnz	r3, 80087e6 <_svfiprintf_r+0x32>
 80087cc:	2140      	movs	r1, #64	; 0x40
 80087ce:	f7ff ff0b 	bl	80085e8 <_malloc_r>
 80087d2:	6028      	str	r0, [r5, #0]
 80087d4:	6128      	str	r0, [r5, #16]
 80087d6:	b920      	cbnz	r0, 80087e2 <_svfiprintf_r+0x2e>
 80087d8:	230c      	movs	r3, #12
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087e0:	e0d0      	b.n	8008984 <_svfiprintf_r+0x1d0>
 80087e2:	2340      	movs	r3, #64	; 0x40
 80087e4:	616b      	str	r3, [r5, #20]
 80087e6:	2300      	movs	r3, #0
 80087e8:	9309      	str	r3, [sp, #36]	; 0x24
 80087ea:	2320      	movs	r3, #32
 80087ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80087f4:	2330      	movs	r3, #48	; 0x30
 80087f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800899c <_svfiprintf_r+0x1e8>
 80087fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087fe:	f04f 0901 	mov.w	r9, #1
 8008802:	4623      	mov	r3, r4
 8008804:	469a      	mov	sl, r3
 8008806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800880a:	b10a      	cbz	r2, 8008810 <_svfiprintf_r+0x5c>
 800880c:	2a25      	cmp	r2, #37	; 0x25
 800880e:	d1f9      	bne.n	8008804 <_svfiprintf_r+0x50>
 8008810:	ebba 0b04 	subs.w	fp, sl, r4
 8008814:	d00b      	beq.n	800882e <_svfiprintf_r+0x7a>
 8008816:	465b      	mov	r3, fp
 8008818:	4622      	mov	r2, r4
 800881a:	4629      	mov	r1, r5
 800881c:	4638      	mov	r0, r7
 800881e:	f7ff ff6f 	bl	8008700 <__ssputs_r>
 8008822:	3001      	adds	r0, #1
 8008824:	f000 80a9 	beq.w	800897a <_svfiprintf_r+0x1c6>
 8008828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800882a:	445a      	add	r2, fp
 800882c:	9209      	str	r2, [sp, #36]	; 0x24
 800882e:	f89a 3000 	ldrb.w	r3, [sl]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 80a1 	beq.w	800897a <_svfiprintf_r+0x1c6>
 8008838:	2300      	movs	r3, #0
 800883a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800883e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008842:	f10a 0a01 	add.w	sl, sl, #1
 8008846:	9304      	str	r3, [sp, #16]
 8008848:	9307      	str	r3, [sp, #28]
 800884a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800884e:	931a      	str	r3, [sp, #104]	; 0x68
 8008850:	4654      	mov	r4, sl
 8008852:	2205      	movs	r2, #5
 8008854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008858:	4850      	ldr	r0, [pc, #320]	; (800899c <_svfiprintf_r+0x1e8>)
 800885a:	f7f7 fd49 	bl	80002f0 <memchr>
 800885e:	9a04      	ldr	r2, [sp, #16]
 8008860:	b9d8      	cbnz	r0, 800889a <_svfiprintf_r+0xe6>
 8008862:	06d0      	lsls	r0, r2, #27
 8008864:	bf44      	itt	mi
 8008866:	2320      	movmi	r3, #32
 8008868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800886c:	0711      	lsls	r1, r2, #28
 800886e:	bf44      	itt	mi
 8008870:	232b      	movmi	r3, #43	; 0x2b
 8008872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008876:	f89a 3000 	ldrb.w	r3, [sl]
 800887a:	2b2a      	cmp	r3, #42	; 0x2a
 800887c:	d015      	beq.n	80088aa <_svfiprintf_r+0xf6>
 800887e:	9a07      	ldr	r2, [sp, #28]
 8008880:	4654      	mov	r4, sl
 8008882:	2000      	movs	r0, #0
 8008884:	f04f 0c0a 	mov.w	ip, #10
 8008888:	4621      	mov	r1, r4
 800888a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800888e:	3b30      	subs	r3, #48	; 0x30
 8008890:	2b09      	cmp	r3, #9
 8008892:	d94d      	bls.n	8008930 <_svfiprintf_r+0x17c>
 8008894:	b1b0      	cbz	r0, 80088c4 <_svfiprintf_r+0x110>
 8008896:	9207      	str	r2, [sp, #28]
 8008898:	e014      	b.n	80088c4 <_svfiprintf_r+0x110>
 800889a:	eba0 0308 	sub.w	r3, r0, r8
 800889e:	fa09 f303 	lsl.w	r3, r9, r3
 80088a2:	4313      	orrs	r3, r2
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	46a2      	mov	sl, r4
 80088a8:	e7d2      	b.n	8008850 <_svfiprintf_r+0x9c>
 80088aa:	9b03      	ldr	r3, [sp, #12]
 80088ac:	1d19      	adds	r1, r3, #4
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	9103      	str	r1, [sp, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bfbb      	ittet	lt
 80088b6:	425b      	neglt	r3, r3
 80088b8:	f042 0202 	orrlt.w	r2, r2, #2
 80088bc:	9307      	strge	r3, [sp, #28]
 80088be:	9307      	strlt	r3, [sp, #28]
 80088c0:	bfb8      	it	lt
 80088c2:	9204      	strlt	r2, [sp, #16]
 80088c4:	7823      	ldrb	r3, [r4, #0]
 80088c6:	2b2e      	cmp	r3, #46	; 0x2e
 80088c8:	d10c      	bne.n	80088e4 <_svfiprintf_r+0x130>
 80088ca:	7863      	ldrb	r3, [r4, #1]
 80088cc:	2b2a      	cmp	r3, #42	; 0x2a
 80088ce:	d134      	bne.n	800893a <_svfiprintf_r+0x186>
 80088d0:	9b03      	ldr	r3, [sp, #12]
 80088d2:	1d1a      	adds	r2, r3, #4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	9203      	str	r2, [sp, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	bfb8      	it	lt
 80088dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088e0:	3402      	adds	r4, #2
 80088e2:	9305      	str	r3, [sp, #20]
 80088e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80089ac <_svfiprintf_r+0x1f8>
 80088e8:	7821      	ldrb	r1, [r4, #0]
 80088ea:	2203      	movs	r2, #3
 80088ec:	4650      	mov	r0, sl
 80088ee:	f7f7 fcff 	bl	80002f0 <memchr>
 80088f2:	b138      	cbz	r0, 8008904 <_svfiprintf_r+0x150>
 80088f4:	9b04      	ldr	r3, [sp, #16]
 80088f6:	eba0 000a 	sub.w	r0, r0, sl
 80088fa:	2240      	movs	r2, #64	; 0x40
 80088fc:	4082      	lsls	r2, r0
 80088fe:	4313      	orrs	r3, r2
 8008900:	3401      	adds	r4, #1
 8008902:	9304      	str	r3, [sp, #16]
 8008904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008908:	4825      	ldr	r0, [pc, #148]	; (80089a0 <_svfiprintf_r+0x1ec>)
 800890a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800890e:	2206      	movs	r2, #6
 8008910:	f7f7 fcee 	bl	80002f0 <memchr>
 8008914:	2800      	cmp	r0, #0
 8008916:	d038      	beq.n	800898a <_svfiprintf_r+0x1d6>
 8008918:	4b22      	ldr	r3, [pc, #136]	; (80089a4 <_svfiprintf_r+0x1f0>)
 800891a:	bb1b      	cbnz	r3, 8008964 <_svfiprintf_r+0x1b0>
 800891c:	9b03      	ldr	r3, [sp, #12]
 800891e:	3307      	adds	r3, #7
 8008920:	f023 0307 	bic.w	r3, r3, #7
 8008924:	3308      	adds	r3, #8
 8008926:	9303      	str	r3, [sp, #12]
 8008928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892a:	4433      	add	r3, r6
 800892c:	9309      	str	r3, [sp, #36]	; 0x24
 800892e:	e768      	b.n	8008802 <_svfiprintf_r+0x4e>
 8008930:	fb0c 3202 	mla	r2, ip, r2, r3
 8008934:	460c      	mov	r4, r1
 8008936:	2001      	movs	r0, #1
 8008938:	e7a6      	b.n	8008888 <_svfiprintf_r+0xd4>
 800893a:	2300      	movs	r3, #0
 800893c:	3401      	adds	r4, #1
 800893e:	9305      	str	r3, [sp, #20]
 8008940:	4619      	mov	r1, r3
 8008942:	f04f 0c0a 	mov.w	ip, #10
 8008946:	4620      	mov	r0, r4
 8008948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800894c:	3a30      	subs	r2, #48	; 0x30
 800894e:	2a09      	cmp	r2, #9
 8008950:	d903      	bls.n	800895a <_svfiprintf_r+0x1a6>
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0c6      	beq.n	80088e4 <_svfiprintf_r+0x130>
 8008956:	9105      	str	r1, [sp, #20]
 8008958:	e7c4      	b.n	80088e4 <_svfiprintf_r+0x130>
 800895a:	fb0c 2101 	mla	r1, ip, r1, r2
 800895e:	4604      	mov	r4, r0
 8008960:	2301      	movs	r3, #1
 8008962:	e7f0      	b.n	8008946 <_svfiprintf_r+0x192>
 8008964:	ab03      	add	r3, sp, #12
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	462a      	mov	r2, r5
 800896a:	4b0f      	ldr	r3, [pc, #60]	; (80089a8 <_svfiprintf_r+0x1f4>)
 800896c:	a904      	add	r1, sp, #16
 800896e:	4638      	mov	r0, r7
 8008970:	f3af 8000 	nop.w
 8008974:	1c42      	adds	r2, r0, #1
 8008976:	4606      	mov	r6, r0
 8008978:	d1d6      	bne.n	8008928 <_svfiprintf_r+0x174>
 800897a:	89ab      	ldrh	r3, [r5, #12]
 800897c:	065b      	lsls	r3, r3, #25
 800897e:	f53f af2d 	bmi.w	80087dc <_svfiprintf_r+0x28>
 8008982:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008984:	b01d      	add	sp, #116	; 0x74
 8008986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898a:	ab03      	add	r3, sp, #12
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	462a      	mov	r2, r5
 8008990:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <_svfiprintf_r+0x1f4>)
 8008992:	a904      	add	r1, sp, #16
 8008994:	4638      	mov	r0, r7
 8008996:	f000 f879 	bl	8008a8c <_printf_i>
 800899a:	e7eb      	b.n	8008974 <_svfiprintf_r+0x1c0>
 800899c:	08008ee8 	.word	0x08008ee8
 80089a0:	08008ef2 	.word	0x08008ef2
 80089a4:	00000000 	.word	0x00000000
 80089a8:	08008701 	.word	0x08008701
 80089ac:	08008eee 	.word	0x08008eee

080089b0 <_printf_common>:
 80089b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b4:	4616      	mov	r6, r2
 80089b6:	4699      	mov	r9, r3
 80089b8:	688a      	ldr	r2, [r1, #8]
 80089ba:	690b      	ldr	r3, [r1, #16]
 80089bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089c0:	4293      	cmp	r3, r2
 80089c2:	bfb8      	it	lt
 80089c4:	4613      	movlt	r3, r2
 80089c6:	6033      	str	r3, [r6, #0]
 80089c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089cc:	4607      	mov	r7, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	b10a      	cbz	r2, 80089d6 <_printf_common+0x26>
 80089d2:	3301      	adds	r3, #1
 80089d4:	6033      	str	r3, [r6, #0]
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	0699      	lsls	r1, r3, #26
 80089da:	bf42      	ittt	mi
 80089dc:	6833      	ldrmi	r3, [r6, #0]
 80089de:	3302      	addmi	r3, #2
 80089e0:	6033      	strmi	r3, [r6, #0]
 80089e2:	6825      	ldr	r5, [r4, #0]
 80089e4:	f015 0506 	ands.w	r5, r5, #6
 80089e8:	d106      	bne.n	80089f8 <_printf_common+0x48>
 80089ea:	f104 0a19 	add.w	sl, r4, #25
 80089ee:	68e3      	ldr	r3, [r4, #12]
 80089f0:	6832      	ldr	r2, [r6, #0]
 80089f2:	1a9b      	subs	r3, r3, r2
 80089f4:	42ab      	cmp	r3, r5
 80089f6:	dc26      	bgt.n	8008a46 <_printf_common+0x96>
 80089f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089fc:	1e13      	subs	r3, r2, #0
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	bf18      	it	ne
 8008a02:	2301      	movne	r3, #1
 8008a04:	0692      	lsls	r2, r2, #26
 8008a06:	d42b      	bmi.n	8008a60 <_printf_common+0xb0>
 8008a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a0c:	4649      	mov	r1, r9
 8008a0e:	4638      	mov	r0, r7
 8008a10:	47c0      	blx	r8
 8008a12:	3001      	adds	r0, #1
 8008a14:	d01e      	beq.n	8008a54 <_printf_common+0xa4>
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	6922      	ldr	r2, [r4, #16]
 8008a1a:	f003 0306 	and.w	r3, r3, #6
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	bf02      	ittt	eq
 8008a22:	68e5      	ldreq	r5, [r4, #12]
 8008a24:	6833      	ldreq	r3, [r6, #0]
 8008a26:	1aed      	subeq	r5, r5, r3
 8008a28:	68a3      	ldr	r3, [r4, #8]
 8008a2a:	bf0c      	ite	eq
 8008a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a30:	2500      	movne	r5, #0
 8008a32:	4293      	cmp	r3, r2
 8008a34:	bfc4      	itt	gt
 8008a36:	1a9b      	subgt	r3, r3, r2
 8008a38:	18ed      	addgt	r5, r5, r3
 8008a3a:	2600      	movs	r6, #0
 8008a3c:	341a      	adds	r4, #26
 8008a3e:	42b5      	cmp	r5, r6
 8008a40:	d11a      	bne.n	8008a78 <_printf_common+0xc8>
 8008a42:	2000      	movs	r0, #0
 8008a44:	e008      	b.n	8008a58 <_printf_common+0xa8>
 8008a46:	2301      	movs	r3, #1
 8008a48:	4652      	mov	r2, sl
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	47c0      	blx	r8
 8008a50:	3001      	adds	r0, #1
 8008a52:	d103      	bne.n	8008a5c <_printf_common+0xac>
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5c:	3501      	adds	r5, #1
 8008a5e:	e7c6      	b.n	80089ee <_printf_common+0x3e>
 8008a60:	18e1      	adds	r1, r4, r3
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	2030      	movs	r0, #48	; 0x30
 8008a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a6a:	4422      	add	r2, r4
 8008a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a74:	3302      	adds	r3, #2
 8008a76:	e7c7      	b.n	8008a08 <_printf_common+0x58>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	4638      	mov	r0, r7
 8008a80:	47c0      	blx	r8
 8008a82:	3001      	adds	r0, #1
 8008a84:	d0e6      	beq.n	8008a54 <_printf_common+0xa4>
 8008a86:	3601      	adds	r6, #1
 8008a88:	e7d9      	b.n	8008a3e <_printf_common+0x8e>
	...

08008a8c <_printf_i>:
 8008a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a90:	7e0f      	ldrb	r7, [r1, #24]
 8008a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a94:	2f78      	cmp	r7, #120	; 0x78
 8008a96:	4691      	mov	r9, r2
 8008a98:	4680      	mov	r8, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	469a      	mov	sl, r3
 8008a9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008aa2:	d807      	bhi.n	8008ab4 <_printf_i+0x28>
 8008aa4:	2f62      	cmp	r7, #98	; 0x62
 8008aa6:	d80a      	bhi.n	8008abe <_printf_i+0x32>
 8008aa8:	2f00      	cmp	r7, #0
 8008aaa:	f000 80d4 	beq.w	8008c56 <_printf_i+0x1ca>
 8008aae:	2f58      	cmp	r7, #88	; 0x58
 8008ab0:	f000 80c0 	beq.w	8008c34 <_printf_i+0x1a8>
 8008ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008abc:	e03a      	b.n	8008b34 <_printf_i+0xa8>
 8008abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ac2:	2b15      	cmp	r3, #21
 8008ac4:	d8f6      	bhi.n	8008ab4 <_printf_i+0x28>
 8008ac6:	a101      	add	r1, pc, #4	; (adr r1, 8008acc <_printf_i+0x40>)
 8008ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008acc:	08008b25 	.word	0x08008b25
 8008ad0:	08008b39 	.word	0x08008b39
 8008ad4:	08008ab5 	.word	0x08008ab5
 8008ad8:	08008ab5 	.word	0x08008ab5
 8008adc:	08008ab5 	.word	0x08008ab5
 8008ae0:	08008ab5 	.word	0x08008ab5
 8008ae4:	08008b39 	.word	0x08008b39
 8008ae8:	08008ab5 	.word	0x08008ab5
 8008aec:	08008ab5 	.word	0x08008ab5
 8008af0:	08008ab5 	.word	0x08008ab5
 8008af4:	08008ab5 	.word	0x08008ab5
 8008af8:	08008c3d 	.word	0x08008c3d
 8008afc:	08008b65 	.word	0x08008b65
 8008b00:	08008bf7 	.word	0x08008bf7
 8008b04:	08008ab5 	.word	0x08008ab5
 8008b08:	08008ab5 	.word	0x08008ab5
 8008b0c:	08008c5f 	.word	0x08008c5f
 8008b10:	08008ab5 	.word	0x08008ab5
 8008b14:	08008b65 	.word	0x08008b65
 8008b18:	08008ab5 	.word	0x08008ab5
 8008b1c:	08008ab5 	.word	0x08008ab5
 8008b20:	08008bff 	.word	0x08008bff
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	1d1a      	adds	r2, r3, #4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	602a      	str	r2, [r5, #0]
 8008b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b34:	2301      	movs	r3, #1
 8008b36:	e09f      	b.n	8008c78 <_printf_i+0x1ec>
 8008b38:	6820      	ldr	r0, [r4, #0]
 8008b3a:	682b      	ldr	r3, [r5, #0]
 8008b3c:	0607      	lsls	r7, r0, #24
 8008b3e:	f103 0104 	add.w	r1, r3, #4
 8008b42:	6029      	str	r1, [r5, #0]
 8008b44:	d501      	bpl.n	8008b4a <_printf_i+0xbe>
 8008b46:	681e      	ldr	r6, [r3, #0]
 8008b48:	e003      	b.n	8008b52 <_printf_i+0xc6>
 8008b4a:	0646      	lsls	r6, r0, #25
 8008b4c:	d5fb      	bpl.n	8008b46 <_printf_i+0xba>
 8008b4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008b52:	2e00      	cmp	r6, #0
 8008b54:	da03      	bge.n	8008b5e <_printf_i+0xd2>
 8008b56:	232d      	movs	r3, #45	; 0x2d
 8008b58:	4276      	negs	r6, r6
 8008b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b5e:	485a      	ldr	r0, [pc, #360]	; (8008cc8 <_printf_i+0x23c>)
 8008b60:	230a      	movs	r3, #10
 8008b62:	e012      	b.n	8008b8a <_printf_i+0xfe>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	6820      	ldr	r0, [r4, #0]
 8008b68:	1d19      	adds	r1, r3, #4
 8008b6a:	6029      	str	r1, [r5, #0]
 8008b6c:	0605      	lsls	r5, r0, #24
 8008b6e:	d501      	bpl.n	8008b74 <_printf_i+0xe8>
 8008b70:	681e      	ldr	r6, [r3, #0]
 8008b72:	e002      	b.n	8008b7a <_printf_i+0xee>
 8008b74:	0641      	lsls	r1, r0, #25
 8008b76:	d5fb      	bpl.n	8008b70 <_printf_i+0xe4>
 8008b78:	881e      	ldrh	r6, [r3, #0]
 8008b7a:	4853      	ldr	r0, [pc, #332]	; (8008cc8 <_printf_i+0x23c>)
 8008b7c:	2f6f      	cmp	r7, #111	; 0x6f
 8008b7e:	bf0c      	ite	eq
 8008b80:	2308      	moveq	r3, #8
 8008b82:	230a      	movne	r3, #10
 8008b84:	2100      	movs	r1, #0
 8008b86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b8a:	6865      	ldr	r5, [r4, #4]
 8008b8c:	60a5      	str	r5, [r4, #8]
 8008b8e:	2d00      	cmp	r5, #0
 8008b90:	bfa2      	ittt	ge
 8008b92:	6821      	ldrge	r1, [r4, #0]
 8008b94:	f021 0104 	bicge.w	r1, r1, #4
 8008b98:	6021      	strge	r1, [r4, #0]
 8008b9a:	b90e      	cbnz	r6, 8008ba0 <_printf_i+0x114>
 8008b9c:	2d00      	cmp	r5, #0
 8008b9e:	d04b      	beq.n	8008c38 <_printf_i+0x1ac>
 8008ba0:	4615      	mov	r5, r2
 8008ba2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ba6:	fb03 6711 	mls	r7, r3, r1, r6
 8008baa:	5dc7      	ldrb	r7, [r0, r7]
 8008bac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bb0:	4637      	mov	r7, r6
 8008bb2:	42bb      	cmp	r3, r7
 8008bb4:	460e      	mov	r6, r1
 8008bb6:	d9f4      	bls.n	8008ba2 <_printf_i+0x116>
 8008bb8:	2b08      	cmp	r3, #8
 8008bba:	d10b      	bne.n	8008bd4 <_printf_i+0x148>
 8008bbc:	6823      	ldr	r3, [r4, #0]
 8008bbe:	07de      	lsls	r6, r3, #31
 8008bc0:	d508      	bpl.n	8008bd4 <_printf_i+0x148>
 8008bc2:	6923      	ldr	r3, [r4, #16]
 8008bc4:	6861      	ldr	r1, [r4, #4]
 8008bc6:	4299      	cmp	r1, r3
 8008bc8:	bfde      	ittt	le
 8008bca:	2330      	movle	r3, #48	; 0x30
 8008bcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bd0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008bd4:	1b52      	subs	r2, r2, r5
 8008bd6:	6122      	str	r2, [r4, #16]
 8008bd8:	f8cd a000 	str.w	sl, [sp]
 8008bdc:	464b      	mov	r3, r9
 8008bde:	aa03      	add	r2, sp, #12
 8008be0:	4621      	mov	r1, r4
 8008be2:	4640      	mov	r0, r8
 8008be4:	f7ff fee4 	bl	80089b0 <_printf_common>
 8008be8:	3001      	adds	r0, #1
 8008bea:	d14a      	bne.n	8008c82 <_printf_i+0x1f6>
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bf0:	b004      	add	sp, #16
 8008bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	f043 0320 	orr.w	r3, r3, #32
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	4833      	ldr	r0, [pc, #204]	; (8008ccc <_printf_i+0x240>)
 8008c00:	2778      	movs	r7, #120	; 0x78
 8008c02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	6829      	ldr	r1, [r5, #0]
 8008c0a:	061f      	lsls	r7, r3, #24
 8008c0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c10:	d402      	bmi.n	8008c18 <_printf_i+0x18c>
 8008c12:	065f      	lsls	r7, r3, #25
 8008c14:	bf48      	it	mi
 8008c16:	b2b6      	uxthmi	r6, r6
 8008c18:	07df      	lsls	r7, r3, #31
 8008c1a:	bf48      	it	mi
 8008c1c:	f043 0320 	orrmi.w	r3, r3, #32
 8008c20:	6029      	str	r1, [r5, #0]
 8008c22:	bf48      	it	mi
 8008c24:	6023      	strmi	r3, [r4, #0]
 8008c26:	b91e      	cbnz	r6, 8008c30 <_printf_i+0x1a4>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	f023 0320 	bic.w	r3, r3, #32
 8008c2e:	6023      	str	r3, [r4, #0]
 8008c30:	2310      	movs	r3, #16
 8008c32:	e7a7      	b.n	8008b84 <_printf_i+0xf8>
 8008c34:	4824      	ldr	r0, [pc, #144]	; (8008cc8 <_printf_i+0x23c>)
 8008c36:	e7e4      	b.n	8008c02 <_printf_i+0x176>
 8008c38:	4615      	mov	r5, r2
 8008c3a:	e7bd      	b.n	8008bb8 <_printf_i+0x12c>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	6826      	ldr	r6, [r4, #0]
 8008c40:	6961      	ldr	r1, [r4, #20]
 8008c42:	1d18      	adds	r0, r3, #4
 8008c44:	6028      	str	r0, [r5, #0]
 8008c46:	0635      	lsls	r5, r6, #24
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	d501      	bpl.n	8008c50 <_printf_i+0x1c4>
 8008c4c:	6019      	str	r1, [r3, #0]
 8008c4e:	e002      	b.n	8008c56 <_printf_i+0x1ca>
 8008c50:	0670      	lsls	r0, r6, #25
 8008c52:	d5fb      	bpl.n	8008c4c <_printf_i+0x1c0>
 8008c54:	8019      	strh	r1, [r3, #0]
 8008c56:	2300      	movs	r3, #0
 8008c58:	6123      	str	r3, [r4, #16]
 8008c5a:	4615      	mov	r5, r2
 8008c5c:	e7bc      	b.n	8008bd8 <_printf_i+0x14c>
 8008c5e:	682b      	ldr	r3, [r5, #0]
 8008c60:	1d1a      	adds	r2, r3, #4
 8008c62:	602a      	str	r2, [r5, #0]
 8008c64:	681d      	ldr	r5, [r3, #0]
 8008c66:	6862      	ldr	r2, [r4, #4]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f7f7 fb40 	bl	80002f0 <memchr>
 8008c70:	b108      	cbz	r0, 8008c76 <_printf_i+0x1ea>
 8008c72:	1b40      	subs	r0, r0, r5
 8008c74:	6060      	str	r0, [r4, #4]
 8008c76:	6863      	ldr	r3, [r4, #4]
 8008c78:	6123      	str	r3, [r4, #16]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c80:	e7aa      	b.n	8008bd8 <_printf_i+0x14c>
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	462a      	mov	r2, r5
 8008c86:	4649      	mov	r1, r9
 8008c88:	4640      	mov	r0, r8
 8008c8a:	47d0      	blx	sl
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d0ad      	beq.n	8008bec <_printf_i+0x160>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	079b      	lsls	r3, r3, #30
 8008c94:	d413      	bmi.n	8008cbe <_printf_i+0x232>
 8008c96:	68e0      	ldr	r0, [r4, #12]
 8008c98:	9b03      	ldr	r3, [sp, #12]
 8008c9a:	4298      	cmp	r0, r3
 8008c9c:	bfb8      	it	lt
 8008c9e:	4618      	movlt	r0, r3
 8008ca0:	e7a6      	b.n	8008bf0 <_printf_i+0x164>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	4640      	mov	r0, r8
 8008caa:	47d0      	blx	sl
 8008cac:	3001      	adds	r0, #1
 8008cae:	d09d      	beq.n	8008bec <_printf_i+0x160>
 8008cb0:	3501      	adds	r5, #1
 8008cb2:	68e3      	ldr	r3, [r4, #12]
 8008cb4:	9903      	ldr	r1, [sp, #12]
 8008cb6:	1a5b      	subs	r3, r3, r1
 8008cb8:	42ab      	cmp	r3, r5
 8008cba:	dcf2      	bgt.n	8008ca2 <_printf_i+0x216>
 8008cbc:	e7eb      	b.n	8008c96 <_printf_i+0x20a>
 8008cbe:	2500      	movs	r5, #0
 8008cc0:	f104 0619 	add.w	r6, r4, #25
 8008cc4:	e7f5      	b.n	8008cb2 <_printf_i+0x226>
 8008cc6:	bf00      	nop
 8008cc8:	08008ef9 	.word	0x08008ef9
 8008ccc:	08008f0a 	.word	0x08008f0a

08008cd0 <memmove>:
 8008cd0:	4288      	cmp	r0, r1
 8008cd2:	b510      	push	{r4, lr}
 8008cd4:	eb01 0402 	add.w	r4, r1, r2
 8008cd8:	d902      	bls.n	8008ce0 <memmove+0x10>
 8008cda:	4284      	cmp	r4, r0
 8008cdc:	4623      	mov	r3, r4
 8008cde:	d807      	bhi.n	8008cf0 <memmove+0x20>
 8008ce0:	1e43      	subs	r3, r0, #1
 8008ce2:	42a1      	cmp	r1, r4
 8008ce4:	d008      	beq.n	8008cf8 <memmove+0x28>
 8008ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cee:	e7f8      	b.n	8008ce2 <memmove+0x12>
 8008cf0:	4402      	add	r2, r0
 8008cf2:	4601      	mov	r1, r0
 8008cf4:	428a      	cmp	r2, r1
 8008cf6:	d100      	bne.n	8008cfa <memmove+0x2a>
 8008cf8:	bd10      	pop	{r4, pc}
 8008cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d02:	e7f7      	b.n	8008cf4 <memmove+0x24>

08008d04 <_sbrk_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4d06      	ldr	r5, [pc, #24]	; (8008d20 <_sbrk_r+0x1c>)
 8008d08:	2300      	movs	r3, #0
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	602b      	str	r3, [r5, #0]
 8008d10:	f7f8 fb9c 	bl	800144c <_sbrk>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	d102      	bne.n	8008d1e <_sbrk_r+0x1a>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	b103      	cbz	r3, 8008d1e <_sbrk_r+0x1a>
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}
 8008d20:	24031170 	.word	0x24031170

08008d24 <memcpy>:
 8008d24:	440a      	add	r2, r1
 8008d26:	4291      	cmp	r1, r2
 8008d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008d2c:	d100      	bne.n	8008d30 <memcpy+0xc>
 8008d2e:	4770      	bx	lr
 8008d30:	b510      	push	{r4, lr}
 8008d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d3a:	4291      	cmp	r1, r2
 8008d3c:	d1f9      	bne.n	8008d32 <memcpy+0xe>
 8008d3e:	bd10      	pop	{r4, pc}

08008d40 <_realloc_r>:
 8008d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d44:	4680      	mov	r8, r0
 8008d46:	4614      	mov	r4, r2
 8008d48:	460e      	mov	r6, r1
 8008d4a:	b921      	cbnz	r1, 8008d56 <_realloc_r+0x16>
 8008d4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d50:	4611      	mov	r1, r2
 8008d52:	f7ff bc49 	b.w	80085e8 <_malloc_r>
 8008d56:	b92a      	cbnz	r2, 8008d64 <_realloc_r+0x24>
 8008d58:	f7ff fbda 	bl	8008510 <_free_r>
 8008d5c:	4625      	mov	r5, r4
 8008d5e:	4628      	mov	r0, r5
 8008d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d64:	f000 f81b 	bl	8008d9e <_malloc_usable_size_r>
 8008d68:	4284      	cmp	r4, r0
 8008d6a:	4607      	mov	r7, r0
 8008d6c:	d802      	bhi.n	8008d74 <_realloc_r+0x34>
 8008d6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d72:	d812      	bhi.n	8008d9a <_realloc_r+0x5a>
 8008d74:	4621      	mov	r1, r4
 8008d76:	4640      	mov	r0, r8
 8008d78:	f7ff fc36 	bl	80085e8 <_malloc_r>
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d0ed      	beq.n	8008d5e <_realloc_r+0x1e>
 8008d82:	42bc      	cmp	r4, r7
 8008d84:	4622      	mov	r2, r4
 8008d86:	4631      	mov	r1, r6
 8008d88:	bf28      	it	cs
 8008d8a:	463a      	movcs	r2, r7
 8008d8c:	f7ff ffca 	bl	8008d24 <memcpy>
 8008d90:	4631      	mov	r1, r6
 8008d92:	4640      	mov	r0, r8
 8008d94:	f7ff fbbc 	bl	8008510 <_free_r>
 8008d98:	e7e1      	b.n	8008d5e <_realloc_r+0x1e>
 8008d9a:	4635      	mov	r5, r6
 8008d9c:	e7df      	b.n	8008d5e <_realloc_r+0x1e>

08008d9e <_malloc_usable_size_r>:
 8008d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008da2:	1f18      	subs	r0, r3, #4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	bfbc      	itt	lt
 8008da8:	580b      	ldrlt	r3, [r1, r0]
 8008daa:	18c0      	addlt	r0, r0, r3
 8008dac:	4770      	bx	lr
	...

08008db0 <_init>:
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	bf00      	nop
 8008db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008db6:	bc08      	pop	{r3}
 8008db8:	469e      	mov	lr, r3
 8008dba:	4770      	bx	lr

08008dbc <_fini>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	bf00      	nop
 8008dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dc2:	bc08      	pop	{r3}
 8008dc4:	469e      	mov	lr, r3
 8008dc6:	4770      	bx	lr
