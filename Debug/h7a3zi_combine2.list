
h7a3zi_combine2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b98  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08008e48  08008e48  00018e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f24  08008f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f2c  08008f2c  00018f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f30  08008f30  00018f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08008f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00031088  24000060  08008f94  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240310e8  08008f94  000210e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018556  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002972  00000000  00000000  00038627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001438  00000000  00000000  0003afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000fd3  00000000  00000000  0003c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003272a  00000000  00000000  0003d3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017e57  00000000  00000000  0006fad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00153859  00000000  00000000  0008792c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005cfc  00000000  00000000  001db188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  001e0e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008e30 	.word	0x08008e30

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	08008e30 	.word	0x08008e30

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fff3 	bl	800167c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f851 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 fa13 	bl	8000ac4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800069e:	f000 f9bd 	bl	8000a1c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006a2:	f000 fa07 	bl	8000ab4 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006a6:	f000 f8bf 	bl	8000828 <MX_ADC1_Init>
  MX_TIM16_Init();
 80006aa:	f000 f98f 	bl	80009cc <MX_TIM16_Init>
  MX_TIM3_Init();
 80006ae:	f000 f933 	bl	8000918 <MX_TIM3_Init>
  // uart_transmit_digital();
  // uart_transmit_info();


  // pump on
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2120      	movs	r1, #32
 80006b6:	481b      	ldr	r0, [pc, #108]	; (8000724 <main+0x98>)
 80006b8:	f002 fcf8 	bl	80030ac <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 80006bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c0:	f001 f86e 	bl	80017a0 <HAL_Delay>

  for (int i = 0; i < 100; i++) {
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	e020      	b.n	800070c <main+0x80>

    uart_buf_len = sprintf(uart_buf, "Messung Nr.: %d; \r\n", i+1);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3301      	adds	r3, #1
 80006ce:	461a      	mov	r2, r3
 80006d0:	4915      	ldr	r1, [pc, #84]	; (8000728 <main+0x9c>)
 80006d2:	4816      	ldr	r0, [pc, #88]	; (800072c <main+0xa0>)
 80006d4:	f007 ff08 	bl	80084e8 <siprintf>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <main+0xa4>)
 80006dc:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <main+0xa4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	4911      	ldr	r1, [pc, #68]	; (800072c <main+0xa0>)
 80006e8:	4812      	ldr	r0, [pc, #72]	; (8000734 <main+0xa8>)
 80006ea:	f006 fce5 	bl	80070b8 <HAL_UART_Transmit>

    measure(&Meas);
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <main+0xac>)
 80006f0:	f000 fb2e 	bl	8000d50 <measure>
    analyse(&Meas);
 80006f4:	4810      	ldr	r0, [pc, #64]	; (8000738 <main+0xac>)
 80006f6:	f000 fbe1 	bl	8000ebc <analyse>
    uart_transmit_info();
 80006fa:	f000 fd11 	bl	8001120 <uart_transmit_info>
    HAL_Delay(500);
 80006fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000702:	f001 f84d 	bl	80017a0 <HAL_Delay>
  for (int i = 0; i < 100; i++) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3301      	adds	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b63      	cmp	r3, #99	; 0x63
 8000710:	dddb      	ble.n	80006ca <main+0x3e>
  }

// NOTE: uart_transmit_digital() increases the measurement time up to 1 min. and 40 s, without it 31 s the loading time into µC is 11 s

  // pump off
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <main+0x98>)
 8000718:	f002 fcc8 	bl	80030ac <HAL_GPIO_WritePin>

  uart_transmit_digital();
 800071c:	f000 fcba 	bl	8001094 <uart_transmit_digital>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000720:	e7fe      	b.n	8000720 <main+0x94>
 8000722:	bf00      	nop
 8000724:	58020000 	.word	0x58020000
 8000728:	08008e48 	.word	0x08008e48
 800072c:	24030f60 	.word	0x24030f60
 8000730:	24030f94 	.word	0x24030f94
 8000734:	24030ecc 	.word	0x24030ecc
 8000738:	2400007c 	.word	0x2400007c

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09c      	sub	sp, #112	; 0x70
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	224c      	movs	r2, #76	; 0x4c
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f007 feec 	bl	8008528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2220      	movs	r2, #32
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f007 fee6 	bl	8008528 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800075c:	4b30      	ldr	r3, [pc, #192]	; (8000820 <SystemClock_Config+0xe4>)
 800075e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000762:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000766:	2004      	movs	r0, #4
 8000768:	f002 fcba 	bl	80030e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800076c:	2300      	movs	r3, #0
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <SystemClock_Config+0xe8>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a2b      	ldr	r2, [pc, #172]	; (8000824 <SystemClock_Config+0xe8>)
 8000776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b29      	ldr	r3, [pc, #164]	; (8000824 <SystemClock_Config+0xe8>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000788:	bf00      	nop
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <SystemClock_Config+0xe8>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000796:	d1f8      	bne.n	800078a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000798:	2321      	movs	r3, #33	; 0x21
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800079c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007a2:	2301      	movs	r3, #1
 80007a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007b2:	2318      	movs	r3, #24
 80007b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007c2:	230c      	movs	r3, #12
 80007c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fcde 	bl	8003194 <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007de:	f000 fce3 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	233f      	movs	r3, #63	; 0x3f
 80007e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2303      	movs	r3, #3
 80007e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2102      	movs	r1, #2
 8000806:	4618      	mov	r0, r3
 8000808:	f003 f8f6 	bl	80039f8 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000812:	f000 fcc9 	bl	80011a8 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3770      	adds	r7, #112	; 0x70
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	58024400 	.word	0x58024400
 8000824:	58024800 	.word	0x58024800

08000828 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800083a:	463b      	mov	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
 8000848:	615a      	str	r2, [r3, #20]
 800084a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800084c:	4b2f      	ldr	r3, [pc, #188]	; (800090c <MX_ADC1_Init+0xe4>)
 800084e:	4a30      	ldr	r2, [pc, #192]	; (8000910 <MX_ADC1_Init+0xe8>)
 8000850:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000852:	4b2e      	ldr	r3, [pc, #184]	; (800090c <MX_ADC1_Init+0xe4>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000858:	4b2c      	ldr	r3, [pc, #176]	; (800090c <MX_ADC1_Init+0xe4>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <MX_ADC1_Init+0xe4>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <MX_ADC1_Init+0xe4>)
 8000866:	2204      	movs	r2, #4
 8000868:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <MX_ADC1_Init+0xe4>)
 800086c:	2200      	movs	r2, #0
 800086e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000870:	4b26      	ldr	r3, [pc, #152]	; (800090c <MX_ADC1_Init+0xe4>)
 8000872:	2200      	movs	r2, #0
 8000874:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <MX_ADC1_Init+0xe4>)
 8000878:	2201      	movs	r2, #1
 800087a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800087c:	4b23      	ldr	r3, [pc, #140]	; (800090c <MX_ADC1_Init+0xe4>)
 800087e:	2200      	movs	r2, #0
 8000880:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000882:	4b22      	ldr	r3, [pc, #136]	; (800090c <MX_ADC1_Init+0xe4>)
 8000884:	2200      	movs	r2, #0
 8000886:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000888:	4b20      	ldr	r3, [pc, #128]	; (800090c <MX_ADC1_Init+0xe4>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_ADC1_Init+0xe4>)
 8000890:	2200      	movs	r2, #0
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_ADC1_Init+0xe4>)
 8000896:	2200      	movs	r2, #0
 8000898:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_ADC1_Init+0xe4>)
 800089c:	2200      	movs	r2, #0
 800089e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_ADC1_Init+0xe4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008a8:	4818      	ldr	r0, [pc, #96]	; (800090c <MX_ADC1_Init+0xe4>)
 80008aa:	f001 f97f 	bl	8001bac <HAL_ADC_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008b4:	f000 fc78 	bl	80011a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4812      	ldr	r0, [pc, #72]	; (800090c <MX_ADC1_Init+0xe4>)
 80008c4:	f002 f8c2 	bl	8002a4c <HAL_ADCEx_MultiModeConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80008ce:	f000 fc6b 	bl	80011a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_ADC1_Init+0xec>)
 80008d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d6:	2306      	movs	r3, #6
 80008d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008de:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008e2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008e4:	2304      	movs	r3, #4
 80008e6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_ADC1_Init+0xe4>)
 80008f6:	f001 fc53 	bl	80021a0 <HAL_ADC_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000900:	f000 fc52 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	24030dd0 	.word	0x24030dd0
 8000910:	40022000 	.word	0x40022000
 8000914:	3ef08000 	.word	0x3ef08000

08000918 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	; 0x30
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	2224      	movs	r2, #36	; 0x24
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f007 fdfe 	bl	8008528 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092c:	463b      	mov	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <MX_TIM3_Init+0xac>)
 8000938:	4a23      	ldr	r2, [pc, #140]	; (80009c8 <MX_TIM3_Init+0xb0>)
 800093a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_TIM3_Init+0xac>)
 800093e:	2200      	movs	r2, #0
 8000940:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <MX_TIM3_Init+0xac>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_TIM3_Init+0xac>)
 800094a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800094e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_TIM3_Init+0xac>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_TIM3_Init+0xac>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800095c:	2303      	movs	r3, #3
 800095e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000964:	2301      	movs	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000974:	2301      	movs	r3, #1
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4619      	mov	r1, r3
 8000986:	480f      	ldr	r0, [pc, #60]	; (80009c4 <MX_TIM3_Init+0xac>)
 8000988:	f006 f8c4 	bl	8006b14 <HAL_TIM_Encoder_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000992:	f000 fc09 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	4619      	mov	r1, r3
 80009a2:	4808      	ldr	r0, [pc, #32]	; (80009c4 <MX_TIM3_Init+0xac>)
 80009a4:	f006 faaa 	bl	8006efc <HAL_TIMEx_MasterConfigSynchronization>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80009ae:	f000 fbfb 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80009b2:	213c      	movs	r1, #60	; 0x3c
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <MX_TIM3_Init+0xac>)
 80009b6:	f006 f953 	bl	8006c60 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	3730      	adds	r7, #48	; 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	24030e34 	.word	0x24030e34
 80009c8:	40000400 	.word	0x40000400

080009cc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_TIM16_Init+0x48>)
 80009d2:	4a11      	ldr	r2, [pc, #68]	; (8000a18 <MX_TIM16_Init+0x4c>)
 80009d4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600-1;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_TIM16_Init+0x48>)
 80009d8:	f242 527f 	movw	r2, #9599	; 0x257f
 80009dc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_TIM16_Init+0x48>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000-1;
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_TIM16_Init+0x48>)
 80009e6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80009ea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_TIM16_Init+0x48>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_TIM16_Init+0x48>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_TIM16_Init+0x48>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_TIM16_Init+0x48>)
 8000a00:	f005 ff90 	bl	8006924 <HAL_TIM_Base_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000a0a:	f000 fbcd 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	24030e80 	.word	0x24030e80
 8000a18:	40014400 	.word	0x40014400

08000a1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a22:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <MX_USART3_UART_Init+0x94>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a64:	4811      	ldr	r0, [pc, #68]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a66:	f006 fad7 	bl	8007018 <HAL_UART_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a70:	f000 fb9a 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a74:	2100      	movs	r1, #0
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a78:	f007 fc6b 	bl	8008352 <HAL_UARTEx_SetTxFifoThreshold>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a82:	f000 fb91 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4808      	ldr	r0, [pc, #32]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a8a:	f007 fca0 	bl	80083ce <HAL_UARTEx_SetRxFifoThreshold>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a94:	f000 fb88 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a9a:	f007 fc21 	bl	80082e0 <HAL_UARTEx_DisableFifoMode>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa4:	f000 fb80 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	24030ecc 	.word	0x24030ecc
 8000ab0:	40004800 	.word	0x40004800

08000ab4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b95      	ldr	r3, [pc, #596]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000adc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae0:	4a93      	ldr	r2, [pc, #588]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aea:	4b91      	ldr	r3, [pc, #580]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	623b      	str	r3, [r7, #32]
 8000af6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000af8:	4b8d      	ldr	r3, [pc, #564]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000afa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000afe:	4a8c      	ldr	r2, [pc, #560]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b00:	f043 0320 	orr.w	r3, r3, #32
 8000b04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b08:	4b89      	ldr	r3, [pc, #548]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b0e:	f003 0320 	and.w	r3, r3, #32
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	4b86      	ldr	r3, [pc, #536]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1c:	4a84      	ldr	r2, [pc, #528]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b26:	4b82      	ldr	r3, [pc, #520]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b7e      	ldr	r3, [pc, #504]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3a:	4a7d      	ldr	r2, [pc, #500]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b44:	4b7a      	ldr	r3, [pc, #488]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	4b77      	ldr	r3, [pc, #476]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b58:	4a75      	ldr	r2, [pc, #468]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b62:	4b73      	ldr	r3, [pc, #460]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b70:	4b6f      	ldr	r3, [pc, #444]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b76:	4a6e      	ldr	r2, [pc, #440]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b78:	f043 0310 	orr.w	r3, r3, #16
 8000b7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b80:	4b6b      	ldr	r3, [pc, #428]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	4b68      	ldr	r3, [pc, #416]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b94:	4a66      	ldr	r2, [pc, #408]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b9e:	4b64      	ldr	r3, [pc, #400]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000ba0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba4:	f003 0308 	and.w	r3, r3, #8
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bac:	4b60      	ldr	r3, [pc, #384]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000bae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb2:	4a5f      	ldr	r2, [pc, #380]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bbc:	4b5c      	ldr	r3, [pc, #368]	; (8000d30 <MX_GPIO_Init+0x26c>)
 8000bbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd0:	4858      	ldr	r0, [pc, #352]	; (8000d34 <MX_GPIO_Init+0x270>)
 8000bd2:	f002 fa6b 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUMP_PA5_Pin_GPIO_Port, PUMP_PA5_Pin_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2120      	movs	r1, #32
 8000bda:	4857      	ldr	r0, [pc, #348]	; (8000d38 <MX_GPIO_Init+0x274>)
 8000bdc:	f002 fa66 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|ENCMOTOR_PB6_Pin|ENCMOTOR_PB7_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000be6:	4855      	ldr	r0, [pc, #340]	; (8000d3c <MX_GPIO_Init+0x278>)
 8000be8:	f002 fa60 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f246 0102 	movw	r1, #24578	; 0x6002
 8000bf2:	4853      	ldr	r0, [pc, #332]	; (8000d40 <MX_GPIO_Init+0x27c>)
 8000bf4:	f002 fa5a 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 8000bfe:	4851      	ldr	r0, [pc, #324]	; (8000d44 <MX_GPIO_Init+0x280>)
 8000c00:	f002 fa54 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	484b      	ldr	r0, [pc, #300]	; (8000d48 <MX_GPIO_Init+0x284>)
 8000c1a:	f002 f897 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	483f      	ldr	r0, [pc, #252]	; (8000d34 <MX_GPIO_Init+0x270>)
 8000c38:	f002 f888 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PUMP_PA5_Pin_Pin */
  GPIO_InitStruct.Pin = PUMP_PA5_Pin_Pin;
 8000c3c:	2320      	movs	r3, #32
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PUMP_PA5_Pin_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	4839      	ldr	r0, [pc, #228]	; (8000d38 <MX_GPIO_Init+0x274>)
 8000c54:	f002 f87a 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin ENCMOTOR_PB6_Pin ENCMOTOR_PB7_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|ENCMOTOR_PB6_Pin|ENCMOTOR_PB7_Pin;
 8000c58:	f244 03c1 	movw	r3, #16577	; 0x40c1
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4832      	ldr	r0, [pc, #200]	; (8000d3c <MX_GPIO_Init+0x278>)
 8000c72:	f002 f86b 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER3_PE13_Pin_Pin STEPPER4_PE14_Pin_Pin LD2_Pin */
  GPIO_InitStruct.Pin = STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin;
 8000c76:	f246 0302 	movw	r3, #24578	; 0x6002
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	482c      	ldr	r0, [pc, #176]	; (8000d40 <MX_GPIO_Init+0x27c>)
 8000c90:	f002 f85c 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4826      	ldr	r0, [pc, #152]	; (8000d44 <MX_GPIO_Init+0x280>)
 8000caa:	f002 f84f 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	481d      	ldr	r0, [pc, #116]	; (8000d38 <MX_GPIO_Init+0x274>)
 8000cc4:	f002 f842 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000cda:	230a      	movs	r3, #10
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4814      	ldr	r0, [pc, #80]	; (8000d38 <MX_GPIO_Init+0x274>)
 8000ce6:	f002 f831 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000cea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_GPIO_Init+0x274>)
 8000d04:	f002 f822 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : HELP_SIGNAL_PG9_Pin_Pin VIBROMOTOR_PG12_Pin_Pin STEPPER2_PG14_Pin_Pin */
  GPIO_InitStruct.Pin = HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin;
 8000d08:	f44f 43a4 	mov.w	r3, #20992	; 0x5200
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <MX_GPIO_Init+0x280>)
 8000d22:	f002 f813 	bl	8002d4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d26:	bf00      	nop
 8000d28:	3738      	adds	r7, #56	; 0x38
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	58024400 	.word	0x58024400
 8000d34:	58021400 	.word	0x58021400
 8000d38:	58020000 	.word	0x58020000
 8000d3c:	58020400 	.word	0x58020400
 8000d40:	58021000 	.word	0x58021000
 8000d44:	58021800 	.word	0x58021800
 8000d48:	58020800 	.word	0x58020800
 8000d4c:	00000000 	.word	0x00000000

08000d50 <measure>:
// calling an ISR for STEPPER
// void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
//   STEPPER_TMR_OVF_ISR(htim);
// }

void measure(struct MeasureData *s) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  const int ONESEC = 10000 - 1;
 8000d58:	f242 730f 	movw	r3, #9999	; 0x270f
 8000d5c:	613b      	str	r3, [r7, #16]
  // store our counter value
  int tim_val_ms = 0; // tick is 0.1 ms
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]

  bool is_vibrating = false;
 8000d62:	2300      	movs	r3, #0
 8000d64:	76fb      	strb	r3, [r7, #27]
  // store our 16bit ADC reading
  uint16_t raw;
  // starting timer 16
  HAL_TIM_Base_Start(&htim16);
 8000d66:	4852      	ldr	r0, [pc, #328]	; (8000eb0 <measure+0x160>)
 8000d68:	f005 fe34 	bl	80069d4 <HAL_TIM_Base_Start>
  // set help signal (yellow led)
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);

  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	e079      	b.n	8000e66 <measure+0x116>

    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000d72:	7efb      	ldrb	r3, [r7, #27]
 8000d74:	f083 0301 	eor.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d035      	beq.n	8000dea <measure+0x9a>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	ee07 3a90 	vmov	s15, r3
 8000d8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d92:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8000ea0 <measure+0x150>
 8000d96:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000d9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	db22      	blt.n	8000dea <measure+0x9a>
        tim_val_ms < ONESEC * 0.3) {
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	ee07 3a90 	vmov	s15, r3
 8000daa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000db8:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8000ea8 <measure+0x158>
 8000dbc:	ee27 7b05 	vmul.f64	d7, d7, d5
    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000dc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc8:	d50f      	bpl.n	8000dea <measure+0x9a>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); // vibrator ON
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd0:	4838      	ldr	r0, [pc, #224]	; (8000eb4 <measure+0x164>)
 8000dd2:	f002 f96b 	bl	80030ac <HAL_GPIO_WritePin>
      // saving time of begin vibration
      s->t_vibr_start = i;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000ddc:	461a      	mov	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
      is_vibrating = true;
 8000de4:	2301      	movs	r3, #1
 8000de6:	76fb      	strb	r3, [r7, #27]
 8000de8:	e01d      	b.n	8000e26 <measure+0xd6>
    } else if (is_vibrating && tim_val_ms >= ONESEC * 0.3) {
 8000dea:	7efb      	ldrb	r3, [r7, #27]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d01a      	beq.n	8000e26 <measure+0xd6>
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	ee07 3a90 	vmov	s15, r3
 8000e00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e04:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8000ea8 <measure+0x158>
 8000e08:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e14:	db07      	blt.n	8000e26 <measure+0xd6>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); // vibrator OFF
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1c:	4825      	ldr	r0, [pc, #148]	; (8000eb4 <measure+0x164>)
 8000e1e:	f002 f945 	bl	80030ac <HAL_GPIO_WritePin>
      is_vibrating = false;
 8000e22:	2300      	movs	r3, #0
 8000e24:	76fb      	strb	r3, [r7, #27]
    }

    // ADC routine
    HAL_ADC_Start(&hadc1);
 8000e26:	4824      	ldr	r0, [pc, #144]	; (8000eb8 <measure+0x168>)
 8000e28:	f001 f81a 	bl	8001e60 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e30:	4821      	ldr	r0, [pc, #132]	; (8000eb8 <measure+0x168>)
 8000e32:	f001 f8cf 	bl	8001fd4 <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc1);
 8000e36:	4820      	ldr	r0, [pc, #128]	; (8000eb8 <measure+0x168>)
 8000e38:	f001 f9a4 	bl	8002184 <HAL_ADC_GetValue>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	81fb      	strh	r3, [r7, #14]
    // needed to save the last iterator i
    s->t_end = i;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e46:	461a      	mov	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f8c2 3d44 	str.w	r3, [r2, #3396]	; 0xd44
    // remember the last element of array will be 0, the counter will be
    // increased but array not filled
    s->signal[i] = raw;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	89f9      	ldrh	r1, [r7, #14]
 8000e54:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    tim_val_ms = __HAL_TIM_GET_COUNTER(&htim16);
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <measure+0x160>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	61fb      	str	r3, [r7, #28]
  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	db81      	blt.n	8000d72 <measure+0x22>
  }
  // stoping and reseting timer 16
  HAL_TIM_Base_Stop_IT(&htim16);
 8000e6e:	4810      	ldr	r0, [pc, #64]	; (8000eb0 <measure+0x160>)
 8000e70:	f005 fe20 	bl	8006ab4 <HAL_TIM_Base_Stop_IT>
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <measure+0x160>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24
  s->pulses = 0;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e82:	461a      	mov	r2, r3
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c2 3d48 	str.w	r3, [r2, #3400]	; 0xd48
  s->htime = 0;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e90:	461a      	mov	r2, r3
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
  // reset help signal (yellow led)
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	9999999a 	.word	0x9999999a
 8000ea4:	3fc99999 	.word	0x3fc99999
 8000ea8:	33333333 	.word	0x33333333
 8000eac:	3fd33333 	.word	0x3fd33333
 8000eb0:	24030e80 	.word	0x24030e80
 8000eb4:	58021800 	.word	0x58021800
 8000eb8:	24030dd0 	.word	0x24030dd0

08000ebc <analyse>:

void analyse(struct MeasureData *s) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b08b      	sub	sp, #44	; 0x2c
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  // digitalize signal v:[0,1]
  const int TRIGGER = 39718;
 8000ec4:	f649 3326 	movw	r3, #39718	; 0x9b26
 8000ec8:	617b      	str	r3, [r7, #20]
  const int SCALE = 1000;
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	613b      	str	r3, [r7, #16]

  for (int i = 0; i < s->t_end; i++) {
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed4:	e015      	b.n	8000f02 <analyse+0x46>
    if (s->signal[i] < TRIGGER) { // aprox. 2V TODO change it to 1V
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	dd05      	ble.n	8000ef2 <analyse+0x36>
      s->signal[i] = 0;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eea:	2100      	movs	r1, #0
 8000eec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000ef0:	e004      	b.n	8000efc <analyse+0x40>
    } else {
      s->signal[i] = 1;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i = 0; i < s->t_end; i++) {
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	3301      	adds	r3, #1
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f08:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dbe1      	blt.n	8000ed6 <analyse+0x1a>
    }
  }
  // count pulses
  for (int i = 0; i < s->t_end; i++) {
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
 8000f16:	e02d      	b.n	8000f74 <analyse+0xb8>
    int edge = s->signal[i + 1] - s->signal[i];
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f22:	4619      	mov	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a3a      	ldr	r2, [r7, #32]
 8000f28:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f2c:	1acb      	subs	r3, r1, r3
 8000f2e:	60fb      	str	r3, [r7, #12]
    if (edge == 1) { // count only negative pulses
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d10a      	bne.n	8000f4c <analyse+0x90>
      s->pulses++;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f3c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000f40:	3301      	adds	r3, #1
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000f48:	f8c2 3d48 	str.w	r3, [r2, #3400]	; 0xd48
    }
    if (s->signal[i] == 1) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a3a      	ldr	r2, [r7, #32]
 8000f50:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d10a      	bne.n	8000f6e <analyse+0xb2>
      s->htime++;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f5e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000f62:	3301      	adds	r3, #1
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000f6a:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
  for (int i = 0; i < s->t_end; i++) {
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
 8000f70:	3301      	adds	r3, #1
 8000f72:	623b      	str	r3, [r7, #32]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f7a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000f7e:	6a3a      	ldr	r2, [r7, #32]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbc9      	blt.n	8000f18 <analyse+0x5c>
    }
  }
  // check if sensor has been open before vibration
  s->bad = false;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2d50 	strb.w	r2, [r3, #3408]	; 0xd50
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	e00f      	b.n	8000fb6 <analyse+0xfa>
    if (s->signal[i] == 0) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d106      	bne.n	8000fb0 <analyse+0xf4>
      s->bad = true;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2d50 	strb.w	r2, [r3, #3408]	; 0xd50
      break;
 8000fae:	e00a      	b.n	8000fc6 <analyse+0x10a>
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fbc:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dde7      	ble.n	8000f96 <analyse+0xda>
    }
  }
  // check if sensor has been open after vibration + Einschwingungszeit
  for (int i = (int)(s->t_end * 0.75); i < s->t_end; i++) {
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fcc:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fd8:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8000fdc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fe0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fe4:	ee17 3a90 	vmov	r3, s15
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	e00f      	b.n	800100c <analyse+0x150>
    if (s->signal[i] == 0) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d106      	bne.n	8001006 <analyse+0x14a>
      s->bad = true;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2d50 	strb.w	r2, [r3, #3408]	; 0xd50
      break;
 8001004:	e00a      	b.n	800101c <analyse+0x160>
  for (int i = (int)(s->t_end * 0.75); i < s->t_end; i++) {
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	3301      	adds	r3, #1
 800100a:	61bb      	str	r3, [r7, #24]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001012:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbe7      	blt.n	8000fec <analyse+0x130>
    }
  }
  // check if sensor is not kurzgeschlossen all time
  if (s->pulses == 0) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001022:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <analyse+0x17a>
    s->bad = true;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2d50 	strb.w	r2, [r3, #3408]	; 0xd50
  }
  // resolve the variables to human readable values
  s->htime = s->htime * SCALE / s->t_end;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800103c:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	fb03 f202 	mul.w	r2, r3, r2
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800104c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8001050:	fb92 f3f3 	sdiv	r3, r2, r3
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 800105a:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
  s->t_vibr_start = s->t_vibr_start * SCALE / s->t_end;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001064:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	fb03 f202 	mul.w	r2, r3, r2
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001074:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8001078:	fb92 f3f3 	sdiv	r3, r2, r3
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8001082:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
}
 8001086:	bf00      	nop
 8001088:	372c      	adds	r7, #44	; 0x2c
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <uart_transmit_digital>:
  for (int j = 0; j < Meas.t_end; j++) {
    uart_buf_len = sprintf(uart_buf, "%d, %u \r\n", j, Meas.signal[j]);
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
  }
}
void uart_transmit_digital(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  /* Transmit an array with DIGITAL data via uart */
  uart_buf_len = sprintf(uart_buf, "Digital \n");
 800109a:	491b      	ldr	r1, [pc, #108]	; (8001108 <uart_transmit_digital+0x74>)
 800109c:	481b      	ldr	r0, [pc, #108]	; (800110c <uart_transmit_digital+0x78>)
 800109e:	f007 fa23 	bl	80084e8 <siprintf>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <uart_transmit_digital+0x7c>)
 80010a6:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <uart_transmit_digital+0x7c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	2364      	movs	r3, #100	; 0x64
 80010b0:	4916      	ldr	r1, [pc, #88]	; (800110c <uart_transmit_digital+0x78>)
 80010b2:	4818      	ldr	r0, [pc, #96]	; (8001114 <uart_transmit_digital+0x80>)
 80010b4:	f006 f800 	bl	80070b8 <HAL_UART_Transmit>
  for (int j = 0; j < Meas.t_end; j++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	e016      	b.n	80010ec <uart_transmit_digital+0x58>
    uart_buf_len = sprintf(uart_buf, "%d, %u \r\n", j, Meas.signal[j]);
 80010be:	4a16      	ldr	r2, [pc, #88]	; (8001118 <uart_transmit_digital+0x84>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4914      	ldr	r1, [pc, #80]	; (800111c <uart_transmit_digital+0x88>)
 80010ca:	4810      	ldr	r0, [pc, #64]	; (800110c <uart_transmit_digital+0x78>)
 80010cc:	f007 fa0c 	bl	80084e8 <siprintf>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <uart_transmit_digital+0x7c>)
 80010d4:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <uart_transmit_digital+0x7c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	490b      	ldr	r1, [pc, #44]	; (800110c <uart_transmit_digital+0x78>)
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <uart_transmit_digital+0x80>)
 80010e2:	f005 ffe9 	bl	80070b8 <HAL_UART_Transmit>
  for (int j = 0; j < Meas.t_end; j++) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3301      	adds	r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <uart_transmit_digital+0x84>)
 80010ee:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010f2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbe0      	blt.n	80010be <uart_transmit_digital+0x2a>
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	08008e68 	.word	0x08008e68
 800110c:	24030f60 	.word	0x24030f60
 8001110:	24030f94 	.word	0x24030f94
 8001114:	24030ecc 	.word	0x24030ecc
 8001118:	2400007c 	.word	0x2400007c
 800111c:	08008e5c 	.word	0x08008e5c

08001120 <uart_transmit_info>:
void uart_transmit_info(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Transmit extra measurement data via uart */
  uart_buf_len = sprintf(uart_buf, "htime = %d ms; pulses = %d;   \r\n",
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <uart_transmit_info+0x70>)
 8001126:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800112a:	f8d3 2d4c 	ldr.w	r2, [r3, #3404]	; 0xd4c
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <uart_transmit_info+0x70>)
 8001130:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001134:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8001138:	4916      	ldr	r1, [pc, #88]	; (8001194 <uart_transmit_info+0x74>)
 800113a:	4817      	ldr	r0, [pc, #92]	; (8001198 <uart_transmit_info+0x78>)
 800113c:	f007 f9d4 	bl	80084e8 <siprintf>
 8001140:	4603      	mov	r3, r0
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <uart_transmit_info+0x7c>)
 8001144:	6013      	str	r3, [r2, #0]
                         Meas.htime, Meas.pulses);
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <uart_transmit_info+0x7c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	b29a      	uxth	r2, r3
 800114c:	2364      	movs	r3, #100	; 0x64
 800114e:	4912      	ldr	r1, [pc, #72]	; (8001198 <uart_transmit_info+0x78>)
 8001150:	4813      	ldr	r0, [pc, #76]	; (80011a0 <uart_transmit_info+0x80>)
 8001152:	f005 ffb1 	bl	80070b8 <HAL_UART_Transmit>
  uart_buf_len = sprintf(uart_buf, "bad state = %d; vibr = %d ms \r\n",
                         Meas.bad, Meas.t_vibr_start);
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <uart_transmit_info+0x70>)
 8001158:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800115c:	f893 3d50 	ldrb.w	r3, [r3, #3408]	; 0xd50
  uart_buf_len = sprintf(uart_buf, "bad state = %d; vibr = %d ms \r\n",
 8001160:	461a      	mov	r2, r3
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <uart_transmit_info+0x70>)
 8001164:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001168:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800116c:	490d      	ldr	r1, [pc, #52]	; (80011a4 <uart_transmit_info+0x84>)
 800116e:	480a      	ldr	r0, [pc, #40]	; (8001198 <uart_transmit_info+0x78>)
 8001170:	f007 f9ba 	bl	80084e8 <siprintf>
 8001174:	4603      	mov	r3, r0
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <uart_transmit_info+0x7c>)
 8001178:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <uart_transmit_info+0x7c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	b29a      	uxth	r2, r3
 8001180:	2364      	movs	r3, #100	; 0x64
 8001182:	4905      	ldr	r1, [pc, #20]	; (8001198 <uart_transmit_info+0x78>)
 8001184:	4806      	ldr	r0, [pc, #24]	; (80011a0 <uart_transmit_info+0x80>)
 8001186:	f005 ff97 	bl	80070b8 <HAL_UART_Transmit>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2400007c 	.word	0x2400007c
 8001194:	08008e74 	.word	0x08008e74
 8001198:	24030f60 	.word	0x24030f60
 800119c:	24030f94 	.word	0x24030f94
 80011a0:	24030ecc 	.word	0x24030ecc
 80011a4:	08008e98 	.word	0x08008e98

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_MspInit+0x30>)
 80011bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011c0:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <HAL_MspInit+0x30>)
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_MspInit+0x30>)
 80011cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	58024400 	.word	0x58024400

080011e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0ba      	sub	sp, #232	; 0xe8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	22c0      	movs	r2, #192	; 0xc0
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f007 f98d 	bl	8008528 <memset>
  if(hadc->Instance==ADC1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <HAL_ADC_MspInit+0xd8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d14f      	bne.n	80012b8 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001218:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001224:	2301      	movs	r3, #1
 8001226:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001228:	2310      	movs	r3, #16
 800122a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 800122c:	2304      	movs	r3, #4
 800122e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001230:	2302      	movs	r3, #2
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001234:	2302      	movs	r3, #2
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001238:	23c0      	movs	r3, #192	; 0xc0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800123c:	2300      	movs	r3, #0
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4618      	mov	r0, r3
 8001250:	f002 ff5e 	bl	8004110 <HAL_RCCEx_PeriphCLKConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800125a:	f7ff ffa5 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_ADC_MspInit+0xdc>)
 8001260:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <HAL_ADC_MspInit+0xdc>)
 8001266:	f043 0320 	orr.w	r3, r3, #32
 800126a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_ADC_MspInit+0xdc>)
 8001270:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001274:	f003 0320 	and.w	r3, r3, #32
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <HAL_ADC_MspInit+0xdc>)
 800127e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001282:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <HAL_ADC_MspInit+0xdc>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800128c:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_ADC_MspInit+0xdc>)
 800128e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|ANALOG_READ_PA3_Pin_Pin;
 800129a:	2309      	movs	r3, #9
 800129c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a0:	2303      	movs	r3, #3
 80012a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <HAL_ADC_MspInit+0xe0>)
 80012b4:	f001 fd4a 	bl	8002d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	37e8      	adds	r7, #232	; 0xe8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40022000 	.word	0x40022000
 80012c4:	58024400 	.word	0x58024400
 80012c8:	58020000 	.word	0x58020000

080012cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a1a      	ldr	r2, [pc, #104]	; (8001354 <HAL_TIM_Encoder_MspInit+0x88>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d12d      	bne.n	800134a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_TIM_Encoder_MspInit+0x8c>)
 80012f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012f4:	4a18      	ldr	r2, [pc, #96]	; (8001358 <HAL_TIM_Encoder_MspInit+0x8c>)
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001300:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_TIM_Encoder_MspInit+0x8c>)
 800130e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001312:	4a11      	ldr	r2, [pc, #68]	; (8001358 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_TIM_Encoder_MspInit+0x8c>)
 800131e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = encoder1PA6_Pin|encoder2PA7_Pin;
 800132a:	23c0      	movs	r3, #192	; 0xc0
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800133a:	2302      	movs	r3, #2
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_TIM_Encoder_MspInit+0x90>)
 8001346:	f001 fd01 	bl	8002d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40000400 	.word	0x40000400
 8001358:	58024400 	.word	0x58024400
 800135c:	58020000 	.word	0x58020000

08001360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0b      	ldr	r2, [pc, #44]	; (800139c <HAL_TIM_Base_MspInit+0x3c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10e      	bne.n	8001390 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_TIM_Base_MspInit+0x40>)
 8001374:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001378:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <HAL_TIM_Base_MspInit+0x40>)
 800137a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <HAL_TIM_Base_MspInit+0x40>)
 8001384:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40014400 	.word	0x40014400
 80013a0:	58024400 	.word	0x58024400

080013a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0ba      	sub	sp, #232	; 0xe8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	22c0      	movs	r2, #192	; 0xc0
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f007 f8af 	bl	8008528 <memset>
  if(huart->Instance==USART3)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a27      	ldr	r2, [pc, #156]	; (800146c <HAL_UART_MspInit+0xc8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d146      	bne.n	8001462 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013d4:	f04f 0202 	mov.w	r2, #2
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fe90 	bl	8004110 <HAL_RCCEx_PeriphCLKConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013f6:	f7ff fed7 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <HAL_UART_MspInit+0xcc>)
 80013fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001400:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <HAL_UART_MspInit+0xcc>)
 8001402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001406:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_UART_MspInit+0xcc>)
 800140c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_UART_MspInit+0xcc>)
 800141a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800141e:	4a14      	ldr	r2, [pc, #80]	; (8001470 <HAL_UART_MspInit+0xcc>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_UART_MspInit+0xcc>)
 800142a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001436:	f44f 7340 	mov.w	r3, #768	; 0x300
 800143a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001450:	2307      	movs	r3, #7
 8001452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001456:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <HAL_UART_MspInit+0xd0>)
 800145e:	f001 fc75 	bl	8002d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	37e8      	adds	r7, #232	; 0xe8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40004800 	.word	0x40004800
 8001470:	58024400 	.word	0x58024400
 8001474:	58020c00 	.word	0x58020c00

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c4:	f000 f94c 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d207      	bcs.n	800150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014fc:	f007 f81c 	bl	8008538 <__errno>
 8001500:	4603      	mov	r3, r0
 8001502:	220c      	movs	r2, #12
 8001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800150a:	e009      	b.n	8001520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <_sbrk+0x64>)
 800151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	24100000 	.word	0x24100000
 800152c:	00000400 	.word	0x00000400
 8001530:	24030f98 	.word	0x24030f98
 8001534:	240310e8 	.word	0x240310e8

08001538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800153c:	4b32      	ldr	r3, [pc, #200]	; (8001608 <SystemInit+0xd0>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	4a31      	ldr	r2, [pc, #196]	; (8001608 <SystemInit+0xd0>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <SystemInit+0xd4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	2b02      	cmp	r3, #2
 8001556:	d807      	bhi.n	8001568 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001558:	4b2c      	ldr	r3, [pc, #176]	; (800160c <SystemInit+0xd4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 030f 	bic.w	r3, r3, #15
 8001560:	4a2a      	ldr	r2, [pc, #168]	; (800160c <SystemInit+0xd4>)
 8001562:	f043 0303 	orr.w	r3, r3, #3
 8001566:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <SystemInit+0xd8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a28      	ldr	r2, [pc, #160]	; (8001610 <SystemInit+0xd8>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <SystemInit+0xd8>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <SystemInit+0xd8>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4924      	ldr	r1, [pc, #144]	; (8001610 <SystemInit+0xd8>)
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <SystemInit+0xdc>)
 8001582:	4013      	ands	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <SystemInit+0xd4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <SystemInit+0xd4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 030f 	bic.w	r3, r3, #15
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <SystemInit+0xd4>)
 800159c:	f043 0303 	orr.w	r3, r3, #3
 80015a0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <SystemInit+0xd8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <SystemInit+0xd8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <SystemInit+0xd8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <SystemInit+0xd8>)
 80015b6:	4a18      	ldr	r2, [pc, #96]	; (8001618 <SystemInit+0xe0>)
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <SystemInit+0xd8>)
 80015bc:	4a17      	ldr	r2, [pc, #92]	; (800161c <SystemInit+0xe4>)
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <SystemInit+0xd8>)
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <SystemInit+0xe8>)
 80015c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <SystemInit+0xd8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <SystemInit+0xd8>)
 80015ce:	4a14      	ldr	r2, [pc, #80]	; (8001620 <SystemInit+0xe8>)
 80015d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <SystemInit+0xd8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <SystemInit+0xd8>)
 80015da:	4a11      	ldr	r2, [pc, #68]	; (8001620 <SystemInit+0xe8>)
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <SystemInit+0xd8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <SystemInit+0xd8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a09      	ldr	r2, [pc, #36]	; (8001610 <SystemInit+0xd8>)
 80015ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <SystemInit+0xd8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <SystemInit+0xec>)
 80015f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00
 800160c:	52002000 	.word	0x52002000
 8001610:	58024400 	.word	0x58024400
 8001614:	eaf6ed7f 	.word	0xeaf6ed7f
 8001618:	02020200 	.word	0x02020200
 800161c:	01ff0000 	.word	0x01ff0000
 8001620:	01010280 	.word	0x01010280
 8001624:	52004000 	.word	0x52004000

08001628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001660 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800162c:	f7ff ff84 	bl	8001538 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001632:	490d      	ldr	r1, [pc, #52]	; (8001668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001648:	4c0a      	ldr	r4, [pc, #40]	; (8001674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001656:	f006 ff75 	bl	8008544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165a:	f7ff f817 	bl	800068c <main>
  bx  lr
 800165e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001660:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001664:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001668:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 800166c:	08008f34 	.word	0x08008f34
  ldr r2, =_sbss
 8001670:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001674:	240310e8 	.word	0x240310e8

08001678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC_IRQHandler>
	...

0800167c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001682:	2003      	movs	r0, #3
 8001684:	f001 fb30 	bl	8002ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001688:	f002 fb6c 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 800168c:	4602      	mov	r2, r0
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_Init+0x68>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	0a1b      	lsrs	r3, r3, #8
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	4913      	ldr	r1, [pc, #76]	; (80016e8 <HAL_Init+0x6c>)
 800169a:	5ccb      	ldrb	r3, [r1, r3]
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_Init+0x68>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <HAL_Init+0x6c>)
 80016b0:	5cd3      	ldrb	r3, [r2, r3]
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <HAL_Init+0x70>)
 80016be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016c0:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <HAL_Init+0x74>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 f814 	bl	80016f4 <HAL_InitTick>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e002      	b.n	80016dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016d6:	f7ff fd6d 	bl	80011b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	58024400 	.word	0x58024400
 80016e8:	08008eb8 	.word	0x08008eb8
 80016ec:	24000004 	.word	0x24000004
 80016f0:	24000000 	.word	0x24000000

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_InitTick+0x60>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e021      	b.n	800174c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <HAL_InitTick+0x64>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_InitTick+0x60>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001716:	fbb3 f3f1 	udiv	r3, r3, r1
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f001 fb07 	bl	8002d32 <HAL_SYSTICK_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e00e      	b.n	800174c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d80a      	bhi.n	800174a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800173c:	f001 fadf 	bl	8002cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001740:	4a06      	ldr	r2, [pc, #24]	; (800175c <HAL_InitTick+0x68>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2400000c 	.word	0x2400000c
 8001758:	24000000 	.word	0x24000000
 800175c:	24000008 	.word	0x24000008

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2400000c 	.word	0x2400000c
 8001784:	24030f9c 	.word	0x24030f9c

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	24030f9c 	.word	0x24030f9c

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff ffee 	bl	8001788 <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017b8:	d005      	beq.n	80017c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_Delay+0x44>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c6:	bf00      	nop
 80017c8:	f7ff ffde 	bl	8001788 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d8f7      	bhi.n	80017c8 <HAL_Delay+0x28>
  {
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2400000c 	.word	0x2400000c

080017e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	609a      	str	r2, [r3, #8]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	609a      	str	r2, [r3, #8]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3360      	adds	r3, #96	; 0x60
 8001862:	461a      	mov	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	430b      	orrs	r3, r1
 800187e:	431a      	orrs	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001884:	bf00      	nop
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	431a      	orrs	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	611a      	str	r2, [r3, #16]
}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b087      	sub	sp, #28
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3360      	adds	r3, #96	; 0x60
 80018d2:	461a      	mov	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	601a      	str	r2, [r3, #0]
  }
}
 80018ec:	bf00      	nop
 80018ee:	371c      	adds	r7, #28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800191e:	b480      	push	{r7}
 8001920:	b087      	sub	sp, #28
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3330      	adds	r3, #48	; 0x30
 800192e:	461a      	mov	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	4413      	add	r3, r2
 800193c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	211f      	movs	r1, #31
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	401a      	ands	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	0e9b      	lsrs	r3, r3, #26
 8001956:	f003 011f 	and.w	r1, r3, #31
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800196a:	bf00      	nop
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001976:	b480      	push	{r7}
 8001978:	b087      	sub	sp, #28
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3314      	adds	r3, #20
 8001986:	461a      	mov	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	0e5b      	lsrs	r3, r3, #25
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	0d1b      	lsrs	r3, r3, #20
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2107      	movs	r1, #7
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	401a      	ands	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	0d1b      	lsrs	r3, r3, #20
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	431a      	orrs	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019c0:	bf00      	nop
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019e4:	43db      	mvns	r3, r3
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0318 	and.w	r3, r3, #24
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019f0:	40d9      	lsrs	r1, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	400b      	ands	r3, r1
 80019f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019fa:	431a      	orrs	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	000fffff 	.word	0x000fffff

08001a14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 031f 	and.w	r3, r3, #31
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6093      	str	r3, [r2, #8]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	5fffffc0 	.word	0x5fffffc0

08001a70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a84:	d101      	bne.n	8001a8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <LL_ADC_EnableInternalRegulator+0x24>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	6fffffc0 	.word	0x6fffffc0

08001ac0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <LL_ADC_Enable+0x24>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	7fffffc0 	.word	0x7fffffc0

08001b10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <LL_ADC_IsEnabled+0x18>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <LL_ADC_IsEnabled+0x1a>
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <LL_ADC_REG_StartConversion+0x24>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	f043 0204 	orr.w	r2, r3, #4
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	7fffffc0 	.word	0x7fffffc0

08001b60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d101      	bne.n	8001b78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d101      	bne.n	8001b9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e138      	b.n	8001e38 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff fb07 	bl	80011e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff3f 	bl	8001a70 <LL_ADC_IsDeepPowerDownEnabled>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff25 	bl	8001a4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff5a 	bl	8001ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d114      	bne.n	8001c3c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff3e 	bl	8001a98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c1c:	4b88      	ldr	r3, [pc, #544]	; (8001e40 <HAL_ADC_Init+0x294>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	4a88      	ldr	r2, [pc, #544]	; (8001e44 <HAL_ADC_Init+0x298>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c2e:	e002      	b.n	8001c36 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f9      	bne.n	8001c30 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff3d 	bl	8001ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10d      	bne.n	8001c68 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	f043 0210 	orr.w	r2, r3, #16
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	f043 0201 	orr.w	r2, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff77 	bl	8001b60 <LL_ADC_REG_IsConversionOngoing>
 8001c72:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 80d2 	bne.w	8001e26 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f040 80ce 	bne.w	8001e26 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c92:	f043 0202 	orr.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff36 	bl	8001b10 <LL_ADC_IsEnabled>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d110      	bne.n	8001ccc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001caa:	4867      	ldr	r0, [pc, #412]	; (8001e48 <HAL_ADC_Init+0x29c>)
 8001cac:	f7ff ff30 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cb0:	4604      	mov	r4, r0
 8001cb2:	4866      	ldr	r0, [pc, #408]	; (8001e4c <HAL_ADC_Init+0x2a0>)
 8001cb4:	f7ff ff2c 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4862      	ldr	r0, [pc, #392]	; (8001e50 <HAL_ADC_Init+0x2a4>)
 8001cc8:	f7ff fd8e 	bl	80017e8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7d5b      	ldrb	r3, [r3, #21]
 8001cd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cd6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001cdc:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7f1b      	ldrb	r3, [r3, #28]
 8001ce2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7f1b      	ldrb	r3, [r3, #28]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d106      	bne.n	8001cfe <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	045b      	lsls	r3, r3, #17
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	4b4c      	ldr	r3, [pc, #304]	; (8001e54 <HAL_ADC_Init+0x2a8>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	69b9      	ldr	r1, [r7, #24]
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff14 	bl	8001b60 <LL_ADC_REG_IsConversionOngoing>
 8001d38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff21 	bl	8001b86 <LL_ADC_INJ_IsConversionOngoing>
 8001d44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d14a      	bne.n	8001de2 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d147      	bne.n	8001de2 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7d1b      	ldrb	r3, [r3, #20]
 8001d56:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <HAL_ADC_Init+0x2ac>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	69b9      	ldr	r1, [r7, #24]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d11b      	bne.n	8001db6 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <HAL_ADC_Init+0x2b0>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d92:	3a01      	subs	r2, #1
 8001d94:	0411      	lsls	r1, r2, #16
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d9a:	4311      	orrs	r1, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001da0:	4311      	orrs	r1, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001da6:	430a      	orrs	r2, r1
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	611a      	str	r2, [r3, #16]
 8001db4:	e007      	b.n	8001dc6 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fd41 	bl	8002864 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d10c      	bne.n	8001e04 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f023 010f 	bic.w	r1, r3, #15
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	1e5a      	subs	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
 8001e02:	e007      	b.n	8001e14 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 020f 	bic.w	r2, r2, #15
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	f023 0303 	bic.w	r3, r3, #3
 8001e1c:	f043 0201 	orr.w	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54
 8001e24:	e007      	b.n	8001e36 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2a:	f043 0210 	orr.w	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e36:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3724      	adds	r7, #36	; 0x24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	24000000 	.word	0x24000000
 8001e44:	053e2d63 	.word	0x053e2d63
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40022100 	.word	0x40022100
 8001e50:	40022300 	.word	0x40022300
 8001e54:	fff0c003 	.word	0xfff0c003
 8001e58:	ffffbffc 	.word	0xffffbffc
 8001e5c:	fc00f81e 	.word	0xfc00f81e

08001e60 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e68:	4856      	ldr	r0, [pc, #344]	; (8001fc4 <HAL_ADC_Start+0x164>)
 8001e6a:	f7ff fdd3 	bl	8001a14 <LL_ADC_GetMultimode>
 8001e6e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fe73 	bl	8001b60 <LL_ADC_REG_IsConversionOngoing>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f040 809a 	bne.w	8001fb6 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_Start+0x30>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e095      	b.n	8001fbc <HAL_ADC_Start+0x15c>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fc67 	bl	800276c <ADC_Enable>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 8081 	bne.w	8001fac <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001eae:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_ADC_Start+0x168>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a43      	ldr	r2, [pc, #268]	; (8001fcc <HAL_ADC_Start+0x16c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d002      	beq.n	8001eca <HAL_ADC_Start+0x6a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	e000      	b.n	8001ecc <HAL_ADC_Start+0x6c>
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <HAL_ADC_Start+0x170>)
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d002      	beq.n	8001eda <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d105      	bne.n	8001ee6 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ede:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef2:	d106      	bne.n	8001f02 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	f023 0206 	bic.w	r2, r3, #6
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	659a      	str	r2, [r3, #88]	; 0x58
 8001f00:	e002      	b.n	8001f08 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	221c      	movs	r2, #28
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2b      	ldr	r2, [pc, #172]	; (8001fcc <HAL_ADC_Start+0x16c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d002      	beq.n	8001f28 <HAL_ADC_Start+0xc8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	e000      	b.n	8001f2a <HAL_ADC_Start+0xca>
 8001f28:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_ADC_Start+0x170>)
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d008      	beq.n	8001f44 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d002      	beq.n	8001f44 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	d114      	bne.n	8001f6e <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fde6 	bl	8001b38 <LL_ADC_REG_StartConversion>
 8001f6c:	e025      	b.n	8001fba <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <HAL_ADC_Start+0x16c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d002      	beq.n	8001f8a <HAL_ADC_Start+0x12a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	e000      	b.n	8001f8c <HAL_ADC_Start+0x12c>
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_ADC_Start+0x170>)
 8001f8c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00f      	beq.n	8001fba <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fa2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
 8001faa:	e006      	b.n	8001fba <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001fb4:	e001      	b.n	8001fba <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40022300 	.word	0x40022300
 8001fc8:	fffff0fe 	.word	0xfffff0fe
 8001fcc:	40022100 	.word	0x40022100
 8001fd0:	40022000 	.word	0x40022000

08001fd4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fde:	4866      	ldr	r0, [pc, #408]	; (8002178 <HAL_ADC_PollForConversion+0x1a4>)
 8001fe0:	f7ff fd18 	bl	8001a14 <LL_ADC_GetMultimode>
 8001fe4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d102      	bne.n	8001ff4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001fee:	2308      	movs	r3, #8
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e02a      	b.n	800204a <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d002      	beq.n	8002006 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b09      	cmp	r3, #9
 8002004:	d111      	bne.n	800202a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f043 0220 	orr.w	r2, r3, #32
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0a4      	b.n	800216e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002024:	2304      	movs	r3, #4
 8002026:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002028:	e00f      	b.n	800204a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800202a:	4853      	ldr	r0, [pc, #332]	; (8002178 <HAL_ADC_PollForConversion+0x1a4>)
 800202c:	f7ff fd00 	bl	8001a30 <LL_ADC_GetMultiDMATransfer>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	f043 0220 	orr.w	r2, r3, #32
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e093      	b.n	800216e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002046:	2304      	movs	r3, #4
 8002048:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800204a:	f7ff fb9d 	bl	8001788 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002050:	e021      	b.n	8002096 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002058:	d01d      	beq.n	8002096 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800205a:	f7ff fb95 	bl	8001788 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d302      	bcc.n	8002070 <HAL_ADC_PollForConversion+0x9c>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d112      	bne.n	8002096 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	f043 0204 	orr.w	r2, r3, #4
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e06b      	b.n	800216e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0d6      	beq.n	8002052 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fc1f 	bl	80018f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01c      	beq.n	80020fa <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7d5b      	ldrb	r3, [r3, #21]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d118      	bne.n	80020fa <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d111      	bne.n	80020fa <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d105      	bne.n	80020fa <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1f      	ldr	r2, [pc, #124]	; (800217c <HAL_ADC_PollForConversion+0x1a8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d002      	beq.n	800210a <HAL_ADC_PollForConversion+0x136>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	e000      	b.n	800210c <HAL_ADC_PollForConversion+0x138>
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_ADC_PollForConversion+0x1ac>)
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	4293      	cmp	r3, r2
 8002112:	d008      	beq.n	8002126 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b05      	cmp	r3, #5
 800211e:	d002      	beq.n	8002126 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b09      	cmp	r3, #9
 8002124:	d104      	bne.n	8002130 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	e00c      	b.n	800214a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a11      	ldr	r2, [pc, #68]	; (800217c <HAL_ADC_PollForConversion+0x1a8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d002      	beq.n	8002140 <HAL_ADC_PollForConversion+0x16c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	e000      	b.n	8002142 <HAL_ADC_PollForConversion+0x16e>
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_ADC_PollForConversion+0x1ac>)
 8002142:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d104      	bne.n	800215a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2208      	movs	r2, #8
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e008      	b.n	800216c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d103      	bne.n	800216c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	220c      	movs	r2, #12
 800216a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40022300 	.word	0x40022300
 800217c:	40022100 	.word	0x40022100
 8002180:	40022000 	.word	0x40022000

08002184 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b0a1      	sub	sp, #132	; 0x84
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a9a      	ldr	r2, [pc, #616]	; (8002424 <HAL_ADC_ConfigChannel+0x284>)
 80021ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x2a>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e2bc      	b.n	8002744 <HAL_ADC_ConfigChannel+0x5a4>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fcc2 	bl	8001b60 <LL_ADC_REG_IsConversionOngoing>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 82a1 	bne.w	8002726 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d108      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x62>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	2201      	movs	r2, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	e016      	b.n	8002230 <HAL_ADC_ConfigChannel+0x90>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002212:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800221a:	2320      	movs	r3, #32
 800221c:	e003      	b.n	8002226 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800221e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	2201      	movs	r2, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	69d1      	ldr	r1, [r2, #28]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	430b      	orrs	r3, r1
 800223c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6859      	ldr	r1, [r3, #4]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	f7ff fb67 	bl	800191e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fc83 	bl	8001b60 <LL_ADC_REG_IsConversionOngoing>
 800225a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fc90 	bl	8001b86 <LL_ADC_INJ_IsConversionOngoing>
 8002266:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800226a:	2b00      	cmp	r3, #0
 800226c:	f040 80a0 	bne.w	80023b0 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002272:	2b00      	cmp	r3, #0
 8002274:	f040 809c 	bne.w	80023b0 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	461a      	mov	r2, r3
 8002286:	f7ff fb76 	bl	8001976 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10b      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x110>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	e00a      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x126>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d027      	beq.n	8002320 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	6919      	ldr	r1, [r3, #16]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022de:	f7ff fab7 	bl	8001850 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6919      	ldr	r1, [r3, #16]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	7e5b      	ldrb	r3, [r3, #25]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d102      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x158>
 80022f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80022f6:	e000      	b.n	80022fa <HAL_ADC_ConfigChannel+0x15a>
 80022f8:	2300      	movs	r3, #0
 80022fa:	461a      	mov	r2, r3
 80022fc:	f7ff fae1 	bl	80018c2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6919      	ldr	r1, [r3, #16]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	7e1b      	ldrb	r3, [r3, #24]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d102      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x176>
 8002310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002314:	e000      	b.n	8002318 <HAL_ADC_ConfigChannel+0x178>
 8002316:	2300      	movs	r3, #0
 8002318:	461a      	mov	r2, r3
 800231a:	f7ff fab9 	bl	8001890 <LL_ADC_SetDataRightShift>
 800231e:	e047      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002326:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	069b      	lsls	r3, r3, #26
 8002330:	429a      	cmp	r2, r3
 8002332:	d107      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002342:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800234a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	069b      	lsls	r3, r3, #26
 8002354:	429a      	cmp	r2, r3
 8002356:	d107      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002366:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800236e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	069b      	lsls	r3, r3, #26
 8002378:	429a      	cmp	r2, r3
 800237a:	d107      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800238a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002392:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	069b      	lsls	r3, r3, #26
 800239c:	429a      	cmp	r2, r3
 800239e:	d107      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023ae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fbab 	bl	8001b10 <LL_ADC_IsEnabled>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f040 81bb 	bne.w	8002738 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	461a      	mov	r2, r3
 80023d0:	f7ff fafc 	bl	80019cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a12      	ldr	r2, [pc, #72]	; (8002424 <HAL_ADC_ConfigChannel+0x284>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	f040 8130 	bne.w	8002640 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10b      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x268>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0e9b      	lsrs	r3, r3, #26
 80023f6:	3301      	adds	r3, #1
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	2b09      	cmp	r3, #9
 80023fe:	bf94      	ite	ls
 8002400:	2301      	movls	r3, #1
 8002402:	2300      	movhi	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e01b      	b.n	8002440 <HAL_ADC_ConfigChannel+0x2a0>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002418:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800241a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d103      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002420:	2320      	movs	r3, #32
 8002422:	e005      	b.n	8002430 <HAL_ADC_ConfigChannel+0x290>
 8002424:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	3301      	adds	r3, #1
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2b09      	cmp	r3, #9
 8002438:	bf94      	ite	ls
 800243a:	2301      	movls	r3, #1
 800243c:	2300      	movhi	r3, #0
 800243e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002440:	2b00      	cmp	r3, #0
 8002442:	d079      	beq.n	8002538 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800244c:	2b00      	cmp	r3, #0
 800244e:	d107      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x2c0>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	3301      	adds	r3, #1
 8002458:	069b      	lsls	r3, r3, #26
 800245a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800245e:	e015      	b.n	800248c <HAL_ADC_ConfigChannel+0x2ec>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800246e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002470:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002478:	2320      	movs	r3, #32
 800247a:	e003      	b.n	8002484 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800247c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3301      	adds	r3, #1
 8002486:	069b      	lsls	r3, r3, #26
 8002488:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002494:	2b00      	cmp	r3, #0
 8002496:	d109      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x30c>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0e9b      	lsrs	r3, r3, #26
 800249e:	3301      	adds	r3, #1
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	2101      	movs	r1, #1
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	e017      	b.n	80024dc <HAL_ADC_ConfigChannel+0x33c>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80024c4:	2320      	movs	r3, #32
 80024c6:	e003      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80024c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2101      	movs	r1, #1
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	ea42 0103 	orr.w	r1, r2, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x362>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	3301      	adds	r3, #1
 80024f4:	f003 021f 	and.w	r2, r3, #31
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	051b      	lsls	r3, r3, #20
 8002500:	e018      	b.n	8002534 <HAL_ADC_ConfigChannel+0x394>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800251a:	2320      	movs	r3, #32
 800251c:	e003      	b.n	8002526 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3301      	adds	r3, #1
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002534:	430b      	orrs	r3, r1
 8002536:	e07e      	b.n	8002636 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x3b4>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	3301      	adds	r3, #1
 800254c:	069b      	lsls	r3, r3, #26
 800254e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002552:	e015      	b.n	8002580 <HAL_ADC_ConfigChannel+0x3e0>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e003      	b.n	8002578 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3301      	adds	r3, #1
 800257a:	069b      	lsls	r3, r3, #26
 800257c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x400>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	3301      	adds	r3, #1
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	e017      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x430>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	61bb      	str	r3, [r7, #24]
  return result;
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e003      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	ea42 0103 	orr.w	r1, r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10d      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x45c>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	3b1e      	subs	r3, #30
 80025f4:	051b      	lsls	r3, r3, #20
 80025f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025fa:	e01b      	b.n	8002634 <HAL_ADC_ConfigChannel+0x494>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	60fb      	str	r3, [r7, #12]
  return result;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002614:	2320      	movs	r3, #32
 8002616:	e003      	b.n	8002620 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f003 021f 	and.w	r2, r3, #31
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	3b1e      	subs	r3, #30
 800262e:	051b      	lsls	r3, r3, #20
 8002630:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002634:	430b      	orrs	r3, r1
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	6892      	ldr	r2, [r2, #8]
 800263a:	4619      	mov	r1, r3
 800263c:	f7ff f99b 	bl	8001976 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	da77      	bge.n	8002738 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002648:	4840      	ldr	r0, [pc, #256]	; (800274c <HAL_ADC_ConfigChannel+0x5ac>)
 800264a:	f7ff f8f3 	bl	8001834 <LL_ADC_GetCommonPathInternalCh>
 800264e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002650:	483f      	ldr	r0, [pc, #252]	; (8002750 <HAL_ADC_ConfigChannel+0x5b0>)
 8002652:	f7ff fa5d 	bl	8001b10 <LL_ADC_IsEnabled>
 8002656:	4604      	mov	r4, r0
 8002658:	483e      	ldr	r0, [pc, #248]	; (8002754 <HAL_ADC_ConfigChannel+0x5b4>)
 800265a:	f7ff fa59 	bl	8001b10 <LL_ADC_IsEnabled>
 800265e:	4603      	mov	r3, r0
 8002660:	4323      	orrs	r3, r4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d155      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a3b      	ldr	r2, [pc, #236]	; (8002758 <HAL_ADC_ConfigChannel+0x5b8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d122      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x516>
 8002670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11d      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a35      	ldr	r2, [pc, #212]	; (8002754 <HAL_ADC_ConfigChannel+0x5b4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d159      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002686:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800268a:	4619      	mov	r1, r3
 800268c:	482f      	ldr	r0, [pc, #188]	; (800274c <HAL_ADC_ConfigChannel+0x5ac>)
 800268e:	f7ff f8be 	bl	800180e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002692:	4b32      	ldr	r3, [pc, #200]	; (800275c <HAL_ADC_ConfigChannel+0x5bc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	099b      	lsrs	r3, r3, #6
 8002698:	4a31      	ldr	r2, [pc, #196]	; (8002760 <HAL_ADC_ConfigChannel+0x5c0>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	3301      	adds	r3, #1
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026a6:	e002      	b.n	80026ae <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f9      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026b4:	e040      	b.n	8002738 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2a      	ldr	r2, [pc, #168]	; (8002764 <HAL_ADC_ConfigChannel+0x5c4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d111      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x544>
 80026c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a21      	ldr	r2, [pc, #132]	; (8002754 <HAL_ADC_ConfigChannel+0x5b4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d131      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80026d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026da:	4619      	mov	r1, r3
 80026dc:	481b      	ldr	r0, [pc, #108]	; (800274c <HAL_ADC_ConfigChannel+0x5ac>)
 80026de:	f7ff f896 	bl	800180e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026e2:	e029      	b.n	8002738 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <HAL_ADC_ConfigChannel+0x5c8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d124      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x598>
 80026ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d11f      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a15      	ldr	r2, [pc, #84]	; (8002754 <HAL_ADC_ConfigChannel+0x5b4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d11a      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002704:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002708:	4619      	mov	r1, r3
 800270a:	4810      	ldr	r0, [pc, #64]	; (800274c <HAL_ADC_ConfigChannel+0x5ac>)
 800270c:	f7ff f87f 	bl	800180e <LL_ADC_SetCommonPathInternalCh>
 8002710:	e012      	b.n	8002738 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f043 0220 	orr.w	r2, r3, #32
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002724:	e008      	b.n	8002738 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	f043 0220 	orr.w	r2, r3, #32
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002740:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002744:	4618      	mov	r0, r3
 8002746:	3784      	adds	r7, #132	; 0x84
 8002748:	46bd      	mov	sp, r7
 800274a:	bd90      	pop	{r4, r7, pc}
 800274c:	40022300 	.word	0x40022300
 8002750:	40022000 	.word	0x40022000
 8002754:	40022100 	.word	0x40022100
 8002758:	cb840000 	.word	0xcb840000
 800275c:	24000000 	.word	0x24000000
 8002760:	053e2d63 	.word	0x053e2d63
 8002764:	bac04000 	.word	0xbac04000
 8002768:	cfb80000 	.word	0xcfb80000

0800276c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff f9c9 	bl	8001b10 <LL_ADC_IsEnabled>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d161      	bne.n	8002848 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	4b32      	ldr	r3, [pc, #200]	; (8002854 <ADC_Enable+0xe8>)
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00d      	beq.n	80027ae <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002796:	f043 0210 	orr.w	r2, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e04d      	b.n	800284a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff f998 	bl	8001ae8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027b8:	f7fe ffe6 	bl	8001788 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027be:	4826      	ldr	r0, [pc, #152]	; (8002858 <ADC_Enable+0xec>)
 80027c0:	f7ff f928 	bl	8001a14 <LL_ADC_GetMultimode>
 80027c4:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a24      	ldr	r2, [pc, #144]	; (800285c <ADC_Enable+0xf0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d002      	beq.n	80027d6 <ADC_Enable+0x6a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	e000      	b.n	80027d8 <ADC_Enable+0x6c>
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <ADC_Enable+0xf4>)
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	4293      	cmp	r3, r2
 80027de:	d02c      	beq.n	800283a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d130      	bne.n	8002848 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027e6:	e028      	b.n	800283a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff f98f 	bl	8001b10 <LL_ADC_IsEnabled>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d104      	bne.n	8002802 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff f973 	bl	8001ae8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002802:	f7fe ffc1 	bl	8001788 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d914      	bls.n	800283a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d00d      	beq.n	800283a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	f043 0210 	orr.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e007      	b.n	800284a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d1cf      	bne.n	80027e8 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	8000003f 	.word	0x8000003f
 8002858:	40022300 	.word	0x40022300
 800285c:	40022100 	.word	0x40022100
 8002860:	40022000 	.word	0x40022000

08002864 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800286c:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <ADC_ConfigureBoostMode+0x18c>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01c      	beq.n	80028b2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002878:	f001 fbee 	bl	8004058 <HAL_RCC_GetHCLKFreq>
 800287c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002886:	d010      	beq.n	80028aa <ADC_ConfigureBoostMode+0x46>
 8002888:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800288c:	d873      	bhi.n	8002976 <ADC_ConfigureBoostMode+0x112>
 800288e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002892:	d002      	beq.n	800289a <ADC_ConfigureBoostMode+0x36>
 8002894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002898:	d16d      	bne.n	8002976 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	0c1b      	lsrs	r3, r3, #16
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	60fb      	str	r3, [r7, #12]
        break;
 80028a8:	e068      	b.n	800297c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	60fb      	str	r3, [r7, #12]
        break;
 80028b0:	e064      	b.n	800297c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80028b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028b6:	f04f 0100 	mov.w	r1, #0
 80028ba:	f002 fde7 	bl	800548c <HAL_RCCEx_GetPeriphCLKFreq>
 80028be:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028c8:	d051      	beq.n	800296e <ADC_ConfigureBoostMode+0x10a>
 80028ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028ce:	d854      	bhi.n	800297a <ADC_ConfigureBoostMode+0x116>
 80028d0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028d4:	d047      	beq.n	8002966 <ADC_ConfigureBoostMode+0x102>
 80028d6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028da:	d84e      	bhi.n	800297a <ADC_ConfigureBoostMode+0x116>
 80028dc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028e0:	d03d      	beq.n	800295e <ADC_ConfigureBoostMode+0xfa>
 80028e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028e6:	d848      	bhi.n	800297a <ADC_ConfigureBoostMode+0x116>
 80028e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ec:	d033      	beq.n	8002956 <ADC_ConfigureBoostMode+0xf2>
 80028ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028f2:	d842      	bhi.n	800297a <ADC_ConfigureBoostMode+0x116>
 80028f4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028f8:	d029      	beq.n	800294e <ADC_ConfigureBoostMode+0xea>
 80028fa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028fe:	d83c      	bhi.n	800297a <ADC_ConfigureBoostMode+0x116>
 8002900:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002904:	d01a      	beq.n	800293c <ADC_ConfigureBoostMode+0xd8>
 8002906:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800290a:	d836      	bhi.n	800297a <ADC_ConfigureBoostMode+0x116>
 800290c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002910:	d014      	beq.n	800293c <ADC_ConfigureBoostMode+0xd8>
 8002912:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002916:	d830      	bhi.n	800297a <ADC_ConfigureBoostMode+0x116>
 8002918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800291c:	d00e      	beq.n	800293c <ADC_ConfigureBoostMode+0xd8>
 800291e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002922:	d82a      	bhi.n	800297a <ADC_ConfigureBoostMode+0x116>
 8002924:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002928:	d008      	beq.n	800293c <ADC_ConfigureBoostMode+0xd8>
 800292a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800292e:	d824      	bhi.n	800297a <ADC_ConfigureBoostMode+0x116>
 8002930:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002934:	d002      	beq.n	800293c <ADC_ConfigureBoostMode+0xd8>
 8002936:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800293a:	d11e      	bne.n	800297a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	0c9b      	lsrs	r3, r3, #18
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	60fb      	str	r3, [r7, #12]
        break;
 800294c:	e016      	b.n	800297c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	60fb      	str	r3, [r7, #12]
        break;
 8002954:	e012      	b.n	800297c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	60fb      	str	r3, [r7, #12]
        break;
 800295c:	e00e      	b.n	800297c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	60fb      	str	r3, [r7, #12]
        break;
 8002964:	e00a      	b.n	800297c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	09db      	lsrs	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]
        break;
 800296c:	e006      	b.n	800297c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	60fb      	str	r3, [r7, #12]
        break;
 8002974:	e002      	b.n	800297c <ADC_ConfigureBoostMode+0x118>
        break;
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800297a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <ADC_ConfigureBoostMode+0x190>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d808      	bhi.n	800299c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002998:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800299a:	e025      	b.n	80029e8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4a16      	ldr	r2, [pc, #88]	; (80029f8 <ADC_ConfigureBoostMode+0x194>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d80a      	bhi.n	80029ba <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b6:	609a      	str	r2, [r3, #8]
}
 80029b8:	e016      	b.n	80029e8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4a0f      	ldr	r2, [pc, #60]	; (80029fc <ADC_ConfigureBoostMode+0x198>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d80a      	bhi.n	80029d8 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d4:	609a      	str	r2, [r3, #8]
}
 80029d6:	e007      	b.n	80029e8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80029e6:	609a      	str	r2, [r3, #8]
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40022300 	.word	0x40022300
 80029f4:	005f5e10 	.word	0x005f5e10
 80029f8:	00bebc20 	.word	0x00bebc20
 80029fc:	017d7840 	.word	0x017d7840

08002a00 <LL_ADC_IsEnabled>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <LL_ADC_IsEnabled+0x18>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <LL_ADC_IsEnabled+0x1a>
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d101      	bne.n	8002a3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b09f      	sub	sp, #124	; 0x7c
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e080      	b.n	8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a3d      	ldr	r2, [pc, #244]	; (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d102      	bne.n	8002a8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a84:	4b3c      	ldr	r3, [pc, #240]	; (8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	e001      	b.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10b      	bne.n	8002aac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	f043 0220 	orr.w	r2, r3, #32
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e05f      	b.n	8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ffb9 	bl	8002a26 <LL_ADC_REG_IsConversionOngoing>
 8002ab4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ffb3 	bl	8002a26 <LL_ADC_REG_IsConversionOngoing>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d141      	bne.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d13e      	bne.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002acc:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002ace:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aea:	4822      	ldr	r0, [pc, #136]	; (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002aec:	f7ff ff88 	bl	8002a00 <LL_ADC_IsEnabled>
 8002af0:	4604      	mov	r4, r0
 8002af2:	4821      	ldr	r0, [pc, #132]	; (8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002af4:	f7ff ff84 	bl	8002a00 <LL_ADC_IsEnabled>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4323      	orrs	r3, r4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d12e      	bne.n	8002b5e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	6811      	ldr	r1, [r2, #0]
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	6892      	ldr	r2, [r2, #8]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	431a      	orrs	r2, r3
 8002b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b16:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b18:	e021      	b.n	8002b5e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b26:	4813      	ldr	r0, [pc, #76]	; (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002b28:	f7ff ff6a 	bl	8002a00 <LL_ADC_IsEnabled>
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	4812      	ldr	r0, [pc, #72]	; (8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002b30:	f7ff ff66 	bl	8002a00 <LL_ADC_IsEnabled>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4323      	orrs	r3, r4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d110      	bne.n	8002b5e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b46:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b48:	e009      	b.n	8002b5e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002b5c:	e000      	b.n	8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b5e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	377c      	adds	r7, #124	; 0x7c
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd90      	pop	{r4, r7, pc}
 8002b74:	40022000 	.word	0x40022000
 8002b78:	40022100 	.word	0x40022100
 8002b7c:	40022300 	.word	0x40022300
 8002b80:	fffff0e0 	.word	0xfffff0e0

08002b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb2:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	60d3      	str	r3, [r2, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00
 8002bc8:	05fa0000 	.word	0x05fa0000

08002bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	f003 0307 	and.w	r3, r3, #7
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	6039      	str	r1, [r7, #0]
 8002bf2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	db0a      	blt.n	8002c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	490c      	ldr	r1, [pc, #48]	; (8002c34 <__NVIC_SetPriority+0x4c>)
 8002c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c06:	0112      	lsls	r2, r2, #4
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c10:	e00a      	b.n	8002c28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4908      	ldr	r1, [pc, #32]	; (8002c38 <__NVIC_SetPriority+0x50>)
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	3b04      	subs	r3, #4
 8002c20:	0112      	lsls	r2, r2, #4
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	440b      	add	r3, r1
 8002c26:	761a      	strb	r2, [r3, #24]
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000e100 	.word	0xe000e100
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b089      	sub	sp, #36	; 0x24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f1c3 0307 	rsb	r3, r3, #7
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	bf28      	it	cs
 8002c5a:	2304      	movcs	r3, #4
 8002c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3304      	adds	r3, #4
 8002c62:	2b06      	cmp	r3, #6
 8002c64:	d902      	bls.n	8002c6c <NVIC_EncodePriority+0x30>
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3b03      	subs	r3, #3
 8002c6a:	e000      	b.n	8002c6e <NVIC_EncodePriority+0x32>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	401a      	ands	r2, r3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8e:	43d9      	mvns	r1, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c94:	4313      	orrs	r3, r2
         );
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3724      	adds	r7, #36	; 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb4:	d301      	bcc.n	8002cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e00f      	b.n	8002cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cba:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <SysTick_Config+0x40>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cc2:	210f      	movs	r1, #15
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc8:	f7ff ff8e 	bl	8002be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <SysTick_Config+0x40>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd2:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <SysTick_Config+0x40>)
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	e000e010 	.word	0xe000e010

08002ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff ff47 	bl	8002b84 <__NVIC_SetPriorityGrouping>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d0c:	f7ff ff5e 	bl	8002bcc <__NVIC_GetPriorityGrouping>
 8002d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	6978      	ldr	r0, [r7, #20]
 8002d18:	f7ff ff90 	bl	8002c3c <NVIC_EncodePriority>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff5f 	bl	8002be8 <__NVIC_SetPriority>
}
 8002d2a:	bf00      	nop
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ffb2 	bl	8002ca4 <SysTick_Config>
 8002d40:	4603      	mov	r3, r0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	; 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d5a:	4b89      	ldr	r3, [pc, #548]	; (8002f80 <HAL_GPIO_Init+0x234>)
 8002d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d5e:	e194      	b.n	800308a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	2101      	movs	r1, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8186 	beq.w	8003084 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d005      	beq.n	8002d90 <HAL_GPIO_Init+0x44>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d130      	bne.n	8002df2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 0201 	and.w	r2, r3, #1
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d017      	beq.n	8002e2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2203      	movs	r2, #3
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d123      	bne.n	8002e82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	08da      	lsrs	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3208      	adds	r2, #8
 8002e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	220f      	movs	r2, #15
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	08da      	lsrs	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3208      	adds	r2, #8
 8002e7c:	69b9      	ldr	r1, [r7, #24]
 8002e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 0203 	and.w	r2, r3, #3
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80e0 	beq.w	8003084 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec4:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <HAL_GPIO_Init+0x238>)
 8002ec6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002eca:	4a2e      	ldr	r2, [pc, #184]	; (8002f84 <HAL_GPIO_Init+0x238>)
 8002ecc:	f043 0302 	orr.w	r3, r3, #2
 8002ed0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <HAL_GPIO_Init+0x238>)
 8002ed6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ee2:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <HAL_GPIO_Init+0x23c>)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	3302      	adds	r3, #2
 8002eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	220f      	movs	r2, #15
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a20      	ldr	r2, [pc, #128]	; (8002f8c <HAL_GPIO_Init+0x240>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d052      	beq.n	8002fb4 <HAL_GPIO_Init+0x268>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <HAL_GPIO_Init+0x244>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d031      	beq.n	8002f7a <HAL_GPIO_Init+0x22e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <HAL_GPIO_Init+0x248>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d02b      	beq.n	8002f76 <HAL_GPIO_Init+0x22a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <HAL_GPIO_Init+0x24c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d025      	beq.n	8002f72 <HAL_GPIO_Init+0x226>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a1c      	ldr	r2, [pc, #112]	; (8002f9c <HAL_GPIO_Init+0x250>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01f      	beq.n	8002f6e <HAL_GPIO_Init+0x222>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <HAL_GPIO_Init+0x254>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d019      	beq.n	8002f6a <HAL_GPIO_Init+0x21e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <HAL_GPIO_Init+0x258>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <HAL_GPIO_Init+0x21a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_GPIO_Init+0x25c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00d      	beq.n	8002f62 <HAL_GPIO_Init+0x216>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a18      	ldr	r2, [pc, #96]	; (8002fac <HAL_GPIO_Init+0x260>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <HAL_GPIO_Init+0x212>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a17      	ldr	r2, [pc, #92]	; (8002fb0 <HAL_GPIO_Init+0x264>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <HAL_GPIO_Init+0x20e>
 8002f56:	2309      	movs	r3, #9
 8002f58:	e02d      	b.n	8002fb6 <HAL_GPIO_Init+0x26a>
 8002f5a:	230a      	movs	r3, #10
 8002f5c:	e02b      	b.n	8002fb6 <HAL_GPIO_Init+0x26a>
 8002f5e:	2308      	movs	r3, #8
 8002f60:	e029      	b.n	8002fb6 <HAL_GPIO_Init+0x26a>
 8002f62:	2307      	movs	r3, #7
 8002f64:	e027      	b.n	8002fb6 <HAL_GPIO_Init+0x26a>
 8002f66:	2306      	movs	r3, #6
 8002f68:	e025      	b.n	8002fb6 <HAL_GPIO_Init+0x26a>
 8002f6a:	2305      	movs	r3, #5
 8002f6c:	e023      	b.n	8002fb6 <HAL_GPIO_Init+0x26a>
 8002f6e:	2304      	movs	r3, #4
 8002f70:	e021      	b.n	8002fb6 <HAL_GPIO_Init+0x26a>
 8002f72:	2303      	movs	r3, #3
 8002f74:	e01f      	b.n	8002fb6 <HAL_GPIO_Init+0x26a>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e01d      	b.n	8002fb6 <HAL_GPIO_Init+0x26a>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e01b      	b.n	8002fb6 <HAL_GPIO_Init+0x26a>
 8002f7e:	bf00      	nop
 8002f80:	58000080 	.word	0x58000080
 8002f84:	58024400 	.word	0x58024400
 8002f88:	58000400 	.word	0x58000400
 8002f8c:	58020000 	.word	0x58020000
 8002f90:	58020400 	.word	0x58020400
 8002f94:	58020800 	.word	0x58020800
 8002f98:	58020c00 	.word	0x58020c00
 8002f9c:	58021000 	.word	0x58021000
 8002fa0:	58021400 	.word	0x58021400
 8002fa4:	58021800 	.word	0x58021800
 8002fa8:	58021c00 	.word	0x58021c00
 8002fac:	58022000 	.word	0x58022000
 8002fb0:	58022400 	.word	0x58022400
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	f002 0203 	and.w	r2, r2, #3
 8002fbc:	0092      	lsls	r2, r2, #2
 8002fbe:	4093      	lsls	r3, r2
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fc6:	4938      	ldr	r1, [pc, #224]	; (80030a8 <HAL_GPIO_Init+0x35c>)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	3302      	adds	r3, #2
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	3301      	adds	r3, #1
 8003088:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	f47f ae63 	bne.w	8002d60 <HAL_GPIO_Init+0x14>
  }
}
 800309a:	bf00      	nop
 800309c:	bf00      	nop
 800309e:	3724      	adds	r7, #36	; 0x24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	58000400 	.word	0x58000400

080030ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	807b      	strh	r3, [r7, #2]
 80030b8:	4613      	mov	r3, r2
 80030ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030bc:	787b      	ldrb	r3, [r7, #1]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030c8:	e003      	b.n	80030d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030ca:	887b      	ldrh	r3, [r7, #2]
 80030cc:	041a      	lsls	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	619a      	str	r2, [r3, #24]
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80030e8:	4b29      	ldr	r3, [pc, #164]	; (8003190 <HAL_PWREx_ConfigSupply+0xb0>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	2b06      	cmp	r3, #6
 80030f2:	d00a      	beq.n	800310a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030f4:	4b26      	ldr	r3, [pc, #152]	; (8003190 <HAL_PWREx_ConfigSupply+0xb0>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d001      	beq.n	8003106 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e040      	b.n	8003188 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e03e      	b.n	8003188 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800310a:	4b21      	ldr	r3, [pc, #132]	; (8003190 <HAL_PWREx_ConfigSupply+0xb0>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003112:	491f      	ldr	r1, [pc, #124]	; (8003190 <HAL_PWREx_ConfigSupply+0xb0>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4313      	orrs	r3, r2
 8003118:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800311a:	f7fe fb35 	bl	8001788 <HAL_GetTick>
 800311e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003120:	e009      	b.n	8003136 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003122:	f7fe fb31 	bl	8001788 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003130:	d901      	bls.n	8003136 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e028      	b.n	8003188 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <HAL_PWREx_ConfigSupply+0xb0>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800313e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003142:	d1ee      	bne.n	8003122 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b1e      	cmp	r3, #30
 8003148:	d008      	beq.n	800315c <HAL_PWREx_ConfigSupply+0x7c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b2e      	cmp	r3, #46	; 0x2e
 800314e:	d005      	beq.n	800315c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b1d      	cmp	r3, #29
 8003154:	d002      	beq.n	800315c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b2d      	cmp	r3, #45	; 0x2d
 800315a:	d114      	bne.n	8003186 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800315c:	f7fe fb14 	bl	8001788 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003162:	e009      	b.n	8003178 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003164:	f7fe fb10 	bl	8001788 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003172:	d901      	bls.n	8003178 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e007      	b.n	8003188 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_PWREx_ConfigSupply+0xb0>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003184:	d1ee      	bne.n	8003164 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	58024800 	.word	0x58024800

08003194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08c      	sub	sp, #48	; 0x30
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f000 bc1f 	b.w	80039e6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80b3 	beq.w	800331c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b6:	4b95      	ldr	r3, [pc, #596]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031c0:	4b92      	ldr	r3, [pc, #584]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d007      	beq.n	80031dc <HAL_RCC_OscConfig+0x48>
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	2b18      	cmp	r3, #24
 80031d0:	d112      	bne.n	80031f8 <HAL_RCC_OscConfig+0x64>
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d10d      	bne.n	80031f8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031dc:	4b8b      	ldr	r3, [pc, #556]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 8098 	beq.w	800331a <HAL_RCC_OscConfig+0x186>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 8093 	bne.w	800331a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e3f6      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d106      	bne.n	8003210 <HAL_RCC_OscConfig+0x7c>
 8003202:	4b82      	ldr	r3, [pc, #520]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a81      	ldr	r2, [pc, #516]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e058      	b.n	80032c2 <HAL_RCC_OscConfig+0x12e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d112      	bne.n	800323e <HAL_RCC_OscConfig+0xaa>
 8003218:	4b7c      	ldr	r3, [pc, #496]	; (800340c <HAL_RCC_OscConfig+0x278>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a7b      	ldr	r2, [pc, #492]	; (800340c <HAL_RCC_OscConfig+0x278>)
 800321e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b79      	ldr	r3, [pc, #484]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a78      	ldr	r2, [pc, #480]	; (800340c <HAL_RCC_OscConfig+0x278>)
 800322a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b76      	ldr	r3, [pc, #472]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a75      	ldr	r2, [pc, #468]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	e041      	b.n	80032c2 <HAL_RCC_OscConfig+0x12e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003246:	d112      	bne.n	800326e <HAL_RCC_OscConfig+0xda>
 8003248:	4b70      	ldr	r3, [pc, #448]	; (800340c <HAL_RCC_OscConfig+0x278>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6f      	ldr	r2, [pc, #444]	; (800340c <HAL_RCC_OscConfig+0x278>)
 800324e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b6d      	ldr	r3, [pc, #436]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6c      	ldr	r2, [pc, #432]	; (800340c <HAL_RCC_OscConfig+0x278>)
 800325a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b6a      	ldr	r3, [pc, #424]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a69      	ldr	r2, [pc, #420]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	e029      	b.n	80032c2 <HAL_RCC_OscConfig+0x12e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003276:	d112      	bne.n	800329e <HAL_RCC_OscConfig+0x10a>
 8003278:	4b64      	ldr	r3, [pc, #400]	; (800340c <HAL_RCC_OscConfig+0x278>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a63      	ldr	r2, [pc, #396]	; (800340c <HAL_RCC_OscConfig+0x278>)
 800327e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b61      	ldr	r3, [pc, #388]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a60      	ldr	r2, [pc, #384]	; (800340c <HAL_RCC_OscConfig+0x278>)
 800328a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	4b5e      	ldr	r3, [pc, #376]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a5d      	ldr	r2, [pc, #372]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	e011      	b.n	80032c2 <HAL_RCC_OscConfig+0x12e>
 800329e:	4b5b      	ldr	r3, [pc, #364]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5a      	ldr	r2, [pc, #360]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80032a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b58      	ldr	r3, [pc, #352]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a57      	ldr	r2, [pc, #348]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80032b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b55      	ldr	r3, [pc, #340]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a54      	ldr	r2, [pc, #336]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80032bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80032c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d013      	beq.n	80032f2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fe fa5d 	bl	8001788 <HAL_GetTick>
 80032ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d2:	f7fe fa59 	bl	8001788 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b64      	cmp	r3, #100	; 0x64
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e380      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032e4:	4b49      	ldr	r3, [pc, #292]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x13e>
 80032f0:	e014      	b.n	800331c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fe fa49 	bl	8001788 <HAL_GetTick>
 80032f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fa:	f7fe fa45 	bl	8001788 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b64      	cmp	r3, #100	; 0x64
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e36c      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800330c:	4b3f      	ldr	r3, [pc, #252]	; (800340c <HAL_RCC_OscConfig+0x278>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x166>
 8003318:	e000      	b.n	800331c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 808c 	beq.w	8003442 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800332a:	4b38      	ldr	r3, [pc, #224]	; (800340c <HAL_RCC_OscConfig+0x278>)
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003332:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003334:	4b35      	ldr	r3, [pc, #212]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <HAL_RCC_OscConfig+0x1bc>
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	2b18      	cmp	r3, #24
 8003344:	d137      	bne.n	80033b6 <HAL_RCC_OscConfig+0x222>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d132      	bne.n	80033b6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003350:	4b2e      	ldr	r3, [pc, #184]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_RCC_OscConfig+0x1d4>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e33e      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003368:	4b28      	ldr	r3, [pc, #160]	; (800340c <HAL_RCC_OscConfig+0x278>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 0219 	bic.w	r2, r3, #25
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4925      	ldr	r1, [pc, #148]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe fa05 	bl	8001788 <HAL_GetTick>
 800337e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003382:	f7fe fa01 	bl	8001788 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e328      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003394:	4b1d      	ldr	r3, [pc, #116]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	4917      	ldr	r1, [pc, #92]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b4:	e045      	b.n	8003442 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d028      	beq.n	8003410 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 0219 	bic.w	r2, r3, #25
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	4910      	ldr	r1, [pc, #64]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe f9da 	bl	8001788 <HAL_GetTick>
 80033d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d8:	f7fe f9d6 	bl	8001788 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e2fd      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ea:	4b08      	ldr	r3, [pc, #32]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	061b      	lsls	r3, r3, #24
 8003404:	4901      	ldr	r1, [pc, #4]	; (800340c <HAL_RCC_OscConfig+0x278>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
 800340a:	e01a      	b.n	8003442 <HAL_RCC_OscConfig+0x2ae>
 800340c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003410:	4b97      	ldr	r3, [pc, #604]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a96      	ldr	r2, [pc, #600]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe f9b4 	bl	8001788 <HAL_GetTick>
 8003420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003424:	f7fe f9b0 	bl	8001788 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e2d7      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003436:	4b8e      	ldr	r3, [pc, #568]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b00      	cmp	r3, #0
 800344c:	d06a      	beq.n	8003524 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344e:	4b88      	ldr	r3, [pc, #544]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003456:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003458:	4b85      	ldr	r3, [pc, #532]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b08      	cmp	r3, #8
 8003462:	d007      	beq.n	8003474 <HAL_RCC_OscConfig+0x2e0>
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b18      	cmp	r3, #24
 8003468:	d11b      	bne.n	80034a2 <HAL_RCC_OscConfig+0x30e>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d116      	bne.n	80034a2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003474:	4b7e      	ldr	r3, [pc, #504]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_OscConfig+0x2f8>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d001      	beq.n	800348c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e2ac      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800348c:	4b78      	ldr	r3, [pc, #480]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	4975      	ldr	r1, [pc, #468]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 800349c:	4313      	orrs	r3, r2
 800349e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034a0:	e040      	b.n	8003524 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d023      	beq.n	80034f2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034aa:	4b71      	ldr	r3, [pc, #452]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a70      	ldr	r2, [pc, #448]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 80034b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b6:	f7fe f967 	bl	8001788 <HAL_GetTick>
 80034ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034be:	f7fe f963 	bl	8001788 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e28a      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034d0:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034dc:	4b64      	ldr	r3, [pc, #400]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	061b      	lsls	r3, r3, #24
 80034ea:	4961      	ldr	r1, [pc, #388]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60cb      	str	r3, [r1, #12]
 80034f0:	e018      	b.n	8003524 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034f2:	4b5f      	ldr	r3, [pc, #380]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a5e      	ldr	r2, [pc, #376]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 80034f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fe f943 	bl	8001788 <HAL_GetTick>
 8003502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003506:	f7fe f93f 	bl	8001788 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e266      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003518:	4b55      	ldr	r3, [pc, #340]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f0      	bne.n	8003506 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d036      	beq.n	800359e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d019      	beq.n	800356c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003538:	4b4d      	ldr	r3, [pc, #308]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 800353a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353c:	4a4c      	ldr	r2, [pc, #304]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fe f920 	bl	8001788 <HAL_GetTick>
 8003548:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354c:	f7fe f91c 	bl	8001788 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e243      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800355e:	4b44      	ldr	r3, [pc, #272]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 8003560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x3b8>
 800356a:	e018      	b.n	800359e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356c:	4b40      	ldr	r3, [pc, #256]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 800356e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003570:	4a3f      	ldr	r2, [pc, #252]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fe f906 	bl	8001788 <HAL_GetTick>
 800357c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003580:	f7fe f902 	bl	8001788 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e229      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003592:	4b37      	ldr	r3, [pc, #220]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 8003594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d036      	beq.n	8003618 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d019      	beq.n	80035e6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035b2:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a2e      	ldr	r2, [pc, #184]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 80035b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035be:	f7fe f8e3 	bl	8001788 <HAL_GetTick>
 80035c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035c6:	f7fe f8df 	bl	8001788 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e206      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x432>
 80035e4:	e018      	b.n	8003618 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035e6:	4b22      	ldr	r3, [pc, #136]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a21      	ldr	r2, [pc, #132]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 80035ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035f2:	f7fe f8c9 	bl	8001788 <HAL_GetTick>
 80035f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035fa:	f7fe f8c5 	bl	8001788 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e1ec      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800360c:	4b18      	ldr	r3, [pc, #96]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f0      	bne.n	80035fa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80af 	beq.w	8003784 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003626:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_RCC_OscConfig+0x4e0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <HAL_RCC_OscConfig+0x4e0>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003630:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003632:	f7fe f8a9 	bl	8001788 <HAL_GetTick>
 8003636:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363a:	f7fe f8a5 	bl	8001788 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b64      	cmp	r3, #100	; 0x64
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e1cc      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_OscConfig+0x4e0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d10b      	bne.n	8003678 <HAL_RCC_OscConfig+0x4e4>
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	4a02      	ldr	r2, [pc, #8]	; (8003670 <HAL_RCC_OscConfig+0x4dc>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6713      	str	r3, [r2, #112]	; 0x70
 800366c:	e05b      	b.n	8003726 <HAL_RCC_OscConfig+0x592>
 800366e:	bf00      	nop
 8003670:	58024400 	.word	0x58024400
 8003674:	58024800 	.word	0x58024800
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d112      	bne.n	80036a6 <HAL_RCC_OscConfig+0x512>
 8003680:	4b9d      	ldr	r3, [pc, #628]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a9c      	ldr	r2, [pc, #624]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	6713      	str	r3, [r2, #112]	; 0x70
 800368c:	4b9a      	ldr	r3, [pc, #616]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a99      	ldr	r2, [pc, #612]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
 8003698:	4b97      	ldr	r3, [pc, #604]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a96      	ldr	r2, [pc, #600]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800369e:	f023 0304 	bic.w	r3, r3, #4
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	e03f      	b.n	8003726 <HAL_RCC_OscConfig+0x592>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d112      	bne.n	80036d4 <HAL_RCC_OscConfig+0x540>
 80036ae:	4b92      	ldr	r3, [pc, #584]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a91      	ldr	r2, [pc, #580]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80036b4:	f043 0304 	orr.w	r3, r3, #4
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ba:	4b8f      	ldr	r3, [pc, #572]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	4a8e      	ldr	r2, [pc, #568]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80036c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
 80036c6:	4b8c      	ldr	r3, [pc, #560]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	4a8b      	ldr	r2, [pc, #556]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6713      	str	r3, [r2, #112]	; 0x70
 80036d2:	e028      	b.n	8003726 <HAL_RCC_OscConfig+0x592>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b85      	cmp	r3, #133	; 0x85
 80036da:	d112      	bne.n	8003702 <HAL_RCC_OscConfig+0x56e>
 80036dc:	4b86      	ldr	r3, [pc, #536]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4a85      	ldr	r2, [pc, #532]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
 80036e8:	4b83      	ldr	r3, [pc, #524]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	4a82      	ldr	r2, [pc, #520]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80036ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f2:	6713      	str	r3, [r2, #112]	; 0x70
 80036f4:	4b80      	ldr	r3, [pc, #512]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	4a7f      	ldr	r2, [pc, #508]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003700:	e011      	b.n	8003726 <HAL_RCC_OscConfig+0x592>
 8003702:	4b7d      	ldr	r3, [pc, #500]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a7c      	ldr	r2, [pc, #496]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
 800370e:	4b7a      	ldr	r3, [pc, #488]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	4a79      	ldr	r2, [pc, #484]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003714:	f023 0304 	bic.w	r3, r3, #4
 8003718:	6713      	str	r3, [r2, #112]	; 0x70
 800371a:	4b77      	ldr	r3, [pc, #476]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	4a76      	ldr	r2, [pc, #472]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003724:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d015      	beq.n	800375a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372e:	f7fe f82b 	bl	8001788 <HAL_GetTick>
 8003732:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7fe f827 	bl	8001788 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	; 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e14c      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800374c:	4b6a      	ldr	r3, [pc, #424]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ee      	beq.n	8003736 <HAL_RCC_OscConfig+0x5a2>
 8003758:	e014      	b.n	8003784 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fe f815 	bl	8001788 <HAL_GetTick>
 800375e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003760:	e00a      	b.n	8003778 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fe f811 	bl	8001788 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e136      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003778:	4b5f      	ldr	r3, [pc, #380]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ee      	bne.n	8003762 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 812b 	beq.w	80039e4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800378e:	4b5a      	ldr	r3, [pc, #360]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003796:	2b18      	cmp	r3, #24
 8003798:	f000 80bb 	beq.w	8003912 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	f040 8095 	bne.w	80038d0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b54      	ldr	r3, [pc, #336]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a53      	ldr	r2, [pc, #332]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80037ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b2:	f7fd ffe9 	bl	8001788 <HAL_GetTick>
 80037b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fd ffe5 	bl	8001788 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e10c      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037cc:	4b4a      	ldr	r3, [pc, #296]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d8:	4b47      	ldr	r3, [pc, #284]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80037da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037dc:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_RCC_OscConfig+0x768>)
 80037de:	4013      	ands	r3, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	430a      	orrs	r2, r1
 80037ec:	4942      	ldr	r1, [pc, #264]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	628b      	str	r3, [r1, #40]	; 0x28
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	3b01      	subs	r3, #1
 80037f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	3b01      	subs	r3, #1
 8003802:	025b      	lsls	r3, r3, #9
 8003804:	b29b      	uxth	r3, r3
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	3b01      	subs	r3, #1
 800380e:	041b      	lsls	r3, r3, #16
 8003810:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	3b01      	subs	r3, #1
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003822:	4935      	ldr	r1, [pc, #212]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003824:	4313      	orrs	r3, r2
 8003826:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003828:	4b33      	ldr	r3, [pc, #204]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4a32      	ldr	r2, [pc, #200]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003834:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003838:	4b31      	ldr	r3, [pc, #196]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800383a:	4013      	ands	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003840:	00d2      	lsls	r2, r2, #3
 8003842:	492d      	ldr	r1, [pc, #180]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003844:	4313      	orrs	r3, r2
 8003846:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003848:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	f023 020c 	bic.w	r2, r3, #12
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	4928      	ldr	r1, [pc, #160]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003856:	4313      	orrs	r3, r2
 8003858:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800385a:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	f023 0202 	bic.w	r2, r3, #2
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	4924      	ldr	r1, [pc, #144]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003868:	4313      	orrs	r3, r2
 800386a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800386c:	4b22      	ldr	r3, [pc, #136]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003878:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	4a1e      	ldr	r2, [pc, #120]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800387e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003884:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	4a1b      	ldr	r2, [pc, #108]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800388a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800388e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003890:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800389c:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a15      	ldr	r2, [pc, #84]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fd ff6e 	bl	8001788 <HAL_GetTick>
 80038ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd ff6a 	bl	8001788 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e091      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038c2:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x71c>
 80038ce:	e089      	b.n	80039e4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d0:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a08      	ldr	r2, [pc, #32]	; (80038f8 <HAL_RCC_OscConfig+0x764>)
 80038d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fd ff54 	bl	8001788 <HAL_GetTick>
 80038e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038e2:	e00f      	b.n	8003904 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fd ff50 	bl	8001788 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d908      	bls.n	8003904 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e077      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
 80038f6:	bf00      	nop
 80038f8:	58024400 	.word	0x58024400
 80038fc:	fffffc0c 	.word	0xfffffc0c
 8003900:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003904:	4b3a      	ldr	r3, [pc, #232]	; (80039f0 <HAL_RCC_OscConfig+0x85c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e9      	bne.n	80038e4 <HAL_RCC_OscConfig+0x750>
 8003910:	e068      	b.n	80039e4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003912:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <HAL_RCC_OscConfig+0x85c>)
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003918:	4b35      	ldr	r3, [pc, #212]	; (80039f0 <HAL_RCC_OscConfig+0x85c>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	2b01      	cmp	r3, #1
 8003924:	d031      	beq.n	800398a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f003 0203 	and.w	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d12a      	bne.n	800398a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d122      	bne.n	800398a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d11a      	bne.n	800398a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	0a5b      	lsrs	r3, r3, #9
 8003958:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d111      	bne.n	800398a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003974:	429a      	cmp	r2, r3
 8003976:	d108      	bne.n	800398a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	0e1b      	lsrs	r3, r3, #24
 800397c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003984:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003986:	429a      	cmp	r2, r3
 8003988:	d001      	beq.n	800398e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e02b      	b.n	80039e6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800398e:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <HAL_RCC_OscConfig+0x85c>)
 8003990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003992:	08db      	lsrs	r3, r3, #3
 8003994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003998:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d01f      	beq.n	80039e4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80039a4:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <HAL_RCC_OscConfig+0x85c>)
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	4a11      	ldr	r2, [pc, #68]	; (80039f0 <HAL_RCC_OscConfig+0x85c>)
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039b0:	f7fd feea 	bl	8001788 <HAL_GetTick>
 80039b4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80039b6:	bf00      	nop
 80039b8:	f7fd fee6 	bl	8001788 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d0f9      	beq.n	80039b8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_RCC_OscConfig+0x85c>)
 80039c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_RCC_OscConfig+0x860>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039d0:	00d2      	lsls	r2, r2, #3
 80039d2:	4907      	ldr	r1, [pc, #28]	; (80039f0 <HAL_RCC_OscConfig+0x85c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_OscConfig+0x85c>)
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <HAL_RCC_OscConfig+0x85c>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3730      	adds	r7, #48	; 0x30
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	58024400 	.word	0x58024400
 80039f4:	ffff0007 	.word	0xffff0007

080039f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e19c      	b.n	8003d46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b8a      	ldr	r3, [pc, #552]	; (8003c38 <HAL_RCC_ClockConfig+0x240>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d910      	bls.n	8003a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b87      	ldr	r3, [pc, #540]	; (8003c38 <HAL_RCC_ClockConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 020f 	bic.w	r2, r3, #15
 8003a22:	4985      	ldr	r1, [pc, #532]	; (8003c38 <HAL_RCC_ClockConfig+0x240>)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b83      	ldr	r3, [pc, #524]	; (8003c38 <HAL_RCC_ClockConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e184      	b.n	8003d46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d010      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	4b7b      	ldr	r3, [pc, #492]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d908      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a58:	4b78      	ldr	r3, [pc, #480]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	4975      	ldr	r1, [pc, #468]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d010      	beq.n	8003a98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	4b70      	ldr	r3, [pc, #448]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d908      	bls.n	8003a98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a86:	4b6d      	ldr	r3, [pc, #436]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	496a      	ldr	r1, [pc, #424]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d010      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699a      	ldr	r2, [r3, #24]
 8003aa8:	4b64      	ldr	r3, [pc, #400]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d908      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ab4:	4b61      	ldr	r3, [pc, #388]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	495e      	ldr	r1, [pc, #376]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d010      	beq.n	8003af4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	4b59      	ldr	r3, [pc, #356]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d908      	bls.n	8003af4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ae2:	4b56      	ldr	r3, [pc, #344]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4953      	ldr	r1, [pc, #332]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d010      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	4b4d      	ldr	r3, [pc, #308]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d908      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b10:	4b4a      	ldr	r3, [pc, #296]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f023 020f 	bic.w	r2, r3, #15
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4947      	ldr	r1, [pc, #284]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d055      	beq.n	8003bda <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b2e:	4b43      	ldr	r3, [pc, #268]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	4940      	ldr	r1, [pc, #256]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d107      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b48:	4b3c      	ldr	r3, [pc, #240]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d121      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0f6      	b.n	8003d46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d107      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b60:	4b36      	ldr	r3, [pc, #216]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d115      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0ea      	b.n	8003d46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b78:	4b30      	ldr	r3, [pc, #192]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0de      	b.n	8003d46 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b88:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0d6      	b.n	8003d46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b98:	4b28      	ldr	r3, [pc, #160]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f023 0207 	bic.w	r2, r3, #7
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4925      	ldr	r1, [pc, #148]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003baa:	f7fd fded 	bl	8001788 <HAL_GetTick>
 8003bae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb2:	f7fd fde9 	bl	8001788 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0be      	b.n	8003d46 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc8:	4b1c      	ldr	r3, [pc, #112]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d1eb      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d010      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d208      	bcs.n	8003c08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f023 020f 	bic.w	r2, r3, #15
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	490e      	ldr	r1, [pc, #56]	; (8003c3c <HAL_RCC_ClockConfig+0x244>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_ClockConfig+0x240>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d214      	bcs.n	8003c40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <HAL_RCC_ClockConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 020f 	bic.w	r2, r3, #15
 8003c1e:	4906      	ldr	r1, [pc, #24]	; (8003c38 <HAL_RCC_ClockConfig+0x240>)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <HAL_RCC_ClockConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e086      	b.n	8003d46 <HAL_RCC_ClockConfig+0x34e>
 8003c38:	52002000 	.word	0x52002000
 8003c3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d010      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	4b3f      	ldr	r3, [pc, #252]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d208      	bcs.n	8003c6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c5c:	4b3c      	ldr	r3, [pc, #240]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	4939      	ldr	r1, [pc, #228]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d010      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	4b34      	ldr	r3, [pc, #208]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d208      	bcs.n	8003c9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c8a:	4b31      	ldr	r3, [pc, #196]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	492e      	ldr	r1, [pc, #184]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d010      	beq.n	8003cca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699a      	ldr	r2, [r3, #24]
 8003cac:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d208      	bcs.n	8003cca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	4922      	ldr	r1, [pc, #136]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d010      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d208      	bcs.n	8003cf8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ce6:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	4917      	ldr	r1, [pc, #92]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003cf8:	f000 f834 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	4912      	ldr	r1, [pc, #72]	; (8003d54 <HAL_RCC_ClockConfig+0x35c>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
 8003d14:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d16:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <HAL_RCC_ClockConfig+0x358>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	4a0d      	ldr	r2, [pc, #52]	; (8003d54 <HAL_RCC_ClockConfig+0x35c>)
 8003d20:	5cd3      	ldrb	r3, [r2, r3]
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2c:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x360>)
 8003d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d30:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <HAL_RCC_ClockConfig+0x364>)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_RCC_ClockConfig+0x368>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fd fcda 	bl	80016f4 <HAL_InitTick>
 8003d40:	4603      	mov	r3, r0
 8003d42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	58024400 	.word	0x58024400
 8003d54:	08008eb8 	.word	0x08008eb8
 8003d58:	24000004 	.word	0x24000004
 8003d5c:	24000000 	.word	0x24000000
 8003d60:	24000008 	.word	0x24000008

08003d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b089      	sub	sp, #36	; 0x24
 8003d68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d6a:	4bb3      	ldr	r3, [pc, #716]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d72:	2b18      	cmp	r3, #24
 8003d74:	f200 8155 	bhi.w	8004022 <HAL_RCC_GetSysClockFreq+0x2be>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003de5 	.word	0x08003de5
 8003d84:	08004023 	.word	0x08004023
 8003d88:	08004023 	.word	0x08004023
 8003d8c:	08004023 	.word	0x08004023
 8003d90:	08004023 	.word	0x08004023
 8003d94:	08004023 	.word	0x08004023
 8003d98:	08004023 	.word	0x08004023
 8003d9c:	08004023 	.word	0x08004023
 8003da0:	08003e0b 	.word	0x08003e0b
 8003da4:	08004023 	.word	0x08004023
 8003da8:	08004023 	.word	0x08004023
 8003dac:	08004023 	.word	0x08004023
 8003db0:	08004023 	.word	0x08004023
 8003db4:	08004023 	.word	0x08004023
 8003db8:	08004023 	.word	0x08004023
 8003dbc:	08004023 	.word	0x08004023
 8003dc0:	08003e11 	.word	0x08003e11
 8003dc4:	08004023 	.word	0x08004023
 8003dc8:	08004023 	.word	0x08004023
 8003dcc:	08004023 	.word	0x08004023
 8003dd0:	08004023 	.word	0x08004023
 8003dd4:	08004023 	.word	0x08004023
 8003dd8:	08004023 	.word	0x08004023
 8003ddc:	08004023 	.word	0x08004023
 8003de0:	08003e17 	.word	0x08003e17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003de4:	4b94      	ldr	r3, [pc, #592]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d009      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003df0:	4b91      	ldr	r3, [pc, #580]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	08db      	lsrs	r3, r3, #3
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	4a90      	ldr	r2, [pc, #576]	; (800403c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003e00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003e02:	e111      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e04:	4b8d      	ldr	r3, [pc, #564]	; (800403c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e06:	61bb      	str	r3, [r7, #24]
      break;
 8003e08:	e10e      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003e0a:	4b8d      	ldr	r3, [pc, #564]	; (8004040 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e0c:	61bb      	str	r3, [r7, #24]
      break;
 8003e0e:	e10b      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003e10:	4b8c      	ldr	r3, [pc, #560]	; (8004044 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e12:	61bb      	str	r3, [r7, #24]
      break;
 8003e14:	e108      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e16:	4b88      	ldr	r3, [pc, #544]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003e20:	4b85      	ldr	r3, [pc, #532]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e2a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e2c:	4b82      	ldr	r3, [pc, #520]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e36:	4b80      	ldr	r3, [pc, #512]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	08db      	lsrs	r3, r3, #3
 8003e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80e1 	beq.w	800401c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	f000 8083 	beq.w	8003f68 <HAL_RCC_GetSysClockFreq+0x204>
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	f200 80a1 	bhi.w	8003fac <HAL_RCC_GetSysClockFreq+0x248>
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x114>
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d056      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e76:	e099      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e78:	4b6f      	ldr	r3, [pc, #444]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d02d      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e84:	4b6c      	ldr	r3, [pc, #432]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	08db      	lsrs	r3, r3, #3
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	4a6b      	ldr	r2, [pc, #428]	; (800403c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
 8003e94:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eae:	4b62      	ldr	r3, [pc, #392]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ec2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eda:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003ede:	e087      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800404c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef2:	4b51      	ldr	r3, [pc, #324]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f22:	e065      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004050 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f36:	4b40      	ldr	r3, [pc, #256]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f66:	e043      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004054 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7a:	4b2f      	ldr	r3, [pc, #188]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003faa:	e021      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004050 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fbe:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fd2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	0a5b      	lsrs	r3, r3, #9
 8003ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	ee07 3a90 	vmov	s15, r3
 8004004:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004008:	edd7 6a07 	vldr	s13, [r7, #28]
 800400c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004014:	ee17 3a90 	vmov	r3, s15
 8004018:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800401a:	e005      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]
      break;
 8004020:	e002      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004022:	4b07      	ldr	r3, [pc, #28]	; (8004040 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004024:	61bb      	str	r3, [r7, #24]
      break;
 8004026:	bf00      	nop
  }

  return sysclockfreq;
 8004028:	69bb      	ldr	r3, [r7, #24]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3724      	adds	r7, #36	; 0x24
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	58024400 	.word	0x58024400
 800403c:	03d09000 	.word	0x03d09000
 8004040:	003d0900 	.word	0x003d0900
 8004044:	007a1200 	.word	0x007a1200
 8004048:	46000000 	.word	0x46000000
 800404c:	4c742400 	.word	0x4c742400
 8004050:	4a742400 	.word	0x4a742400
 8004054:	4af42400 	.word	0x4af42400

08004058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800405e:	f7ff fe81 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8004062:	4602      	mov	r2, r0
 8004064:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	0a1b      	lsrs	r3, r3, #8
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	490f      	ldr	r1, [pc, #60]	; (80040ac <HAL_RCC_GetHCLKFreq+0x54>)
 8004070:	5ccb      	ldrb	r3, [r1, r3]
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	fa22 f303 	lsr.w	r3, r2, r3
 800407a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	4a09      	ldr	r2, [pc, #36]	; (80040ac <HAL_RCC_GetHCLKFreq+0x54>)
 8004086:	5cd3      	ldrb	r3, [r2, r3]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	fa22 f303 	lsr.w	r3, r2, r3
 8004092:	4a07      	ldr	r2, [pc, #28]	; (80040b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004094:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004096:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800409e:	681b      	ldr	r3, [r3, #0]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	58024400 	.word	0x58024400
 80040ac:	08008eb8 	.word	0x08008eb8
 80040b0:	24000004 	.word	0x24000004
 80040b4:	24000000 	.word	0x24000000

080040b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80040bc:	f7ff ffcc 	bl	8004058 <HAL_RCC_GetHCLKFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4904      	ldr	r1, [pc, #16]	; (80040e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	58024400 	.word	0x58024400
 80040e0:	08008eb8 	.word	0x08008eb8

080040e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80040e8:	f7ff ffb6 	bl	8004058 <HAL_RCC_GetHCLKFreq>
 80040ec:	4602      	mov	r2, r0
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	4904      	ldr	r1, [pc, #16]	; (800410c <HAL_RCC_GetPCLK2Freq+0x28>)
 80040fa:	5ccb      	ldrb	r3, [r1, r3]
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	58024400 	.word	0x58024400
 800410c:	08008eb8 	.word	0x08008eb8

08004110 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004114:	b0c8      	sub	sp, #288	; 0x120
 8004116:	af00      	add	r7, sp, #0
 8004118:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800411c:	2300      	movs	r3, #0
 800411e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004122:	2300      	movs	r3, #0
 8004124:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004134:	2500      	movs	r5, #0
 8004136:	ea54 0305 	orrs.w	r3, r4, r5
 800413a:	d049      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800413c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004142:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004146:	d02f      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004148:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800414c:	d828      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800414e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004152:	d01a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004158:	d822      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800415e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004162:	d007      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004164:	e01c      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004166:	4ba7      	ldr	r3, [pc, #668]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	4aa6      	ldr	r2, [pc, #664]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800416c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004170:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004172:	e01a      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004178:	3308      	adds	r3, #8
 800417a:	2102      	movs	r1, #2
 800417c:	4618      	mov	r0, r3
 800417e:	f002 fa6d 	bl	800665c <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004188:	e00f      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800418a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800418e:	3328      	adds	r3, #40	; 0x28
 8004190:	2102      	movs	r1, #2
 8004192:	4618      	mov	r0, r3
 8004194:	f002 fb14 	bl	80067c0 <RCCEx_PLL3_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800419e:	e004      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041a6:	e000      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80041a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80041b2:	4b94      	ldr	r3, [pc, #592]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80041ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041c0:	4a90      	ldr	r2, [pc, #576]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041c2:	430b      	orrs	r3, r1
 80041c4:	6513      	str	r3, [r2, #80]	; 0x50
 80041c6:	e003      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80041dc:	f04f 0900 	mov.w	r9, #0
 80041e0:	ea58 0309 	orrs.w	r3, r8, r9
 80041e4:	d047      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80041e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d82a      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80041f0:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	0800420d 	.word	0x0800420d
 80041fc:	0800421b 	.word	0x0800421b
 8004200:	08004231 	.word	0x08004231
 8004204:	0800424f 	.word	0x0800424f
 8004208:	0800424f 	.word	0x0800424f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420c:	4b7d      	ldr	r3, [pc, #500]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	4a7c      	ldr	r2, [pc, #496]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004216:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004218:	e01a      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800421a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421e:	3308      	adds	r3, #8
 8004220:	2100      	movs	r1, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f002 fa1a 	bl	800665c <RCCEx_PLL2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800422e:	e00f      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004234:	3328      	adds	r3, #40	; 0x28
 8004236:	2100      	movs	r1, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f002 fac1 	bl	80067c0 <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004244:	e004      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800424e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004250:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004258:	4b6a      	ldr	r3, [pc, #424]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800425a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425c:	f023 0107 	bic.w	r1, r3, #7
 8004260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	4a67      	ldr	r2, [pc, #412]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004268:	430b      	orrs	r3, r1
 800426a:	6513      	str	r3, [r2, #80]	; 0x50
 800426c:	e003      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004272:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004282:	f04f 0b00 	mov.w	fp, #0
 8004286:	ea5a 030b 	orrs.w	r3, sl, fp
 800428a:	d054      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800428c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004292:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004296:	d036      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004298:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800429c:	d82f      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800429e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a2:	d032      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80042a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a8:	d829      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80042aa:	2bc0      	cmp	r3, #192	; 0xc0
 80042ac:	d02f      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80042ae:	2bc0      	cmp	r3, #192	; 0xc0
 80042b0:	d825      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80042b2:	2b80      	cmp	r3, #128	; 0x80
 80042b4:	d018      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80042b6:	2b80      	cmp	r3, #128	; 0x80
 80042b8:	d821      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	d007      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80042c2:	e01c      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c4:	4b4f      	ldr	r3, [pc, #316]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	4a4e      	ldr	r2, [pc, #312]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80042d0:	e01e      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d6:	3308      	adds	r3, #8
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f002 f9be 	bl	800665c <RCCEx_PLL2_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80042e6:	e013      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ec:	3328      	adds	r3, #40	; 0x28
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f002 fa65 	bl	80067c0 <RCCEx_PLL3_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80042fc:	e008      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004304:	e004      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004306:	bf00      	nop
 8004308:	e002      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800430a:	bf00      	nop
 800430c:	e000      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800430e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004310:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004318:	4b3a      	ldr	r3, [pc, #232]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800431a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004326:	4a37      	ldr	r2, [pc, #220]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004328:	430b      	orrs	r3, r1
 800432a:	6513      	str	r3, [r2, #80]	; 0x50
 800432c:	e003      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004332:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004342:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004346:	2300      	movs	r3, #0
 8004348:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800434c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004350:	460b      	mov	r3, r1
 8004352:	4313      	orrs	r3, r2
 8004354:	d05c      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004360:	d03b      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004362:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004366:	d834      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800436c:	d037      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800436e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004372:	d82e      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004374:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004378:	d033      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800437a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800437e:	d828      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004384:	d01a      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438a:	d822      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004394:	d007      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004396:	e01c      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004398:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800439e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80043a4:	e01e      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043aa:	3308      	adds	r3, #8
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f002 f954 	bl	800665c <RCCEx_PLL2_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80043ba:	e013      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043c0:	3328      	adds	r3, #40	; 0x28
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f002 f9fb 	bl	80067c0 <RCCEx_PLL3_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80043d0:	e008      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043d8:	e004      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80043da:	bf00      	nop
 80043dc:	e002      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80043de:	bf00      	nop
 80043e0:	e000      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80043e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10d      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80043f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fa:	4a02      	ldr	r2, [pc, #8]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6513      	str	r3, [r2, #80]	; 0x50
 8004400:	e006      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004402:	bf00      	nop
 8004404:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800440c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800441c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004420:	2300      	movs	r3, #0
 8004422:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004426:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800442a:	460b      	mov	r3, r1
 800442c:	4313      	orrs	r3, r2
 800442e:	d03a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004436:	2b30      	cmp	r3, #48	; 0x30
 8004438:	d01f      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800443a:	2b30      	cmp	r3, #48	; 0x30
 800443c:	d819      	bhi.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800443e:	2b20      	cmp	r3, #32
 8004440:	d00c      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004442:	2b20      	cmp	r3, #32
 8004444:	d815      	bhi.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004446:	2b00      	cmp	r3, #0
 8004448:	d019      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800444a:	2b10      	cmp	r3, #16
 800444c:	d111      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444e:	4bae      	ldr	r3, [pc, #696]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	4aad      	ldr	r2, [pc, #692]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004458:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800445a:	e011      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004460:	3308      	adds	r3, #8
 8004462:	2102      	movs	r1, #2
 8004464:	4618      	mov	r0, r3
 8004466:	f002 f8f9 	bl	800665c <RCCEx_PLL2_Config>
 800446a:	4603      	mov	r3, r0
 800446c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004470:	e006      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004478:	e002      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800447a:	bf00      	nop
 800447c:	e000      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800447e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004480:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004488:	4b9f      	ldr	r3, [pc, #636]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800448a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	4a9c      	ldr	r2, [pc, #624]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004498:	430b      	orrs	r3, r1
 800449a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800449c:	e003      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80044a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80044b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80044b6:	2300      	movs	r3, #0
 80044b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80044bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4313      	orrs	r3, r2
 80044c4:	d051      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80044c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d0:	d035      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80044d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d6:	d82e      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80044d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044dc:	d031      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80044de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044e2:	d828      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80044e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e8:	d01a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80044ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ee:	d822      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80044f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f8:	d007      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80044fa:	e01c      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fc:	4b82      	ldr	r3, [pc, #520]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	4a81      	ldr	r2, [pc, #516]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004508:	e01c      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800450a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800450e:	3308      	adds	r3, #8
 8004510:	2100      	movs	r1, #0
 8004512:	4618      	mov	r0, r3
 8004514:	f002 f8a2 	bl	800665c <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800451e:	e011      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004524:	3328      	adds	r3, #40	; 0x28
 8004526:	2100      	movs	r1, #0
 8004528:	4618      	mov	r0, r3
 800452a:	f002 f949 	bl	80067c0 <RCCEx_PLL3_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004534:	e006      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800453c:	e002      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800453e:	bf00      	nop
 8004540:	e000      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004544:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800454c:	4b6e      	ldr	r3, [pc, #440]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800454e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004550:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800455a:	4a6b      	ldr	r2, [pc, #428]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800455c:	430b      	orrs	r3, r1
 800455e:	6513      	str	r3, [r2, #80]	; 0x50
 8004560:	e003      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004562:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004566:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800456a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004576:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800457a:	2300      	movs	r3, #0
 800457c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004580:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004584:	460b      	mov	r3, r1
 8004586:	4313      	orrs	r3, r2
 8004588:	d053      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800458a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004594:	d033      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004596:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800459a:	d82c      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800459c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045a0:	d02f      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80045a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045a6:	d826      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80045a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045ac:	d02b      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80045ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045b2:	d820      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80045b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045b8:	d012      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80045ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045be:	d81a      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d022      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c8:	d115      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ce:	3308      	adds	r3, #8
 80045d0:	2101      	movs	r1, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f002 f842 	bl	800665c <RCCEx_PLL2_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045de:	e015      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e4:	3328      	adds	r3, #40	; 0x28
 80045e6:	2101      	movs	r1, #1
 80045e8:	4618      	mov	r0, r3
 80045ea:	f002 f8e9 	bl	80067c0 <RCCEx_PLL3_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045f4:	e00a      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045fc:	e006      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80045fe:	bf00      	nop
 8004600:	e004      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004602:	bf00      	nop
 8004604:	e002      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004606:	bf00      	nop
 8004608:	e000      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800460a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800460c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10a      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004614:	4b3c      	ldr	r3, [pc, #240]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004618:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800461c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004622:	4a39      	ldr	r2, [pc, #228]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004624:	430b      	orrs	r3, r1
 8004626:	6513      	str	r3, [r2, #80]	; 0x50
 8004628:	e003      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800462e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800463e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004642:	2300      	movs	r3, #0
 8004644:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004648:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800464c:	460b      	mov	r3, r1
 800464e:	4313      	orrs	r3, r2
 8004650:	d060      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004656:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800465a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800465e:	d039      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004660:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004664:	d832      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004666:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800466a:	d035      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800466c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004670:	d82c      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004676:	d031      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467c:	d826      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800467e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004682:	d02d      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004684:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004688:	d820      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800468a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800468e:	d012      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004694:	d81a      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d024      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800469a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800469e:	d115      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a4:	3308      	adds	r3, #8
 80046a6:	2101      	movs	r1, #1
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 ffd7 	bl	800665c <RCCEx_PLL2_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046b4:	e017      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ba:	3328      	adds	r3, #40	; 0x28
 80046bc:	2101      	movs	r1, #1
 80046be:	4618      	mov	r0, r3
 80046c0:	f002 f87e 	bl	80067c0 <RCCEx_PLL3_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046ca:	e00c      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046d2:	e008      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046d4:	bf00      	nop
 80046d6:	e006      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046d8:	bf00      	nop
 80046da:	e004      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046dc:	bf00      	nop
 80046de:	e002      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046e0:	bf00      	nop
 80046e2:	e000      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10e      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80046f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046fe:	4a02      	ldr	r2, [pc, #8]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004700:	430b      	orrs	r3, r1
 8004702:	6593      	str	r3, [r2, #88]	; 0x58
 8004704:	e006      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004706:	bf00      	nop
 8004708:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004710:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800472a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800472e:	460b      	mov	r3, r1
 8004730:	4313      	orrs	r3, r2
 8004732:	d037      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800473a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800473e:	d00e      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004744:	d816      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004746:	2b00      	cmp	r3, #0
 8004748:	d018      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800474a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800474e:	d111      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004750:	4bc4      	ldr	r3, [pc, #784]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	4ac3      	ldr	r2, [pc, #780]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800475a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800475c:	e00f      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800475e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004762:	3308      	adds	r3, #8
 8004764:	2101      	movs	r1, #1
 8004766:	4618      	mov	r0, r3
 8004768:	f001 ff78 	bl	800665c <RCCEx_PLL2_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004772:	e004      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800477a:	e000      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800477c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004786:	4bb7      	ldr	r3, [pc, #732]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800478e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004794:	4ab3      	ldr	r2, [pc, #716]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004796:	430b      	orrs	r3, r1
 8004798:	6513      	str	r3, [r2, #80]	; 0x50
 800479a:	e003      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80047a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80047b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047b4:	2300      	movs	r3, #0
 80047b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80047be:	460b      	mov	r3, r1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d039      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80047c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d81c      	bhi.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80047ce:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	08004811 	.word	0x08004811
 80047d8:	080047e5 	.word	0x080047e5
 80047dc:	080047f3 	.word	0x080047f3
 80047e0:	08004811 	.word	0x08004811
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e4:	4b9f      	ldr	r3, [pc, #636]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	4a9e      	ldr	r2, [pc, #632]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047f0:	e00f      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f6:	3308      	adds	r3, #8
 80047f8:	2102      	movs	r1, #2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f001 ff2e 	bl	800665c <RCCEx_PLL2_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004806:	e004      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800480e:	e000      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004812:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800481a:	4b92      	ldr	r3, [pc, #584]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	f023 0103 	bic.w	r1, r3, #3
 8004822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004828:	4a8e      	ldr	r2, [pc, #568]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800482a:	430b      	orrs	r3, r1
 800482c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800482e:	e003      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004830:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004834:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004848:	2300      	movs	r3, #0
 800484a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800484e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	f000 8099 	beq.w	800498c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800485a:	4b83      	ldr	r3, [pc, #524]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a82      	ldr	r2, [pc, #520]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004864:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004866:	f7fc ff8f 	bl	8001788 <HAL_GetTick>
 800486a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800486e:	e00b      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004870:	f7fc ff8a 	bl	8001788 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b64      	cmp	r3, #100	; 0x64
 800487e:	d903      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004886:	e005      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004888:	4b77      	ldr	r3, [pc, #476]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ed      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004894:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004898:	2b00      	cmp	r3, #0
 800489a:	d173      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800489c:	4b71      	ldr	r3, [pc, #452]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800489e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048a8:	4053      	eors	r3, r2
 80048aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d015      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048b2:	4b6c      	ldr	r3, [pc, #432]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048be:	4b69      	ldr	r3, [pc, #420]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	4a68      	ldr	r2, [pc, #416]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ca:	4b66      	ldr	r3, [pc, #408]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	4a65      	ldr	r2, [pc, #404]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048d6:	4a63      	ldr	r2, [pc, #396]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ea:	d118      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fc ff4c 	bl	8001788 <HAL_GetTick>
 80048f0:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048f4:	e00d      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f6:	f7fc ff47 	bl	8001788 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004900:	1ad2      	subs	r2, r2, r3
 8004902:	f241 3388 	movw	r3, #5000	; 0x1388
 8004906:	429a      	cmp	r2, r3
 8004908:	d903      	bls.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8004910:	e005      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004912:	4b54      	ldr	r3, [pc, #336]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0eb      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800491e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004922:	2b00      	cmp	r3, #0
 8004924:	d129      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800492e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004936:	d10e      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004938:	4b4a      	ldr	r3, [pc, #296]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004944:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004948:	091a      	lsrs	r2, r3, #4
 800494a:	4b48      	ldr	r3, [pc, #288]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800494c:	4013      	ands	r3, r2
 800494e:	4a45      	ldr	r2, [pc, #276]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004950:	430b      	orrs	r3, r1
 8004952:	6113      	str	r3, [r2, #16]
 8004954:	e005      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004956:	4b43      	ldr	r3, [pc, #268]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	4a42      	ldr	r2, [pc, #264]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800495c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004960:	6113      	str	r3, [r2, #16]
 8004962:	4b40      	ldr	r3, [pc, #256]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004964:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800496e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004972:	4a3c      	ldr	r2, [pc, #240]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004974:	430b      	orrs	r3, r1
 8004976:	6713      	str	r3, [r2, #112]	; 0x70
 8004978:	e008      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800497a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800497e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004982:	e003      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004988:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800498c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f002 0301 	and.w	r3, r2, #1
 8004998:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800499c:	2300      	movs	r3, #0
 800499e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f000 8090 	beq.w	8004ace <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80049ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b6:	2b28      	cmp	r3, #40	; 0x28
 80049b8:	d870      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80049ba:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80049bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c0:	08004aa5 	.word	0x08004aa5
 80049c4:	08004a9d 	.word	0x08004a9d
 80049c8:	08004a9d 	.word	0x08004a9d
 80049cc:	08004a9d 	.word	0x08004a9d
 80049d0:	08004a9d 	.word	0x08004a9d
 80049d4:	08004a9d 	.word	0x08004a9d
 80049d8:	08004a9d 	.word	0x08004a9d
 80049dc:	08004a9d 	.word	0x08004a9d
 80049e0:	08004a71 	.word	0x08004a71
 80049e4:	08004a9d 	.word	0x08004a9d
 80049e8:	08004a9d 	.word	0x08004a9d
 80049ec:	08004a9d 	.word	0x08004a9d
 80049f0:	08004a9d 	.word	0x08004a9d
 80049f4:	08004a9d 	.word	0x08004a9d
 80049f8:	08004a9d 	.word	0x08004a9d
 80049fc:	08004a9d 	.word	0x08004a9d
 8004a00:	08004a87 	.word	0x08004a87
 8004a04:	08004a9d 	.word	0x08004a9d
 8004a08:	08004a9d 	.word	0x08004a9d
 8004a0c:	08004a9d 	.word	0x08004a9d
 8004a10:	08004a9d 	.word	0x08004a9d
 8004a14:	08004a9d 	.word	0x08004a9d
 8004a18:	08004a9d 	.word	0x08004a9d
 8004a1c:	08004a9d 	.word	0x08004a9d
 8004a20:	08004aa5 	.word	0x08004aa5
 8004a24:	08004a9d 	.word	0x08004a9d
 8004a28:	08004a9d 	.word	0x08004a9d
 8004a2c:	08004a9d 	.word	0x08004a9d
 8004a30:	08004a9d 	.word	0x08004a9d
 8004a34:	08004a9d 	.word	0x08004a9d
 8004a38:	08004a9d 	.word	0x08004a9d
 8004a3c:	08004a9d 	.word	0x08004a9d
 8004a40:	08004aa5 	.word	0x08004aa5
 8004a44:	08004a9d 	.word	0x08004a9d
 8004a48:	08004a9d 	.word	0x08004a9d
 8004a4c:	08004a9d 	.word	0x08004a9d
 8004a50:	08004a9d 	.word	0x08004a9d
 8004a54:	08004a9d 	.word	0x08004a9d
 8004a58:	08004a9d 	.word	0x08004a9d
 8004a5c:	08004a9d 	.word	0x08004a9d
 8004a60:	08004aa5 	.word	0x08004aa5
 8004a64:	58024400 	.word	0x58024400
 8004a68:	58024800 	.word	0x58024800
 8004a6c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a74:	3308      	adds	r3, #8
 8004a76:	2101      	movs	r1, #1
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 fdef 	bl	800665c <RCCEx_PLL2_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a84:	e00f      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a8a:	3328      	adds	r3, #40	; 0x28
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f001 fe96 	bl	80067c0 <RCCEx_PLL3_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a9a:	e004      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10b      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004aae:	4bc0      	ldr	r3, [pc, #768]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004abe:	4abc      	ldr	r2, [pc, #752]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6553      	str	r3, [r2, #84]	; 0x54
 8004ac4:	e003      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004aca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f002 0302 	and.w	r3, r2, #2
 8004ada:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004ae4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4313      	orrs	r3, r2
 8004aec:	d043      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d824      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004afa:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b4d 	.word	0x08004b4d
 8004b04:	08004b19 	.word	0x08004b19
 8004b08:	08004b2f 	.word	0x08004b2f
 8004b0c:	08004b4d 	.word	0x08004b4d
 8004b10:	08004b4d 	.word	0x08004b4d
 8004b14:	08004b4d 	.word	0x08004b4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	2101      	movs	r1, #1
 8004b20:	4618      	mov	r0, r3
 8004b22:	f001 fd9b 	bl	800665c <RCCEx_PLL2_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b2c:	e00f      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b32:	3328      	adds	r3, #40	; 0x28
 8004b34:	2101      	movs	r1, #1
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 fe42 	bl	80067c0 <RCCEx_PLL3_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b42:	e004      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b4a:	e000      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10b      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b56:	4b96      	ldr	r3, [pc, #600]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5a:	f023 0107 	bic.w	r1, r3, #7
 8004b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b66:	4a92      	ldr	r2, [pc, #584]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6553      	str	r3, [r2, #84]	; 0x54
 8004b6c:	e003      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b72:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	f002 0304 	and.w	r3, r2, #4
 8004b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b86:	2300      	movs	r3, #0
 8004b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b8c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4313      	orrs	r3, r2
 8004b94:	d043      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d824      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bf5 	.word	0x08004bf5
 8004bac:	08004bc1 	.word	0x08004bc1
 8004bb0:	08004bd7 	.word	0x08004bd7
 8004bb4:	08004bf5 	.word	0x08004bf5
 8004bb8:	08004bf5 	.word	0x08004bf5
 8004bbc:	08004bf5 	.word	0x08004bf5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 fd47 	bl	800665c <RCCEx_PLL2_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bd4:	e00f      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bda:	3328      	adds	r3, #40	; 0x28
 8004bdc:	2101      	movs	r1, #1
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 fdee 	bl	80067c0 <RCCEx_PLL3_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bea:	e004      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10b      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bfe:	4b6c      	ldr	r3, [pc, #432]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	f023 0107 	bic.w	r1, r3, #7
 8004c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c0e:	4a68      	ldr	r2, [pc, #416]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6593      	str	r3, [r2, #88]	; 0x58
 8004c14:	e003      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	f002 0320 	and.w	r3, r2, #32
 8004c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	d055      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c4a:	d033      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c50:	d82c      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c56:	d02f      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5c:	d826      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c62:	d02b      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004c64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c68:	d820      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c6e:	d012      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c74:	d81a      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d022      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c7e:	d115      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c84:	3308      	adds	r3, #8
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 fce7 	bl	800665c <RCCEx_PLL2_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c94:	e015      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c9a:	3328      	adds	r3, #40	; 0x28
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f001 fd8e 	bl	80067c0 <RCCEx_PLL3_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004cb2:	e006      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004cb4:	bf00      	nop
 8004cb6:	e004      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004cb8:	bf00      	nop
 8004cba:	e002      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004cbc:	bf00      	nop
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10b      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cca:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cda:	4a35      	ldr	r2, [pc, #212]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6553      	str	r3, [r2, #84]	; 0x54
 8004ce0:	e003      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ce6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d00:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4313      	orrs	r3, r2
 8004d08:	d058      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d16:	d033      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004d18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d1c:	d82c      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d22:	d02f      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	d826      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d2e:	d02b      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004d30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d34:	d820      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3a:	d012      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d40:	d81a      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d022      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4a:	d115      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d50:	3308      	adds	r3, #8
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f001 fc81 	bl	800665c <RCCEx_PLL2_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d60:	e015      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d66:	3328      	adds	r3, #40	; 0x28
 8004d68:	2102      	movs	r1, #2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f001 fd28 	bl	80067c0 <RCCEx_PLL3_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d76:	e00a      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d7e:	e006      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d80:	bf00      	nop
 8004d82:	e004      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d84:	bf00      	nop
 8004d86:	e002      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d88:	bf00      	nop
 8004d8a:	e000      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10e      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004da6:	4a02      	ldr	r2, [pc, #8]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004da8:	430b      	orrs	r3, r1
 8004daa:	6593      	str	r3, [r2, #88]	; 0x58
 8004dac:	e006      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004dae:	bf00      	nop
 8004db0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004db8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dd2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	d055      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004de4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004de8:	d033      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004dea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004dee:	d82c      	bhi.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df4:	d02f      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dfa:	d826      	bhi.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004dfc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e00:	d02b      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004e02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e06:	d820      	bhi.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e0c:	d012      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e12:	d81a      	bhi.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d022      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1c:	d115      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e22:	3308      	adds	r3, #8
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f001 fc18 	bl	800665c <RCCEx_PLL2_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e32:	e015      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e38:	3328      	adds	r3, #40	; 0x28
 8004e3a:	2102      	movs	r1, #2
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 fcbf 	bl	80067c0 <RCCEx_PLL3_Config>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e48:	e00a      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e50:	e006      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004e52:	bf00      	nop
 8004e54:	e004      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004e56:	bf00      	nop
 8004e58:	e002      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004e5a:	bf00      	nop
 8004e5c:	e000      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10b      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e68:	4ba1      	ldr	r3, [pc, #644]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e78:	4a9d      	ldr	r2, [pc, #628]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e7e:	e003      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f002 0308 	and.w	r3, r2, #8
 8004e94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e9e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	d01e      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eba:	3328      	adds	r3, #40	; 0x28
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f001 fc7e 	bl	80067c0 <RCCEx_PLL3_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ed0:	4b87      	ldr	r3, [pc, #540]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee0:	4a83      	ldr	r2, [pc, #524]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	f002 0310 	and.w	r3, r2, #16
 8004ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004efc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004f00:	460b      	mov	r3, r1
 8004f02:	4313      	orrs	r3, r2
 8004f04:	d01e      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f12:	d10c      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f18:	3328      	adds	r3, #40	; 0x28
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 fc4f 	bl	80067c0 <RCCEx_PLL3_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f2e:	4b70      	ldr	r3, [pc, #448]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f3e:	4a6c      	ldr	r2, [pc, #432]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f54:	2300      	movs	r3, #0
 8004f56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f5a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4313      	orrs	r3, r2
 8004f62:	d03e      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f70:	d022      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f76:	d81b      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f80:	d00b      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004f82:	e015      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f88:	3308      	adds	r3, #8
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 fb65 	bl	800665c <RCCEx_PLL2_Config>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f98:	e00f      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f9e:	3328      	adds	r3, #40	; 0x28
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 fc0c 	bl	80067c0 <RCCEx_PLL3_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004fae:	e004      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004fb6:	e000      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10b      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fc2:	4b4b      	ldr	r3, [pc, #300]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fd2:	4a47      	ldr	r2, [pc, #284]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fd8:	e003      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004fee:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ff4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	d03b      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800500a:	d01f      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800500c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005010:	d818      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005016:	d003      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800501c:	d007      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800501e:	e011      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005020:	4b33      	ldr	r3, [pc, #204]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	4a32      	ldr	r2, [pc, #200]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800502c:	e00f      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800502e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005032:	3328      	adds	r3, #40	; 0x28
 8005034:	2101      	movs	r1, #1
 8005036:	4618      	mov	r0, r3
 8005038:	f001 fbc2 	bl	80067c0 <RCCEx_PLL3_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005042:	e004      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800504a:	e000      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800504c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800504e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10b      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005056:	4b26      	ldr	r3, [pc, #152]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800505e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	4a22      	ldr	r2, [pc, #136]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005068:	430b      	orrs	r3, r1
 800506a:	6553      	str	r3, [r2, #84]	; 0x54
 800506c:	e003      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005072:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005082:	673b      	str	r3, [r7, #112]	; 0x70
 8005084:	2300      	movs	r3, #0
 8005086:	677b      	str	r3, [r7, #116]	; 0x74
 8005088:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800508c:	460b      	mov	r3, r1
 800508e:	4313      	orrs	r3, r2
 8005090:	d034      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800509c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a0:	d007      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80050a2:	e011      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a4:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	4a11      	ldr	r2, [pc, #68]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050b0:	e00e      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050b6:	3308      	adds	r3, #8
 80050b8:	2102      	movs	r1, #2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f001 face 	bl	800665c <RCCEx_PLL2_Config>
 80050c0:	4603      	mov	r3, r0
 80050c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050c6:	e003      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80050ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10d      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e6:	4a02      	ldr	r2, [pc, #8]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050e8:	430b      	orrs	r3, r1
 80050ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ec:	e006      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80050ee:	bf00      	nop
 80050f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005108:	66bb      	str	r3, [r7, #104]	; 0x68
 800510a:	2300      	movs	r3, #0
 800510c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800510e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005112:	460b      	mov	r3, r1
 8005114:	4313      	orrs	r3, r2
 8005116:	d00c      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800511c:	3328      	adds	r3, #40	; 0x28
 800511e:	2102      	movs	r1, #2
 8005120:	4618      	mov	r0, r3
 8005122:	f001 fb4d 	bl	80067c0 <RCCEx_PLL3_Config>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800513e:	663b      	str	r3, [r7, #96]	; 0x60
 8005140:	2300      	movs	r3, #0
 8005142:	667b      	str	r3, [r7, #100]	; 0x64
 8005144:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005148:	460b      	mov	r3, r1
 800514a:	4313      	orrs	r3, r2
 800514c:	d038      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800514e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800515a:	d018      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800515c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005160:	d811      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005166:	d014      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800516c:	d80b      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800516e:	2b00      	cmp	r3, #0
 8005170:	d011      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005176:	d106      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005178:	4bc3      	ldr	r3, [pc, #780]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	4ac2      	ldr	r2, [pc, #776]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800517e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005182:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005184:	e008      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800518c:	e004      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800518e:	bf00      	nop
 8005190:	e002      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005192:	bf00      	nop
 8005194:	e000      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005198:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10b      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051a0:	4bb9      	ldr	r3, [pc, #740]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	4ab5      	ldr	r2, [pc, #724]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051b2:	430b      	orrs	r3, r1
 80051b4:	6553      	str	r3, [r2, #84]	; 0x54
 80051b6:	e003      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80051cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80051ce:	2300      	movs	r3, #0
 80051d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80051d6:	460b      	mov	r3, r1
 80051d8:	4313      	orrs	r3, r2
 80051da:	d009      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051dc:	4baa      	ldr	r3, [pc, #680]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80051e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ea:	4aa7      	ldr	r2, [pc, #668]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80051fc:	653b      	str	r3, [r7, #80]	; 0x50
 80051fe:	2300      	movs	r3, #0
 8005200:	657b      	str	r3, [r7, #84]	; 0x54
 8005202:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005206:	460b      	mov	r3, r1
 8005208:	4313      	orrs	r3, r2
 800520a:	d009      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800520c:	4b9e      	ldr	r3, [pc, #632]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800520e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005210:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	4a9b      	ldr	r2, [pc, #620]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800521c:	430b      	orrs	r3, r1
 800521e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800522c:	64bb      	str	r3, [r7, #72]	; 0x48
 800522e:	2300      	movs	r3, #0
 8005230:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005232:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005236:	460b      	mov	r3, r1
 8005238:	4313      	orrs	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800523c:	4b92      	ldr	r3, [pc, #584]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800523e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005240:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8005244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524a:	4a8f      	ldr	r2, [pc, #572]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800524c:	430b      	orrs	r3, r1
 800524e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005258:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800525c:	643b      	str	r3, [r7, #64]	; 0x40
 800525e:	2300      	movs	r3, #0
 8005260:	647b      	str	r3, [r7, #68]	; 0x44
 8005262:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005266:	460b      	mov	r3, r1
 8005268:	4313      	orrs	r3, r2
 800526a:	d00e      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800526c:	4b86      	ldr	r3, [pc, #536]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	4a85      	ldr	r2, [pc, #532]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005276:	6113      	str	r3, [r2, #16]
 8005278:	4b83      	ldr	r3, [pc, #524]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800527a:	6919      	ldr	r1, [r3, #16]
 800527c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005280:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005284:	4a80      	ldr	r2, [pc, #512]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005286:	430b      	orrs	r3, r1
 8005288:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800528a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005292:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005296:	63bb      	str	r3, [r7, #56]	; 0x38
 8005298:	2300      	movs	r3, #0
 800529a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800529c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80052a0:	460b      	mov	r3, r1
 80052a2:	4313      	orrs	r3, r2
 80052a4:	d009      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80052a6:	4b78      	ldr	r3, [pc, #480]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80052ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b4:	4a74      	ldr	r2, [pc, #464]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052b6:	430b      	orrs	r3, r1
 80052b8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80052c6:	633b      	str	r3, [r7, #48]	; 0x30
 80052c8:	2300      	movs	r3, #0
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
 80052cc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80052d0:	460b      	mov	r3, r1
 80052d2:	4313      	orrs	r3, r2
 80052d4:	d00a      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052d6:	4b6c      	ldr	r3, [pc, #432]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80052de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e6:	4a68      	ldr	r2, [pc, #416]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80052ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	2100      	movs	r1, #0
 80052f6:	62b9      	str	r1, [r7, #40]	; 0x28
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052fe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005302:	460b      	mov	r3, r1
 8005304:	4313      	orrs	r3, r2
 8005306:	d011      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800530c:	3308      	adds	r3, #8
 800530e:	2100      	movs	r1, #0
 8005310:	4618      	mov	r0, r3
 8005312:	f001 f9a3 	bl	800665c <RCCEx_PLL2_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800531c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005324:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005328:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800532c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	2100      	movs	r1, #0
 8005336:	6239      	str	r1, [r7, #32]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
 800533e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005342:	460b      	mov	r3, r1
 8005344:	4313      	orrs	r3, r2
 8005346:	d011      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800534c:	3308      	adds	r3, #8
 800534e:	2101      	movs	r1, #1
 8005350:	4618      	mov	r0, r3
 8005352:	f001 f983 	bl	800665c <RCCEx_PLL2_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800535c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005364:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005368:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800536c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	2100      	movs	r1, #0
 8005376:	61b9      	str	r1, [r7, #24]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005382:	460b      	mov	r3, r1
 8005384:	4313      	orrs	r3, r2
 8005386:	d011      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800538c:	3308      	adds	r3, #8
 800538e:	2102      	movs	r1, #2
 8005390:	4618      	mov	r0, r3
 8005392:	f001 f963 	bl	800665c <RCCEx_PLL2_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800539c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80053ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	2100      	movs	r1, #0
 80053b6:	6139      	str	r1, [r7, #16]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80053c2:	460b      	mov	r3, r1
 80053c4:	4313      	orrs	r3, r2
 80053c6:	d011      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053cc:	3328      	adds	r3, #40	; 0x28
 80053ce:	2100      	movs	r1, #0
 80053d0:	4618      	mov	r0, r3
 80053d2:	f001 f9f5 	bl	80067c0 <RCCEx_PLL3_Config>
 80053d6:	4603      	mov	r3, r0
 80053d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80053dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80053ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	2100      	movs	r1, #0
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005402:	460b      	mov	r3, r1
 8005404:	4313      	orrs	r3, r2
 8005406:	d011      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800540c:	3328      	adds	r3, #40	; 0x28
 800540e:	2101      	movs	r1, #1
 8005410:	4618      	mov	r0, r3
 8005412:	f001 f9d5 	bl	80067c0 <RCCEx_PLL3_Config>
 8005416:	4603      	mov	r3, r0
 8005418:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800541c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005428:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800542c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	2100      	movs	r1, #0
 8005436:	6039      	str	r1, [r7, #0]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	607b      	str	r3, [r7, #4]
 800543e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005442:	460b      	mov	r3, r1
 8005444:	4313      	orrs	r3, r2
 8005446:	d011      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800544c:	3328      	adds	r3, #40	; 0x28
 800544e:	2102      	movs	r1, #2
 8005450:	4618      	mov	r0, r3
 8005452:	f001 f9b5 	bl	80067c0 <RCCEx_PLL3_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800545c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005464:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005468:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800546c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
}
 800547a:	4618      	mov	r0, r3
 800547c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005480:	46bd      	mov	sp, r7
 8005482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005486:	bf00      	nop
 8005488:	58024400 	.word	0x58024400

0800548c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b090      	sub	sp, #64	; 0x40
 8005490:	af00      	add	r7, sp, #0
 8005492:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800549a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800549e:	430b      	orrs	r3, r1
 80054a0:	f040 8094 	bne.w	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80054a4:	4b97      	ldr	r3, [pc, #604]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	f200 8087 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80054b6:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	080054d1 	.word	0x080054d1
 80054c0:	080054f9 	.word	0x080054f9
 80054c4:	08005521 	.word	0x08005521
 80054c8:	080055bd 	.word	0x080055bd
 80054cc:	08005549 	.word	0x08005549
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054d0:	4b8c      	ldr	r3, [pc, #560]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054dc:	d108      	bne.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 ff68 	bl	80063b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054ec:	f000 bc97 	b.w	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054f4:	f000 bc93 	b.w	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054f8:	4b82      	ldr	r3, [pc, #520]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005504:	d108      	bne.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005506:	f107 0318 	add.w	r3, r7, #24
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fcac 	bl	8005e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005514:	f000 bc83 	b.w	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800551c:	f000 bc7f 	b.w	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005520:	4b78      	ldr	r3, [pc, #480]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800552c:	d108      	bne.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800552e:	f107 030c 	add.w	r3, r7, #12
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fdec 	bl	8006110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800553c:	f000 bc6f 	b.w	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005544:	f000 bc6b 	b.w	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005548:	4b6e      	ldr	r3, [pc, #440]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800554a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005550:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005552:	4b6c      	ldr	r3, [pc, #432]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b04      	cmp	r3, #4
 800555c:	d10c      	bne.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	2b00      	cmp	r3, #0
 8005562:	d109      	bne.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005564:	4b67      	ldr	r3, [pc, #412]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	08db      	lsrs	r3, r3, #3
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	4a66      	ldr	r2, [pc, #408]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005576:	e01f      	b.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005578:	4b62      	ldr	r3, [pc, #392]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005584:	d106      	bne.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005588:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800558c:	d102      	bne.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800558e:	4b5f      	ldr	r3, [pc, #380]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005592:	e011      	b.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005594:	4b5b      	ldr	r3, [pc, #364]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a0:	d106      	bne.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a8:	d102      	bne.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055aa:	4b59      	ldr	r3, [pc, #356]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80055ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ae:	e003      	b.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80055b4:	f000 bc33 	b.w	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80055b8:	f000 bc31 	b.w	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80055bc:	4b55      	ldr	r3, [pc, #340]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c0:	f000 bc2d 	b.w	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c8:	f000 bc29 	b.w	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80055cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055d0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80055d4:	430b      	orrs	r3, r1
 80055d6:	f040 809f 	bne.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80055da:	4b4a      	ldr	r3, [pc, #296]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80055dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80055e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ea:	d04d      	beq.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f2:	f200 8084 	bhi.w	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	2bc0      	cmp	r3, #192	; 0xc0
 80055fa:	d07d      	beq.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005600:	d87d      	bhi.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	2b80      	cmp	r3, #128	; 0x80
 8005606:	d02d      	beq.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	2b80      	cmp	r3, #128	; 0x80
 800560c:	d877      	bhi.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d012      	beq.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800561a:	e070      	b.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800561c:	4b39      	ldr	r3, [pc, #228]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005628:	d107      	bne.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800562a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fec2 	bl	80063b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005638:	e3f1      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800563e:	e3ee      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005640:	4b30      	ldr	r3, [pc, #192]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800564c:	d107      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800564e:	f107 0318 	add.w	r3, r7, #24
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fc08 	bl	8005e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800565c:	e3df      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800565e:	2300      	movs	r3, #0
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005662:	e3dc      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005664:	4b27      	ldr	r3, [pc, #156]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800566c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005670:	d107      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005672:	f107 030c 	add.w	r3, r7, #12
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fd4a 	bl	8006110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005680:	e3cd      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005682:	2300      	movs	r3, #0
 8005684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005686:	e3ca      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005688:	4b1e      	ldr	r3, [pc, #120]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800568a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005690:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005692:	4b1c      	ldr	r3, [pc, #112]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b04      	cmp	r3, #4
 800569c:	d10c      	bne.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800569e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056a4:	4b17      	ldr	r3, [pc, #92]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	08db      	lsrs	r3, r3, #3
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	4a16      	ldr	r2, [pc, #88]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80056b0:	fa22 f303 	lsr.w	r3, r2, r3
 80056b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b6:	e01e      	b.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056b8:	4b12      	ldr	r3, [pc, #72]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c4:	d106      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80056c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056cc:	d102      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80056ce:	4b0f      	ldr	r3, [pc, #60]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80056d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d2:	e010      	b.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056e0:	d106      	bne.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e8:	d102      	bne.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80056ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ee:	e002      	b.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80056f4:	e393      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80056f6:	e392      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056fc:	e38f      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005702:	e38c      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005704:	58024400 	.word	0x58024400
 8005708:	03d09000 	.word	0x03d09000
 800570c:	003d0900 	.word	0x003d0900
 8005710:	007a1200 	.word	0x007a1200
 8005714:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800571c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005720:	430b      	orrs	r3, r1
 8005722:	f040 809c 	bne.w	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8005726:	4b9e      	ldr	r3, [pc, #632]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800572e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005736:	d054      	beq.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800573e:	f200 808b 	bhi.w	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005748:	f000 8083 	beq.w	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005752:	f200 8081 	bhi.w	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575c:	d02f      	beq.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005764:	d878      	bhi.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005772:	d012      	beq.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8005774:	e070      	b.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005776:	4b8a      	ldr	r3, [pc, #552]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005782:	d107      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fe15 	bl	80063b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005792:	e344      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005798:	e341      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800579a:	4b81      	ldr	r3, [pc, #516]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057a6:	d107      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057a8:	f107 0318 	add.w	r3, r7, #24
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fb5b 	bl	8005e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057b6:	e332      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057bc:	e32f      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057be:	4b78      	ldr	r3, [pc, #480]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ca:	d107      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057cc:	f107 030c 	add.w	r3, r7, #12
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fc9d 	bl	8006110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057da:	e320      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057e0:	e31d      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057e2:	4b6f      	ldr	r3, [pc, #444]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057ec:	4b6c      	ldr	r3, [pc, #432]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d10c      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80057f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057fe:	4b68      	ldr	r3, [pc, #416]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	08db      	lsrs	r3, r3, #3
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	4a66      	ldr	r2, [pc, #408]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005810:	e01e      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005812:	4b63      	ldr	r3, [pc, #396]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800581e:	d106      	bne.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005826:	d102      	bne.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005828:	4b5f      	ldr	r3, [pc, #380]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800582c:	e010      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800582e:	4b5c      	ldr	r3, [pc, #368]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800583a:	d106      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800583c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005842:	d102      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005844:	4b59      	ldr	r3, [pc, #356]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005848:	e002      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800584e:	e2e6      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005850:	e2e5      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005852:	4b57      	ldr	r3, [pc, #348]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005856:	e2e2      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800585c:	e2df      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800585e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005862:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005866:	430b      	orrs	r3, r1
 8005868:	f040 80a7 	bne.w	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800586c:	4b4c      	ldr	r3, [pc, #304]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800586e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005870:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005874:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800587c:	d055      	beq.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005884:	f200 8096 	bhi.w	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800588e:	f000 8084 	beq.w	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8005892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005894:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005898:	f200 808c 	bhi.w	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800589c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a2:	d030      	beq.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80058a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058aa:	f200 8083 	bhi.w	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80058ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ba:	d012      	beq.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80058bc:	e07a      	b.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058be:	4b38      	ldr	r3, [pc, #224]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058ca:	d107      	bne.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fd71 	bl	80063b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058da:	e2a0      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058e0:	e29d      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058e2:	4b2f      	ldr	r3, [pc, #188]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ee:	d107      	bne.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058f0:	f107 0318 	add.w	r3, r7, #24
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fab7 	bl	8005e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058fe:	e28e      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005904:	e28b      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005906:	4b26      	ldr	r3, [pc, #152]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800590e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005912:	d107      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005914:	f107 030c 	add.w	r3, r7, #12
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fbf9 	bl	8006110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005922:	e27c      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005928:	e279      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800592a:	4b1d      	ldr	r3, [pc, #116]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800592c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800592e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005932:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005934:	4b1a      	ldr	r3, [pc, #104]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b04      	cmp	r3, #4
 800593e:	d10c      	bne.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8005940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005946:	4b16      	ldr	r3, [pc, #88]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	08db      	lsrs	r3, r3, #3
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005952:	fa22 f303 	lsr.w	r3, r2, r3
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005958:	e01e      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800595a:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005966:	d106      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800596e:	d102      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005970:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005974:	e010      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005976:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005982:	d106      	bne.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800598a:	d102      	bne.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800598c:	4b07      	ldr	r3, [pc, #28]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800598e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005990:	e002      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005992:	2300      	movs	r3, #0
 8005994:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005996:	e242      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005998:	e241      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800599e:	e23e      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80059a0:	58024400 	.word	0x58024400
 80059a4:	03d09000 	.word	0x03d09000
 80059a8:	003d0900 	.word	0x003d0900
 80059ac:	007a1200 	.word	0x007a1200
 80059b0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059b8:	e231      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80059ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059be:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80059c2:	430b      	orrs	r3, r1
 80059c4:	f040 8085 	bne.w	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80059c8:	4b9c      	ldr	r3, [pc, #624]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059cc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80059d0:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059d8:	d06b      	beq.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e0:	d874      	bhi.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059e8:	d056      	beq.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059f0:	d86c      	bhi.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059f8:	d03b      	beq.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80059fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a00:	d864      	bhi.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a08:	d021      	beq.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a10:	d85c      	bhi.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a1e:	d004      	beq.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8005a20:	e054      	b.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005a22:	f7fe fb49 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 8005a26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a28:	e1f9      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a2a:	4b84      	ldr	r3, [pc, #528]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a36:	d107      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a38:	f107 0318 	add.w	r3, r7, #24
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fa13 	bl	8005e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a46:	e1ea      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a4c:	e1e7      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a4e:	4b7b      	ldr	r3, [pc, #492]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a5c:	f107 030c 	add.w	r3, r7, #12
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fb55 	bl	8006110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a6a:	e1d8      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a70:	e1d5      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a72:	4b72      	ldr	r3, [pc, #456]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d109      	bne.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a7e:	4b6f      	ldr	r3, [pc, #444]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	08db      	lsrs	r3, r3, #3
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	4a6d      	ldr	r2, [pc, #436]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a90:	e1c5      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a96:	e1c2      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005a98:	4b68      	ldr	r3, [pc, #416]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa4:	d102      	bne.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8005aa6:	4b67      	ldr	r3, [pc, #412]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aaa:	e1b8      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ab0:	e1b5      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ab2:	4b62      	ldr	r3, [pc, #392]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005abe:	d102      	bne.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8005ac0:	4b61      	ldr	r3, [pc, #388]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ac4:	e1ab      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aca:	e1a8      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ad0:	e1a5      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad6:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005ada:	430b      	orrs	r3, r1
 8005adc:	d173      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005ade:	4b57      	ldr	r3, [pc, #348]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ae6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aee:	d02f      	beq.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8005af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005af6:	d863      	bhi.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b04:	d012      	beq.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8005b06:	e05b      	b.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b08:	4b4c      	ldr	r3, [pc, #304]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b14:	d107      	bne.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b16:	f107 0318 	add.w	r3, r7, #24
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f9a4 	bl	8005e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b24:	e17b      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b2a:	e178      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b2c:	4b43      	ldr	r3, [pc, #268]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b38:	d107      	bne.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b3a:	f107 030c 	add.w	r3, r7, #12
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fae6 	bl	8006110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b48:	e169      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b4e:	e166      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b50:	4b3a      	ldr	r3, [pc, #232]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b5a:	4b38      	ldr	r3, [pc, #224]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d10c      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8005b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d109      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b6c:	4b33      	ldr	r3, [pc, #204]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	08db      	lsrs	r3, r3, #3
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	4a32      	ldr	r2, [pc, #200]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005b78:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b7e:	e01e      	b.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b80:	4b2e      	ldr	r3, [pc, #184]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8c:	d106      	bne.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b94:	d102      	bne.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b96:	4b2b      	ldr	r3, [pc, #172]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005b98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b9a:	e010      	b.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b9c:	4b27      	ldr	r3, [pc, #156]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ba8:	d106      	bne.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb0:	d102      	bne.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005bb2:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bb6:	e002      	b.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005bbc:	e12f      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005bbe:	e12e      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bc4:	e12b      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bca:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	d13c      	bne.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005bd2:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bda:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be8:	d012      	beq.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8005bea:	e023      	b.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bec:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bf8:	d107      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fbda 	bl	80063b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c08:	e109      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c0e:	e106      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c1c:	d107      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c1e:	f107 0318 	add.w	r3, r7, #24
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 f920 	bl	8005e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c2c:	e0f7      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c32:	e0f4      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c38:	e0f1      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005c3a:	bf00      	nop
 8005c3c:	58024400 	.word	0x58024400
 8005c40:	03d09000 	.word	0x03d09000
 8005c44:	003d0900 	.word	0x003d0900
 8005c48:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c50:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005c54:	430b      	orrs	r3, r1
 8005c56:	f040 8091 	bne.w	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005c5a:	4b73      	ldr	r3, [pc, #460]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005c62:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c66:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005c6a:	f000 8081 	beq.w	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c70:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005c74:	d87f      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c7c:	d06b      	beq.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c84:	d877      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8c:	d056      	beq.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c94:	d86f      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c9c:	d03b      	beq.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ca4:	d867      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cac:	d021      	beq.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cb4:	d85f      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cc2:	d004      	beq.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005cc4:	e057      	b.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005cc6:	f000 f8b9 	bl	8005e3c <HAL_RCCEx_GetD3PCLK1Freq>
 8005cca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ccc:	e0a7      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cce:	4b56      	ldr	r3, [pc, #344]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cda:	d107      	bne.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cdc:	f107 0318 	add.w	r3, r7, #24
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 f8c1 	bl	8005e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cea:	e098      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf0:	e095      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cf2:	4b4d      	ldr	r3, [pc, #308]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cfe:	d107      	bne.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d00:	f107 030c 	add.w	r3, r7, #12
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fa03 	bl	8006110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d0e:	e086      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d14:	e083      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d16:	4b44      	ldr	r3, [pc, #272]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d109      	bne.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d22:	4b41      	ldr	r3, [pc, #260]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	08db      	lsrs	r3, r3, #3
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	4a3f      	ldr	r2, [pc, #252]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d34:	e073      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d3a:	e070      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005d3c:	4b3a      	ldr	r3, [pc, #232]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d48:	d102      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8005d4a:	4b39      	ldr	r3, [pc, #228]	; (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8005d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d4e:	e066      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d54:	e063      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d56:	4b34      	ldr	r3, [pc, #208]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d62:	d102      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8005d64:	4b33      	ldr	r3, [pc, #204]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d68:	e059      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d6e:	e056      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d70:	4b31      	ldr	r3, [pc, #196]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d74:	e053      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d7a:	e050      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d80:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005d84:	430b      	orrs	r3, r1
 8005d86:	d148      	bne.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005d88:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d90:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d98:	d02a      	beq.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da0:	d838      	bhi.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dae:	d00d      	beq.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005db0:	e030      	b.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005db2:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dbe:	d102      	bne.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8005dc0:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dc4:	e02b      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dca:	e028      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dcc:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dd8:	d107      	bne.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 faea 	bl	80063b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005de8:	e019      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dee:	e016      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005df0:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dfc:	d107      	bne.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dfe:	f107 0318 	add.w	r3, r7, #24
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 f830 	bl	8005e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e0c:	e007      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e12:	e004      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e18:	e001      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3740      	adds	r7, #64	; 0x40
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	03d09000 	.word	0x03d09000
 8005e30:	003d0900 	.word	0x003d0900
 8005e34:	007a1200 	.word	0x007a1200
 8005e38:	00bb8000 	.word	0x00bb8000

08005e3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005e40:	f7fe f90a 	bl	8004058 <HAL_RCC_GetHCLKFreq>
 8005e44:	4602      	mov	r2, r0
 8005e46:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	4904      	ldr	r1, [pc, #16]	; (8005e64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e52:	5ccb      	ldrb	r3, [r1, r3]
 8005e54:	f003 031f 	and.w	r3, r3, #31
 8005e58:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	58024400 	.word	0x58024400
 8005e64:	08008eb8 	.word	0x08008eb8

08005e68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b089      	sub	sp, #36	; 0x24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e70:	4ba1      	ldr	r3, [pc, #644]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e74:	f003 0303 	and.w	r3, r3, #3
 8005e78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005e7a:	4b9f      	ldr	r3, [pc, #636]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	0b1b      	lsrs	r3, r3, #12
 8005e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e86:	4b9c      	ldr	r3, [pc, #624]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005e92:	4b99      	ldr	r3, [pc, #612]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e96:	08db      	lsrs	r3, r3, #3
 8005e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8111 	beq.w	80060d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	f000 8083 	beq.w	8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	f200 80a1 	bhi.w	8006008 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d056      	beq.n	8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ed2:	e099      	b.n	8006008 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ed4:	4b88      	ldr	r3, [pc, #544]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d02d      	beq.n	8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ee0:	4b85      	ldr	r3, [pc, #532]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	08db      	lsrs	r3, r3, #3
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	4a84      	ldr	r2, [pc, #528]	; (80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0a:	4b7b      	ldr	r3, [pc, #492]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f3a:	e087      	b.n	800604c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006104 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4e:	4b6a      	ldr	r3, [pc, #424]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f7e:	e065      	b.n	800604c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f92:	4b59      	ldr	r3, [pc, #356]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fa6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fc2:	e043      	b.n	800604c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800610c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd6:	4b48      	ldr	r3, [pc, #288]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006006:	e021      	b.n	800604c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601a:	4b37      	ldr	r3, [pc, #220]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602a:	ed97 6a03 	vldr	s12, [r7, #12]
 800602e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800603e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800604a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800604c:	4b2a      	ldr	r3, [pc, #168]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	0a5b      	lsrs	r3, r3, #9
 8006052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006062:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006066:	edd7 6a07 	vldr	s13, [r7, #28]
 800606a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800606e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006072:	ee17 2a90 	vmov	r2, s15
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800607a:	4b1f      	ldr	r3, [pc, #124]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006084:	ee07 3a90 	vmov	s15, r3
 8006088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006090:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006094:	edd7 6a07 	vldr	s13, [r7, #28]
 8006098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800609c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060a0:	ee17 2a90 	vmov	r2, s15
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80060a8:	4b13      	ldr	r3, [pc, #76]	; (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	0e1b      	lsrs	r3, r3, #24
 80060ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ce:	ee17 2a90 	vmov	r2, s15
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80060d6:	e008      	b.n	80060ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	609a      	str	r2, [r3, #8]
}
 80060ea:	bf00      	nop
 80060ec:	3724      	adds	r7, #36	; 0x24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	58024400 	.word	0x58024400
 80060fc:	03d09000 	.word	0x03d09000
 8006100:	46000000 	.word	0x46000000
 8006104:	4c742400 	.word	0x4c742400
 8006108:	4a742400 	.word	0x4a742400
 800610c:	4af42400 	.word	0x4af42400

08006110 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006110:	b480      	push	{r7}
 8006112:	b089      	sub	sp, #36	; 0x24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006118:	4ba1      	ldr	r3, [pc, #644]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	f003 0303 	and.w	r3, r3, #3
 8006120:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006122:	4b9f      	ldr	r3, [pc, #636]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	0d1b      	lsrs	r3, r3, #20
 8006128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800612c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800612e:	4b9c      	ldr	r3, [pc, #624]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006132:	0a1b      	lsrs	r3, r3, #8
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800613a:	4b99      	ldr	r3, [pc, #612]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800613c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613e:	08db      	lsrs	r3, r3, #3
 8006140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	fb02 f303 	mul.w	r3, r2, r3
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006152:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8111 	beq.w	8006380 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b02      	cmp	r3, #2
 8006162:	f000 8083 	beq.w	800626c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	2b02      	cmp	r3, #2
 800616a:	f200 80a1 	bhi.w	80062b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d056      	beq.n	8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800617a:	e099      	b.n	80062b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800617c:	4b88      	ldr	r3, [pc, #544]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b00      	cmp	r3, #0
 8006186:	d02d      	beq.n	80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006188:	4b85      	ldr	r3, [pc, #532]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	08db      	lsrs	r3, r3, #3
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	4a84      	ldr	r2, [pc, #528]	; (80063a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006194:	fa22 f303 	lsr.w	r3, r2, r3
 8006198:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	ee07 3a90 	vmov	s15, r3
 80061a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b2:	4b7b      	ldr	r3, [pc, #492]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80061e2:	e087      	b.n	80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80063ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80061f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f6:	4b6a      	ldr	r3, [pc, #424]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006206:	ed97 6a03 	vldr	s12, [r7, #12]
 800620a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800620e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800621a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006226:	e065      	b.n	80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006232:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800623a:	4b59      	ldr	r3, [pc, #356]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800624a:	ed97 6a03 	vldr	s12, [r7, #12]
 800624e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800625a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800625e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800626a:	e043      	b.n	80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006276:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80063b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800627a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627e:	4b48      	ldr	r3, [pc, #288]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006292:	eddf 5a45 	vldr	s11, [pc, #276]	; 80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800629a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800629e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062ae:	e021      	b.n	80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80062be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062c2:	4b37      	ldr	r3, [pc, #220]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80062f4:	4b2a      	ldr	r3, [pc, #168]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	0a5b      	lsrs	r3, r3, #9
 80062fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800630a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800630e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800631a:	ee17 2a90 	vmov	r2, s15
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006322:	4b1f      	ldr	r3, [pc, #124]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	0c1b      	lsrs	r3, r3, #16
 8006328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632c:	ee07 3a90 	vmov	s15, r3
 8006330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006338:	ee37 7a87 	vadd.f32	s14, s15, s14
 800633c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006348:	ee17 2a90 	vmov	r2, s15
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006350:	4b13      	ldr	r3, [pc, #76]	; (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	0e1b      	lsrs	r3, r3, #24
 8006356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800636a:	edd7 6a07 	vldr	s13, [r7, #28]
 800636e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006376:	ee17 2a90 	vmov	r2, s15
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800637e:	e008      	b.n	8006392 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	609a      	str	r2, [r3, #8]
}
 8006392:	bf00      	nop
 8006394:	3724      	adds	r7, #36	; 0x24
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	58024400 	.word	0x58024400
 80063a4:	03d09000 	.word	0x03d09000
 80063a8:	46000000 	.word	0x46000000
 80063ac:	4c742400 	.word	0x4c742400
 80063b0:	4a742400 	.word	0x4a742400
 80063b4:	4af42400 	.word	0x4af42400

080063b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b089      	sub	sp, #36	; 0x24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063c0:	4ba0      	ldr	r3, [pc, #640]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80063ca:	4b9e      	ldr	r3, [pc, #632]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	091b      	lsrs	r3, r3, #4
 80063d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80063d6:	4b9b      	ldr	r3, [pc, #620]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80063e0:	4b98      	ldr	r3, [pc, #608]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e4:	08db      	lsrs	r3, r3, #3
 80063e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	fb02 f303 	mul.w	r3, r2, r3
 80063f0:	ee07 3a90 	vmov	s15, r3
 80063f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 8111 	beq.w	8006626 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	2b02      	cmp	r3, #2
 8006408:	f000 8083 	beq.w	8006512 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b02      	cmp	r3, #2
 8006410:	f200 80a1 	bhi.w	8006556 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d056      	beq.n	80064ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006420:	e099      	b.n	8006556 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006422:	4b88      	ldr	r3, [pc, #544]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d02d      	beq.n	800648a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800642e:	4b85      	ldr	r3, [pc, #532]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	08db      	lsrs	r3, r3, #3
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	4a83      	ldr	r2, [pc, #524]	; (8006648 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800643a:	fa22 f303 	lsr.w	r3, r2, r3
 800643e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	ee07 3a90 	vmov	s15, r3
 8006450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006458:	4b7a      	ldr	r3, [pc, #488]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006460:	ee07 3a90 	vmov	s15, r3
 8006464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006468:	ed97 6a03 	vldr	s12, [r7, #12]
 800646c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800664c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800647c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006484:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006488:	e087      	b.n	800659a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006494:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006650 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800649c:	4b69      	ldr	r3, [pc, #420]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a4:	ee07 3a90 	vmov	s15, r3
 80064a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80064b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800664c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80064b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064cc:	e065      	b.n	800659a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	ee07 3a90 	vmov	s15, r3
 80064d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006654 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80064dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e0:	4b58      	ldr	r3, [pc, #352]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e8:	ee07 3a90 	vmov	s15, r3
 80064ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80064f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800664c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80064f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006500:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006504:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006510:	e043      	b.n	800659a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	ee07 3a90 	vmov	s15, r3
 8006518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006524:	4b47      	ldr	r3, [pc, #284]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652c:	ee07 3a90 	vmov	s15, r3
 8006530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006534:	ed97 6a03 	vldr	s12, [r7, #12]
 8006538:	eddf 5a44 	vldr	s11, [pc, #272]	; 800664c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800653c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006550:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006554:	e021      	b.n	800659a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	ee07 3a90 	vmov	s15, r3
 800655c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006560:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006650 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006568:	4b36      	ldr	r3, [pc, #216]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006570:	ee07 3a90 	vmov	s15, r3
 8006574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006578:	ed97 6a03 	vldr	s12, [r7, #12]
 800657c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800664c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006580:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800658c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006594:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006598:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800659a:	4b2a      	ldr	r3, [pc, #168]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	0a5b      	lsrs	r3, r3, #9
 80065a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a4:	ee07 3a90 	vmov	s15, r3
 80065a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80065b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c0:	ee17 2a90 	vmov	r2, s15
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80065c8:	4b1e      	ldr	r3, [pc, #120]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065cc:	0c1b      	lsrs	r3, r3, #16
 80065ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ee:	ee17 2a90 	vmov	r2, s15
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80065f6:	4b13      	ldr	r3, [pc, #76]	; (8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	0e1b      	lsrs	r3, r3, #24
 80065fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006600:	ee07 3a90 	vmov	s15, r3
 8006604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800660c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006610:	edd7 6a07 	vldr	s13, [r7, #28]
 8006614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800661c:	ee17 2a90 	vmov	r2, s15
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006624:	e008      	b.n	8006638 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	609a      	str	r2, [r3, #8]
}
 8006638:	bf00      	nop
 800663a:	3724      	adds	r7, #36	; 0x24
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	58024400 	.word	0x58024400
 8006648:	03d09000 	.word	0x03d09000
 800664c:	46000000 	.word	0x46000000
 8006650:	4c742400 	.word	0x4c742400
 8006654:	4a742400 	.word	0x4a742400
 8006658:	4af42400 	.word	0x4af42400

0800665c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800666a:	4b53      	ldr	r3, [pc, #332]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	2b03      	cmp	r3, #3
 8006674:	d101      	bne.n	800667a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e099      	b.n	80067ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800667a:	4b4f      	ldr	r3, [pc, #316]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a4e      	ldr	r2, [pc, #312]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 8006680:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006686:	f7fb f87f 	bl	8001788 <HAL_GetTick>
 800668a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800668c:	e008      	b.n	80066a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800668e:	f7fb f87b 	bl	8001788 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e086      	b.n	80067ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066a0:	4b45      	ldr	r3, [pc, #276]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1f0      	bne.n	800668e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80066ac:	4b42      	ldr	r3, [pc, #264]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 80066ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	031b      	lsls	r3, r3, #12
 80066ba:	493f      	ldr	r1, [pc, #252]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	628b      	str	r3, [r1, #40]	; 0x28
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	025b      	lsls	r3, r3, #9
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	3b01      	subs	r3, #1
 80066dc:	041b      	lsls	r3, r3, #16
 80066de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	061b      	lsls	r3, r3, #24
 80066ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066f0:	4931      	ldr	r1, [pc, #196]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80066f6:	4b30      	ldr	r3, [pc, #192]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	492d      	ldr	r1, [pc, #180]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 8006704:	4313      	orrs	r3, r2
 8006706:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006708:	4b2b      	ldr	r3, [pc, #172]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	f023 0220 	bic.w	r2, r3, #32
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	4928      	ldr	r1, [pc, #160]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 8006716:	4313      	orrs	r3, r2
 8006718:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800671a:	4b27      	ldr	r3, [pc, #156]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	4a26      	ldr	r2, [pc, #152]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 8006720:	f023 0310 	bic.w	r3, r3, #16
 8006724:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006726:	4b24      	ldr	r3, [pc, #144]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 8006728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800672a:	4b24      	ldr	r3, [pc, #144]	; (80067bc <RCCEx_PLL2_Config+0x160>)
 800672c:	4013      	ands	r3, r2
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	69d2      	ldr	r2, [r2, #28]
 8006732:	00d2      	lsls	r2, r2, #3
 8006734:	4920      	ldr	r1, [pc, #128]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 8006736:	4313      	orrs	r3, r2
 8006738:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800673a:	4b1f      	ldr	r3, [pc, #124]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 800673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673e:	4a1e      	ldr	r2, [pc, #120]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 8006740:	f043 0310 	orr.w	r3, r3, #16
 8006744:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800674c:	4b1a      	ldr	r3, [pc, #104]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	4a19      	ldr	r2, [pc, #100]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 8006752:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006756:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006758:	e00f      	b.n	800677a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d106      	bne.n	800676e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006760:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	4a14      	ldr	r2, [pc, #80]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 8006766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800676a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800676c:	e005      	b.n	800677a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800676e:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	4a11      	ldr	r2, [pc, #68]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 8006774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006778:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800677a:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a0e      	ldr	r2, [pc, #56]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 8006780:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006786:	f7fa ffff 	bl	8001788 <HAL_GetTick>
 800678a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800678c:	e008      	b.n	80067a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800678e:	f7fa fffb 	bl	8001788 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d901      	bls.n	80067a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e006      	b.n	80067ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067a0:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <RCCEx_PLL2_Config+0x15c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0f0      	beq.n	800678e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	58024400 	.word	0x58024400
 80067bc:	ffff0007 	.word	0xffff0007

080067c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067ce:	4b53      	ldr	r3, [pc, #332]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 80067d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d101      	bne.n	80067de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e099      	b.n	8006912 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80067de:	4b4f      	ldr	r3, [pc, #316]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a4e      	ldr	r2, [pc, #312]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 80067e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ea:	f7fa ffcd 	bl	8001788 <HAL_GetTick>
 80067ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067f0:	e008      	b.n	8006804 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067f2:	f7fa ffc9 	bl	8001788 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e086      	b.n	8006912 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006804:	4b45      	ldr	r3, [pc, #276]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1f0      	bne.n	80067f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006810:	4b42      	ldr	r3, [pc, #264]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	051b      	lsls	r3, r3, #20
 800681e:	493f      	ldr	r1, [pc, #252]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 8006820:	4313      	orrs	r3, r2
 8006822:	628b      	str	r3, [r1, #40]	; 0x28
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	3b01      	subs	r3, #1
 800682a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	3b01      	subs	r3, #1
 8006834:	025b      	lsls	r3, r3, #9
 8006836:	b29b      	uxth	r3, r3
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	3b01      	subs	r3, #1
 8006840:	041b      	lsls	r3, r3, #16
 8006842:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	3b01      	subs	r3, #1
 800684e:	061b      	lsls	r3, r3, #24
 8006850:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006854:	4931      	ldr	r1, [pc, #196]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 8006856:	4313      	orrs	r3, r2
 8006858:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800685a:	4b30      	ldr	r3, [pc, #192]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	492d      	ldr	r1, [pc, #180]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 8006868:	4313      	orrs	r3, r2
 800686a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800686c:	4b2b      	ldr	r3, [pc, #172]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	4928      	ldr	r1, [pc, #160]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 800687a:	4313      	orrs	r3, r2
 800687c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800687e:	4b27      	ldr	r3, [pc, #156]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	4a26      	ldr	r2, [pc, #152]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 8006884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006888:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800688a:	4b24      	ldr	r3, [pc, #144]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 800688c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800688e:	4b24      	ldr	r3, [pc, #144]	; (8006920 <RCCEx_PLL3_Config+0x160>)
 8006890:	4013      	ands	r3, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	69d2      	ldr	r2, [r2, #28]
 8006896:	00d2      	lsls	r2, r2, #3
 8006898:	4920      	ldr	r1, [pc, #128]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 800689a:	4313      	orrs	r3, r2
 800689c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800689e:	4b1f      	ldr	r3, [pc, #124]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 80068a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a2:	4a1e      	ldr	r2, [pc, #120]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 80068a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80068b0:	4b1a      	ldr	r3, [pc, #104]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	4a19      	ldr	r2, [pc, #100]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 80068b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068bc:	e00f      	b.n	80068de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d106      	bne.n	80068d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80068c4:	4b15      	ldr	r3, [pc, #84]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	4a14      	ldr	r2, [pc, #80]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 80068ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068d0:	e005      	b.n	80068de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80068d2:	4b12      	ldr	r3, [pc, #72]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 80068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d6:	4a11      	ldr	r2, [pc, #68]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 80068d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80068de:	4b0f      	ldr	r3, [pc, #60]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a0e      	ldr	r2, [pc, #56]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 80068e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ea:	f7fa ff4d 	bl	8001788 <HAL_GetTick>
 80068ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068f0:	e008      	b.n	8006904 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80068f2:	f7fa ff49 	bl	8001788 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e006      	b.n	8006912 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <RCCEx_PLL3_Config+0x15c>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0f0      	beq.n	80068f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	58024400 	.word	0x58024400
 8006920:	ffff0007 	.word	0xffff0007

08006924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e049      	b.n	80069ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fa fd08 	bl	8001360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3304      	adds	r3, #4
 8006960:	4619      	mov	r1, r3
 8006962:	4610      	mov	r0, r2
 8006964:	f000 fa0a 	bl	8006d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d001      	beq.n	80069ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e04c      	b.n	8006a86 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a26      	ldr	r2, [pc, #152]	; (8006a94 <HAL_TIM_Base_Start+0xc0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d022      	beq.n	8006a44 <HAL_TIM_Base_Start+0x70>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a06:	d01d      	beq.n	8006a44 <HAL_TIM_Base_Start+0x70>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a22      	ldr	r2, [pc, #136]	; (8006a98 <HAL_TIM_Base_Start+0xc4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d018      	beq.n	8006a44 <HAL_TIM_Base_Start+0x70>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a21      	ldr	r2, [pc, #132]	; (8006a9c <HAL_TIM_Base_Start+0xc8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <HAL_TIM_Base_Start+0x70>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1f      	ldr	r2, [pc, #124]	; (8006aa0 <HAL_TIM_Base_Start+0xcc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00e      	beq.n	8006a44 <HAL_TIM_Base_Start+0x70>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1e      	ldr	r2, [pc, #120]	; (8006aa4 <HAL_TIM_Base_Start+0xd0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d009      	beq.n	8006a44 <HAL_TIM_Base_Start+0x70>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a1c      	ldr	r2, [pc, #112]	; (8006aa8 <HAL_TIM_Base_Start+0xd4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_TIM_Base_Start+0x70>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1b      	ldr	r2, [pc, #108]	; (8006aac <HAL_TIM_Base_Start+0xd8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d115      	bne.n	8006a70 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	4b19      	ldr	r3, [pc, #100]	; (8006ab0 <HAL_TIM_Base_Start+0xdc>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b06      	cmp	r3, #6
 8006a54:	d015      	beq.n	8006a82 <HAL_TIM_Base_Start+0xae>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a5c:	d011      	beq.n	8006a82 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 0201 	orr.w	r2, r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6e:	e008      	b.n	8006a82 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	e000      	b.n	8006a84 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40010000 	.word	0x40010000
 8006a98:	40000400 	.word	0x40000400
 8006a9c:	40000800 	.word	0x40000800
 8006aa0:	40000c00 	.word	0x40000c00
 8006aa4:	40010400 	.word	0x40010400
 8006aa8:	40001800 	.word	0x40001800
 8006aac:	40014000 	.word	0x40014000
 8006ab0:	00010007 	.word	0x00010007

08006ab4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0201 	bic.w	r2, r2, #1
 8006aca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6a1a      	ldr	r2, [r3, #32]
 8006ad2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10f      	bne.n	8006afc <HAL_TIM_Base_Stop_IT+0x48>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6a1a      	ldr	r2, [r3, #32]
 8006ae2:	f240 4344 	movw	r3, #1092	; 0x444
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d107      	bne.n	8006afc <HAL_TIM_Base_Stop_IT+0x48>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
	...

08006b14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e08f      	b.n	8006c48 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d106      	bne.n	8006b42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7fa fbc5 	bl	80012cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2202      	movs	r2, #2
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6899      	ldr	r1, [r3, #8]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	4b3e      	ldr	r3, [pc, #248]	; (8006c50 <HAL_TIM_Encoder_Init+0x13c>)
 8006b56:	400b      	ands	r3, r1
 8006b58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f000 f909 	bl	8006d7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4b31      	ldr	r3, [pc, #196]	; (8006c54 <HAL_TIM_Encoder_Init+0x140>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	021b      	lsls	r3, r3, #8
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4b2b      	ldr	r3, [pc, #172]	; (8006c58 <HAL_TIM_Encoder_Init+0x144>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4b2a      	ldr	r3, [pc, #168]	; (8006c5c <HAL_TIM_Encoder_Init+0x148>)
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	021b      	lsls	r3, r3, #8
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	011a      	lsls	r2, r3, #4
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	031b      	lsls	r3, r3, #12
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006be2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	fffebff8 	.word	0xfffebff8
 8006c54:	fffffcfc 	.word	0xfffffcfc
 8006c58:	fffff3f3 	.word	0xfffff3f3
 8006c5c:	ffff0f0f 	.word	0xffff0f0f

08006c60 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c70:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c78:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c80:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c88:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d110      	bne.n	8006cb2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d102      	bne.n	8006c9c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c96:	7b7b      	ldrb	r3, [r7, #13]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d001      	beq.n	8006ca0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e069      	b.n	8006d74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb0:	e031      	b.n	8006d16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d110      	bne.n	8006cda <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d102      	bne.n	8006cc4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cbe:	7b3b      	ldrb	r3, [r7, #12]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d001      	beq.n	8006cc8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e055      	b.n	8006d74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cd8:	e01d      	b.n	8006d16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d108      	bne.n	8006cf2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ce0:	7bbb      	ldrb	r3, [r7, #14]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d105      	bne.n	8006cf2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ce6:	7b7b      	ldrb	r3, [r7, #13]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d102      	bne.n	8006cf2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cec:	7b3b      	ldrb	r3, [r7, #12]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d001      	beq.n	8006cf6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e03e      	b.n	8006d74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2202      	movs	r2, #2
 8006d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <HAL_TIM_Encoder_Start+0xc4>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d008      	beq.n	8006d34 <HAL_TIM_Encoder_Start+0xd4>
 8006d22:	e00f      	b.n	8006d44 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 f8bf 	bl	8006eb0 <TIM_CCxChannelCmd>
      break;
 8006d32:	e016      	b.n	8006d62 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	2104      	movs	r1, #4
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 f8b7 	bl	8006eb0 <TIM_CCxChannelCmd>
      break;
 8006d42:	e00e      	b.n	8006d62 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 f8af 	bl	8006eb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2201      	movs	r2, #1
 8006d58:	2104      	movs	r1, #4
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 f8a8 	bl	8006eb0 <TIM_CCxChannelCmd>
      break;
 8006d60:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f042 0201 	orr.w	r2, r2, #1
 8006d70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a40      	ldr	r2, [pc, #256]	; (8006e90 <TIM_Base_SetConfig+0x114>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d013      	beq.n	8006dbc <TIM_Base_SetConfig+0x40>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9a:	d00f      	beq.n	8006dbc <TIM_Base_SetConfig+0x40>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a3d      	ldr	r2, [pc, #244]	; (8006e94 <TIM_Base_SetConfig+0x118>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00b      	beq.n	8006dbc <TIM_Base_SetConfig+0x40>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a3c      	ldr	r2, [pc, #240]	; (8006e98 <TIM_Base_SetConfig+0x11c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d007      	beq.n	8006dbc <TIM_Base_SetConfig+0x40>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a3b      	ldr	r2, [pc, #236]	; (8006e9c <TIM_Base_SetConfig+0x120>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d003      	beq.n	8006dbc <TIM_Base_SetConfig+0x40>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a3a      	ldr	r2, [pc, #232]	; (8006ea0 <TIM_Base_SetConfig+0x124>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d108      	bne.n	8006dce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a2f      	ldr	r2, [pc, #188]	; (8006e90 <TIM_Base_SetConfig+0x114>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d01f      	beq.n	8006e16 <TIM_Base_SetConfig+0x9a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ddc:	d01b      	beq.n	8006e16 <TIM_Base_SetConfig+0x9a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a2c      	ldr	r2, [pc, #176]	; (8006e94 <TIM_Base_SetConfig+0x118>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d017      	beq.n	8006e16 <TIM_Base_SetConfig+0x9a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a2b      	ldr	r2, [pc, #172]	; (8006e98 <TIM_Base_SetConfig+0x11c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d013      	beq.n	8006e16 <TIM_Base_SetConfig+0x9a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a2a      	ldr	r2, [pc, #168]	; (8006e9c <TIM_Base_SetConfig+0x120>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00f      	beq.n	8006e16 <TIM_Base_SetConfig+0x9a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a29      	ldr	r2, [pc, #164]	; (8006ea0 <TIM_Base_SetConfig+0x124>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00b      	beq.n	8006e16 <TIM_Base_SetConfig+0x9a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a28      	ldr	r2, [pc, #160]	; (8006ea4 <TIM_Base_SetConfig+0x128>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d007      	beq.n	8006e16 <TIM_Base_SetConfig+0x9a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a27      	ldr	r2, [pc, #156]	; (8006ea8 <TIM_Base_SetConfig+0x12c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d003      	beq.n	8006e16 <TIM_Base_SetConfig+0x9a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a26      	ldr	r2, [pc, #152]	; (8006eac <TIM_Base_SetConfig+0x130>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d108      	bne.n	8006e28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a10      	ldr	r2, [pc, #64]	; (8006e90 <TIM_Base_SetConfig+0x114>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00f      	beq.n	8006e74 <TIM_Base_SetConfig+0xf8>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a12      	ldr	r2, [pc, #72]	; (8006ea0 <TIM_Base_SetConfig+0x124>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00b      	beq.n	8006e74 <TIM_Base_SetConfig+0xf8>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a11      	ldr	r2, [pc, #68]	; (8006ea4 <TIM_Base_SetConfig+0x128>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d007      	beq.n	8006e74 <TIM_Base_SetConfig+0xf8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a10      	ldr	r2, [pc, #64]	; (8006ea8 <TIM_Base_SetConfig+0x12c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d003      	beq.n	8006e74 <TIM_Base_SetConfig+0xf8>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a0f      	ldr	r2, [pc, #60]	; (8006eac <TIM_Base_SetConfig+0x130>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d103      	bne.n	8006e7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	615a      	str	r2, [r3, #20]
}
 8006e82:	bf00      	nop
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40010000 	.word	0x40010000
 8006e94:	40000400 	.word	0x40000400
 8006e98:	40000800 	.word	0x40000800
 8006e9c:	40000c00 	.word	0x40000c00
 8006ea0:	40010400 	.word	0x40010400
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	40014400 	.word	0x40014400
 8006eac:	40014800 	.word	0x40014800

08006eb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f003 031f 	and.w	r3, r3, #31
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a1a      	ldr	r2, [r3, #32]
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	401a      	ands	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a1a      	ldr	r2, [r3, #32]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f003 031f 	and.w	r3, r3, #31
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	621a      	str	r2, [r3, #32]
}
 8006eee:	bf00      	nop
 8006ef0:	371c      	adds	r7, #28
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d101      	bne.n	8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f10:	2302      	movs	r3, #2
 8006f12:	e06d      	b.n	8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a30      	ldr	r2, [pc, #192]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d004      	beq.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a2f      	ldr	r2, [pc, #188]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d108      	bne.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a20      	ldr	r2, [pc, #128]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d022      	beq.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f86:	d01d      	beq.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a1d      	ldr	r2, [pc, #116]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d018      	beq.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a1c      	ldr	r2, [pc, #112]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d013      	beq.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a1a      	ldr	r2, [pc, #104]	; (800700c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00e      	beq.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a15      	ldr	r2, [pc, #84]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d009      	beq.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a16      	ldr	r2, [pc, #88]	; (8007010 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d004      	beq.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a15      	ldr	r2, [pc, #84]	; (8007014 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d10c      	bne.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	40010000 	.word	0x40010000
 8007000:	40010400 	.word	0x40010400
 8007004:	40000400 	.word	0x40000400
 8007008:	40000800 	.word	0x40000800
 800700c:	40000c00 	.word	0x40000c00
 8007010:	40001800 	.word	0x40001800
 8007014:	40014000 	.word	0x40014000

08007018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e042      	b.n	80070b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007030:	2b00      	cmp	r3, #0
 8007032:	d106      	bne.n	8007042 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7fa f9b1 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2224      	movs	r2, #36	; 0x24
 8007046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0201 	bic.w	r2, r2, #1
 8007058:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f8ba 	bl	80071d4 <UART_SetConfig>
 8007060:	4603      	mov	r3, r0
 8007062:	2b01      	cmp	r3, #1
 8007064:	d101      	bne.n	800706a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e022      	b.n	80070b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 ff1a 	bl	8007eac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007086:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689a      	ldr	r2, [r3, #8]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007096:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 ffa1 	bl	8007ff0 <UART_CheckIdleState>
 80070ae:	4603      	mov	r3, r0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08a      	sub	sp, #40	; 0x28
 80070bc:	af02      	add	r7, sp, #8
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	4613      	mov	r3, r2
 80070c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	d17b      	bne.n	80071ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <HAL_UART_Transmit+0x26>
 80070d8:	88fb      	ldrh	r3, [r7, #6]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e074      	b.n	80071cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2221      	movs	r2, #33	; 0x21
 80070ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070f2:	f7fa fb49 	bl	8001788 <HAL_GetTick>
 80070f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	88fa      	ldrh	r2, [r7, #6]
 80070fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	88fa      	ldrh	r2, [r7, #6]
 8007104:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007110:	d108      	bne.n	8007124 <HAL_UART_Transmit+0x6c>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d104      	bne.n	8007124 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800711a:	2300      	movs	r3, #0
 800711c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	61bb      	str	r3, [r7, #24]
 8007122:	e003      	b.n	800712c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007128:	2300      	movs	r3, #0
 800712a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800712c:	e030      	b.n	8007190 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2200      	movs	r2, #0
 8007136:	2180      	movs	r1, #128	; 0x80
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f001 f803 	bl	8008144 <UART_WaitOnFlagUntilTimeout>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d005      	beq.n	8007150 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2220      	movs	r2, #32
 8007148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e03d      	b.n	80071cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10b      	bne.n	800716e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007164:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	3302      	adds	r3, #2
 800716a:	61bb      	str	r3, [r7, #24]
 800716c:	e007      	b.n	800717e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	781a      	ldrb	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	3301      	adds	r3, #1
 800717c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007184:	b29b      	uxth	r3, r3
 8007186:	3b01      	subs	r3, #1
 8007188:	b29a      	uxth	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1c8      	bne.n	800712e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2200      	movs	r2, #0
 80071a4:	2140      	movs	r1, #64	; 0x40
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 ffcc 	bl	8008144 <UART_WaitOnFlagUntilTimeout>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e006      	b.n	80071cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2220      	movs	r2, #32
 80071c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	e000      	b.n	80071cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80071ca:	2302      	movs	r3, #2
  }
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3720      	adds	r7, #32
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071d8:	b092      	sub	sp, #72	; 0x48
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	431a      	orrs	r2, r3
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	4bbe      	ldr	r3, [pc, #760]	; (80074fc <UART_SetConfig+0x328>)
 8007204:	4013      	ands	r3, r2
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	6812      	ldr	r2, [r2, #0]
 800720a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800720c:	430b      	orrs	r3, r1
 800720e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4ab3      	ldr	r2, [pc, #716]	; (8007500 <UART_SetConfig+0x32c>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d004      	beq.n	8007240 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800723c:	4313      	orrs	r3, r2
 800723e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	4baf      	ldr	r3, [pc, #700]	; (8007504 <UART_SetConfig+0x330>)
 8007248:	4013      	ands	r3, r2
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	6812      	ldr	r2, [r2, #0]
 800724e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007250:	430b      	orrs	r3, r1
 8007252:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725a:	f023 010f 	bic.w	r1, r3, #15
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4aa6      	ldr	r2, [pc, #664]	; (8007508 <UART_SetConfig+0x334>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d177      	bne.n	8007364 <UART_SetConfig+0x190>
 8007274:	4ba5      	ldr	r3, [pc, #660]	; (800750c <UART_SetConfig+0x338>)
 8007276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007278:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800727c:	2b28      	cmp	r3, #40	; 0x28
 800727e:	d86d      	bhi.n	800735c <UART_SetConfig+0x188>
 8007280:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <UART_SetConfig+0xb4>)
 8007282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007286:	bf00      	nop
 8007288:	0800732d 	.word	0x0800732d
 800728c:	0800735d 	.word	0x0800735d
 8007290:	0800735d 	.word	0x0800735d
 8007294:	0800735d 	.word	0x0800735d
 8007298:	0800735d 	.word	0x0800735d
 800729c:	0800735d 	.word	0x0800735d
 80072a0:	0800735d 	.word	0x0800735d
 80072a4:	0800735d 	.word	0x0800735d
 80072a8:	08007335 	.word	0x08007335
 80072ac:	0800735d 	.word	0x0800735d
 80072b0:	0800735d 	.word	0x0800735d
 80072b4:	0800735d 	.word	0x0800735d
 80072b8:	0800735d 	.word	0x0800735d
 80072bc:	0800735d 	.word	0x0800735d
 80072c0:	0800735d 	.word	0x0800735d
 80072c4:	0800735d 	.word	0x0800735d
 80072c8:	0800733d 	.word	0x0800733d
 80072cc:	0800735d 	.word	0x0800735d
 80072d0:	0800735d 	.word	0x0800735d
 80072d4:	0800735d 	.word	0x0800735d
 80072d8:	0800735d 	.word	0x0800735d
 80072dc:	0800735d 	.word	0x0800735d
 80072e0:	0800735d 	.word	0x0800735d
 80072e4:	0800735d 	.word	0x0800735d
 80072e8:	08007345 	.word	0x08007345
 80072ec:	0800735d 	.word	0x0800735d
 80072f0:	0800735d 	.word	0x0800735d
 80072f4:	0800735d 	.word	0x0800735d
 80072f8:	0800735d 	.word	0x0800735d
 80072fc:	0800735d 	.word	0x0800735d
 8007300:	0800735d 	.word	0x0800735d
 8007304:	0800735d 	.word	0x0800735d
 8007308:	0800734d 	.word	0x0800734d
 800730c:	0800735d 	.word	0x0800735d
 8007310:	0800735d 	.word	0x0800735d
 8007314:	0800735d 	.word	0x0800735d
 8007318:	0800735d 	.word	0x0800735d
 800731c:	0800735d 	.word	0x0800735d
 8007320:	0800735d 	.word	0x0800735d
 8007324:	0800735d 	.word	0x0800735d
 8007328:	08007355 	.word	0x08007355
 800732c:	2301      	movs	r3, #1
 800732e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007332:	e326      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007334:	2304      	movs	r3, #4
 8007336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733a:	e322      	b.n	8007982 <UART_SetConfig+0x7ae>
 800733c:	2308      	movs	r3, #8
 800733e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007342:	e31e      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007344:	2310      	movs	r3, #16
 8007346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734a:	e31a      	b.n	8007982 <UART_SetConfig+0x7ae>
 800734c:	2320      	movs	r3, #32
 800734e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007352:	e316      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007354:	2340      	movs	r3, #64	; 0x40
 8007356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800735a:	e312      	b.n	8007982 <UART_SetConfig+0x7ae>
 800735c:	2380      	movs	r3, #128	; 0x80
 800735e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007362:	e30e      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a69      	ldr	r2, [pc, #420]	; (8007510 <UART_SetConfig+0x33c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d130      	bne.n	80073d0 <UART_SetConfig+0x1fc>
 800736e:	4b67      	ldr	r3, [pc, #412]	; (800750c <UART_SetConfig+0x338>)
 8007370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	2b05      	cmp	r3, #5
 8007378:	d826      	bhi.n	80073c8 <UART_SetConfig+0x1f4>
 800737a:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <UART_SetConfig+0x1ac>)
 800737c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007380:	08007399 	.word	0x08007399
 8007384:	080073a1 	.word	0x080073a1
 8007388:	080073a9 	.word	0x080073a9
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073b9 	.word	0x080073b9
 8007394:	080073c1 	.word	0x080073c1
 8007398:	2300      	movs	r3, #0
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739e:	e2f0      	b.n	8007982 <UART_SetConfig+0x7ae>
 80073a0:	2304      	movs	r3, #4
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a6:	e2ec      	b.n	8007982 <UART_SetConfig+0x7ae>
 80073a8:	2308      	movs	r3, #8
 80073aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ae:	e2e8      	b.n	8007982 <UART_SetConfig+0x7ae>
 80073b0:	2310      	movs	r3, #16
 80073b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b6:	e2e4      	b.n	8007982 <UART_SetConfig+0x7ae>
 80073b8:	2320      	movs	r3, #32
 80073ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073be:	e2e0      	b.n	8007982 <UART_SetConfig+0x7ae>
 80073c0:	2340      	movs	r3, #64	; 0x40
 80073c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073c6:	e2dc      	b.n	8007982 <UART_SetConfig+0x7ae>
 80073c8:	2380      	movs	r3, #128	; 0x80
 80073ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ce:	e2d8      	b.n	8007982 <UART_SetConfig+0x7ae>
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a4f      	ldr	r2, [pc, #316]	; (8007514 <UART_SetConfig+0x340>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d130      	bne.n	800743c <UART_SetConfig+0x268>
 80073da:	4b4c      	ldr	r3, [pc, #304]	; (800750c <UART_SetConfig+0x338>)
 80073dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073de:	f003 0307 	and.w	r3, r3, #7
 80073e2:	2b05      	cmp	r3, #5
 80073e4:	d826      	bhi.n	8007434 <UART_SetConfig+0x260>
 80073e6:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <UART_SetConfig+0x218>)
 80073e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ec:	08007405 	.word	0x08007405
 80073f0:	0800740d 	.word	0x0800740d
 80073f4:	08007415 	.word	0x08007415
 80073f8:	0800741d 	.word	0x0800741d
 80073fc:	08007425 	.word	0x08007425
 8007400:	0800742d 	.word	0x0800742d
 8007404:	2300      	movs	r3, #0
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740a:	e2ba      	b.n	8007982 <UART_SetConfig+0x7ae>
 800740c:	2304      	movs	r3, #4
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007412:	e2b6      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007414:	2308      	movs	r3, #8
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741a:	e2b2      	b.n	8007982 <UART_SetConfig+0x7ae>
 800741c:	2310      	movs	r3, #16
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007422:	e2ae      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007424:	2320      	movs	r3, #32
 8007426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742a:	e2aa      	b.n	8007982 <UART_SetConfig+0x7ae>
 800742c:	2340      	movs	r3, #64	; 0x40
 800742e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007432:	e2a6      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007434:	2380      	movs	r3, #128	; 0x80
 8007436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800743a:	e2a2      	b.n	8007982 <UART_SetConfig+0x7ae>
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a35      	ldr	r2, [pc, #212]	; (8007518 <UART_SetConfig+0x344>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d130      	bne.n	80074a8 <UART_SetConfig+0x2d4>
 8007446:	4b31      	ldr	r3, [pc, #196]	; (800750c <UART_SetConfig+0x338>)
 8007448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744a:	f003 0307 	and.w	r3, r3, #7
 800744e:	2b05      	cmp	r3, #5
 8007450:	d826      	bhi.n	80074a0 <UART_SetConfig+0x2cc>
 8007452:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <UART_SetConfig+0x284>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	08007471 	.word	0x08007471
 800745c:	08007479 	.word	0x08007479
 8007460:	08007481 	.word	0x08007481
 8007464:	08007489 	.word	0x08007489
 8007468:	08007491 	.word	0x08007491
 800746c:	08007499 	.word	0x08007499
 8007470:	2300      	movs	r3, #0
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007476:	e284      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007478:	2304      	movs	r3, #4
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747e:	e280      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007480:	2308      	movs	r3, #8
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007486:	e27c      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007488:	2310      	movs	r3, #16
 800748a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748e:	e278      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007490:	2320      	movs	r3, #32
 8007492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007496:	e274      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007498:	2340      	movs	r3, #64	; 0x40
 800749a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800749e:	e270      	b.n	8007982 <UART_SetConfig+0x7ae>
 80074a0:	2380      	movs	r3, #128	; 0x80
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a6:	e26c      	b.n	8007982 <UART_SetConfig+0x7ae>
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a1b      	ldr	r2, [pc, #108]	; (800751c <UART_SetConfig+0x348>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d142      	bne.n	8007538 <UART_SetConfig+0x364>
 80074b2:	4b16      	ldr	r3, [pc, #88]	; (800750c <UART_SetConfig+0x338>)
 80074b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	2b05      	cmp	r3, #5
 80074bc:	d838      	bhi.n	8007530 <UART_SetConfig+0x35c>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0x2f0>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080074dd 	.word	0x080074dd
 80074c8:	080074e5 	.word	0x080074e5
 80074cc:	080074ed 	.word	0x080074ed
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	08007521 	.word	0x08007521
 80074d8:	08007529 	.word	0x08007529
 80074dc:	2300      	movs	r3, #0
 80074de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e2:	e24e      	b.n	8007982 <UART_SetConfig+0x7ae>
 80074e4:	2304      	movs	r3, #4
 80074e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ea:	e24a      	b.n	8007982 <UART_SetConfig+0x7ae>
 80074ec:	2308      	movs	r3, #8
 80074ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074f2:	e246      	b.n	8007982 <UART_SetConfig+0x7ae>
 80074f4:	2310      	movs	r3, #16
 80074f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074fa:	e242      	b.n	8007982 <UART_SetConfig+0x7ae>
 80074fc:	cfff69f3 	.word	0xcfff69f3
 8007500:	58000c00 	.word	0x58000c00
 8007504:	11fff4ff 	.word	0x11fff4ff
 8007508:	40011000 	.word	0x40011000
 800750c:	58024400 	.word	0x58024400
 8007510:	40004400 	.word	0x40004400
 8007514:	40004800 	.word	0x40004800
 8007518:	40004c00 	.word	0x40004c00
 800751c:	40005000 	.word	0x40005000
 8007520:	2320      	movs	r3, #32
 8007522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007526:	e22c      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007528:	2340      	movs	r3, #64	; 0x40
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752e:	e228      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007530:	2380      	movs	r3, #128	; 0x80
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007536:	e224      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4ab1      	ldr	r2, [pc, #708]	; (8007804 <UART_SetConfig+0x630>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d176      	bne.n	8007630 <UART_SetConfig+0x45c>
 8007542:	4bb1      	ldr	r3, [pc, #708]	; (8007808 <UART_SetConfig+0x634>)
 8007544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800754a:	2b28      	cmp	r3, #40	; 0x28
 800754c:	d86c      	bhi.n	8007628 <UART_SetConfig+0x454>
 800754e:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <UART_SetConfig+0x380>)
 8007550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007554:	080075f9 	.word	0x080075f9
 8007558:	08007629 	.word	0x08007629
 800755c:	08007629 	.word	0x08007629
 8007560:	08007629 	.word	0x08007629
 8007564:	08007629 	.word	0x08007629
 8007568:	08007629 	.word	0x08007629
 800756c:	08007629 	.word	0x08007629
 8007570:	08007629 	.word	0x08007629
 8007574:	08007601 	.word	0x08007601
 8007578:	08007629 	.word	0x08007629
 800757c:	08007629 	.word	0x08007629
 8007580:	08007629 	.word	0x08007629
 8007584:	08007629 	.word	0x08007629
 8007588:	08007629 	.word	0x08007629
 800758c:	08007629 	.word	0x08007629
 8007590:	08007629 	.word	0x08007629
 8007594:	08007609 	.word	0x08007609
 8007598:	08007629 	.word	0x08007629
 800759c:	08007629 	.word	0x08007629
 80075a0:	08007629 	.word	0x08007629
 80075a4:	08007629 	.word	0x08007629
 80075a8:	08007629 	.word	0x08007629
 80075ac:	08007629 	.word	0x08007629
 80075b0:	08007629 	.word	0x08007629
 80075b4:	08007611 	.word	0x08007611
 80075b8:	08007629 	.word	0x08007629
 80075bc:	08007629 	.word	0x08007629
 80075c0:	08007629 	.word	0x08007629
 80075c4:	08007629 	.word	0x08007629
 80075c8:	08007629 	.word	0x08007629
 80075cc:	08007629 	.word	0x08007629
 80075d0:	08007629 	.word	0x08007629
 80075d4:	08007619 	.word	0x08007619
 80075d8:	08007629 	.word	0x08007629
 80075dc:	08007629 	.word	0x08007629
 80075e0:	08007629 	.word	0x08007629
 80075e4:	08007629 	.word	0x08007629
 80075e8:	08007629 	.word	0x08007629
 80075ec:	08007629 	.word	0x08007629
 80075f0:	08007629 	.word	0x08007629
 80075f4:	08007621 	.word	0x08007621
 80075f8:	2301      	movs	r3, #1
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fe:	e1c0      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007600:	2304      	movs	r3, #4
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007606:	e1bc      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007608:	2308      	movs	r3, #8
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760e:	e1b8      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007610:	2310      	movs	r3, #16
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007616:	e1b4      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007618:	2320      	movs	r3, #32
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761e:	e1b0      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007620:	2340      	movs	r3, #64	; 0x40
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007626:	e1ac      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007628:	2380      	movs	r3, #128	; 0x80
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762e:	e1a8      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a75      	ldr	r2, [pc, #468]	; (800780c <UART_SetConfig+0x638>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d130      	bne.n	800769c <UART_SetConfig+0x4c8>
 800763a:	4b73      	ldr	r3, [pc, #460]	; (8007808 <UART_SetConfig+0x634>)
 800763c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763e:	f003 0307 	and.w	r3, r3, #7
 8007642:	2b05      	cmp	r3, #5
 8007644:	d826      	bhi.n	8007694 <UART_SetConfig+0x4c0>
 8007646:	a201      	add	r2, pc, #4	; (adr r2, 800764c <UART_SetConfig+0x478>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	08007665 	.word	0x08007665
 8007650:	0800766d 	.word	0x0800766d
 8007654:	08007675 	.word	0x08007675
 8007658:	0800767d 	.word	0x0800767d
 800765c:	08007685 	.word	0x08007685
 8007660:	0800768d 	.word	0x0800768d
 8007664:	2300      	movs	r3, #0
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766a:	e18a      	b.n	8007982 <UART_SetConfig+0x7ae>
 800766c:	2304      	movs	r3, #4
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007672:	e186      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007674:	2308      	movs	r3, #8
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767a:	e182      	b.n	8007982 <UART_SetConfig+0x7ae>
 800767c:	2310      	movs	r3, #16
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007682:	e17e      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007684:	2320      	movs	r3, #32
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800768a:	e17a      	b.n	8007982 <UART_SetConfig+0x7ae>
 800768c:	2340      	movs	r3, #64	; 0x40
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007692:	e176      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007694:	2380      	movs	r3, #128	; 0x80
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769a:	e172      	b.n	8007982 <UART_SetConfig+0x7ae>
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a5b      	ldr	r2, [pc, #364]	; (8007810 <UART_SetConfig+0x63c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d130      	bne.n	8007708 <UART_SetConfig+0x534>
 80076a6:	4b58      	ldr	r3, [pc, #352]	; (8007808 <UART_SetConfig+0x634>)
 80076a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076aa:	f003 0307 	and.w	r3, r3, #7
 80076ae:	2b05      	cmp	r3, #5
 80076b0:	d826      	bhi.n	8007700 <UART_SetConfig+0x52c>
 80076b2:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <UART_SetConfig+0x4e4>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	080076d1 	.word	0x080076d1
 80076bc:	080076d9 	.word	0x080076d9
 80076c0:	080076e1 	.word	0x080076e1
 80076c4:	080076e9 	.word	0x080076e9
 80076c8:	080076f1 	.word	0x080076f1
 80076cc:	080076f9 	.word	0x080076f9
 80076d0:	2300      	movs	r3, #0
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d6:	e154      	b.n	8007982 <UART_SetConfig+0x7ae>
 80076d8:	2304      	movs	r3, #4
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076de:	e150      	b.n	8007982 <UART_SetConfig+0x7ae>
 80076e0:	2308      	movs	r3, #8
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e6:	e14c      	b.n	8007982 <UART_SetConfig+0x7ae>
 80076e8:	2310      	movs	r3, #16
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ee:	e148      	b.n	8007982 <UART_SetConfig+0x7ae>
 80076f0:	2320      	movs	r3, #32
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f6:	e144      	b.n	8007982 <UART_SetConfig+0x7ae>
 80076f8:	2340      	movs	r3, #64	; 0x40
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fe:	e140      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007700:	2380      	movs	r3, #128	; 0x80
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007706:	e13c      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a41      	ldr	r2, [pc, #260]	; (8007814 <UART_SetConfig+0x640>)
 800770e:	4293      	cmp	r3, r2
 8007710:	f040 8082 	bne.w	8007818 <UART_SetConfig+0x644>
 8007714:	4b3c      	ldr	r3, [pc, #240]	; (8007808 <UART_SetConfig+0x634>)
 8007716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800771c:	2b28      	cmp	r3, #40	; 0x28
 800771e:	d86d      	bhi.n	80077fc <UART_SetConfig+0x628>
 8007720:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <UART_SetConfig+0x554>)
 8007722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007726:	bf00      	nop
 8007728:	080077cd 	.word	0x080077cd
 800772c:	080077fd 	.word	0x080077fd
 8007730:	080077fd 	.word	0x080077fd
 8007734:	080077fd 	.word	0x080077fd
 8007738:	080077fd 	.word	0x080077fd
 800773c:	080077fd 	.word	0x080077fd
 8007740:	080077fd 	.word	0x080077fd
 8007744:	080077fd 	.word	0x080077fd
 8007748:	080077d5 	.word	0x080077d5
 800774c:	080077fd 	.word	0x080077fd
 8007750:	080077fd 	.word	0x080077fd
 8007754:	080077fd 	.word	0x080077fd
 8007758:	080077fd 	.word	0x080077fd
 800775c:	080077fd 	.word	0x080077fd
 8007760:	080077fd 	.word	0x080077fd
 8007764:	080077fd 	.word	0x080077fd
 8007768:	080077dd 	.word	0x080077dd
 800776c:	080077fd 	.word	0x080077fd
 8007770:	080077fd 	.word	0x080077fd
 8007774:	080077fd 	.word	0x080077fd
 8007778:	080077fd 	.word	0x080077fd
 800777c:	080077fd 	.word	0x080077fd
 8007780:	080077fd 	.word	0x080077fd
 8007784:	080077fd 	.word	0x080077fd
 8007788:	080077e5 	.word	0x080077e5
 800778c:	080077fd 	.word	0x080077fd
 8007790:	080077fd 	.word	0x080077fd
 8007794:	080077fd 	.word	0x080077fd
 8007798:	080077fd 	.word	0x080077fd
 800779c:	080077fd 	.word	0x080077fd
 80077a0:	080077fd 	.word	0x080077fd
 80077a4:	080077fd 	.word	0x080077fd
 80077a8:	080077ed 	.word	0x080077ed
 80077ac:	080077fd 	.word	0x080077fd
 80077b0:	080077fd 	.word	0x080077fd
 80077b4:	080077fd 	.word	0x080077fd
 80077b8:	080077fd 	.word	0x080077fd
 80077bc:	080077fd 	.word	0x080077fd
 80077c0:	080077fd 	.word	0x080077fd
 80077c4:	080077fd 	.word	0x080077fd
 80077c8:	080077f5 	.word	0x080077f5
 80077cc:	2301      	movs	r3, #1
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d2:	e0d6      	b.n	8007982 <UART_SetConfig+0x7ae>
 80077d4:	2304      	movs	r3, #4
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077da:	e0d2      	b.n	8007982 <UART_SetConfig+0x7ae>
 80077dc:	2308      	movs	r3, #8
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	e0ce      	b.n	8007982 <UART_SetConfig+0x7ae>
 80077e4:	2310      	movs	r3, #16
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ea:	e0ca      	b.n	8007982 <UART_SetConfig+0x7ae>
 80077ec:	2320      	movs	r3, #32
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f2:	e0c6      	b.n	8007982 <UART_SetConfig+0x7ae>
 80077f4:	2340      	movs	r3, #64	; 0x40
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077fa:	e0c2      	b.n	8007982 <UART_SetConfig+0x7ae>
 80077fc:	2380      	movs	r3, #128	; 0x80
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007802:	e0be      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007804:	40011400 	.word	0x40011400
 8007808:	58024400 	.word	0x58024400
 800780c:	40007800 	.word	0x40007800
 8007810:	40007c00 	.word	0x40007c00
 8007814:	40011800 	.word	0x40011800
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4aad      	ldr	r2, [pc, #692]	; (8007ad4 <UART_SetConfig+0x900>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d176      	bne.n	8007910 <UART_SetConfig+0x73c>
 8007822:	4bad      	ldr	r3, [pc, #692]	; (8007ad8 <UART_SetConfig+0x904>)
 8007824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800782a:	2b28      	cmp	r3, #40	; 0x28
 800782c:	d86c      	bhi.n	8007908 <UART_SetConfig+0x734>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <UART_SetConfig+0x660>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	080078d9 	.word	0x080078d9
 8007838:	08007909 	.word	0x08007909
 800783c:	08007909 	.word	0x08007909
 8007840:	08007909 	.word	0x08007909
 8007844:	08007909 	.word	0x08007909
 8007848:	08007909 	.word	0x08007909
 800784c:	08007909 	.word	0x08007909
 8007850:	08007909 	.word	0x08007909
 8007854:	080078e1 	.word	0x080078e1
 8007858:	08007909 	.word	0x08007909
 800785c:	08007909 	.word	0x08007909
 8007860:	08007909 	.word	0x08007909
 8007864:	08007909 	.word	0x08007909
 8007868:	08007909 	.word	0x08007909
 800786c:	08007909 	.word	0x08007909
 8007870:	08007909 	.word	0x08007909
 8007874:	080078e9 	.word	0x080078e9
 8007878:	08007909 	.word	0x08007909
 800787c:	08007909 	.word	0x08007909
 8007880:	08007909 	.word	0x08007909
 8007884:	08007909 	.word	0x08007909
 8007888:	08007909 	.word	0x08007909
 800788c:	08007909 	.word	0x08007909
 8007890:	08007909 	.word	0x08007909
 8007894:	080078f1 	.word	0x080078f1
 8007898:	08007909 	.word	0x08007909
 800789c:	08007909 	.word	0x08007909
 80078a0:	08007909 	.word	0x08007909
 80078a4:	08007909 	.word	0x08007909
 80078a8:	08007909 	.word	0x08007909
 80078ac:	08007909 	.word	0x08007909
 80078b0:	08007909 	.word	0x08007909
 80078b4:	080078f9 	.word	0x080078f9
 80078b8:	08007909 	.word	0x08007909
 80078bc:	08007909 	.word	0x08007909
 80078c0:	08007909 	.word	0x08007909
 80078c4:	08007909 	.word	0x08007909
 80078c8:	08007909 	.word	0x08007909
 80078cc:	08007909 	.word	0x08007909
 80078d0:	08007909 	.word	0x08007909
 80078d4:	08007901 	.word	0x08007901
 80078d8:	2301      	movs	r3, #1
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078de:	e050      	b.n	8007982 <UART_SetConfig+0x7ae>
 80078e0:	2304      	movs	r3, #4
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e6:	e04c      	b.n	8007982 <UART_SetConfig+0x7ae>
 80078e8:	2308      	movs	r3, #8
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ee:	e048      	b.n	8007982 <UART_SetConfig+0x7ae>
 80078f0:	2310      	movs	r3, #16
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f6:	e044      	b.n	8007982 <UART_SetConfig+0x7ae>
 80078f8:	2320      	movs	r3, #32
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fe:	e040      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007900:	2340      	movs	r3, #64	; 0x40
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007906:	e03c      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007908:	2380      	movs	r3, #128	; 0x80
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790e:	e038      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a71      	ldr	r2, [pc, #452]	; (8007adc <UART_SetConfig+0x908>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d130      	bne.n	800797c <UART_SetConfig+0x7a8>
 800791a:	4b6f      	ldr	r3, [pc, #444]	; (8007ad8 <UART_SetConfig+0x904>)
 800791c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	2b05      	cmp	r3, #5
 8007924:	d826      	bhi.n	8007974 <UART_SetConfig+0x7a0>
 8007926:	a201      	add	r2, pc, #4	; (adr r2, 800792c <UART_SetConfig+0x758>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	08007945 	.word	0x08007945
 8007930:	0800794d 	.word	0x0800794d
 8007934:	08007955 	.word	0x08007955
 8007938:	0800795d 	.word	0x0800795d
 800793c:	08007965 	.word	0x08007965
 8007940:	0800796d 	.word	0x0800796d
 8007944:	2302      	movs	r3, #2
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794a:	e01a      	b.n	8007982 <UART_SetConfig+0x7ae>
 800794c:	2304      	movs	r3, #4
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007952:	e016      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007954:	2308      	movs	r3, #8
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795a:	e012      	b.n	8007982 <UART_SetConfig+0x7ae>
 800795c:	2310      	movs	r3, #16
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007962:	e00e      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007964:	2320      	movs	r3, #32
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796a:	e00a      	b.n	8007982 <UART_SetConfig+0x7ae>
 800796c:	2340      	movs	r3, #64	; 0x40
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007972:	e006      	b.n	8007982 <UART_SetConfig+0x7ae>
 8007974:	2380      	movs	r3, #128	; 0x80
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797a:	e002      	b.n	8007982 <UART_SetConfig+0x7ae>
 800797c:	2380      	movs	r3, #128	; 0x80
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a55      	ldr	r2, [pc, #340]	; (8007adc <UART_SetConfig+0x908>)
 8007988:	4293      	cmp	r3, r2
 800798a:	f040 80f8 	bne.w	8007b7e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800798e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007992:	2b20      	cmp	r3, #32
 8007994:	dc46      	bgt.n	8007a24 <UART_SetConfig+0x850>
 8007996:	2b02      	cmp	r3, #2
 8007998:	db75      	blt.n	8007a86 <UART_SetConfig+0x8b2>
 800799a:	3b02      	subs	r3, #2
 800799c:	2b1e      	cmp	r3, #30
 800799e:	d872      	bhi.n	8007a86 <UART_SetConfig+0x8b2>
 80079a0:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <UART_SetConfig+0x7d4>)
 80079a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a6:	bf00      	nop
 80079a8:	08007a2b 	.word	0x08007a2b
 80079ac:	08007a87 	.word	0x08007a87
 80079b0:	08007a33 	.word	0x08007a33
 80079b4:	08007a87 	.word	0x08007a87
 80079b8:	08007a87 	.word	0x08007a87
 80079bc:	08007a87 	.word	0x08007a87
 80079c0:	08007a43 	.word	0x08007a43
 80079c4:	08007a87 	.word	0x08007a87
 80079c8:	08007a87 	.word	0x08007a87
 80079cc:	08007a87 	.word	0x08007a87
 80079d0:	08007a87 	.word	0x08007a87
 80079d4:	08007a87 	.word	0x08007a87
 80079d8:	08007a87 	.word	0x08007a87
 80079dc:	08007a87 	.word	0x08007a87
 80079e0:	08007a53 	.word	0x08007a53
 80079e4:	08007a87 	.word	0x08007a87
 80079e8:	08007a87 	.word	0x08007a87
 80079ec:	08007a87 	.word	0x08007a87
 80079f0:	08007a87 	.word	0x08007a87
 80079f4:	08007a87 	.word	0x08007a87
 80079f8:	08007a87 	.word	0x08007a87
 80079fc:	08007a87 	.word	0x08007a87
 8007a00:	08007a87 	.word	0x08007a87
 8007a04:	08007a87 	.word	0x08007a87
 8007a08:	08007a87 	.word	0x08007a87
 8007a0c:	08007a87 	.word	0x08007a87
 8007a10:	08007a87 	.word	0x08007a87
 8007a14:	08007a87 	.word	0x08007a87
 8007a18:	08007a87 	.word	0x08007a87
 8007a1c:	08007a87 	.word	0x08007a87
 8007a20:	08007a79 	.word	0x08007a79
 8007a24:	2b40      	cmp	r3, #64	; 0x40
 8007a26:	d02a      	beq.n	8007a7e <UART_SetConfig+0x8aa>
 8007a28:	e02d      	b.n	8007a86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a2a:	f7fe fa07 	bl	8005e3c <HAL_RCCEx_GetD3PCLK1Freq>
 8007a2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a30:	e02f      	b.n	8007a92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe fa16 	bl	8005e68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a40:	e027      	b.n	8007a92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a42:	f107 0318 	add.w	r3, r7, #24
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe fb62 	bl	8006110 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a50:	e01f      	b.n	8007a92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a52:	4b21      	ldr	r3, [pc, #132]	; (8007ad8 <UART_SetConfig+0x904>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d009      	beq.n	8007a72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a5e:	4b1e      	ldr	r3, [pc, #120]	; (8007ad8 <UART_SetConfig+0x904>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	08db      	lsrs	r3, r3, #3
 8007a64:	f003 0303 	and.w	r3, r3, #3
 8007a68:	4a1d      	ldr	r2, [pc, #116]	; (8007ae0 <UART_SetConfig+0x90c>)
 8007a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a70:	e00f      	b.n	8007a92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007a72:	4b1b      	ldr	r3, [pc, #108]	; (8007ae0 <UART_SetConfig+0x90c>)
 8007a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a76:	e00c      	b.n	8007a92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a78:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <UART_SetConfig+0x910>)
 8007a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a7c:	e009      	b.n	8007a92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a84:	e005      	b.n	8007a92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 81ee 	beq.w	8007e76 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	4a12      	ldr	r2, [pc, #72]	; (8007ae8 <UART_SetConfig+0x914>)
 8007aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aac:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	4413      	add	r3, r2
 8007ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d305      	bcc.n	8007aca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d910      	bls.n	8007aec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ad0:	e1d1      	b.n	8007e76 <UART_SetConfig+0xca2>
 8007ad2:	bf00      	nop
 8007ad4:	40011c00 	.word	0x40011c00
 8007ad8:	58024400 	.word	0x58024400
 8007adc:	58000c00 	.word	0x58000c00
 8007ae0:	03d09000 	.word	0x03d09000
 8007ae4:	003d0900 	.word	0x003d0900
 8007ae8:	08008ec8 	.word	0x08008ec8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aee:	2200      	movs	r2, #0
 8007af0:	60bb      	str	r3, [r7, #8]
 8007af2:	60fa      	str	r2, [r7, #12]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	4ac0      	ldr	r2, [pc, #768]	; (8007dfc <UART_SetConfig+0xc28>)
 8007afa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	2200      	movs	r2, #0
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b0e:	f7f8 fc3f 	bl	8000390 <__aeabi_uldivmod>
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4610      	mov	r0, r2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	f04f 0200 	mov.w	r2, #0
 8007b1e:	f04f 0300 	mov.w	r3, #0
 8007b22:	020b      	lsls	r3, r1, #8
 8007b24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b28:	0202      	lsls	r2, r0, #8
 8007b2a:	6979      	ldr	r1, [r7, #20]
 8007b2c:	6849      	ldr	r1, [r1, #4]
 8007b2e:	0849      	lsrs	r1, r1, #1
 8007b30:	2000      	movs	r0, #0
 8007b32:	460c      	mov	r4, r1
 8007b34:	4605      	mov	r5, r0
 8007b36:	eb12 0804 	adds.w	r8, r2, r4
 8007b3a:	eb43 0905 	adc.w	r9, r3, r5
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	469a      	mov	sl, r3
 8007b46:	4693      	mov	fp, r2
 8007b48:	4652      	mov	r2, sl
 8007b4a:	465b      	mov	r3, fp
 8007b4c:	4640      	mov	r0, r8
 8007b4e:	4649      	mov	r1, r9
 8007b50:	f7f8 fc1e 	bl	8000390 <__aeabi_uldivmod>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	4613      	mov	r3, r2
 8007b5a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b62:	d308      	bcc.n	8007b76 <UART_SetConfig+0x9a2>
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b6a:	d204      	bcs.n	8007b76 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b72:	60da      	str	r2, [r3, #12]
 8007b74:	e17f      	b.n	8007e76 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b7c:	e17b      	b.n	8007e76 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b86:	f040 80bd 	bne.w	8007d04 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007b8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b8e:	2b20      	cmp	r3, #32
 8007b90:	dc48      	bgt.n	8007c24 <UART_SetConfig+0xa50>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	db7b      	blt.n	8007c8e <UART_SetConfig+0xaba>
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	d879      	bhi.n	8007c8e <UART_SetConfig+0xaba>
 8007b9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <UART_SetConfig+0x9cc>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007c2b 	.word	0x08007c2b
 8007ba4:	08007c33 	.word	0x08007c33
 8007ba8:	08007c8f 	.word	0x08007c8f
 8007bac:	08007c8f 	.word	0x08007c8f
 8007bb0:	08007c3b 	.word	0x08007c3b
 8007bb4:	08007c8f 	.word	0x08007c8f
 8007bb8:	08007c8f 	.word	0x08007c8f
 8007bbc:	08007c8f 	.word	0x08007c8f
 8007bc0:	08007c4b 	.word	0x08007c4b
 8007bc4:	08007c8f 	.word	0x08007c8f
 8007bc8:	08007c8f 	.word	0x08007c8f
 8007bcc:	08007c8f 	.word	0x08007c8f
 8007bd0:	08007c8f 	.word	0x08007c8f
 8007bd4:	08007c8f 	.word	0x08007c8f
 8007bd8:	08007c8f 	.word	0x08007c8f
 8007bdc:	08007c8f 	.word	0x08007c8f
 8007be0:	08007c5b 	.word	0x08007c5b
 8007be4:	08007c8f 	.word	0x08007c8f
 8007be8:	08007c8f 	.word	0x08007c8f
 8007bec:	08007c8f 	.word	0x08007c8f
 8007bf0:	08007c8f 	.word	0x08007c8f
 8007bf4:	08007c8f 	.word	0x08007c8f
 8007bf8:	08007c8f 	.word	0x08007c8f
 8007bfc:	08007c8f 	.word	0x08007c8f
 8007c00:	08007c8f 	.word	0x08007c8f
 8007c04:	08007c8f 	.word	0x08007c8f
 8007c08:	08007c8f 	.word	0x08007c8f
 8007c0c:	08007c8f 	.word	0x08007c8f
 8007c10:	08007c8f 	.word	0x08007c8f
 8007c14:	08007c8f 	.word	0x08007c8f
 8007c18:	08007c8f 	.word	0x08007c8f
 8007c1c:	08007c8f 	.word	0x08007c8f
 8007c20:	08007c81 	.word	0x08007c81
 8007c24:	2b40      	cmp	r3, #64	; 0x40
 8007c26:	d02e      	beq.n	8007c86 <UART_SetConfig+0xab2>
 8007c28:	e031      	b.n	8007c8e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c2a:	f7fc fa45 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 8007c2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c30:	e033      	b.n	8007c9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c32:	f7fc fa57 	bl	80040e4 <HAL_RCC_GetPCLK2Freq>
 8007c36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c38:	e02f      	b.n	8007c9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe f912 	bl	8005e68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c48:	e027      	b.n	8007c9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c4a:	f107 0318 	add.w	r3, r7, #24
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe fa5e 	bl	8006110 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c58:	e01f      	b.n	8007c9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c5a:	4b69      	ldr	r3, [pc, #420]	; (8007e00 <UART_SetConfig+0xc2c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d009      	beq.n	8007c7a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c66:	4b66      	ldr	r3, [pc, #408]	; (8007e00 <UART_SetConfig+0xc2c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	08db      	lsrs	r3, r3, #3
 8007c6c:	f003 0303 	and.w	r3, r3, #3
 8007c70:	4a64      	ldr	r2, [pc, #400]	; (8007e04 <UART_SetConfig+0xc30>)
 8007c72:	fa22 f303 	lsr.w	r3, r2, r3
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c78:	e00f      	b.n	8007c9a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007c7a:	4b62      	ldr	r3, [pc, #392]	; (8007e04 <UART_SetConfig+0xc30>)
 8007c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c7e:	e00c      	b.n	8007c9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c80:	4b61      	ldr	r3, [pc, #388]	; (8007e08 <UART_SetConfig+0xc34>)
 8007c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c84:	e009      	b.n	8007c9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c8c:	e005      	b.n	8007c9a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 80ea 	beq.w	8007e76 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	4a55      	ldr	r2, [pc, #340]	; (8007dfc <UART_SetConfig+0xc28>)
 8007ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cac:	461a      	mov	r2, r3
 8007cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cb4:	005a      	lsls	r2, r3, #1
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	085b      	lsrs	r3, r3, #1
 8007cbc:	441a      	add	r2, r3
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	2b0f      	cmp	r3, #15
 8007ccc:	d916      	bls.n	8007cfc <UART_SetConfig+0xb28>
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd4:	d212      	bcs.n	8007cfc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f023 030f 	bic.w	r3, r3, #15
 8007cde:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007cf8:	60da      	str	r2, [r3, #12]
 8007cfa:	e0bc      	b.n	8007e76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d02:	e0b8      	b.n	8007e76 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	dc4b      	bgt.n	8007da4 <UART_SetConfig+0xbd0>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f2c0 8087 	blt.w	8007e20 <UART_SetConfig+0xc4c>
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	f200 8084 	bhi.w	8007e20 <UART_SetConfig+0xc4c>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0xb4c>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007dab 	.word	0x08007dab
 8007d24:	08007db3 	.word	0x08007db3
 8007d28:	08007e21 	.word	0x08007e21
 8007d2c:	08007e21 	.word	0x08007e21
 8007d30:	08007dbb 	.word	0x08007dbb
 8007d34:	08007e21 	.word	0x08007e21
 8007d38:	08007e21 	.word	0x08007e21
 8007d3c:	08007e21 	.word	0x08007e21
 8007d40:	08007dcb 	.word	0x08007dcb
 8007d44:	08007e21 	.word	0x08007e21
 8007d48:	08007e21 	.word	0x08007e21
 8007d4c:	08007e21 	.word	0x08007e21
 8007d50:	08007e21 	.word	0x08007e21
 8007d54:	08007e21 	.word	0x08007e21
 8007d58:	08007e21 	.word	0x08007e21
 8007d5c:	08007e21 	.word	0x08007e21
 8007d60:	08007ddb 	.word	0x08007ddb
 8007d64:	08007e21 	.word	0x08007e21
 8007d68:	08007e21 	.word	0x08007e21
 8007d6c:	08007e21 	.word	0x08007e21
 8007d70:	08007e21 	.word	0x08007e21
 8007d74:	08007e21 	.word	0x08007e21
 8007d78:	08007e21 	.word	0x08007e21
 8007d7c:	08007e21 	.word	0x08007e21
 8007d80:	08007e21 	.word	0x08007e21
 8007d84:	08007e21 	.word	0x08007e21
 8007d88:	08007e21 	.word	0x08007e21
 8007d8c:	08007e21 	.word	0x08007e21
 8007d90:	08007e21 	.word	0x08007e21
 8007d94:	08007e21 	.word	0x08007e21
 8007d98:	08007e21 	.word	0x08007e21
 8007d9c:	08007e21 	.word	0x08007e21
 8007da0:	08007e13 	.word	0x08007e13
 8007da4:	2b40      	cmp	r3, #64	; 0x40
 8007da6:	d037      	beq.n	8007e18 <UART_SetConfig+0xc44>
 8007da8:	e03a      	b.n	8007e20 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007daa:	f7fc f985 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 8007dae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007db0:	e03c      	b.n	8007e2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007db2:	f7fc f997 	bl	80040e4 <HAL_RCC_GetPCLK2Freq>
 8007db6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007db8:	e038      	b.n	8007e2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe f852 	bl	8005e68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dc8:	e030      	b.n	8007e2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dca:	f107 0318 	add.w	r3, r7, #24
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe f99e 	bl	8006110 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dd8:	e028      	b.n	8007e2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dda:	4b09      	ldr	r3, [pc, #36]	; (8007e00 <UART_SetConfig+0xc2c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d012      	beq.n	8007e0c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007de6:	4b06      	ldr	r3, [pc, #24]	; (8007e00 <UART_SetConfig+0xc2c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	08db      	lsrs	r3, r3, #3
 8007dec:	f003 0303 	and.w	r3, r3, #3
 8007df0:	4a04      	ldr	r2, [pc, #16]	; (8007e04 <UART_SetConfig+0xc30>)
 8007df2:	fa22 f303 	lsr.w	r3, r2, r3
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007df8:	e018      	b.n	8007e2c <UART_SetConfig+0xc58>
 8007dfa:	bf00      	nop
 8007dfc:	08008ec8 	.word	0x08008ec8
 8007e00:	58024400 	.word	0x58024400
 8007e04:	03d09000 	.word	0x03d09000
 8007e08:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007e0c:	4b24      	ldr	r3, [pc, #144]	; (8007ea0 <UART_SetConfig+0xccc>)
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e10:	e00c      	b.n	8007e2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e12:	4b24      	ldr	r3, [pc, #144]	; (8007ea4 <UART_SetConfig+0xcd0>)
 8007e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e16:	e009      	b.n	8007e2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e1e:	e005      	b.n	8007e2c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e2a:	bf00      	nop
    }

    if (pclk != 0U)
 8007e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d021      	beq.n	8007e76 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	4a1c      	ldr	r2, [pc, #112]	; (8007ea8 <UART_SetConfig+0xcd4>)
 8007e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e40:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	085b      	lsrs	r3, r3, #1
 8007e4a:	441a      	add	r2, r3
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e54:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e58:	2b0f      	cmp	r3, #15
 8007e5a:	d909      	bls.n	8007e70 <UART_SetConfig+0xc9c>
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e62:	d205      	bcs.n	8007e70 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	60da      	str	r2, [r3, #12]
 8007e6e:	e002      	b.n	8007e76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007e92:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3748      	adds	r7, #72	; 0x48
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ea0:	03d09000 	.word	0x03d09000
 8007ea4:	003d0900 	.word	0x003d0900
 8007ea8:	08008ec8 	.word	0x08008ec8

08007eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00a      	beq.n	8007f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1e:	f003 0308 	and.w	r3, r3, #8
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00a      	beq.n	8007f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00a      	beq.n	8007f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01a      	beq.n	8007fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007faa:	d10a      	bne.n	8007fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	605a      	str	r2, [r3, #4]
  }
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b098      	sub	sp, #96	; 0x60
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008000:	f7f9 fbc2 	bl	8001788 <HAL_GetTick>
 8008004:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0308 	and.w	r3, r3, #8
 8008010:	2b08      	cmp	r3, #8
 8008012:	d12f      	bne.n	8008074 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800801c:	2200      	movs	r2, #0
 800801e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f88e 	bl	8008144 <UART_WaitOnFlagUntilTimeout>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d022      	beq.n	8008074 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800803c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008042:	653b      	str	r3, [r7, #80]	; 0x50
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800804c:	647b      	str	r3, [r7, #68]	; 0x44
 800804e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800805a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e6      	bne.n	800802e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e063      	b.n	800813c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0304 	and.w	r3, r3, #4
 800807e:	2b04      	cmp	r3, #4
 8008080:	d149      	bne.n	8008116 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008082:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800808a:	2200      	movs	r2, #0
 800808c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f857 	bl	8008144 <UART_WaitOnFlagUntilTimeout>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d03c      	beq.n	8008116 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	623b      	str	r3, [r7, #32]
   return(result);
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ba:	633b      	str	r3, [r7, #48]	; 0x30
 80080bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1e6      	bne.n	800809c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3308      	adds	r3, #8
 80080d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f023 0301 	bic.w	r3, r3, #1
 80080e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3308      	adds	r3, #8
 80080ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080ee:	61fa      	str	r2, [r7, #28]
 80080f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	69b9      	ldr	r1, [r7, #24]
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	617b      	str	r3, [r7, #20]
   return(result);
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e5      	bne.n	80080ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2220      	movs	r2, #32
 8008106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e012      	b.n	800813c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2220      	movs	r2, #32
 800811a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2220      	movs	r2, #32
 8008122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3758      	adds	r7, #88	; 0x58
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	603b      	str	r3, [r7, #0]
 8008150:	4613      	mov	r3, r2
 8008152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008154:	e049      	b.n	80081ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800815c:	d045      	beq.n	80081ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800815e:	f7f9 fb13 	bl	8001788 <HAL_GetTick>
 8008162:	4602      	mov	r2, r0
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	429a      	cmp	r2, r3
 800816c:	d302      	bcc.n	8008174 <UART_WaitOnFlagUntilTimeout+0x30>
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e048      	b.n	800820a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0304 	and.w	r3, r3, #4
 8008182:	2b00      	cmp	r3, #0
 8008184:	d031      	beq.n	80081ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	f003 0308 	and.w	r3, r3, #8
 8008190:	2b08      	cmp	r3, #8
 8008192:	d110      	bne.n	80081b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2208      	movs	r2, #8
 800819a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 f839 	bl	8008214 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2208      	movs	r2, #8
 80081a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e029      	b.n	800820a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081c4:	d111      	bne.n	80081ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 f81f 	bl	8008214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2220      	movs	r2, #32
 80081da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e00f      	b.n	800820a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	69da      	ldr	r2, [r3, #28]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	4013      	ands	r3, r2
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	bf0c      	ite	eq
 80081fa:	2301      	moveq	r3, #1
 80081fc:	2300      	movne	r3, #0
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	461a      	mov	r2, r3
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	429a      	cmp	r2, r3
 8008206:	d0a6      	beq.n	8008156 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008214:	b480      	push	{r7}
 8008216:	b095      	sub	sp, #84	; 0x54
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008230:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	461a      	mov	r2, r3
 8008238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800823a:	643b      	str	r3, [r7, #64]	; 0x40
 800823c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e6      	bne.n	800821c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3308      	adds	r3, #8
 8008254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	e853 3f00 	ldrex	r3, [r3]
 800825c:	61fb      	str	r3, [r7, #28]
   return(result);
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	4b1e      	ldr	r3, [pc, #120]	; (80082dc <UART_EndRxTransfer+0xc8>)
 8008262:	4013      	ands	r3, r2
 8008264:	64bb      	str	r3, [r7, #72]	; 0x48
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3308      	adds	r3, #8
 800826c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800826e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008270:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e5      	bne.n	800824e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008286:	2b01      	cmp	r3, #1
 8008288:	d118      	bne.n	80082bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	60bb      	str	r3, [r7, #8]
   return(result);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f023 0310 	bic.w	r3, r3, #16
 800829e:	647b      	str	r3, [r7, #68]	; 0x44
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	461a      	mov	r2, r3
 80082a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082a8:	61bb      	str	r3, [r7, #24]
 80082aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	6979      	ldr	r1, [r7, #20]
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	613b      	str	r3, [r7, #16]
   return(result);
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e6      	bne.n	800828a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2220      	movs	r2, #32
 80082c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	675a      	str	r2, [r3, #116]	; 0x74
}
 80082d0:	bf00      	nop
 80082d2:	3754      	adds	r7, #84	; 0x54
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	effffffe 	.word	0xeffffffe

080082e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80082f2:	2302      	movs	r3, #2
 80082f4:	e027      	b.n	8008346 <HAL_UARTEx_DisableFifoMode+0x66>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2224      	movs	r2, #36	; 0x24
 8008302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0201 	bic.w	r2, r2, #1
 800831c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008324:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2220      	movs	r2, #32
 8008338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008362:	2b01      	cmp	r3, #1
 8008364:	d101      	bne.n	800836a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008366:	2302      	movs	r3, #2
 8008368:	e02d      	b.n	80083c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2224      	movs	r2, #36	; 0x24
 8008376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0201 	bic.w	r2, r2, #1
 8008390:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f850 	bl	800844c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2220      	movs	r2, #32
 80083b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d101      	bne.n	80083e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083e2:	2302      	movs	r3, #2
 80083e4:	e02d      	b.n	8008442 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2224      	movs	r2, #36	; 0x24
 80083f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f022 0201 	bic.w	r2, r2, #1
 800840c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f812 	bl	800844c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2220      	movs	r2, #32
 8008434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008458:	2b00      	cmp	r3, #0
 800845a:	d108      	bne.n	800846e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800846c:	e031      	b.n	80084d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800846e:	2310      	movs	r3, #16
 8008470:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008472:	2310      	movs	r3, #16
 8008474:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	0e5b      	lsrs	r3, r3, #25
 800847e:	b2db      	uxtb	r3, r3
 8008480:	f003 0307 	and.w	r3, r3, #7
 8008484:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	0f5b      	lsrs	r3, r3, #29
 800848e:	b2db      	uxtb	r3, r3
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	7b3a      	ldrb	r2, [r7, #12]
 800849a:	4911      	ldr	r1, [pc, #68]	; (80084e0 <UARTEx_SetNbDataToProcess+0x94>)
 800849c:	5c8a      	ldrb	r2, [r1, r2]
 800849e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084a2:	7b3a      	ldrb	r2, [r7, #12]
 80084a4:	490f      	ldr	r1, [pc, #60]	; (80084e4 <UARTEx_SetNbDataToProcess+0x98>)
 80084a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
 80084b6:	7b7a      	ldrb	r2, [r7, #13]
 80084b8:	4909      	ldr	r1, [pc, #36]	; (80084e0 <UARTEx_SetNbDataToProcess+0x94>)
 80084ba:	5c8a      	ldrb	r2, [r1, r2]
 80084bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084c0:	7b7a      	ldrb	r2, [r7, #13]
 80084c2:	4908      	ldr	r1, [pc, #32]	; (80084e4 <UARTEx_SetNbDataToProcess+0x98>)
 80084c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80084d2:	bf00      	nop
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	08008ee0 	.word	0x08008ee0
 80084e4:	08008ee8 	.word	0x08008ee8

080084e8 <siprintf>:
 80084e8:	b40e      	push	{r1, r2, r3}
 80084ea:	b500      	push	{lr}
 80084ec:	b09c      	sub	sp, #112	; 0x70
 80084ee:	ab1d      	add	r3, sp, #116	; 0x74
 80084f0:	9002      	str	r0, [sp, #8]
 80084f2:	9006      	str	r0, [sp, #24]
 80084f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084f8:	4809      	ldr	r0, [pc, #36]	; (8008520 <siprintf+0x38>)
 80084fa:	9107      	str	r1, [sp, #28]
 80084fc:	9104      	str	r1, [sp, #16]
 80084fe:	4909      	ldr	r1, [pc, #36]	; (8008524 <siprintf+0x3c>)
 8008500:	f853 2b04 	ldr.w	r2, [r3], #4
 8008504:	9105      	str	r1, [sp, #20]
 8008506:	6800      	ldr	r0, [r0, #0]
 8008508:	9301      	str	r3, [sp, #4]
 800850a:	a902      	add	r1, sp, #8
 800850c:	f000 f992 	bl	8008834 <_svfiprintf_r>
 8008510:	9b02      	ldr	r3, [sp, #8]
 8008512:	2200      	movs	r2, #0
 8008514:	701a      	strb	r2, [r3, #0]
 8008516:	b01c      	add	sp, #112	; 0x70
 8008518:	f85d eb04 	ldr.w	lr, [sp], #4
 800851c:	b003      	add	sp, #12
 800851e:	4770      	bx	lr
 8008520:	2400005c 	.word	0x2400005c
 8008524:	ffff0208 	.word	0xffff0208

08008528 <memset>:
 8008528:	4402      	add	r2, r0
 800852a:	4603      	mov	r3, r0
 800852c:	4293      	cmp	r3, r2
 800852e:	d100      	bne.n	8008532 <memset+0xa>
 8008530:	4770      	bx	lr
 8008532:	f803 1b01 	strb.w	r1, [r3], #1
 8008536:	e7f9      	b.n	800852c <memset+0x4>

08008538 <__errno>:
 8008538:	4b01      	ldr	r3, [pc, #4]	; (8008540 <__errno+0x8>)
 800853a:	6818      	ldr	r0, [r3, #0]
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	2400005c 	.word	0x2400005c

08008544 <__libc_init_array>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	4d0d      	ldr	r5, [pc, #52]	; (800857c <__libc_init_array+0x38>)
 8008548:	4c0d      	ldr	r4, [pc, #52]	; (8008580 <__libc_init_array+0x3c>)
 800854a:	1b64      	subs	r4, r4, r5
 800854c:	10a4      	asrs	r4, r4, #2
 800854e:	2600      	movs	r6, #0
 8008550:	42a6      	cmp	r6, r4
 8008552:	d109      	bne.n	8008568 <__libc_init_array+0x24>
 8008554:	4d0b      	ldr	r5, [pc, #44]	; (8008584 <__libc_init_array+0x40>)
 8008556:	4c0c      	ldr	r4, [pc, #48]	; (8008588 <__libc_init_array+0x44>)
 8008558:	f000 fc6a 	bl	8008e30 <_init>
 800855c:	1b64      	subs	r4, r4, r5
 800855e:	10a4      	asrs	r4, r4, #2
 8008560:	2600      	movs	r6, #0
 8008562:	42a6      	cmp	r6, r4
 8008564:	d105      	bne.n	8008572 <__libc_init_array+0x2e>
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	f855 3b04 	ldr.w	r3, [r5], #4
 800856c:	4798      	blx	r3
 800856e:	3601      	adds	r6, #1
 8008570:	e7ee      	b.n	8008550 <__libc_init_array+0xc>
 8008572:	f855 3b04 	ldr.w	r3, [r5], #4
 8008576:	4798      	blx	r3
 8008578:	3601      	adds	r6, #1
 800857a:	e7f2      	b.n	8008562 <__libc_init_array+0x1e>
 800857c:	08008f2c 	.word	0x08008f2c
 8008580:	08008f2c 	.word	0x08008f2c
 8008584:	08008f2c 	.word	0x08008f2c
 8008588:	08008f30 	.word	0x08008f30

0800858c <__retarget_lock_acquire_recursive>:
 800858c:	4770      	bx	lr

0800858e <__retarget_lock_release_recursive>:
 800858e:	4770      	bx	lr

08008590 <_free_r>:
 8008590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008592:	2900      	cmp	r1, #0
 8008594:	d044      	beq.n	8008620 <_free_r+0x90>
 8008596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800859a:	9001      	str	r0, [sp, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	f1a1 0404 	sub.w	r4, r1, #4
 80085a2:	bfb8      	it	lt
 80085a4:	18e4      	addlt	r4, r4, r3
 80085a6:	f000 f8df 	bl	8008768 <__malloc_lock>
 80085aa:	4a1e      	ldr	r2, [pc, #120]	; (8008624 <_free_r+0x94>)
 80085ac:	9801      	ldr	r0, [sp, #4]
 80085ae:	6813      	ldr	r3, [r2, #0]
 80085b0:	b933      	cbnz	r3, 80085c0 <_free_r+0x30>
 80085b2:	6063      	str	r3, [r4, #4]
 80085b4:	6014      	str	r4, [r2, #0]
 80085b6:	b003      	add	sp, #12
 80085b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085bc:	f000 b8da 	b.w	8008774 <__malloc_unlock>
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	d908      	bls.n	80085d6 <_free_r+0x46>
 80085c4:	6825      	ldr	r5, [r4, #0]
 80085c6:	1961      	adds	r1, r4, r5
 80085c8:	428b      	cmp	r3, r1
 80085ca:	bf01      	itttt	eq
 80085cc:	6819      	ldreq	r1, [r3, #0]
 80085ce:	685b      	ldreq	r3, [r3, #4]
 80085d0:	1949      	addeq	r1, r1, r5
 80085d2:	6021      	streq	r1, [r4, #0]
 80085d4:	e7ed      	b.n	80085b2 <_free_r+0x22>
 80085d6:	461a      	mov	r2, r3
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	b10b      	cbz	r3, 80085e0 <_free_r+0x50>
 80085dc:	42a3      	cmp	r3, r4
 80085de:	d9fa      	bls.n	80085d6 <_free_r+0x46>
 80085e0:	6811      	ldr	r1, [r2, #0]
 80085e2:	1855      	adds	r5, r2, r1
 80085e4:	42a5      	cmp	r5, r4
 80085e6:	d10b      	bne.n	8008600 <_free_r+0x70>
 80085e8:	6824      	ldr	r4, [r4, #0]
 80085ea:	4421      	add	r1, r4
 80085ec:	1854      	adds	r4, r2, r1
 80085ee:	42a3      	cmp	r3, r4
 80085f0:	6011      	str	r1, [r2, #0]
 80085f2:	d1e0      	bne.n	80085b6 <_free_r+0x26>
 80085f4:	681c      	ldr	r4, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	6053      	str	r3, [r2, #4]
 80085fa:	440c      	add	r4, r1
 80085fc:	6014      	str	r4, [r2, #0]
 80085fe:	e7da      	b.n	80085b6 <_free_r+0x26>
 8008600:	d902      	bls.n	8008608 <_free_r+0x78>
 8008602:	230c      	movs	r3, #12
 8008604:	6003      	str	r3, [r0, #0]
 8008606:	e7d6      	b.n	80085b6 <_free_r+0x26>
 8008608:	6825      	ldr	r5, [r4, #0]
 800860a:	1961      	adds	r1, r4, r5
 800860c:	428b      	cmp	r3, r1
 800860e:	bf04      	itt	eq
 8008610:	6819      	ldreq	r1, [r3, #0]
 8008612:	685b      	ldreq	r3, [r3, #4]
 8008614:	6063      	str	r3, [r4, #4]
 8008616:	bf04      	itt	eq
 8008618:	1949      	addeq	r1, r1, r5
 800861a:	6021      	streq	r1, [r4, #0]
 800861c:	6054      	str	r4, [r2, #4]
 800861e:	e7ca      	b.n	80085b6 <_free_r+0x26>
 8008620:	b003      	add	sp, #12
 8008622:	bd30      	pop	{r4, r5, pc}
 8008624:	240310e0 	.word	0x240310e0

08008628 <sbrk_aligned>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	4e0e      	ldr	r6, [pc, #56]	; (8008664 <sbrk_aligned+0x3c>)
 800862c:	460c      	mov	r4, r1
 800862e:	6831      	ldr	r1, [r6, #0]
 8008630:	4605      	mov	r5, r0
 8008632:	b911      	cbnz	r1, 800863a <sbrk_aligned+0x12>
 8008634:	f000 fba6 	bl	8008d84 <_sbrk_r>
 8008638:	6030      	str	r0, [r6, #0]
 800863a:	4621      	mov	r1, r4
 800863c:	4628      	mov	r0, r5
 800863e:	f000 fba1 	bl	8008d84 <_sbrk_r>
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	d00a      	beq.n	800865c <sbrk_aligned+0x34>
 8008646:	1cc4      	adds	r4, r0, #3
 8008648:	f024 0403 	bic.w	r4, r4, #3
 800864c:	42a0      	cmp	r0, r4
 800864e:	d007      	beq.n	8008660 <sbrk_aligned+0x38>
 8008650:	1a21      	subs	r1, r4, r0
 8008652:	4628      	mov	r0, r5
 8008654:	f000 fb96 	bl	8008d84 <_sbrk_r>
 8008658:	3001      	adds	r0, #1
 800865a:	d101      	bne.n	8008660 <sbrk_aligned+0x38>
 800865c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008660:	4620      	mov	r0, r4
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	240310e4 	.word	0x240310e4

08008668 <_malloc_r>:
 8008668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800866c:	1ccd      	adds	r5, r1, #3
 800866e:	f025 0503 	bic.w	r5, r5, #3
 8008672:	3508      	adds	r5, #8
 8008674:	2d0c      	cmp	r5, #12
 8008676:	bf38      	it	cc
 8008678:	250c      	movcc	r5, #12
 800867a:	2d00      	cmp	r5, #0
 800867c:	4607      	mov	r7, r0
 800867e:	db01      	blt.n	8008684 <_malloc_r+0x1c>
 8008680:	42a9      	cmp	r1, r5
 8008682:	d905      	bls.n	8008690 <_malloc_r+0x28>
 8008684:	230c      	movs	r3, #12
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	2600      	movs	r6, #0
 800868a:	4630      	mov	r0, r6
 800868c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008690:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008764 <_malloc_r+0xfc>
 8008694:	f000 f868 	bl	8008768 <__malloc_lock>
 8008698:	f8d8 3000 	ldr.w	r3, [r8]
 800869c:	461c      	mov	r4, r3
 800869e:	bb5c      	cbnz	r4, 80086f8 <_malloc_r+0x90>
 80086a0:	4629      	mov	r1, r5
 80086a2:	4638      	mov	r0, r7
 80086a4:	f7ff ffc0 	bl	8008628 <sbrk_aligned>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	4604      	mov	r4, r0
 80086ac:	d155      	bne.n	800875a <_malloc_r+0xf2>
 80086ae:	f8d8 4000 	ldr.w	r4, [r8]
 80086b2:	4626      	mov	r6, r4
 80086b4:	2e00      	cmp	r6, #0
 80086b6:	d145      	bne.n	8008744 <_malloc_r+0xdc>
 80086b8:	2c00      	cmp	r4, #0
 80086ba:	d048      	beq.n	800874e <_malloc_r+0xe6>
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	4631      	mov	r1, r6
 80086c0:	4638      	mov	r0, r7
 80086c2:	eb04 0903 	add.w	r9, r4, r3
 80086c6:	f000 fb5d 	bl	8008d84 <_sbrk_r>
 80086ca:	4581      	cmp	r9, r0
 80086cc:	d13f      	bne.n	800874e <_malloc_r+0xe6>
 80086ce:	6821      	ldr	r1, [r4, #0]
 80086d0:	1a6d      	subs	r5, r5, r1
 80086d2:	4629      	mov	r1, r5
 80086d4:	4638      	mov	r0, r7
 80086d6:	f7ff ffa7 	bl	8008628 <sbrk_aligned>
 80086da:	3001      	adds	r0, #1
 80086dc:	d037      	beq.n	800874e <_malloc_r+0xe6>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	442b      	add	r3, r5
 80086e2:	6023      	str	r3, [r4, #0]
 80086e4:	f8d8 3000 	ldr.w	r3, [r8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d038      	beq.n	800875e <_malloc_r+0xf6>
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	42a2      	cmp	r2, r4
 80086f0:	d12b      	bne.n	800874a <_malloc_r+0xe2>
 80086f2:	2200      	movs	r2, #0
 80086f4:	605a      	str	r2, [r3, #4]
 80086f6:	e00f      	b.n	8008718 <_malloc_r+0xb0>
 80086f8:	6822      	ldr	r2, [r4, #0]
 80086fa:	1b52      	subs	r2, r2, r5
 80086fc:	d41f      	bmi.n	800873e <_malloc_r+0xd6>
 80086fe:	2a0b      	cmp	r2, #11
 8008700:	d917      	bls.n	8008732 <_malloc_r+0xca>
 8008702:	1961      	adds	r1, r4, r5
 8008704:	42a3      	cmp	r3, r4
 8008706:	6025      	str	r5, [r4, #0]
 8008708:	bf18      	it	ne
 800870a:	6059      	strne	r1, [r3, #4]
 800870c:	6863      	ldr	r3, [r4, #4]
 800870e:	bf08      	it	eq
 8008710:	f8c8 1000 	streq.w	r1, [r8]
 8008714:	5162      	str	r2, [r4, r5]
 8008716:	604b      	str	r3, [r1, #4]
 8008718:	4638      	mov	r0, r7
 800871a:	f104 060b 	add.w	r6, r4, #11
 800871e:	f000 f829 	bl	8008774 <__malloc_unlock>
 8008722:	f026 0607 	bic.w	r6, r6, #7
 8008726:	1d23      	adds	r3, r4, #4
 8008728:	1af2      	subs	r2, r6, r3
 800872a:	d0ae      	beq.n	800868a <_malloc_r+0x22>
 800872c:	1b9b      	subs	r3, r3, r6
 800872e:	50a3      	str	r3, [r4, r2]
 8008730:	e7ab      	b.n	800868a <_malloc_r+0x22>
 8008732:	42a3      	cmp	r3, r4
 8008734:	6862      	ldr	r2, [r4, #4]
 8008736:	d1dd      	bne.n	80086f4 <_malloc_r+0x8c>
 8008738:	f8c8 2000 	str.w	r2, [r8]
 800873c:	e7ec      	b.n	8008718 <_malloc_r+0xb0>
 800873e:	4623      	mov	r3, r4
 8008740:	6864      	ldr	r4, [r4, #4]
 8008742:	e7ac      	b.n	800869e <_malloc_r+0x36>
 8008744:	4634      	mov	r4, r6
 8008746:	6876      	ldr	r6, [r6, #4]
 8008748:	e7b4      	b.n	80086b4 <_malloc_r+0x4c>
 800874a:	4613      	mov	r3, r2
 800874c:	e7cc      	b.n	80086e8 <_malloc_r+0x80>
 800874e:	230c      	movs	r3, #12
 8008750:	603b      	str	r3, [r7, #0]
 8008752:	4638      	mov	r0, r7
 8008754:	f000 f80e 	bl	8008774 <__malloc_unlock>
 8008758:	e797      	b.n	800868a <_malloc_r+0x22>
 800875a:	6025      	str	r5, [r4, #0]
 800875c:	e7dc      	b.n	8008718 <_malloc_r+0xb0>
 800875e:	605b      	str	r3, [r3, #4]
 8008760:	deff      	udf	#255	; 0xff
 8008762:	bf00      	nop
 8008764:	240310e0 	.word	0x240310e0

08008768 <__malloc_lock>:
 8008768:	4801      	ldr	r0, [pc, #4]	; (8008770 <__malloc_lock+0x8>)
 800876a:	f7ff bf0f 	b.w	800858c <__retarget_lock_acquire_recursive>
 800876e:	bf00      	nop
 8008770:	240310dc 	.word	0x240310dc

08008774 <__malloc_unlock>:
 8008774:	4801      	ldr	r0, [pc, #4]	; (800877c <__malloc_unlock+0x8>)
 8008776:	f7ff bf0a 	b.w	800858e <__retarget_lock_release_recursive>
 800877a:	bf00      	nop
 800877c:	240310dc 	.word	0x240310dc

08008780 <__ssputs_r>:
 8008780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008784:	688e      	ldr	r6, [r1, #8]
 8008786:	461f      	mov	r7, r3
 8008788:	42be      	cmp	r6, r7
 800878a:	680b      	ldr	r3, [r1, #0]
 800878c:	4682      	mov	sl, r0
 800878e:	460c      	mov	r4, r1
 8008790:	4690      	mov	r8, r2
 8008792:	d82c      	bhi.n	80087ee <__ssputs_r+0x6e>
 8008794:	898a      	ldrh	r2, [r1, #12]
 8008796:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800879a:	d026      	beq.n	80087ea <__ssputs_r+0x6a>
 800879c:	6965      	ldr	r5, [r4, #20]
 800879e:	6909      	ldr	r1, [r1, #16]
 80087a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087a4:	eba3 0901 	sub.w	r9, r3, r1
 80087a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087ac:	1c7b      	adds	r3, r7, #1
 80087ae:	444b      	add	r3, r9
 80087b0:	106d      	asrs	r5, r5, #1
 80087b2:	429d      	cmp	r5, r3
 80087b4:	bf38      	it	cc
 80087b6:	461d      	movcc	r5, r3
 80087b8:	0553      	lsls	r3, r2, #21
 80087ba:	d527      	bpl.n	800880c <__ssputs_r+0x8c>
 80087bc:	4629      	mov	r1, r5
 80087be:	f7ff ff53 	bl	8008668 <_malloc_r>
 80087c2:	4606      	mov	r6, r0
 80087c4:	b360      	cbz	r0, 8008820 <__ssputs_r+0xa0>
 80087c6:	6921      	ldr	r1, [r4, #16]
 80087c8:	464a      	mov	r2, r9
 80087ca:	f000 faeb 	bl	8008da4 <memcpy>
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d8:	81a3      	strh	r3, [r4, #12]
 80087da:	6126      	str	r6, [r4, #16]
 80087dc:	6165      	str	r5, [r4, #20]
 80087de:	444e      	add	r6, r9
 80087e0:	eba5 0509 	sub.w	r5, r5, r9
 80087e4:	6026      	str	r6, [r4, #0]
 80087e6:	60a5      	str	r5, [r4, #8]
 80087e8:	463e      	mov	r6, r7
 80087ea:	42be      	cmp	r6, r7
 80087ec:	d900      	bls.n	80087f0 <__ssputs_r+0x70>
 80087ee:	463e      	mov	r6, r7
 80087f0:	6820      	ldr	r0, [r4, #0]
 80087f2:	4632      	mov	r2, r6
 80087f4:	4641      	mov	r1, r8
 80087f6:	f000 faab 	bl	8008d50 <memmove>
 80087fa:	68a3      	ldr	r3, [r4, #8]
 80087fc:	1b9b      	subs	r3, r3, r6
 80087fe:	60a3      	str	r3, [r4, #8]
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	4433      	add	r3, r6
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	2000      	movs	r0, #0
 8008808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880c:	462a      	mov	r2, r5
 800880e:	f000 fad7 	bl	8008dc0 <_realloc_r>
 8008812:	4606      	mov	r6, r0
 8008814:	2800      	cmp	r0, #0
 8008816:	d1e0      	bne.n	80087da <__ssputs_r+0x5a>
 8008818:	6921      	ldr	r1, [r4, #16]
 800881a:	4650      	mov	r0, sl
 800881c:	f7ff feb8 	bl	8008590 <_free_r>
 8008820:	230c      	movs	r3, #12
 8008822:	f8ca 3000 	str.w	r3, [sl]
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008832:	e7e9      	b.n	8008808 <__ssputs_r+0x88>

08008834 <_svfiprintf_r>:
 8008834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008838:	4698      	mov	r8, r3
 800883a:	898b      	ldrh	r3, [r1, #12]
 800883c:	061b      	lsls	r3, r3, #24
 800883e:	b09d      	sub	sp, #116	; 0x74
 8008840:	4607      	mov	r7, r0
 8008842:	460d      	mov	r5, r1
 8008844:	4614      	mov	r4, r2
 8008846:	d50e      	bpl.n	8008866 <_svfiprintf_r+0x32>
 8008848:	690b      	ldr	r3, [r1, #16]
 800884a:	b963      	cbnz	r3, 8008866 <_svfiprintf_r+0x32>
 800884c:	2140      	movs	r1, #64	; 0x40
 800884e:	f7ff ff0b 	bl	8008668 <_malloc_r>
 8008852:	6028      	str	r0, [r5, #0]
 8008854:	6128      	str	r0, [r5, #16]
 8008856:	b920      	cbnz	r0, 8008862 <_svfiprintf_r+0x2e>
 8008858:	230c      	movs	r3, #12
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008860:	e0d0      	b.n	8008a04 <_svfiprintf_r+0x1d0>
 8008862:	2340      	movs	r3, #64	; 0x40
 8008864:	616b      	str	r3, [r5, #20]
 8008866:	2300      	movs	r3, #0
 8008868:	9309      	str	r3, [sp, #36]	; 0x24
 800886a:	2320      	movs	r3, #32
 800886c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008870:	f8cd 800c 	str.w	r8, [sp, #12]
 8008874:	2330      	movs	r3, #48	; 0x30
 8008876:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a1c <_svfiprintf_r+0x1e8>
 800887a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800887e:	f04f 0901 	mov.w	r9, #1
 8008882:	4623      	mov	r3, r4
 8008884:	469a      	mov	sl, r3
 8008886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800888a:	b10a      	cbz	r2, 8008890 <_svfiprintf_r+0x5c>
 800888c:	2a25      	cmp	r2, #37	; 0x25
 800888e:	d1f9      	bne.n	8008884 <_svfiprintf_r+0x50>
 8008890:	ebba 0b04 	subs.w	fp, sl, r4
 8008894:	d00b      	beq.n	80088ae <_svfiprintf_r+0x7a>
 8008896:	465b      	mov	r3, fp
 8008898:	4622      	mov	r2, r4
 800889a:	4629      	mov	r1, r5
 800889c:	4638      	mov	r0, r7
 800889e:	f7ff ff6f 	bl	8008780 <__ssputs_r>
 80088a2:	3001      	adds	r0, #1
 80088a4:	f000 80a9 	beq.w	80089fa <_svfiprintf_r+0x1c6>
 80088a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088aa:	445a      	add	r2, fp
 80088ac:	9209      	str	r2, [sp, #36]	; 0x24
 80088ae:	f89a 3000 	ldrb.w	r3, [sl]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 80a1 	beq.w	80089fa <_svfiprintf_r+0x1c6>
 80088b8:	2300      	movs	r3, #0
 80088ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088c2:	f10a 0a01 	add.w	sl, sl, #1
 80088c6:	9304      	str	r3, [sp, #16]
 80088c8:	9307      	str	r3, [sp, #28]
 80088ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088ce:	931a      	str	r3, [sp, #104]	; 0x68
 80088d0:	4654      	mov	r4, sl
 80088d2:	2205      	movs	r2, #5
 80088d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d8:	4850      	ldr	r0, [pc, #320]	; (8008a1c <_svfiprintf_r+0x1e8>)
 80088da:	f7f7 fd09 	bl	80002f0 <memchr>
 80088de:	9a04      	ldr	r2, [sp, #16]
 80088e0:	b9d8      	cbnz	r0, 800891a <_svfiprintf_r+0xe6>
 80088e2:	06d0      	lsls	r0, r2, #27
 80088e4:	bf44      	itt	mi
 80088e6:	2320      	movmi	r3, #32
 80088e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ec:	0711      	lsls	r1, r2, #28
 80088ee:	bf44      	itt	mi
 80088f0:	232b      	movmi	r3, #43	; 0x2b
 80088f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088f6:	f89a 3000 	ldrb.w	r3, [sl]
 80088fa:	2b2a      	cmp	r3, #42	; 0x2a
 80088fc:	d015      	beq.n	800892a <_svfiprintf_r+0xf6>
 80088fe:	9a07      	ldr	r2, [sp, #28]
 8008900:	4654      	mov	r4, sl
 8008902:	2000      	movs	r0, #0
 8008904:	f04f 0c0a 	mov.w	ip, #10
 8008908:	4621      	mov	r1, r4
 800890a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800890e:	3b30      	subs	r3, #48	; 0x30
 8008910:	2b09      	cmp	r3, #9
 8008912:	d94d      	bls.n	80089b0 <_svfiprintf_r+0x17c>
 8008914:	b1b0      	cbz	r0, 8008944 <_svfiprintf_r+0x110>
 8008916:	9207      	str	r2, [sp, #28]
 8008918:	e014      	b.n	8008944 <_svfiprintf_r+0x110>
 800891a:	eba0 0308 	sub.w	r3, r0, r8
 800891e:	fa09 f303 	lsl.w	r3, r9, r3
 8008922:	4313      	orrs	r3, r2
 8008924:	9304      	str	r3, [sp, #16]
 8008926:	46a2      	mov	sl, r4
 8008928:	e7d2      	b.n	80088d0 <_svfiprintf_r+0x9c>
 800892a:	9b03      	ldr	r3, [sp, #12]
 800892c:	1d19      	adds	r1, r3, #4
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	9103      	str	r1, [sp, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	bfbb      	ittet	lt
 8008936:	425b      	neglt	r3, r3
 8008938:	f042 0202 	orrlt.w	r2, r2, #2
 800893c:	9307      	strge	r3, [sp, #28]
 800893e:	9307      	strlt	r3, [sp, #28]
 8008940:	bfb8      	it	lt
 8008942:	9204      	strlt	r2, [sp, #16]
 8008944:	7823      	ldrb	r3, [r4, #0]
 8008946:	2b2e      	cmp	r3, #46	; 0x2e
 8008948:	d10c      	bne.n	8008964 <_svfiprintf_r+0x130>
 800894a:	7863      	ldrb	r3, [r4, #1]
 800894c:	2b2a      	cmp	r3, #42	; 0x2a
 800894e:	d134      	bne.n	80089ba <_svfiprintf_r+0x186>
 8008950:	9b03      	ldr	r3, [sp, #12]
 8008952:	1d1a      	adds	r2, r3, #4
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	9203      	str	r2, [sp, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	bfb8      	it	lt
 800895c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008960:	3402      	adds	r4, #2
 8008962:	9305      	str	r3, [sp, #20]
 8008964:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008a2c <_svfiprintf_r+0x1f8>
 8008968:	7821      	ldrb	r1, [r4, #0]
 800896a:	2203      	movs	r2, #3
 800896c:	4650      	mov	r0, sl
 800896e:	f7f7 fcbf 	bl	80002f0 <memchr>
 8008972:	b138      	cbz	r0, 8008984 <_svfiprintf_r+0x150>
 8008974:	9b04      	ldr	r3, [sp, #16]
 8008976:	eba0 000a 	sub.w	r0, r0, sl
 800897a:	2240      	movs	r2, #64	; 0x40
 800897c:	4082      	lsls	r2, r0
 800897e:	4313      	orrs	r3, r2
 8008980:	3401      	adds	r4, #1
 8008982:	9304      	str	r3, [sp, #16]
 8008984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008988:	4825      	ldr	r0, [pc, #148]	; (8008a20 <_svfiprintf_r+0x1ec>)
 800898a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800898e:	2206      	movs	r2, #6
 8008990:	f7f7 fcae 	bl	80002f0 <memchr>
 8008994:	2800      	cmp	r0, #0
 8008996:	d038      	beq.n	8008a0a <_svfiprintf_r+0x1d6>
 8008998:	4b22      	ldr	r3, [pc, #136]	; (8008a24 <_svfiprintf_r+0x1f0>)
 800899a:	bb1b      	cbnz	r3, 80089e4 <_svfiprintf_r+0x1b0>
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	3307      	adds	r3, #7
 80089a0:	f023 0307 	bic.w	r3, r3, #7
 80089a4:	3308      	adds	r3, #8
 80089a6:	9303      	str	r3, [sp, #12]
 80089a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089aa:	4433      	add	r3, r6
 80089ac:	9309      	str	r3, [sp, #36]	; 0x24
 80089ae:	e768      	b.n	8008882 <_svfiprintf_r+0x4e>
 80089b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80089b4:	460c      	mov	r4, r1
 80089b6:	2001      	movs	r0, #1
 80089b8:	e7a6      	b.n	8008908 <_svfiprintf_r+0xd4>
 80089ba:	2300      	movs	r3, #0
 80089bc:	3401      	adds	r4, #1
 80089be:	9305      	str	r3, [sp, #20]
 80089c0:	4619      	mov	r1, r3
 80089c2:	f04f 0c0a 	mov.w	ip, #10
 80089c6:	4620      	mov	r0, r4
 80089c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089cc:	3a30      	subs	r2, #48	; 0x30
 80089ce:	2a09      	cmp	r2, #9
 80089d0:	d903      	bls.n	80089da <_svfiprintf_r+0x1a6>
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0c6      	beq.n	8008964 <_svfiprintf_r+0x130>
 80089d6:	9105      	str	r1, [sp, #20]
 80089d8:	e7c4      	b.n	8008964 <_svfiprintf_r+0x130>
 80089da:	fb0c 2101 	mla	r1, ip, r1, r2
 80089de:	4604      	mov	r4, r0
 80089e0:	2301      	movs	r3, #1
 80089e2:	e7f0      	b.n	80089c6 <_svfiprintf_r+0x192>
 80089e4:	ab03      	add	r3, sp, #12
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	462a      	mov	r2, r5
 80089ea:	4b0f      	ldr	r3, [pc, #60]	; (8008a28 <_svfiprintf_r+0x1f4>)
 80089ec:	a904      	add	r1, sp, #16
 80089ee:	4638      	mov	r0, r7
 80089f0:	f3af 8000 	nop.w
 80089f4:	1c42      	adds	r2, r0, #1
 80089f6:	4606      	mov	r6, r0
 80089f8:	d1d6      	bne.n	80089a8 <_svfiprintf_r+0x174>
 80089fa:	89ab      	ldrh	r3, [r5, #12]
 80089fc:	065b      	lsls	r3, r3, #25
 80089fe:	f53f af2d 	bmi.w	800885c <_svfiprintf_r+0x28>
 8008a02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a04:	b01d      	add	sp, #116	; 0x74
 8008a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0a:	ab03      	add	r3, sp, #12
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	462a      	mov	r2, r5
 8008a10:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <_svfiprintf_r+0x1f4>)
 8008a12:	a904      	add	r1, sp, #16
 8008a14:	4638      	mov	r0, r7
 8008a16:	f000 f879 	bl	8008b0c <_printf_i>
 8008a1a:	e7eb      	b.n	80089f4 <_svfiprintf_r+0x1c0>
 8008a1c:	08008ef0 	.word	0x08008ef0
 8008a20:	08008efa 	.word	0x08008efa
 8008a24:	00000000 	.word	0x00000000
 8008a28:	08008781 	.word	0x08008781
 8008a2c:	08008ef6 	.word	0x08008ef6

08008a30 <_printf_common>:
 8008a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a34:	4616      	mov	r6, r2
 8008a36:	4699      	mov	r9, r3
 8008a38:	688a      	ldr	r2, [r1, #8]
 8008a3a:	690b      	ldr	r3, [r1, #16]
 8008a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a40:	4293      	cmp	r3, r2
 8008a42:	bfb8      	it	lt
 8008a44:	4613      	movlt	r3, r2
 8008a46:	6033      	str	r3, [r6, #0]
 8008a48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	460c      	mov	r4, r1
 8008a50:	b10a      	cbz	r2, 8008a56 <_printf_common+0x26>
 8008a52:	3301      	adds	r3, #1
 8008a54:	6033      	str	r3, [r6, #0]
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	0699      	lsls	r1, r3, #26
 8008a5a:	bf42      	ittt	mi
 8008a5c:	6833      	ldrmi	r3, [r6, #0]
 8008a5e:	3302      	addmi	r3, #2
 8008a60:	6033      	strmi	r3, [r6, #0]
 8008a62:	6825      	ldr	r5, [r4, #0]
 8008a64:	f015 0506 	ands.w	r5, r5, #6
 8008a68:	d106      	bne.n	8008a78 <_printf_common+0x48>
 8008a6a:	f104 0a19 	add.w	sl, r4, #25
 8008a6e:	68e3      	ldr	r3, [r4, #12]
 8008a70:	6832      	ldr	r2, [r6, #0]
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	42ab      	cmp	r3, r5
 8008a76:	dc26      	bgt.n	8008ac6 <_printf_common+0x96>
 8008a78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a7c:	1e13      	subs	r3, r2, #0
 8008a7e:	6822      	ldr	r2, [r4, #0]
 8008a80:	bf18      	it	ne
 8008a82:	2301      	movne	r3, #1
 8008a84:	0692      	lsls	r2, r2, #26
 8008a86:	d42b      	bmi.n	8008ae0 <_printf_common+0xb0>
 8008a88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a8c:	4649      	mov	r1, r9
 8008a8e:	4638      	mov	r0, r7
 8008a90:	47c0      	blx	r8
 8008a92:	3001      	adds	r0, #1
 8008a94:	d01e      	beq.n	8008ad4 <_printf_common+0xa4>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	6922      	ldr	r2, [r4, #16]
 8008a9a:	f003 0306 	and.w	r3, r3, #6
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	bf02      	ittt	eq
 8008aa2:	68e5      	ldreq	r5, [r4, #12]
 8008aa4:	6833      	ldreq	r3, [r6, #0]
 8008aa6:	1aed      	subeq	r5, r5, r3
 8008aa8:	68a3      	ldr	r3, [r4, #8]
 8008aaa:	bf0c      	ite	eq
 8008aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ab0:	2500      	movne	r5, #0
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	bfc4      	itt	gt
 8008ab6:	1a9b      	subgt	r3, r3, r2
 8008ab8:	18ed      	addgt	r5, r5, r3
 8008aba:	2600      	movs	r6, #0
 8008abc:	341a      	adds	r4, #26
 8008abe:	42b5      	cmp	r5, r6
 8008ac0:	d11a      	bne.n	8008af8 <_printf_common+0xc8>
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	e008      	b.n	8008ad8 <_printf_common+0xa8>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	4652      	mov	r2, sl
 8008aca:	4649      	mov	r1, r9
 8008acc:	4638      	mov	r0, r7
 8008ace:	47c0      	blx	r8
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d103      	bne.n	8008adc <_printf_common+0xac>
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008adc:	3501      	adds	r5, #1
 8008ade:	e7c6      	b.n	8008a6e <_printf_common+0x3e>
 8008ae0:	18e1      	adds	r1, r4, r3
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	2030      	movs	r0, #48	; 0x30
 8008ae6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008aea:	4422      	add	r2, r4
 8008aec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008af4:	3302      	adds	r3, #2
 8008af6:	e7c7      	b.n	8008a88 <_printf_common+0x58>
 8008af8:	2301      	movs	r3, #1
 8008afa:	4622      	mov	r2, r4
 8008afc:	4649      	mov	r1, r9
 8008afe:	4638      	mov	r0, r7
 8008b00:	47c0      	blx	r8
 8008b02:	3001      	adds	r0, #1
 8008b04:	d0e6      	beq.n	8008ad4 <_printf_common+0xa4>
 8008b06:	3601      	adds	r6, #1
 8008b08:	e7d9      	b.n	8008abe <_printf_common+0x8e>
	...

08008b0c <_printf_i>:
 8008b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b10:	7e0f      	ldrb	r7, [r1, #24]
 8008b12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b14:	2f78      	cmp	r7, #120	; 0x78
 8008b16:	4691      	mov	r9, r2
 8008b18:	4680      	mov	r8, r0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	469a      	mov	sl, r3
 8008b1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b22:	d807      	bhi.n	8008b34 <_printf_i+0x28>
 8008b24:	2f62      	cmp	r7, #98	; 0x62
 8008b26:	d80a      	bhi.n	8008b3e <_printf_i+0x32>
 8008b28:	2f00      	cmp	r7, #0
 8008b2a:	f000 80d4 	beq.w	8008cd6 <_printf_i+0x1ca>
 8008b2e:	2f58      	cmp	r7, #88	; 0x58
 8008b30:	f000 80c0 	beq.w	8008cb4 <_printf_i+0x1a8>
 8008b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b3c:	e03a      	b.n	8008bb4 <_printf_i+0xa8>
 8008b3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b42:	2b15      	cmp	r3, #21
 8008b44:	d8f6      	bhi.n	8008b34 <_printf_i+0x28>
 8008b46:	a101      	add	r1, pc, #4	; (adr r1, 8008b4c <_printf_i+0x40>)
 8008b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b4c:	08008ba5 	.word	0x08008ba5
 8008b50:	08008bb9 	.word	0x08008bb9
 8008b54:	08008b35 	.word	0x08008b35
 8008b58:	08008b35 	.word	0x08008b35
 8008b5c:	08008b35 	.word	0x08008b35
 8008b60:	08008b35 	.word	0x08008b35
 8008b64:	08008bb9 	.word	0x08008bb9
 8008b68:	08008b35 	.word	0x08008b35
 8008b6c:	08008b35 	.word	0x08008b35
 8008b70:	08008b35 	.word	0x08008b35
 8008b74:	08008b35 	.word	0x08008b35
 8008b78:	08008cbd 	.word	0x08008cbd
 8008b7c:	08008be5 	.word	0x08008be5
 8008b80:	08008c77 	.word	0x08008c77
 8008b84:	08008b35 	.word	0x08008b35
 8008b88:	08008b35 	.word	0x08008b35
 8008b8c:	08008cdf 	.word	0x08008cdf
 8008b90:	08008b35 	.word	0x08008b35
 8008b94:	08008be5 	.word	0x08008be5
 8008b98:	08008b35 	.word	0x08008b35
 8008b9c:	08008b35 	.word	0x08008b35
 8008ba0:	08008c7f 	.word	0x08008c7f
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	1d1a      	adds	r2, r3, #4
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	602a      	str	r2, [r5, #0]
 8008bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e09f      	b.n	8008cf8 <_printf_i+0x1ec>
 8008bb8:	6820      	ldr	r0, [r4, #0]
 8008bba:	682b      	ldr	r3, [r5, #0]
 8008bbc:	0607      	lsls	r7, r0, #24
 8008bbe:	f103 0104 	add.w	r1, r3, #4
 8008bc2:	6029      	str	r1, [r5, #0]
 8008bc4:	d501      	bpl.n	8008bca <_printf_i+0xbe>
 8008bc6:	681e      	ldr	r6, [r3, #0]
 8008bc8:	e003      	b.n	8008bd2 <_printf_i+0xc6>
 8008bca:	0646      	lsls	r6, r0, #25
 8008bcc:	d5fb      	bpl.n	8008bc6 <_printf_i+0xba>
 8008bce:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	da03      	bge.n	8008bde <_printf_i+0xd2>
 8008bd6:	232d      	movs	r3, #45	; 0x2d
 8008bd8:	4276      	negs	r6, r6
 8008bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bde:	485a      	ldr	r0, [pc, #360]	; (8008d48 <_printf_i+0x23c>)
 8008be0:	230a      	movs	r3, #10
 8008be2:	e012      	b.n	8008c0a <_printf_i+0xfe>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	6820      	ldr	r0, [r4, #0]
 8008be8:	1d19      	adds	r1, r3, #4
 8008bea:	6029      	str	r1, [r5, #0]
 8008bec:	0605      	lsls	r5, r0, #24
 8008bee:	d501      	bpl.n	8008bf4 <_printf_i+0xe8>
 8008bf0:	681e      	ldr	r6, [r3, #0]
 8008bf2:	e002      	b.n	8008bfa <_printf_i+0xee>
 8008bf4:	0641      	lsls	r1, r0, #25
 8008bf6:	d5fb      	bpl.n	8008bf0 <_printf_i+0xe4>
 8008bf8:	881e      	ldrh	r6, [r3, #0]
 8008bfa:	4853      	ldr	r0, [pc, #332]	; (8008d48 <_printf_i+0x23c>)
 8008bfc:	2f6f      	cmp	r7, #111	; 0x6f
 8008bfe:	bf0c      	ite	eq
 8008c00:	2308      	moveq	r3, #8
 8008c02:	230a      	movne	r3, #10
 8008c04:	2100      	movs	r1, #0
 8008c06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c0a:	6865      	ldr	r5, [r4, #4]
 8008c0c:	60a5      	str	r5, [r4, #8]
 8008c0e:	2d00      	cmp	r5, #0
 8008c10:	bfa2      	ittt	ge
 8008c12:	6821      	ldrge	r1, [r4, #0]
 8008c14:	f021 0104 	bicge.w	r1, r1, #4
 8008c18:	6021      	strge	r1, [r4, #0]
 8008c1a:	b90e      	cbnz	r6, 8008c20 <_printf_i+0x114>
 8008c1c:	2d00      	cmp	r5, #0
 8008c1e:	d04b      	beq.n	8008cb8 <_printf_i+0x1ac>
 8008c20:	4615      	mov	r5, r2
 8008c22:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c26:	fb03 6711 	mls	r7, r3, r1, r6
 8008c2a:	5dc7      	ldrb	r7, [r0, r7]
 8008c2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c30:	4637      	mov	r7, r6
 8008c32:	42bb      	cmp	r3, r7
 8008c34:	460e      	mov	r6, r1
 8008c36:	d9f4      	bls.n	8008c22 <_printf_i+0x116>
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d10b      	bne.n	8008c54 <_printf_i+0x148>
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	07de      	lsls	r6, r3, #31
 8008c40:	d508      	bpl.n	8008c54 <_printf_i+0x148>
 8008c42:	6923      	ldr	r3, [r4, #16]
 8008c44:	6861      	ldr	r1, [r4, #4]
 8008c46:	4299      	cmp	r1, r3
 8008c48:	bfde      	ittt	le
 8008c4a:	2330      	movle	r3, #48	; 0x30
 8008c4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008c54:	1b52      	subs	r2, r2, r5
 8008c56:	6122      	str	r2, [r4, #16]
 8008c58:	f8cd a000 	str.w	sl, [sp]
 8008c5c:	464b      	mov	r3, r9
 8008c5e:	aa03      	add	r2, sp, #12
 8008c60:	4621      	mov	r1, r4
 8008c62:	4640      	mov	r0, r8
 8008c64:	f7ff fee4 	bl	8008a30 <_printf_common>
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d14a      	bne.n	8008d02 <_printf_i+0x1f6>
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c70:	b004      	add	sp, #16
 8008c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	f043 0320 	orr.w	r3, r3, #32
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	4833      	ldr	r0, [pc, #204]	; (8008d4c <_printf_i+0x240>)
 8008c80:	2778      	movs	r7, #120	; 0x78
 8008c82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	6829      	ldr	r1, [r5, #0]
 8008c8a:	061f      	lsls	r7, r3, #24
 8008c8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c90:	d402      	bmi.n	8008c98 <_printf_i+0x18c>
 8008c92:	065f      	lsls	r7, r3, #25
 8008c94:	bf48      	it	mi
 8008c96:	b2b6      	uxthmi	r6, r6
 8008c98:	07df      	lsls	r7, r3, #31
 8008c9a:	bf48      	it	mi
 8008c9c:	f043 0320 	orrmi.w	r3, r3, #32
 8008ca0:	6029      	str	r1, [r5, #0]
 8008ca2:	bf48      	it	mi
 8008ca4:	6023      	strmi	r3, [r4, #0]
 8008ca6:	b91e      	cbnz	r6, 8008cb0 <_printf_i+0x1a4>
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	f023 0320 	bic.w	r3, r3, #32
 8008cae:	6023      	str	r3, [r4, #0]
 8008cb0:	2310      	movs	r3, #16
 8008cb2:	e7a7      	b.n	8008c04 <_printf_i+0xf8>
 8008cb4:	4824      	ldr	r0, [pc, #144]	; (8008d48 <_printf_i+0x23c>)
 8008cb6:	e7e4      	b.n	8008c82 <_printf_i+0x176>
 8008cb8:	4615      	mov	r5, r2
 8008cba:	e7bd      	b.n	8008c38 <_printf_i+0x12c>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	6826      	ldr	r6, [r4, #0]
 8008cc0:	6961      	ldr	r1, [r4, #20]
 8008cc2:	1d18      	adds	r0, r3, #4
 8008cc4:	6028      	str	r0, [r5, #0]
 8008cc6:	0635      	lsls	r5, r6, #24
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	d501      	bpl.n	8008cd0 <_printf_i+0x1c4>
 8008ccc:	6019      	str	r1, [r3, #0]
 8008cce:	e002      	b.n	8008cd6 <_printf_i+0x1ca>
 8008cd0:	0670      	lsls	r0, r6, #25
 8008cd2:	d5fb      	bpl.n	8008ccc <_printf_i+0x1c0>
 8008cd4:	8019      	strh	r1, [r3, #0]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6123      	str	r3, [r4, #16]
 8008cda:	4615      	mov	r5, r2
 8008cdc:	e7bc      	b.n	8008c58 <_printf_i+0x14c>
 8008cde:	682b      	ldr	r3, [r5, #0]
 8008ce0:	1d1a      	adds	r2, r3, #4
 8008ce2:	602a      	str	r2, [r5, #0]
 8008ce4:	681d      	ldr	r5, [r3, #0]
 8008ce6:	6862      	ldr	r2, [r4, #4]
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4628      	mov	r0, r5
 8008cec:	f7f7 fb00 	bl	80002f0 <memchr>
 8008cf0:	b108      	cbz	r0, 8008cf6 <_printf_i+0x1ea>
 8008cf2:	1b40      	subs	r0, r0, r5
 8008cf4:	6060      	str	r0, [r4, #4]
 8008cf6:	6863      	ldr	r3, [r4, #4]
 8008cf8:	6123      	str	r3, [r4, #16]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d00:	e7aa      	b.n	8008c58 <_printf_i+0x14c>
 8008d02:	6923      	ldr	r3, [r4, #16]
 8008d04:	462a      	mov	r2, r5
 8008d06:	4649      	mov	r1, r9
 8008d08:	4640      	mov	r0, r8
 8008d0a:	47d0      	blx	sl
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d0ad      	beq.n	8008c6c <_printf_i+0x160>
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	079b      	lsls	r3, r3, #30
 8008d14:	d413      	bmi.n	8008d3e <_printf_i+0x232>
 8008d16:	68e0      	ldr	r0, [r4, #12]
 8008d18:	9b03      	ldr	r3, [sp, #12]
 8008d1a:	4298      	cmp	r0, r3
 8008d1c:	bfb8      	it	lt
 8008d1e:	4618      	movlt	r0, r3
 8008d20:	e7a6      	b.n	8008c70 <_printf_i+0x164>
 8008d22:	2301      	movs	r3, #1
 8008d24:	4632      	mov	r2, r6
 8008d26:	4649      	mov	r1, r9
 8008d28:	4640      	mov	r0, r8
 8008d2a:	47d0      	blx	sl
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d09d      	beq.n	8008c6c <_printf_i+0x160>
 8008d30:	3501      	adds	r5, #1
 8008d32:	68e3      	ldr	r3, [r4, #12]
 8008d34:	9903      	ldr	r1, [sp, #12]
 8008d36:	1a5b      	subs	r3, r3, r1
 8008d38:	42ab      	cmp	r3, r5
 8008d3a:	dcf2      	bgt.n	8008d22 <_printf_i+0x216>
 8008d3c:	e7eb      	b.n	8008d16 <_printf_i+0x20a>
 8008d3e:	2500      	movs	r5, #0
 8008d40:	f104 0619 	add.w	r6, r4, #25
 8008d44:	e7f5      	b.n	8008d32 <_printf_i+0x226>
 8008d46:	bf00      	nop
 8008d48:	08008f01 	.word	0x08008f01
 8008d4c:	08008f12 	.word	0x08008f12

08008d50 <memmove>:
 8008d50:	4288      	cmp	r0, r1
 8008d52:	b510      	push	{r4, lr}
 8008d54:	eb01 0402 	add.w	r4, r1, r2
 8008d58:	d902      	bls.n	8008d60 <memmove+0x10>
 8008d5a:	4284      	cmp	r4, r0
 8008d5c:	4623      	mov	r3, r4
 8008d5e:	d807      	bhi.n	8008d70 <memmove+0x20>
 8008d60:	1e43      	subs	r3, r0, #1
 8008d62:	42a1      	cmp	r1, r4
 8008d64:	d008      	beq.n	8008d78 <memmove+0x28>
 8008d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d6e:	e7f8      	b.n	8008d62 <memmove+0x12>
 8008d70:	4402      	add	r2, r0
 8008d72:	4601      	mov	r1, r0
 8008d74:	428a      	cmp	r2, r1
 8008d76:	d100      	bne.n	8008d7a <memmove+0x2a>
 8008d78:	bd10      	pop	{r4, pc}
 8008d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d82:	e7f7      	b.n	8008d74 <memmove+0x24>

08008d84 <_sbrk_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	4d06      	ldr	r5, [pc, #24]	; (8008da0 <_sbrk_r+0x1c>)
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	602b      	str	r3, [r5, #0]
 8008d90:	f7f8 fb9c 	bl	80014cc <_sbrk>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d102      	bne.n	8008d9e <_sbrk_r+0x1a>
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	b103      	cbz	r3, 8008d9e <_sbrk_r+0x1a>
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
 8008da0:	240310d8 	.word	0x240310d8

08008da4 <memcpy>:
 8008da4:	440a      	add	r2, r1
 8008da6:	4291      	cmp	r1, r2
 8008da8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008dac:	d100      	bne.n	8008db0 <memcpy+0xc>
 8008dae:	4770      	bx	lr
 8008db0:	b510      	push	{r4, lr}
 8008db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dba:	4291      	cmp	r1, r2
 8008dbc:	d1f9      	bne.n	8008db2 <memcpy+0xe>
 8008dbe:	bd10      	pop	{r4, pc}

08008dc0 <_realloc_r>:
 8008dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc4:	4680      	mov	r8, r0
 8008dc6:	4614      	mov	r4, r2
 8008dc8:	460e      	mov	r6, r1
 8008dca:	b921      	cbnz	r1, 8008dd6 <_realloc_r+0x16>
 8008dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	f7ff bc49 	b.w	8008668 <_malloc_r>
 8008dd6:	b92a      	cbnz	r2, 8008de4 <_realloc_r+0x24>
 8008dd8:	f7ff fbda 	bl	8008590 <_free_r>
 8008ddc:	4625      	mov	r5, r4
 8008dde:	4628      	mov	r0, r5
 8008de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de4:	f000 f81b 	bl	8008e1e <_malloc_usable_size_r>
 8008de8:	4284      	cmp	r4, r0
 8008dea:	4607      	mov	r7, r0
 8008dec:	d802      	bhi.n	8008df4 <_realloc_r+0x34>
 8008dee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008df2:	d812      	bhi.n	8008e1a <_realloc_r+0x5a>
 8008df4:	4621      	mov	r1, r4
 8008df6:	4640      	mov	r0, r8
 8008df8:	f7ff fc36 	bl	8008668 <_malloc_r>
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d0ed      	beq.n	8008dde <_realloc_r+0x1e>
 8008e02:	42bc      	cmp	r4, r7
 8008e04:	4622      	mov	r2, r4
 8008e06:	4631      	mov	r1, r6
 8008e08:	bf28      	it	cs
 8008e0a:	463a      	movcs	r2, r7
 8008e0c:	f7ff ffca 	bl	8008da4 <memcpy>
 8008e10:	4631      	mov	r1, r6
 8008e12:	4640      	mov	r0, r8
 8008e14:	f7ff fbbc 	bl	8008590 <_free_r>
 8008e18:	e7e1      	b.n	8008dde <_realloc_r+0x1e>
 8008e1a:	4635      	mov	r5, r6
 8008e1c:	e7df      	b.n	8008dde <_realloc_r+0x1e>

08008e1e <_malloc_usable_size_r>:
 8008e1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e22:	1f18      	subs	r0, r3, #4
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	bfbc      	itt	lt
 8008e28:	580b      	ldrlt	r3, [r1, r0]
 8008e2a:	18c0      	addlt	r0, r0, r3
 8008e2c:	4770      	bx	lr
	...

08008e30 <_init>:
 8008e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e32:	bf00      	nop
 8008e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e36:	bc08      	pop	{r3}
 8008e38:	469e      	mov	lr, r3
 8008e3a:	4770      	bx	lr

08008e3c <_fini>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	bf00      	nop
 8008e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e42:	bc08      	pop	{r3}
 8008e44:	469e      	mov	lr, r3
 8008e46:	4770      	bx	lr
