
h7a3zi_combine2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f0  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008990  08008990  00018990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008998  08008998  00018998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800899c  0800899c  0001899c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  080089a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a0  24000060  08008a00  00020060  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000400  08008a00  00020400  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001989d  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002b99  00000000  00000000  0003996e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001470  00000000  00000000  0003c508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000ffa  00000000  00000000  0003d978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00032a02  00000000  00000000  0003e972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000187a3  00000000  00000000  00071374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001538ad  00000000  00000000  00089b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005d94  00000000  00000000  001dd3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  001e3158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008888 	.word	0x08008888

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	08008888 	.word	0x08008888

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fe96 	bl	80013c0 <HAL_Init>
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f850 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 fa38 	bl	8000b0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800069c:	f000 f9e2 	bl	8000a64 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006a0:	f000 fa2c 	bl	8000afc <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006a4:	f000 f8be 	bl	8000824 <MX_ADC1_Init>
  MX_TIM16_Init();
 80006a8:	f000 f98e 	bl	80009c8 <MX_TIM16_Init>
  MX_TIM17_Init();
 80006ac:	f000 f9b4 	bl	8000a18 <MX_TIM17_Init>
  MX_TIM3_Init();
 80006b0:	f000 f930 	bl	8000914 <MX_TIM3_Init>
  //   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
  //   HAL_Delay(1000);
  //   // rotate to 0°
  //   STEPPER_Step_NonBlocking(STEPPER_MOTOR1, PI * 3 / 4, DIR_CW);
  // }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2120      	movs	r1, #32
 80006b8:	4816      	ldr	r0, [pc, #88]	; (8000714 <main+0x88>)
 80006ba:	f002 f953 	bl	8002964 <HAL_GPIO_WritePin>
    HAL_Delay(7000);
 80006be:	f641 3058 	movw	r0, #7000	; 0x1b58
 80006c2:	f000 ff0f 	bl	80014e4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <main+0x88>)
 80006cc:	f002 f94a 	bl	8002964 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

     timer_counter = __HAL_TIM_GET_COUNTER(&htim3);
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <main+0x8c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <main+0x90>)
 80006da:	801a      	strh	r2, [r3, #0]
     update_encoder(&enc_instance, &htim3);
 80006dc:	490e      	ldr	r1, [pc, #56]	; (8000718 <main+0x8c>)
 80006de:	4810      	ldr	r0, [pc, #64]	; (8000720 <main+0x94>)
 80006e0:	f000 fb5e 	bl	8000da0 <update_encoder>
     encoder_position = enc_instance.position;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <main+0x94>)
 80006e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <main+0x98>)
 80006ec:	601a      	str	r2, [r3, #0]
  //    // encoder_velocity = enc_instance.velocity;
  //
     uart_buf_len = sprintf(uart_buf, "Counter value = %ld\r\n", encoder_position);
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <main+0x98>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <main+0x9c>)
 80006f6:	480d      	ldr	r0, [pc, #52]	; (800072c <main+0xa0>)
 80006f8:	f007 fc22 	bl	8007f40 <siprintf>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <main+0xa4>)
 8000700:	6013      	str	r3, [r2, #0]
     HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <main+0xa4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	b29a      	uxth	r2, r3
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <main+0xa0>)
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <main+0xa8>)
 800070e:	f006 f9ff 	bl	8006b10 <HAL_UART_Transmit>
     timer_counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000712:	e7dd      	b.n	80006d0 <main+0x44>
 8000714:	58020000 	.word	0x58020000
 8000718:	240000e0 	.word	0x240000e0
 800071c:	240002ac 	.word	0x240002ac
 8000720:	24000258 	.word	0x24000258
 8000724:	240002a8 	.word	0x240002a8
 8000728:	080088a0 	.word	0x080088a0
 800072c:	24000270 	.word	0x24000270
 8000730:	240002a4 	.word	0x240002a4
 8000734:	240001c4 	.word	0x240001c4

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b09c      	sub	sp, #112	; 0x70
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000742:	224c      	movs	r2, #76	; 0x4c
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f007 fc1a 	bl	8007f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2220      	movs	r2, #32
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f007 fc14 	bl	8007f80 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000758:	4b30      	ldr	r3, [pc, #192]	; (800081c <SystemClock_Config+0xe4>)
 800075a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800075e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000762:	2004      	movs	r0, #4
 8000764:	f002 f918 	bl	8002998 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <SystemClock_Config+0xe8>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a2b      	ldr	r2, [pc, #172]	; (8000820 <SystemClock_Config+0xe8>)
 8000772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <SystemClock_Config+0xe8>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000784:	bf00      	nop
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <SystemClock_Config+0xe8>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800078e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000792:	d1f8      	bne.n	8000786 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000794:	2321      	movs	r3, #33	; 0x21
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000798:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007ae:	2318      	movs	r3, #24
 80007b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b6:	2304      	movs	r3, #4
 80007b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007be:	230c      	movs	r3, #12
 80007c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 f93c 	bl	8002a4c <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007da:	f000 fadb 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	233f      	movs	r3, #63	; 0x3f
 80007e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2303      	movs	r3, #3
 80007e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2102      	movs	r1, #2
 8000802:	4618      	mov	r0, r3
 8000804:	f002 fd54 	bl	80032b0 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800080e:	f000 fac1 	bl	8000d94 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3770      	adds	r7, #112	; 0x70
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	58024400 	.word	0x58024400
 8000820:	58024800 	.word	0x58024800

08000824 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000836:	463b      	mov	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
 8000844:	615a      	str	r2, [r3, #20]
 8000846:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000848:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <MX_ADC1_Init+0xe4>)
 800084a:	4a30      	ldr	r2, [pc, #192]	; (800090c <MX_ADC1_Init+0xe8>)
 800084c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800084e:	4b2e      	ldr	r3, [pc, #184]	; (8000908 <MX_ADC1_Init+0xe4>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000854:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <MX_ADC1_Init+0xe4>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800085a:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <MX_ADC1_Init+0xe4>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <MX_ADC1_Init+0xe4>)
 8000862:	2204      	movs	r2, #4
 8000864:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_ADC1_Init+0xe4>)
 8000868:	2200      	movs	r2, #0
 800086a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_ADC1_Init+0xe4>)
 800086e:	2200      	movs	r2, #0
 8000870:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <MX_ADC1_Init+0xe4>)
 8000874:	2201      	movs	r2, #1
 8000876:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <MX_ADC1_Init+0xe4>)
 800087a:	2200      	movs	r2, #0
 800087c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <MX_ADC1_Init+0xe4>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <MX_ADC1_Init+0xe4>)
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_ADC1_Init+0xe4>)
 800088c:	2200      	movs	r2, #0
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_ADC1_Init+0xe4>)
 8000892:	2200      	movs	r2, #0
 8000894:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_ADC1_Init+0xe4>)
 8000898:	2200      	movs	r2, #0
 800089a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_ADC1_Init+0xe4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008a4:	4818      	ldr	r0, [pc, #96]	; (8000908 <MX_ADC1_Init+0xe4>)
 80008a6:	f000 ffcd 	bl	8001844 <HAL_ADC_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008b0:	f000 fa70 	bl	8000d94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4812      	ldr	r0, [pc, #72]	; (8000908 <MX_ADC1_Init+0xe4>)
 80008c0:	f001 fcf4 	bl	80022ac <HAL_ADCEx_MultiModeConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80008ca:	f000 fa63 	bl	8000d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_ADC1_Init+0xec>)
 80008d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d2:	2306      	movs	r3, #6
 80008d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008da:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008de:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008e0:	2304      	movs	r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_ADC1_Init+0xe4>)
 80008f2:	f001 f901 	bl	8001af8 <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80008fc:	f000 fa4a 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	; 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2400007c 	.word	0x2400007c
 800090c:	40022000 	.word	0x40022000
 8000910:	3ef08000 	.word	0x3ef08000

08000914 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2224      	movs	r2, #36	; 0x24
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f007 fb2c 	bl	8007f80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000932:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <MX_TIM3_Init+0xac>)
 8000934:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <MX_TIM3_Init+0xb0>)
 8000936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_TIM3_Init+0xac>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <MX_TIM3_Init+0xac>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_TIM3_Init+0xac>)
 8000946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800094a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_TIM3_Init+0xac>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_TIM3_Init+0xac>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000958:	2303      	movs	r3, #3
 800095a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000960:	2301      	movs	r3, #1
 8000962:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000970:	2301      	movs	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4619      	mov	r1, r3
 8000982:	480f      	ldr	r0, [pc, #60]	; (80009c0 <MX_TIM3_Init+0xac>)
 8000984:	f005 fc82 	bl	800628c <HAL_TIM_Encoder_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800098e:	f000 fa01 	bl	8000d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	4619      	mov	r1, r3
 800099e:	4808      	ldr	r0, [pc, #32]	; (80009c0 <MX_TIM3_Init+0xac>)
 80009a0:	f005 ffba 	bl	8006918 <HAL_TIMEx_MasterConfigSynchronization>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80009aa:	f000 f9f3 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80009ae:	213c      	movs	r1, #60	; 0x3c
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <MX_TIM3_Init+0xac>)
 80009b2:	f005 fd11 	bl	80063d8 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	3730      	adds	r7, #48	; 0x30
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	240000e0 	.word	0x240000e0
 80009c4:	40000400 	.word	0x40000400

080009c8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009ce:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <MX_TIM16_Init+0x4c>)
 80009d0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600-1;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009d4:	f242 527f 	movw	r2, #9599	; 0x257f
 80009d8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000-1;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009e2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80009e6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009fc:	f005 fbee 	bl	80061dc <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000a06:	f000 f9c5 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2400012c 	.word	0x2400012c
 8000a14:	40014400 	.word	0x40014400

08000a18 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_TIM17_Init+0x44>)
 8000a1e:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <MX_TIM17_Init+0x48>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_TIM17_Init+0x44>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_TIM17_Init+0x44>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_TIM17_Init+0x44>)
 8000a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a34:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_TIM17_Init+0x44>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MX_TIM17_Init+0x44>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_TIM17_Init+0x44>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_TIM17_Init+0x44>)
 8000a4a:	f005 fbc7 	bl	80061dc <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000a54:	f000 f99e 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	24000178 	.word	0x24000178
 8000a60:	40014800 	.word	0x40014800

08000a64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a6a:	4a23      	ldr	r2, [pc, #140]	; (8000af8 <MX_USART3_UART_Init+0x94>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000aae:	f005 ffdf 	bl	8006a70 <HAL_UART_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ab8:	f000 f96c 	bl	8000d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	480d      	ldr	r0, [pc, #52]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000ac0:	f007 f973 	bl	8007daa <HAL_UARTEx_SetTxFifoThreshold>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aca:	f000 f963 	bl	8000d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4808      	ldr	r0, [pc, #32]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000ad2:	f007 f9a8 	bl	8007e26 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000adc:	f000 f95a 	bl	8000d94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000ae2:	f007 f929 	bl	8007d38 <HAL_UARTEx_DisableFifoMode>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000aec:	f000 f952 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	240001c4 	.word	0x240001c4
 8000af8:	40004800 	.word	0x40004800

08000afc <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	4b95      	ldr	r3, [pc, #596]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000b24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b28:	4a93      	ldr	r2, [pc, #588]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000b2a:	f043 0304 	orr.w	r3, r3, #4
 8000b2e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b32:	4b91      	ldr	r3, [pc, #580]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000b34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	623b      	str	r3, [r7, #32]
 8000b3e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b40:	4b8d      	ldr	r3, [pc, #564]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000b42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b46:	4a8c      	ldr	r2, [pc, #560]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000b48:	f043 0320 	orr.w	r3, r3, #32
 8000b4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b50:	4b89      	ldr	r3, [pc, #548]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000b52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b56:	f003 0320 	and.w	r3, r3, #32
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5e:	4b86      	ldr	r3, [pc, #536]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000b60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b64:	4a84      	ldr	r2, [pc, #528]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b6e:	4b82      	ldr	r3, [pc, #520]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000b70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b78:	61bb      	str	r3, [r7, #24]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b7e      	ldr	r3, [pc, #504]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000b7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b82:	4a7d      	ldr	r2, [pc, #500]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b8c:	4b7a      	ldr	r3, [pc, #488]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000b8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b77      	ldr	r3, [pc, #476]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000b9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba0:	4a75      	ldr	r2, [pc, #468]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000baa:	4b73      	ldr	r3, [pc, #460]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb8:	4b6f      	ldr	r3, [pc, #444]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000bba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bbe:	4a6e      	ldr	r2, [pc, #440]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000bc0:	f043 0310 	orr.w	r3, r3, #16
 8000bc4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bc8:	4b6b      	ldr	r3, [pc, #428]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000bca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	4b68      	ldr	r3, [pc, #416]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000bd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bdc:	4a66      	ldr	r2, [pc, #408]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000be6:	4b64      	ldr	r3, [pc, #400]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000be8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bec:	f003 0308 	and.w	r3, r3, #8
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf4:	4b60      	ldr	r3, [pc, #384]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000bf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bfa:	4a5f      	ldr	r2, [pc, #380]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c04:	4b5c      	ldr	r3, [pc, #368]	; (8000d78 <MX_GPIO_Init+0x26c>)
 8000c06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c18:	4858      	ldr	r0, [pc, #352]	; (8000d7c <MX_GPIO_Init+0x270>)
 8000c1a:	f001 fea3 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUMP_PA5_Pin_GPIO_Port, PUMP_PA5_Pin_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2120      	movs	r1, #32
 8000c22:	4857      	ldr	r0, [pc, #348]	; (8000d80 <MX_GPIO_Init+0x274>)
 8000c24:	f001 fe9e 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|STEPPER1_PB6_Pin_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000c2e:	4855      	ldr	r0, [pc, #340]	; (8000d84 <MX_GPIO_Init+0x278>)
 8000c30:	f001 fe98 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f246 0102 	movw	r1, #24578	; 0x6002
 8000c3a:	4853      	ldr	r0, [pc, #332]	; (8000d88 <MX_GPIO_Init+0x27c>)
 8000c3c:	f001 fe92 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 8000c46:	4851      	ldr	r0, [pc, #324]	; (8000d8c <MX_GPIO_Init+0x280>)
 8000c48:	f001 fe8c 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	484b      	ldr	r0, [pc, #300]	; (8000d90 <MX_GPIO_Init+0x284>)
 8000c62:	f001 fccf 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	483f      	ldr	r0, [pc, #252]	; (8000d7c <MX_GPIO_Init+0x270>)
 8000c80:	f001 fcc0 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUMP_PA5_Pin_Pin */
  GPIO_InitStruct.Pin = PUMP_PA5_Pin_Pin;
 8000c84:	2320      	movs	r3, #32
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PUMP_PA5_Pin_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4839      	ldr	r0, [pc, #228]	; (8000d80 <MX_GPIO_Init+0x274>)
 8000c9c:	f001 fcb2 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin STEPPER1_PB6_Pin_Pin PB7 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|STEPPER1_PB6_Pin_Pin|GPIO_PIN_7;
 8000ca0:	f244 03c1 	movw	r3, #16577	; 0x40c1
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4832      	ldr	r0, [pc, #200]	; (8000d84 <MX_GPIO_Init+0x278>)
 8000cba:	f001 fca3 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER3_PE13_Pin_Pin STEPPER4_PE14_Pin_Pin LD2_Pin */
  GPIO_InitStruct.Pin = STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin;
 8000cbe:	f246 0302 	movw	r3, #24578	; 0x6002
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	482c      	ldr	r0, [pc, #176]	; (8000d88 <MX_GPIO_Init+0x27c>)
 8000cd8:	f001 fc94 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4826      	ldr	r0, [pc, #152]	; (8000d8c <MX_GPIO_Init+0x280>)
 8000cf2:	f001 fc87 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	481d      	ldr	r0, [pc, #116]	; (8000d80 <MX_GPIO_Init+0x274>)
 8000d0c:	f001 fc7a 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d22:	230a      	movs	r3, #10
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4814      	ldr	r0, [pc, #80]	; (8000d80 <MX_GPIO_Init+0x274>)
 8000d2e:	f001 fc69 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480d      	ldr	r0, [pc, #52]	; (8000d80 <MX_GPIO_Init+0x274>)
 8000d4c:	f001 fc5a 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : HELP_SIGNAL_PG9_Pin_Pin VIBROMOTOR_PG12_Pin_Pin STEPPER2_PG14_Pin_Pin */
  GPIO_InitStruct.Pin = HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin;
 8000d50:	f44f 43a4 	mov.w	r3, #20992	; 0x5200
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <MX_GPIO_Init+0x280>)
 8000d6a:	f001 fc4b 	bl	8002604 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	; 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58021400 	.word	0x58021400
 8000d80:	58020000 	.word	0x58020000
 8000d84:	58020400 	.word	0x58020400
 8000d88:	58021000 	.word	0x58021000
 8000d8c:	58021800 	.word	0x58021800
 8000d90:	58020800 	.word	0x58020800

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <update_encoder>:
#include "../Inc/motor_encoder.h"

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef*htim) {
 8000da0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000da4:	b085      	sub	sp, #20
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
  uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db2:	60fb      	str	r3, [r7, #12]
  static uint8_t first_time = 0;
  if (!first_time) {
 8000db4:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <update_encoder+0x104>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d106      	bne.n	8000dca <update_encoder+0x2a>
    encoder_value->velocity = 0;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	801a      	strh	r2, [r3, #0]
    first_time = 1;
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <update_encoder+0x104>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	e052      	b.n	8000e70 <update_encoder+0xd0>

  } else {
    if (temp_counter == encoder_value->last_counter_value) {
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d103      	bne.n	8000ddc <update_encoder+0x3c>
      encoder_value->velocity = 0;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	801a      	strh	r2, [r3, #0]
 8000dda:	e049      	b.n	8000e70 <update_encoder+0xd0>

    } else if (temp_counter > encoder_value->last_counter_value) {
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d922      	bls.n	8000e2c <update_encoder+0x8c>
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	2b10      	cmp	r3, #16
 8000df2:	d110      	bne.n	8000e16 <update_encoder+0x76>
        encoder_value->velocity =
            -encoder_value->last_counter_value -
            (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	b29a      	uxth	r2, r3
            -encoder_value->last_counter_value -
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b21a      	sxth	r2, r3
        encoder_value->velocity =
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	801a      	strh	r2, [r3, #0]
 8000e14:	e02c      	b.n	8000e70 <update_encoder+0xd0>

      } else {
        encoder_value->velocity =
            temp_counter - encoder_value->last_counter_value;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b21a      	sxth	r2, r3
        encoder_value->velocity =
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	801a      	strh	r2, [r3, #0]
 8000e2a:	e021      	b.n	8000e70 <update_encoder+0xd0>
      }

    } else {
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0310 	and.w	r3, r3, #16
 8000e36:	2b10      	cmp	r3, #16
 8000e38:	d10a      	bne.n	8000e50 <update_encoder+0xb0>
        encoder_value->velocity =
            temp_counter - encoder_value->last_counter_value;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	b21a      	sxth	r2, r3
        encoder_value->velocity =
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	801a      	strh	r2, [r3, #0]
 8000e4e:	e00f      	b.n	8000e70 <update_encoder+0xd0>
      } else {
        encoder_value->velocity =
            temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) -
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e56:	b29a      	uxth	r2, r3
                            encoder_value->last_counter_value);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691b      	ldr	r3, [r3, #16]
            temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) -
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	4413      	add	r3, r2
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	b21a      	sxth	r2, r3
        encoder_value->velocity =
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	801a      	strh	r2, [r3, #0]
      }
    }
  }
  encoder_value->position += encoder_value->velocity;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000e7c:	b209      	sxth	r1, r1
 8000e7e:	17c8      	asrs	r0, r1, #31
 8000e80:	460c      	mov	r4, r1
 8000e82:	4605      	mov	r5, r0
 8000e84:	eb12 0804 	adds.w	r8, r2, r4
 8000e88:	eb43 0905 	adc.w	r9, r3, r5
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	e9c3 8902 	strd	r8, r9, [r3, #8]
  encoder_value->last_counter_value = temp_counter;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	611a      	str	r2, [r3, #16]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000ea2:	4770      	bx	lr
 8000ea4:	240002ae 	.word	0x240002ae

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_MspInit+0x30>)
 8000eb0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000eb4:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_MspInit+0x30>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_MspInit+0x30>)
 8000ec0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	58024400 	.word	0x58024400

08000edc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0ba      	sub	sp, #232	; 0xe8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	22c0      	movs	r2, #192	; 0xc0
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f007 f83f 	bl	8007f80 <memset>
  if(hadc->Instance==ADC1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a2b      	ldr	r2, [pc, #172]	; (8000fb4 <HAL_ADC_MspInit+0xd8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d14f      	bne.n	8000fac <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000f20:	2304      	movs	r3, #4
 8000f22:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f2c:	23c0      	movs	r3, #192	; 0xc0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 fd40 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000f4e:	f7ff ff21 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <HAL_ADC_MspInit+0xdc>)
 8000f54:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xdc>)
 8000f5a:	f043 0320 	orr.w	r3, r3, #32
 8000f5e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_ADC_MspInit+0xdc>)
 8000f64:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f68:	f003 0320 	and.w	r3, r3, #32
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0xdc>)
 8000f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_ADC_MspInit+0xdc>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_ADC_MspInit+0xdc>)
 8000f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|ANALOG_READ_PA3_Pin_Pin;
 8000f8e:	2309      	movs	r3, #9
 8000f90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f94:	2303      	movs	r3, #3
 8000f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_ADC_MspInit+0xe0>)
 8000fa8:	f001 fb2c 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	37e8      	adds	r7, #232	; 0xe8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40022000 	.word	0x40022000
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	58020000 	.word	0x58020000

08000fc0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <HAL_TIM_Encoder_MspInit+0x88>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d12d      	bne.n	800103e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000fe4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fe8:	4a18      	ldr	r2, [pc, #96]	; (800104c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000ff4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001002:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001006:	4a11      	ldr	r2, [pc, #68]	; (800104c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001012:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = encoder1PA6_Pin|encoder2PA7_Pin;
 800101e:	23c0      	movs	r3, #192	; 0xc0
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800102e:	2302      	movs	r3, #2
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_TIM_Encoder_MspInit+0x90>)
 800103a:	f001 fae3 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	; 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40000400 	.word	0x40000400
 800104c:	58024400 	.word	0x58024400
 8001050:	58020000 	.word	0x58020000

08001054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <HAL_TIM_Base_MspInit+0x74>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d10f      	bne.n	8001086 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_TIM_Base_MspInit+0x78>)
 8001068:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_TIM_Base_MspInit+0x78>)
 800106e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001072:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_TIM_Base_MspInit+0x78>)
 8001078:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001084:	e01b      	b.n	80010be <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <HAL_TIM_Base_MspInit+0x7c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d116      	bne.n	80010be <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_TIM_Base_MspInit+0x78>)
 8001092:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001096:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <HAL_TIM_Base_MspInit+0x78>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109c:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_TIM_Base_MspInit+0x78>)
 80010a2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80010a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2076      	movs	r0, #118	; 0x76
 80010b4:	f001 fa71 	bl	800259a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80010b8:	2076      	movs	r0, #118	; 0x76
 80010ba:	f001 fa88 	bl	80025ce <HAL_NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40014400 	.word	0x40014400
 80010cc:	58024400 	.word	0x58024400
 80010d0:	40014800 	.word	0x40014800

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ba      	sub	sp, #232	; 0xe8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	22c0      	movs	r2, #192	; 0xc0
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f006 ff43 	bl	8007f80 <memset>
  if(huart->Instance==USART3)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a27      	ldr	r2, [pc, #156]	; (800119c <HAL_UART_MspInit+0xc8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d146      	bne.n	8001192 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001104:	f04f 0202 	mov.w	r2, #2
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fc54 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001126:	f7ff fe35 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_UART_MspInit+0xcc>)
 800112c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001130:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <HAL_UART_MspInit+0xcc>)
 8001132:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001136:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <HAL_UART_MspInit+0xcc>)
 800113c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_UART_MspInit+0xcc>)
 800114a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800114e:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <HAL_UART_MspInit+0xcc>)
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_UART_MspInit+0xcc>)
 800115a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001166:	f44f 7340 	mov.w	r3, #768	; 0x300
 800116a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001180:	2307      	movs	r3, #7
 8001182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001186:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_UART_MspInit+0xd0>)
 800118e:	f001 fa39 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	37e8      	adds	r7, #232	; 0xe8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40004800 	.word	0x40004800
 80011a0:	58024400 	.word	0x58024400
 80011a4:	58020c00 	.word	0x58020c00

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ac:	e7fe      	b.n	80011ac <NMI_Handler+0x4>

080011ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <MemManage_Handler+0x4>

080011ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f4:	f000 f956 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}

080011fc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <TIM17_IRQHandler+0x10>)
 8001202:	f005 f977 	bl	80064f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	24000178 	.word	0x24000178

08001210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <_sbrk+0x5c>)
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <_sbrk+0x60>)
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <_sbrk+0x64>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <_sbrk+0x68>)
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	429a      	cmp	r2, r3
 800123e:	d207      	bcs.n	8001250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001240:	f006 fea6 	bl	8007f90 <__errno>
 8001244:	4603      	mov	r3, r0
 8001246:	220c      	movs	r2, #12
 8001248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800124e:	e009      	b.n	8001264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <_sbrk+0x64>)
 8001260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	24100000 	.word	0x24100000
 8001270:	00000400 	.word	0x00000400
 8001274:	240002b0 	.word	0x240002b0
 8001278:	24000400 	.word	0x24000400

0800127c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001280:	4b32      	ldr	r3, [pc, #200]	; (800134c <SystemInit+0xd0>)
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001286:	4a31      	ldr	r2, [pc, #196]	; (800134c <SystemInit+0xd0>)
 8001288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800128c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001290:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <SystemInit+0xd4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 030f 	and.w	r3, r3, #15
 8001298:	2b02      	cmp	r3, #2
 800129a:	d807      	bhi.n	80012ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800129c:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <SystemInit+0xd4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 030f 	bic.w	r3, r3, #15
 80012a4:	4a2a      	ldr	r2, [pc, #168]	; (8001350 <SystemInit+0xd4>)
 80012a6:	f043 0303 	orr.w	r3, r3, #3
 80012aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <SystemInit+0xd8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a28      	ldr	r2, [pc, #160]	; (8001354 <SystemInit+0xd8>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012b8:	4b26      	ldr	r3, [pc, #152]	; (8001354 <SystemInit+0xd8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <SystemInit+0xd8>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4924      	ldr	r1, [pc, #144]	; (8001354 <SystemInit+0xd8>)
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <SystemInit+0xdc>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <SystemInit+0xd4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012d6:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <SystemInit+0xd4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 030f 	bic.w	r3, r3, #15
 80012de:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <SystemInit+0xd4>)
 80012e0:	f043 0303 	orr.w	r3, r3, #3
 80012e4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <SystemInit+0xd8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <SystemInit+0xd8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <SystemInit+0xd8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <SystemInit+0xd8>)
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <SystemInit+0xe0>)
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <SystemInit+0xd8>)
 8001300:	4a17      	ldr	r2, [pc, #92]	; (8001360 <SystemInit+0xe4>)
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <SystemInit+0xd8>)
 8001306:	4a17      	ldr	r2, [pc, #92]	; (8001364 <SystemInit+0xe8>)
 8001308:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <SystemInit+0xd8>)
 800130c:	2200      	movs	r2, #0
 800130e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <SystemInit+0xd8>)
 8001312:	4a14      	ldr	r2, [pc, #80]	; (8001364 <SystemInit+0xe8>)
 8001314:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <SystemInit+0xd8>)
 8001318:	2200      	movs	r2, #0
 800131a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <SystemInit+0xd8>)
 800131e:	4a11      	ldr	r2, [pc, #68]	; (8001364 <SystemInit+0xe8>)
 8001320:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <SystemInit+0xd8>)
 8001324:	2200      	movs	r2, #0
 8001326:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <SystemInit+0xd8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a09      	ldr	r2, [pc, #36]	; (8001354 <SystemInit+0xd8>)
 800132e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001332:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <SystemInit+0xd8>)
 8001336:	2200      	movs	r2, #0
 8001338:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <SystemInit+0xec>)
 800133c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001340:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00
 8001350:	52002000 	.word	0x52002000
 8001354:	58024400 	.word	0x58024400
 8001358:	eaf6ed7f 	.word	0xeaf6ed7f
 800135c:	02020200 	.word	0x02020200
 8001360:	01ff0000 	.word	0x01ff0000
 8001364:	01010280 	.word	0x01010280
 8001368:	52004000 	.word	0x52004000

0800136c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800136c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001370:	f7ff ff84 	bl	800127c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001376:	490d      	ldr	r1, [pc, #52]	; (80013ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800138c:	4c0a      	ldr	r4, [pc, #40]	; (80013b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800139a:	f006 fdff 	bl	8007f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139e:	f7ff f975 	bl	800068c <main>
  bx  lr
 80013a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80013a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013ac:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80013b0:	080089a0 	.word	0x080089a0
  ldr r2, =_sbss
 80013b4:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80013b8:	24000400 	.word	0x24000400

080013bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC_IRQHandler>
	...

080013c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c6:	2003      	movs	r0, #3
 80013c8:	f001 f8dc 	bl	8002584 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80013cc:	f002 f926 	bl	800361c <HAL_RCC_GetSysClockFreq>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_Init+0x68>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	0a1b      	lsrs	r3, r3, #8
 80013d8:	f003 030f 	and.w	r3, r3, #15
 80013dc:	4913      	ldr	r1, [pc, #76]	; (800142c <HAL_Init+0x6c>)
 80013de:	5ccb      	ldrb	r3, [r1, r3]
 80013e0:	f003 031f 	and.w	r3, r3, #31
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
 80013e8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_Init+0x68>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_Init+0x6c>)
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001400:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <HAL_Init+0x70>)
 8001402:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <HAL_Init+0x74>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140a:	2000      	movs	r0, #0
 800140c:	f000 f814 	bl	8001438 <HAL_InitTick>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e002      	b.n	8001420 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800141a:	f7ff fd45 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	58024400 	.word	0x58024400
 800142c:	08008924 	.word	0x08008924
 8001430:	24000004 	.word	0x24000004
 8001434:	24000000 	.word	0x24000000

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_InitTick+0x60>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e021      	b.n	8001490 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <HAL_InitTick+0x64>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_InitTick+0x60>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f001 f8c1 	bl	80025ea <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001480:	f001 f88b 	bl	800259a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_InitTick+0x68>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2400000c 	.word	0x2400000c
 800149c:	24000000 	.word	0x24000000
 80014a0:	24000008 	.word	0x24000008

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	2400000c 	.word	0x2400000c
 80014c8:	240002b4 	.word	0x240002b4

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	240002b4 	.word	0x240002b4

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2400000c 	.word	0x2400000c

0800152c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	609a      	str	r2, [r3, #8]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	609a      	str	r2, [r3, #8]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3360      	adds	r3, #96	; 0x60
 80015a6:	461a      	mov	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	430b      	orrs	r3, r1
 80015c2:	431a      	orrs	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80015c8:	bf00      	nop
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	431a      	orrs	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	611a      	str	r2, [r3, #16]
}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001606:	b480      	push	{r7}
 8001608:	b087      	sub	sp, #28
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3360      	adds	r3, #96	; 0x60
 8001616:	461a      	mov	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	431a      	orrs	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	601a      	str	r2, [r3, #0]
  }
}
 8001630:	bf00      	nop
 8001632:	371c      	adds	r7, #28
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3330      	adds	r3, #48	; 0x30
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	4413      	add	r3, r2
 800165a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	211f      	movs	r1, #31
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	401a      	ands	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	0e9b      	lsrs	r3, r3, #26
 8001674:	f003 011f 	and.w	r1, r3, #31
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	431a      	orrs	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001688:	bf00      	nop
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3314      	adds	r3, #20
 80016a4:	461a      	mov	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	0e5b      	lsrs	r3, r3, #25
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	4413      	add	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	0d1b      	lsrs	r3, r3, #20
 80016bc:	f003 031f 	and.w	r3, r3, #31
 80016c0:	2107      	movs	r1, #7
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	401a      	ands	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	0d1b      	lsrs	r3, r3, #20
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	431a      	orrs	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0318 	and.w	r3, r3, #24
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001710:	40d9      	lsrs	r1, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	400b      	ands	r3, r1
 8001716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800171a:	431a      	orrs	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	000fffff 	.word	0x000fffff

08001734 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001742:	4013      	ands	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6093      	str	r3, [r2, #8]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	5fffffc0 	.word	0x5fffffc0

08001758 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800176c:	d101      	bne.n	8001772 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800178e:	4013      	ands	r3, r2
 8001790:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	6fffffc0 	.word	0x6fffffc0

080017a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <LL_ADC_IsEnabled+0x18>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <LL_ADC_IsEnabled+0x1a>
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b04      	cmp	r3, #4
 8001808:	d101      	bne.n	800180e <LL_ADC_REG_IsConversionOngoing+0x18>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b08      	cmp	r3, #8
 800182e:	d101      	bne.n	8001834 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e138      	b.n	8001ad0 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fb35 	bl	8000edc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff67 	bl	8001758 <LL_ADC_IsDeepPowerDownEnabled>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff4d 	bl	8001734 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff82 	bl	80017a8 <LL_ADC_IsInternalRegulatorEnabled>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d114      	bne.n	80018d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff66 	bl	8001780 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018b4:	4b88      	ldr	r3, [pc, #544]	; (8001ad8 <HAL_ADC_Init+0x294>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	4a88      	ldr	r2, [pc, #544]	; (8001adc <HAL_ADC_Init+0x298>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	3301      	adds	r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018c6:	e002      	b.n	80018ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f9      	bne.n	80018c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff65 	bl	80017a8 <LL_ADC_IsInternalRegulatorEnabled>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10d      	bne.n	8001900 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e8:	f043 0210 	orr.w	r2, r3, #16
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	f043 0201 	orr.w	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff76 	bl	80017f6 <LL_ADC_REG_IsConversionOngoing>
 800190a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b00      	cmp	r3, #0
 8001916:	f040 80d2 	bne.w	8001abe <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2b00      	cmp	r3, #0
 800191e:	f040 80ce 	bne.w	8001abe <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001926:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800192a:	f043 0202 	orr.w	r2, r3, #2
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff4a 	bl	80017d0 <LL_ADC_IsEnabled>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d110      	bne.n	8001964 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001942:	4867      	ldr	r0, [pc, #412]	; (8001ae0 <HAL_ADC_Init+0x29c>)
 8001944:	f7ff ff44 	bl	80017d0 <LL_ADC_IsEnabled>
 8001948:	4604      	mov	r4, r0
 800194a:	4866      	ldr	r0, [pc, #408]	; (8001ae4 <HAL_ADC_Init+0x2a0>)
 800194c:	f7ff ff40 	bl	80017d0 <LL_ADC_IsEnabled>
 8001950:	4603      	mov	r3, r0
 8001952:	4323      	orrs	r3, r4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d105      	bne.n	8001964 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4619      	mov	r1, r3
 800195e:	4862      	ldr	r0, [pc, #392]	; (8001ae8 <HAL_ADC_Init+0x2a4>)
 8001960:	f7ff fde4 	bl	800152c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7d5b      	ldrb	r3, [r3, #21]
 8001968:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800196e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001974:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7f1b      	ldrb	r3, [r3, #28]
 800197a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7f1b      	ldrb	r3, [r3, #28]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d106      	bne.n	8001996 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	3b01      	subs	r3, #1
 800198e:	045b      	lsls	r3, r3, #17
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <HAL_ADC_Init+0x2a8>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	69b9      	ldr	r1, [r7, #24]
 80019c2:	430b      	orrs	r3, r1
 80019c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff13 	bl	80017f6 <LL_ADC_REG_IsConversionOngoing>
 80019d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff20 	bl	800181c <LL_ADC_INJ_IsConversionOngoing>
 80019dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d14a      	bne.n	8001a7a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d147      	bne.n	8001a7a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7d1b      	ldrb	r3, [r3, #20]
 80019ee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	4b3c      	ldr	r3, [pc, #240]	; (8001af0 <HAL_ADC_Init+0x2ac>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	69b9      	ldr	r1, [r7, #24]
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d11b      	bne.n	8001a4e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <HAL_ADC_Init+0x2b0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a2a:	3a01      	subs	r2, #1
 8001a2c:	0411      	lsls	r1, r2, #16
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a32:	4311      	orrs	r1, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a38:	4311      	orrs	r1, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	611a      	str	r2, [r3, #16]
 8001a4c:	e007      	b.n	8001a5e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0201 	bic.w	r2, r2, #1
 8001a5c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fb25 	bl	80020c4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d10c      	bne.n	8001a9c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	f023 010f 	bic.w	r1, r3, #15
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	1e5a      	subs	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	631a      	str	r2, [r3, #48]	; 0x30
 8001a9a:	e007      	b.n	8001aac <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 020f 	bic.w	r2, r2, #15
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab0:	f023 0303 	bic.w	r3, r3, #3
 8001ab4:	f043 0201 	orr.w	r2, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
 8001abc:	e007      	b.n	8001ace <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f043 0210 	orr.w	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ace:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3724      	adds	r7, #36	; 0x24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}
 8001ad8:	24000000 	.word	0x24000000
 8001adc:	053e2d63 	.word	0x053e2d63
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	40022100 	.word	0x40022100
 8001ae8:	40022300 	.word	0x40022300
 8001aec:	fff0c003 	.word	0xfff0c003
 8001af0:	ffffbffc 	.word	0xffffbffc
 8001af4:	fc00f81e 	.word	0xfc00f81e

08001af8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b0a1      	sub	sp, #132	; 0x84
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4a9a      	ldr	r2, [pc, #616]	; (8001d7c <HAL_ADC_ConfigChannel+0x284>)
 8001b12:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x2a>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e2bc      	b.n	800209c <HAL_ADC_ConfigChannel+0x5a4>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fe61 	bl	80017f6 <LL_ADC_REG_IsConversionOngoing>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 82a1 	bne.w	800207e <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d108      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x62>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0e9b      	lsrs	r3, r3, #26
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	2201      	movs	r2, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	e016      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x90>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b6a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001b72:	2320      	movs	r3, #32
 8001b74:	e003      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	2201      	movs	r2, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	69d1      	ldr	r1, [r2, #28]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	430b      	orrs	r3, r1
 8001b94:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6859      	ldr	r1, [r3, #4]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f7ff fd4a 	bl	800163c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fe22 	bl	80017f6 <LL_ADC_REG_IsConversionOngoing>
 8001bb2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fe2f 	bl	800181c <LL_ADC_INJ_IsConversionOngoing>
 8001bbe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 80a0 	bne.w	8001d08 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f040 809c 	bne.w	8001d08 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6819      	ldr	r1, [r3, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f7ff fd59 	bl	8001694 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10b      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x110>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	e00a      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x126>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d027      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	6919      	ldr	r1, [r3, #16]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c36:	f7ff fcad 	bl	8001594 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6919      	ldr	r1, [r3, #16]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	7e5b      	ldrb	r3, [r3, #25]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d102      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x158>
 8001c4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c4e:	e000      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x15a>
 8001c50:	2300      	movs	r3, #0
 8001c52:	461a      	mov	r2, r3
 8001c54:	f7ff fcd7 	bl	8001606 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6919      	ldr	r1, [r3, #16]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	7e1b      	ldrb	r3, [r3, #24]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d102      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x176>
 8001c68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c6c:	e000      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x178>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	461a      	mov	r2, r3
 8001c72:	f7ff fcaf 	bl	80015d4 <LL_ADC_SetDataRightShift>
 8001c76:	e047      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	069b      	lsls	r3, r3, #26
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d107      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c9a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ca2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	069b      	lsls	r3, r3, #26
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d107      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cbe:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	069b      	lsls	r3, r3, #26
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d107      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ce2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	069b      	lsls	r3, r3, #26
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d107      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d06:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fd5f 	bl	80017d0 <LL_ADC_IsEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f040 81bb 	bne.w	8002090 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	461a      	mov	r2, r3
 8001d28:	f7ff fce0 	bl	80016ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_ADC_ConfigChannel+0x284>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	f040 8130 	bne.w	8001f98 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10b      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x268>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0e9b      	lsrs	r3, r3, #26
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	bf94      	ite	ls
 8001d58:	2301      	movls	r3, #1
 8001d5a:	2300      	movhi	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	e01b      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x2a0>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d103      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	e005      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x290>
 8001d7c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	3301      	adds	r3, #1
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2b09      	cmp	r3, #9
 8001d90:	bf94      	ite	ls
 8001d92:	2301      	movls	r3, #1
 8001d94:	2300      	movhi	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d079      	beq.n	8001e90 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x2c0>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0e9b      	lsrs	r3, r3, #26
 8001dae:	3301      	adds	r3, #1
 8001db0:	069b      	lsls	r3, r3, #26
 8001db2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001db6:	e015      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x2ec>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	e003      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	3301      	adds	r3, #1
 8001dde:	069b      	lsls	r3, r3, #26
 8001de0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x30c>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	0e9b      	lsrs	r3, r3, #26
 8001df6:	3301      	adds	r3, #1
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	e017      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x33c>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e14:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e003      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2101      	movs	r1, #1
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	ea42 0103 	orr.w	r1, r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10a      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x362>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	0e9b      	lsrs	r3, r3, #26
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	051b      	lsls	r3, r3, #20
 8001e58:	e018      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x394>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001e72:	2320      	movs	r3, #32
 8001e74:	e003      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	e07e      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x3b4>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0e9b      	lsrs	r3, r3, #26
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	069b      	lsls	r3, r3, #26
 8001ea6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eaa:	e015      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x3e0>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	e003      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	069b      	lsls	r3, r3, #26
 8001ed4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x400>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	3301      	adds	r3, #1
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	e017      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x430>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	61bb      	str	r3, [r7, #24]
  return result;
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e003      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	ea42 0103 	orr.w	r1, r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10d      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x45c>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0e9b      	lsrs	r3, r3, #26
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	3b1e      	subs	r3, #30
 8001f4c:	051b      	lsls	r3, r3, #20
 8001f4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f52:	e01b      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x494>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	60fb      	str	r3, [r7, #12]
  return result;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	e003      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f003 021f 	and.w	r2, r3, #31
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	3b1e      	subs	r3, #30
 8001f86:	051b      	lsls	r3, r3, #20
 8001f88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	6892      	ldr	r2, [r2, #8]
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7ff fb7e 	bl	8001694 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	da77      	bge.n	8002090 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fa0:	4840      	ldr	r0, [pc, #256]	; (80020a4 <HAL_ADC_ConfigChannel+0x5ac>)
 8001fa2:	f7ff fae9 	bl	8001578 <LL_ADC_GetCommonPathInternalCh>
 8001fa6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fa8:	483f      	ldr	r0, [pc, #252]	; (80020a8 <HAL_ADC_ConfigChannel+0x5b0>)
 8001faa:	f7ff fc11 	bl	80017d0 <LL_ADC_IsEnabled>
 8001fae:	4604      	mov	r4, r0
 8001fb0:	483e      	ldr	r0, [pc, #248]	; (80020ac <HAL_ADC_ConfigChannel+0x5b4>)
 8001fb2:	f7ff fc0d 	bl	80017d0 <LL_ADC_IsEnabled>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4323      	orrs	r3, r4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d155      	bne.n	800206a <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a3b      	ldr	r2, [pc, #236]	; (80020b0 <HAL_ADC_ConfigChannel+0x5b8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d122      	bne.n	800200e <HAL_ADC_ConfigChannel+0x516>
 8001fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d11d      	bne.n	800200e <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a35      	ldr	r2, [pc, #212]	; (80020ac <HAL_ADC_ConfigChannel+0x5b4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d159      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	482f      	ldr	r0, [pc, #188]	; (80020a4 <HAL_ADC_ConfigChannel+0x5ac>)
 8001fe6:	f7ff fab4 	bl	8001552 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fea:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <HAL_ADC_ConfigChannel+0x5bc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	099b      	lsrs	r3, r3, #6
 8001ff0:	4a31      	ldr	r2, [pc, #196]	; (80020b8 <HAL_ADC_ConfigChannel+0x5c0>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	099b      	lsrs	r3, r3, #6
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001ffe:	e002      	b.n	8002006 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3b01      	subs	r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f9      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800200c:	e040      	b.n	8002090 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a2a      	ldr	r2, [pc, #168]	; (80020bc <HAL_ADC_ConfigChannel+0x5c4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d111      	bne.n	800203c <HAL_ADC_ConfigChannel+0x544>
 8002018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800201a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10c      	bne.n	800203c <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a21      	ldr	r2, [pc, #132]	; (80020ac <HAL_ADC_ConfigChannel+0x5b4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d131      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800202c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002032:	4619      	mov	r1, r3
 8002034:	481b      	ldr	r0, [pc, #108]	; (80020a4 <HAL_ADC_ConfigChannel+0x5ac>)
 8002036:	f7ff fa8c 	bl	8001552 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800203a:	e029      	b.n	8002090 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d124      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x598>
 8002046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11f      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a15      	ldr	r2, [pc, #84]	; (80020ac <HAL_ADC_ConfigChannel+0x5b4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d11a      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800205a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002060:	4619      	mov	r1, r3
 8002062:	4810      	ldr	r0, [pc, #64]	; (80020a4 <HAL_ADC_ConfigChannel+0x5ac>)
 8002064:	f7ff fa75 	bl	8001552 <LL_ADC_SetCommonPathInternalCh>
 8002068:	e012      	b.n	8002090 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	f043 0220 	orr.w	r2, r3, #32
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800207c:	e008      	b.n	8002090 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	f043 0220 	orr.w	r2, r3, #32
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002098:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800209c:	4618      	mov	r0, r3
 800209e:	3784      	adds	r7, #132	; 0x84
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd90      	pop	{r4, r7, pc}
 80020a4:	40022300 	.word	0x40022300
 80020a8:	40022000 	.word	0x40022000
 80020ac:	40022100 	.word	0x40022100
 80020b0:	cb840000 	.word	0xcb840000
 80020b4:	24000000 	.word	0x24000000
 80020b8:	053e2d63 	.word	0x053e2d63
 80020bc:	bac04000 	.word	0xbac04000
 80020c0:	cfb80000 	.word	0xcfb80000

080020c4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80020cc:	4b60      	ldr	r3, [pc, #384]	; (8002250 <ADC_ConfigureBoostMode+0x18c>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01c      	beq.n	8002112 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80020d8:	f001 fc1a 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 80020dc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020e6:	d010      	beq.n	800210a <ADC_ConfigureBoostMode+0x46>
 80020e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020ec:	d873      	bhi.n	80021d6 <ADC_ConfigureBoostMode+0x112>
 80020ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f2:	d002      	beq.n	80020fa <ADC_ConfigureBoostMode+0x36>
 80020f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020f8:	d16d      	bne.n	80021d6 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	0c1b      	lsrs	r3, r3, #16
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	fbb2 f3f3 	udiv	r3, r2, r3
 8002106:	60fb      	str	r3, [r7, #12]
        break;
 8002108:	e068      	b.n	80021dc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	60fb      	str	r3, [r7, #12]
        break;
 8002110:	e064      	b.n	80021dc <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002112:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002116:	f04f 0100 	mov.w	r1, #0
 800211a:	f002 fe13 	bl	8004d44 <HAL_RCCEx_GetPeriphCLKFreq>
 800211e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002128:	d051      	beq.n	80021ce <ADC_ConfigureBoostMode+0x10a>
 800212a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800212e:	d854      	bhi.n	80021da <ADC_ConfigureBoostMode+0x116>
 8002130:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002134:	d047      	beq.n	80021c6 <ADC_ConfigureBoostMode+0x102>
 8002136:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800213a:	d84e      	bhi.n	80021da <ADC_ConfigureBoostMode+0x116>
 800213c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002140:	d03d      	beq.n	80021be <ADC_ConfigureBoostMode+0xfa>
 8002142:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002146:	d848      	bhi.n	80021da <ADC_ConfigureBoostMode+0x116>
 8002148:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800214c:	d033      	beq.n	80021b6 <ADC_ConfigureBoostMode+0xf2>
 800214e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002152:	d842      	bhi.n	80021da <ADC_ConfigureBoostMode+0x116>
 8002154:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002158:	d029      	beq.n	80021ae <ADC_ConfigureBoostMode+0xea>
 800215a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800215e:	d83c      	bhi.n	80021da <ADC_ConfigureBoostMode+0x116>
 8002160:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002164:	d01a      	beq.n	800219c <ADC_ConfigureBoostMode+0xd8>
 8002166:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800216a:	d836      	bhi.n	80021da <ADC_ConfigureBoostMode+0x116>
 800216c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002170:	d014      	beq.n	800219c <ADC_ConfigureBoostMode+0xd8>
 8002172:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002176:	d830      	bhi.n	80021da <ADC_ConfigureBoostMode+0x116>
 8002178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800217c:	d00e      	beq.n	800219c <ADC_ConfigureBoostMode+0xd8>
 800217e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002182:	d82a      	bhi.n	80021da <ADC_ConfigureBoostMode+0x116>
 8002184:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002188:	d008      	beq.n	800219c <ADC_ConfigureBoostMode+0xd8>
 800218a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800218e:	d824      	bhi.n	80021da <ADC_ConfigureBoostMode+0x116>
 8002190:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002194:	d002      	beq.n	800219c <ADC_ConfigureBoostMode+0xd8>
 8002196:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800219a:	d11e      	bne.n	80021da <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0c9b      	lsrs	r3, r3, #18
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	60fb      	str	r3, [r7, #12]
        break;
 80021ac:	e016      	b.n	80021dc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	60fb      	str	r3, [r7, #12]
        break;
 80021b4:	e012      	b.n	80021dc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	60fb      	str	r3, [r7, #12]
        break;
 80021bc:	e00e      	b.n	80021dc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	099b      	lsrs	r3, r3, #6
 80021c2:	60fb      	str	r3, [r7, #12]
        break;
 80021c4:	e00a      	b.n	80021dc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	09db      	lsrs	r3, r3, #7
 80021ca:	60fb      	str	r3, [r7, #12]
        break;
 80021cc:	e006      	b.n	80021dc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	60fb      	str	r3, [r7, #12]
        break;
 80021d4:	e002      	b.n	80021dc <ADC_ConfigureBoostMode+0x118>
        break;
 80021d6:	bf00      	nop
 80021d8:	e000      	b.n	80021dc <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80021da:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	085b      	lsrs	r3, r3, #1
 80021e0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <ADC_ConfigureBoostMode+0x190>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d808      	bhi.n	80021fc <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80021f8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80021fa:	e025      	b.n	8002248 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a16      	ldr	r2, [pc, #88]	; (8002258 <ADC_ConfigureBoostMode+0x194>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d80a      	bhi.n	800221a <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002216:	609a      	str	r2, [r3, #8]
}
 8002218:	e016      	b.n	8002248 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a0f      	ldr	r2, [pc, #60]	; (800225c <ADC_ConfigureBoostMode+0x198>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d80a      	bhi.n	8002238 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002234:	609a      	str	r2, [r3, #8]
}
 8002236:	e007      	b.n	8002248 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002246:	609a      	str	r2, [r3, #8]
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40022300 	.word	0x40022300
 8002254:	005f5e10 	.word	0x005f5e10
 8002258:	00bebc20 	.word	0x00bebc20
 800225c:	017d7840 	.word	0x017d7840

08002260 <LL_ADC_IsEnabled>:
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <LL_ADC_IsEnabled+0x18>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <LL_ADC_IsEnabled+0x1a>
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_ADC_REG_IsConversionOngoing>:
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b04      	cmp	r3, #4
 8002298:	d101      	bne.n	800229e <LL_ADC_REG_IsConversionOngoing+0x18>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b09f      	sub	sp, #124	; 0x7c
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e080      	b.n	80023cc <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a3d      	ldr	r2, [pc, #244]	; (80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d102      	bne.n	80022ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80022e4:	4b3c      	ldr	r3, [pc, #240]	; (80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	e001      	b.n	80022ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10b      	bne.n	800230c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	f043 0220 	orr.w	r2, r3, #32
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e05f      	b.n	80023cc <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ffb9 	bl	8002286 <LL_ADC_REG_IsConversionOngoing>
 8002314:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ffb3 	bl	8002286 <LL_ADC_REG_IsConversionOngoing>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d141      	bne.n	80023aa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002328:	2b00      	cmp	r3, #0
 800232a:	d13e      	bne.n	80023aa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 800232e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	431a      	orrs	r2, r3
 8002346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002348:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800234a:	4822      	ldr	r0, [pc, #136]	; (80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800234c:	f7ff ff88 	bl	8002260 <LL_ADC_IsEnabled>
 8002350:	4604      	mov	r4, r0
 8002352:	4821      	ldr	r0, [pc, #132]	; (80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002354:	f7ff ff84 	bl	8002260 <LL_ADC_IsEnabled>
 8002358:	4603      	mov	r3, r0
 800235a:	4323      	orrs	r3, r4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d12e      	bne.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002366:	4013      	ands	r3, r2
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	6811      	ldr	r1, [r2, #0]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	6892      	ldr	r2, [r2, #8]
 8002370:	430a      	orrs	r2, r1
 8002372:	431a      	orrs	r2, r3
 8002374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002376:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002378:	e021      	b.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800237a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002384:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002386:	4813      	ldr	r0, [pc, #76]	; (80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002388:	f7ff ff6a 	bl	8002260 <LL_ADC_IsEnabled>
 800238c:	4604      	mov	r4, r0
 800238e:	4812      	ldr	r0, [pc, #72]	; (80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002390:	f7ff ff66 	bl	8002260 <LL_ADC_IsEnabled>
 8002394:	4603      	mov	r3, r0
 8002396:	4323      	orrs	r3, r4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d110      	bne.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800239c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023a6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023a8:	e009      	b.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f043 0220 	orr.w	r2, r3, #32
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80023bc:	e000      	b.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023be:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	377c      	adds	r7, #124	; 0x7c
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd90      	pop	{r4, r7, pc}
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40022100 	.word	0x40022100
 80023dc:	40022300 	.word	0x40022300
 80023e0:	fffff0e0 	.word	0xfffff0e0

080023e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <__NVIC_SetPriorityGrouping+0x40>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002400:	4013      	ands	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <__NVIC_SetPriorityGrouping+0x44>)
 800240e:	4313      	orrs	r3, r2
 8002410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002412:	4a04      	ldr	r2, [pc, #16]	; (8002424 <__NVIC_SetPriorityGrouping+0x40>)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	60d3      	str	r3, [r2, #12]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00
 8002428:	05fa0000 	.word	0x05fa0000

0800242c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <__NVIC_GetPriorityGrouping+0x18>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	f003 0307 	and.w	r3, r3, #7
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002456:	2b00      	cmp	r3, #0
 8002458:	db0b      	blt.n	8002472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	4907      	ldr	r1, [pc, #28]	; (8002480 <__NVIC_EnableIRQ+0x38>)
 8002462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	2001      	movs	r0, #1
 800246a:	fa00 f202 	lsl.w	r2, r0, r2
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000e100 	.word	0xe000e100

08002484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db0a      	blt.n	80024ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	490c      	ldr	r1, [pc, #48]	; (80024d0 <__NVIC_SetPriority+0x4c>)
 800249e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024a2:	0112      	lsls	r2, r2, #4
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	440b      	add	r3, r1
 80024a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ac:	e00a      	b.n	80024c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4908      	ldr	r1, [pc, #32]	; (80024d4 <__NVIC_SetPriority+0x50>)
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	3b04      	subs	r3, #4
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	440b      	add	r3, r1
 80024c2:	761a      	strb	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000e100 	.word	0xe000e100
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	; 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f1c3 0307 	rsb	r3, r3, #7
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	bf28      	it	cs
 80024f6:	2304      	movcs	r3, #4
 80024f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d902      	bls.n	8002508 <NVIC_EncodePriority+0x30>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3b03      	subs	r3, #3
 8002506:	e000      	b.n	800250a <NVIC_EncodePriority+0x32>
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	401a      	ands	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43d9      	mvns	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	4313      	orrs	r3, r2
         );
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002550:	d301      	bcc.n	8002556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002552:	2301      	movs	r3, #1
 8002554:	e00f      	b.n	8002576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <SysTick_Config+0x40>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255e:	210f      	movs	r1, #15
 8002560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002564:	f7ff ff8e 	bl	8002484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <SysTick_Config+0x40>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <SysTick_Config+0x40>)
 8002570:	2207      	movs	r2, #7
 8002572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	e000e010 	.word	0xe000e010

08002584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff29 	bl	80023e4 <__NVIC_SetPriorityGrouping>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025a8:	f7ff ff40 	bl	800242c <__NVIC_GetPriorityGrouping>
 80025ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f7ff ff90 	bl	80024d8 <NVIC_EncodePriority>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff5f 	bl	8002484 <__NVIC_SetPriority>
}
 80025c6:	bf00      	nop
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff33 	bl	8002448 <__NVIC_EnableIRQ>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ffa4 	bl	8002540 <SysTick_Config>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002612:	4b89      	ldr	r3, [pc, #548]	; (8002838 <HAL_GPIO_Init+0x234>)
 8002614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002616:	e194      	b.n	8002942 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2101      	movs	r1, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8186 	beq.w	800293c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d005      	beq.n	8002648 <HAL_GPIO_Init+0x44>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d130      	bne.n	80026aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	2203      	movs	r2, #3
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800267e:	2201      	movs	r2, #1
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	f003 0201 	and.w	r2, r3, #1
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d017      	beq.n	80026e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d123      	bne.n	800273a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	08da      	lsrs	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3208      	adds	r2, #8
 80026fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	220f      	movs	r2, #15
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	08da      	lsrs	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3208      	adds	r2, #8
 8002734:	69b9      	ldr	r1, [r7, #24]
 8002736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	2203      	movs	r2, #3
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0203 	and.w	r2, r3, #3
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80e0 	beq.w	800293c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277c:	4b2f      	ldr	r3, [pc, #188]	; (800283c <HAL_GPIO_Init+0x238>)
 800277e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002782:	4a2e      	ldr	r2, [pc, #184]	; (800283c <HAL_GPIO_Init+0x238>)
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <HAL_GPIO_Init+0x238>)
 800278e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800279a:	4a29      	ldr	r2, [pc, #164]	; (8002840 <HAL_GPIO_Init+0x23c>)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	220f      	movs	r2, #15
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a20      	ldr	r2, [pc, #128]	; (8002844 <HAL_GPIO_Init+0x240>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d052      	beq.n	800286c <HAL_GPIO_Init+0x268>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <HAL_GPIO_Init+0x244>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d031      	beq.n	8002832 <HAL_GPIO_Init+0x22e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1e      	ldr	r2, [pc, #120]	; (800284c <HAL_GPIO_Init+0x248>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d02b      	beq.n	800282e <HAL_GPIO_Init+0x22a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <HAL_GPIO_Init+0x24c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d025      	beq.n	800282a <HAL_GPIO_Init+0x226>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <HAL_GPIO_Init+0x250>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01f      	beq.n	8002826 <HAL_GPIO_Init+0x222>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <HAL_GPIO_Init+0x254>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d019      	beq.n	8002822 <HAL_GPIO_Init+0x21e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a1a      	ldr	r2, [pc, #104]	; (800285c <HAL_GPIO_Init+0x258>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_GPIO_Init+0x21a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <HAL_GPIO_Init+0x25c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00d      	beq.n	800281a <HAL_GPIO_Init+0x216>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a18      	ldr	r2, [pc, #96]	; (8002864 <HAL_GPIO_Init+0x260>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d007      	beq.n	8002816 <HAL_GPIO_Init+0x212>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a17      	ldr	r2, [pc, #92]	; (8002868 <HAL_GPIO_Init+0x264>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_GPIO_Init+0x20e>
 800280e:	2309      	movs	r3, #9
 8002810:	e02d      	b.n	800286e <HAL_GPIO_Init+0x26a>
 8002812:	230a      	movs	r3, #10
 8002814:	e02b      	b.n	800286e <HAL_GPIO_Init+0x26a>
 8002816:	2308      	movs	r3, #8
 8002818:	e029      	b.n	800286e <HAL_GPIO_Init+0x26a>
 800281a:	2307      	movs	r3, #7
 800281c:	e027      	b.n	800286e <HAL_GPIO_Init+0x26a>
 800281e:	2306      	movs	r3, #6
 8002820:	e025      	b.n	800286e <HAL_GPIO_Init+0x26a>
 8002822:	2305      	movs	r3, #5
 8002824:	e023      	b.n	800286e <HAL_GPIO_Init+0x26a>
 8002826:	2304      	movs	r3, #4
 8002828:	e021      	b.n	800286e <HAL_GPIO_Init+0x26a>
 800282a:	2303      	movs	r3, #3
 800282c:	e01f      	b.n	800286e <HAL_GPIO_Init+0x26a>
 800282e:	2302      	movs	r3, #2
 8002830:	e01d      	b.n	800286e <HAL_GPIO_Init+0x26a>
 8002832:	2301      	movs	r3, #1
 8002834:	e01b      	b.n	800286e <HAL_GPIO_Init+0x26a>
 8002836:	bf00      	nop
 8002838:	58000080 	.word	0x58000080
 800283c:	58024400 	.word	0x58024400
 8002840:	58000400 	.word	0x58000400
 8002844:	58020000 	.word	0x58020000
 8002848:	58020400 	.word	0x58020400
 800284c:	58020800 	.word	0x58020800
 8002850:	58020c00 	.word	0x58020c00
 8002854:	58021000 	.word	0x58021000
 8002858:	58021400 	.word	0x58021400
 800285c:	58021800 	.word	0x58021800
 8002860:	58021c00 	.word	0x58021c00
 8002864:	58022000 	.word	0x58022000
 8002868:	58022400 	.word	0x58022400
 800286c:	2300      	movs	r3, #0
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	f002 0203 	and.w	r2, r2, #3
 8002874:	0092      	lsls	r2, r2, #2
 8002876:	4093      	lsls	r3, r2
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800287e:	4938      	ldr	r1, [pc, #224]	; (8002960 <HAL_GPIO_Init+0x35c>)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	3302      	adds	r3, #2
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	3301      	adds	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f ae63 	bne.w	8002618 <HAL_GPIO_Init+0x14>
  }
}
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	3724      	adds	r7, #36	; 0x24
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	58000400 	.word	0x58000400

08002964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
 8002970:	4613      	mov	r3, r2
 8002972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002974:	787b      	ldrb	r3, [r7, #1]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800297a:	887a      	ldrh	r2, [r7, #2]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002980:	e003      	b.n	800298a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	041a      	lsls	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	619a      	str	r2, [r3, #24]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80029a0:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	2b06      	cmp	r3, #6
 80029aa:	d00a      	beq.n	80029c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029ac:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d001      	beq.n	80029be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e040      	b.n	8002a40 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e03e      	b.n	8002a40 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80029ca:	491f      	ldr	r1, [pc, #124]	; (8002a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80029d2:	f7fe fd7b 	bl	80014cc <HAL_GetTick>
 80029d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029d8:	e009      	b.n	80029ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029da:	f7fe fd77 	bl	80014cc <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e8:	d901      	bls.n	80029ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e028      	b.n	8002a40 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029ee:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <HAL_PWREx_ConfigSupply+0xb0>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fa:	d1ee      	bne.n	80029da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b1e      	cmp	r3, #30
 8002a00:	d008      	beq.n	8002a14 <HAL_PWREx_ConfigSupply+0x7c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b2e      	cmp	r3, #46	; 0x2e
 8002a06:	d005      	beq.n	8002a14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b1d      	cmp	r3, #29
 8002a0c:	d002      	beq.n	8002a14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b2d      	cmp	r3, #45	; 0x2d
 8002a12:	d114      	bne.n	8002a3e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002a14:	f7fe fd5a 	bl	80014cc <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a1a:	e009      	b.n	8002a30 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a1c:	f7fe fd56 	bl	80014cc <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a2a:	d901      	bls.n	8002a30 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e007      	b.n	8002a40 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3c:	d1ee      	bne.n	8002a1c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	58024800 	.word	0x58024800

08002a4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08c      	sub	sp, #48	; 0x30
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d102      	bne.n	8002a60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f000 bc1f 	b.w	800329e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80b3 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6e:	4b95      	ldr	r3, [pc, #596]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a78:	4b92      	ldr	r3, [pc, #584]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	2b10      	cmp	r3, #16
 8002a82:	d007      	beq.n	8002a94 <HAL_RCC_OscConfig+0x48>
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	2b18      	cmp	r3, #24
 8002a88:	d112      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x64>
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d10d      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b8b      	ldr	r3, [pc, #556]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8098 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x186>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 8093 	bne.w	8002bd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e3f6      	b.n	800329e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab8:	d106      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x7c>
 8002aba:	4b82      	ldr	r3, [pc, #520]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a81      	ldr	r2, [pc, #516]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e058      	b.n	8002b7a <HAL_RCC_OscConfig+0x12e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d112      	bne.n	8002af6 <HAL_RCC_OscConfig+0xaa>
 8002ad0:	4b7c      	ldr	r3, [pc, #496]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a7b      	ldr	r2, [pc, #492]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b79      	ldr	r3, [pc, #484]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a78      	ldr	r2, [pc, #480]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002ae2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b76      	ldr	r3, [pc, #472]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a75      	ldr	r2, [pc, #468]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	e041      	b.n	8002b7a <HAL_RCC_OscConfig+0x12e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002afe:	d112      	bne.n	8002b26 <HAL_RCC_OscConfig+0xda>
 8002b00:	4b70      	ldr	r3, [pc, #448]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a6f      	ldr	r2, [pc, #444]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b6d      	ldr	r3, [pc, #436]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a6c      	ldr	r2, [pc, #432]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a69      	ldr	r2, [pc, #420]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	e029      	b.n	8002b7a <HAL_RCC_OscConfig+0x12e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002b2e:	d112      	bne.n	8002b56 <HAL_RCC_OscConfig+0x10a>
 8002b30:	4b64      	ldr	r3, [pc, #400]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a63      	ldr	r2, [pc, #396]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b61      	ldr	r3, [pc, #388]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a60      	ldr	r2, [pc, #384]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b5e      	ldr	r3, [pc, #376]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a5d      	ldr	r2, [pc, #372]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	e011      	b.n	8002b7a <HAL_RCC_OscConfig+0x12e>
 8002b56:	4b5b      	ldr	r3, [pc, #364]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a5a      	ldr	r2, [pc, #360]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b58      	ldr	r3, [pc, #352]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a57      	ldr	r2, [pc, #348]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b55      	ldr	r3, [pc, #340]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a54      	ldr	r2, [pc, #336]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d013      	beq.n	8002baa <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7fe fca3 	bl	80014cc <HAL_GetTick>
 8002b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b8a:	f7fe fc9f 	bl	80014cc <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b64      	cmp	r3, #100	; 0x64
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e380      	b.n	800329e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b9c:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x13e>
 8002ba8:	e014      	b.n	8002bd4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7fe fc8f 	bl	80014cc <HAL_GetTick>
 8002bae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb2:	f7fe fc8b 	bl	80014cc <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b64      	cmp	r3, #100	; 0x64
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e36c      	b.n	800329e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bc4:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x166>
 8002bd0:	e000      	b.n	8002bd4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 808c 	beq.w	8002cfa <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be2:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bec:	4b35      	ldr	r3, [pc, #212]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <HAL_RCC_OscConfig+0x1bc>
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	2b18      	cmp	r3, #24
 8002bfc:	d137      	bne.n	8002c6e <HAL_RCC_OscConfig+0x222>
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d132      	bne.n	8002c6e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c08:	4b2e      	ldr	r3, [pc, #184]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_OscConfig+0x1d4>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e33e      	b.n	800329e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c20:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 0219 	bic.w	r2, r3, #25
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4925      	ldr	r1, [pc, #148]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7fe fc4b 	bl	80014cc <HAL_GetTick>
 8002c36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fc47 	bl	80014cc <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e328      	b.n	800329e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c58:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	061b      	lsls	r3, r3, #24
 8002c66:	4917      	ldr	r1, [pc, #92]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c6c:	e045      	b.n	8002cfa <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d028      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c76:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0219 	bic.w	r2, r3, #25
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	4910      	ldr	r1, [pc, #64]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fc20 	bl	80014cc <HAL_GetTick>
 8002c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fe fc1c 	bl	80014cc <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e2fd      	b.n	800329e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	061b      	lsls	r3, r3, #24
 8002cbc:	4901      	ldr	r1, [pc, #4]	; (8002cc4 <HAL_RCC_OscConfig+0x278>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	604b      	str	r3, [r1, #4]
 8002cc2:	e01a      	b.n	8002cfa <HAL_RCC_OscConfig+0x2ae>
 8002cc4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc8:	4b97      	ldr	r3, [pc, #604]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a96      	ldr	r2, [pc, #600]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fbfa 	bl	80014cc <HAL_GetTick>
 8002cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cdc:	f7fe fbf6 	bl	80014cc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e2d7      	b.n	800329e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cee:	4b8e      	ldr	r3, [pc, #568]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d06a      	beq.n	8002ddc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d06:	4b88      	ldr	r3, [pc, #544]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d10:	4b85      	ldr	r3, [pc, #532]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d007      	beq.n	8002d2c <HAL_RCC_OscConfig+0x2e0>
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b18      	cmp	r3, #24
 8002d20:	d11b      	bne.n	8002d5a <HAL_RCC_OscConfig+0x30e>
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d116      	bne.n	8002d5a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d2c:	4b7e      	ldr	r3, [pc, #504]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_OscConfig+0x2f8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	2b80      	cmp	r3, #128	; 0x80
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e2ac      	b.n	800329e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d44:	4b78      	ldr	r3, [pc, #480]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	061b      	lsls	r3, r3, #24
 8002d52:	4975      	ldr	r1, [pc, #468]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d58:	e040      	b.n	8002ddc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d023      	beq.n	8002daa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d62:	4b71      	ldr	r3, [pc, #452]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a70      	ldr	r2, [pc, #448]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fbad 	bl	80014cc <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d76:	f7fe fba9 	bl	80014cc <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e28a      	b.n	800329e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d88:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d94:	4b64      	ldr	r3, [pc, #400]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	4961      	ldr	r1, [pc, #388]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60cb      	str	r3, [r1, #12]
 8002da8:	e018      	b.n	8002ddc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002daa:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a5e      	ldr	r2, [pc, #376]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe fb89 	bl	80014cc <HAL_GetTick>
 8002dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002dbe:	f7fe fb85 	bl	80014cc <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e266      	b.n	800329e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dd0:	4b55      	ldr	r3, [pc, #340]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d036      	beq.n	8002e56 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d019      	beq.n	8002e24 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df0:	4b4d      	ldr	r3, [pc, #308]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df4:	4a4c      	ldr	r2, [pc, #304]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fb66 	bl	80014cc <HAL_GetTick>
 8002e00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e04:	f7fe fb62 	bl	80014cc <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e243      	b.n	800329e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e16:	4b44      	ldr	r3, [pc, #272]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x3b8>
 8002e22:	e018      	b.n	8002e56 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e24:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e28:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe fb4c 	bl	80014cc <HAL_GetTick>
 8002e34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e38:	f7fe fb48 	bl	80014cc <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e229      	b.n	800329e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e4a:	4b37      	ldr	r3, [pc, #220]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d036      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d019      	beq.n	8002e9e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2e      	ldr	r2, [pc, #184]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e76:	f7fe fb29 	bl	80014cc <HAL_GetTick>
 8002e7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e7e:	f7fe fb25 	bl	80014cc <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e206      	b.n	800329e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x432>
 8002e9c:	e018      	b.n	8002ed0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e9e:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a21      	ldr	r2, [pc, #132]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fb0f 	bl	80014cc <HAL_GetTick>
 8002eae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eb2:	f7fe fb0b 	bl	80014cc <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e1ec      	b.n	800329e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f0      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80af 	beq.w	800303c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <HAL_RCC_OscConfig+0x4e0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <HAL_RCC_OscConfig+0x4e0>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eea:	f7fe faef 	bl	80014cc <HAL_GetTick>
 8002eee:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7fe faeb 	bl	80014cc <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b64      	cmp	r3, #100	; 0x64
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e1cc      	b.n	800329e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCC_OscConfig+0x4e0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d10b      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4e4>
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	4a02      	ldr	r2, [pc, #8]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6713      	str	r3, [r2, #112]	; 0x70
 8002f24:	e05b      	b.n	8002fde <HAL_RCC_OscConfig+0x592>
 8002f26:	bf00      	nop
 8002f28:	58024400 	.word	0x58024400
 8002f2c:	58024800 	.word	0x58024800
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d112      	bne.n	8002f5e <HAL_RCC_OscConfig+0x512>
 8002f38:	4b9d      	ldr	r3, [pc, #628]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	4a9c      	ldr	r2, [pc, #624]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	6713      	str	r3, [r2, #112]	; 0x70
 8002f44:	4b9a      	ldr	r3, [pc, #616]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	4a99      	ldr	r2, [pc, #612]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f50:	4b97      	ldr	r3, [pc, #604]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a96      	ldr	r2, [pc, #600]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f56:	f023 0304 	bic.w	r3, r3, #4
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5c:	e03f      	b.n	8002fde <HAL_RCC_OscConfig+0x592>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b05      	cmp	r3, #5
 8002f64:	d112      	bne.n	8002f8c <HAL_RCC_OscConfig+0x540>
 8002f66:	4b92      	ldr	r3, [pc, #584]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	4a91      	ldr	r2, [pc, #580]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	6713      	str	r3, [r2, #112]	; 0x70
 8002f72:	4b8f      	ldr	r3, [pc, #572]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a8e      	ldr	r2, [pc, #568]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	4b8c      	ldr	r3, [pc, #560]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a8b      	ldr	r2, [pc, #556]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8a:	e028      	b.n	8002fde <HAL_RCC_OscConfig+0x592>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b85      	cmp	r3, #133	; 0x85
 8002f92:	d112      	bne.n	8002fba <HAL_RCC_OscConfig+0x56e>
 8002f94:	4b86      	ldr	r3, [pc, #536]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	4a85      	ldr	r2, [pc, #532]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa0:	4b83      	ldr	r3, [pc, #524]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	4a82      	ldr	r2, [pc, #520]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002faa:	6713      	str	r3, [r2, #112]	; 0x70
 8002fac:	4b80      	ldr	r3, [pc, #512]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4a7f      	ldr	r2, [pc, #508]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb8:	e011      	b.n	8002fde <HAL_RCC_OscConfig+0x592>
 8002fba:	4b7d      	ldr	r3, [pc, #500]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	4a7c      	ldr	r2, [pc, #496]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc6:	4b7a      	ldr	r3, [pc, #488]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fca:	4a79      	ldr	r2, [pc, #484]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd2:	4b77      	ldr	r3, [pc, #476]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a76      	ldr	r2, [pc, #472]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8002fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d015      	beq.n	8003012 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe6:	f7fe fa71 	bl	80014cc <HAL_GetTick>
 8002fea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fe fa6d 	bl	80014cc <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e14c      	b.n	800329e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003004:	4b6a      	ldr	r3, [pc, #424]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ee      	beq.n	8002fee <HAL_RCC_OscConfig+0x5a2>
 8003010:	e014      	b.n	800303c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003012:	f7fe fa5b 	bl	80014cc <HAL_GetTick>
 8003016:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301a:	f7fe fa57 	bl	80014cc <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	f241 3288 	movw	r2, #5000	; 0x1388
 8003028:	4293      	cmp	r3, r2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e136      	b.n	800329e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003030:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ee      	bne.n	800301a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 812b 	beq.w	800329c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003046:	4b5a      	ldr	r3, [pc, #360]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800304e:	2b18      	cmp	r3, #24
 8003050:	f000 80bb 	beq.w	80031ca <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	2b02      	cmp	r3, #2
 800305a:	f040 8095 	bne.w	8003188 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	4b54      	ldr	r3, [pc, #336]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a53      	ldr	r2, [pc, #332]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003064:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fe fa2f 	bl	80014cc <HAL_GetTick>
 800306e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003072:	f7fe fa2b 	bl	80014cc <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e10c      	b.n	800329e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003084:	4b4a      	ldr	r3, [pc, #296]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003090:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003094:	4b47      	ldr	r3, [pc, #284]	; (80031b4 <HAL_RCC_OscConfig+0x768>)
 8003096:	4013      	ands	r3, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030a0:	0112      	lsls	r2, r2, #4
 80030a2:	430a      	orrs	r2, r1
 80030a4:	4942      	ldr	r1, [pc, #264]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	628b      	str	r3, [r1, #40]	; 0x28
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	3b01      	subs	r3, #1
 80030b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b8:	3b01      	subs	r3, #1
 80030ba:	025b      	lsls	r3, r3, #9
 80030bc:	b29b      	uxth	r3, r3
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	3b01      	subs	r3, #1
 80030c6:	041b      	lsls	r3, r3, #16
 80030c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d2:	3b01      	subs	r3, #1
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80030da:	4935      	ldr	r1, [pc, #212]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80030e0:	4b33      	ldr	r3, [pc, #204]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	4a32      	ldr	r2, [pc, #200]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030ec:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 80030ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f0:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <HAL_RCC_OscConfig+0x76c>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030f8:	00d2      	lsls	r2, r2, #3
 80030fa:	492d      	ldr	r1, [pc, #180]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003100:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	f023 020c 	bic.w	r2, r3, #12
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	4928      	ldr	r1, [pc, #160]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 800310e:	4313      	orrs	r3, r2
 8003110:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003112:	4b27      	ldr	r3, [pc, #156]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	f023 0202 	bic.w	r2, r3, #2
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	4924      	ldr	r1, [pc, #144]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003120:	4313      	orrs	r3, r2
 8003122:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003124:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	4a21      	ldr	r2, [pc, #132]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 800312a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003130:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800313c:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003142:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003154:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 800315a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe f9b4 	bl	80014cc <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003168:	f7fe f9b0 	bl	80014cc <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e091      	b.n	800329e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x71c>
 8003186:	e089      	b.n	800329c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <HAL_RCC_OscConfig+0x764>)
 800318e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fe f99a 	bl	80014cc <HAL_GetTick>
 8003198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800319a:	e00f      	b.n	80031bc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319c:	f7fe f996 	bl	80014cc <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d908      	bls.n	80031bc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e077      	b.n	800329e <HAL_RCC_OscConfig+0x852>
 80031ae:	bf00      	nop
 80031b0:	58024400 	.word	0x58024400
 80031b4:	fffffc0c 	.word	0xfffffc0c
 80031b8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031bc:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <HAL_RCC_OscConfig+0x85c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e9      	bne.n	800319c <HAL_RCC_OscConfig+0x750>
 80031c8:	e068      	b.n	800329c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031ca:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <HAL_RCC_OscConfig+0x85c>)
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031d0:	4b35      	ldr	r3, [pc, #212]	; (80032a8 <HAL_RCC_OscConfig+0x85c>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d031      	beq.n	8003242 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f003 0203 	and.w	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d12a      	bne.n	8003242 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d122      	bne.n	8003242 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d11a      	bne.n	8003242 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	0a5b      	lsrs	r3, r3, #9
 8003210:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003218:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d111      	bne.n	8003242 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d108      	bne.n	8003242 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	0e1b      	lsrs	r3, r3, #24
 8003234:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e02b      	b.n	800329e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003246:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <HAL_RCC_OscConfig+0x85c>)
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	08db      	lsrs	r3, r3, #3
 800324c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003250:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	429a      	cmp	r2, r3
 800325a:	d01f      	beq.n	800329c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_RCC_OscConfig+0x85c>)
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <HAL_RCC_OscConfig+0x85c>)
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003268:	f7fe f930 	bl	80014cc <HAL_GetTick>
 800326c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800326e:	bf00      	nop
 8003270:	f7fe f92c 	bl	80014cc <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	4293      	cmp	r3, r2
 800327a:	d0f9      	beq.n	8003270 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_RCC_OscConfig+0x85c>)
 800327e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <HAL_RCC_OscConfig+0x860>)
 8003282:	4013      	ands	r3, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003288:	00d2      	lsls	r2, r2, #3
 800328a:	4907      	ldr	r1, [pc, #28]	; (80032a8 <HAL_RCC_OscConfig+0x85c>)
 800328c:	4313      	orrs	r3, r2
 800328e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_OscConfig+0x85c>)
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <HAL_RCC_OscConfig+0x85c>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3730      	adds	r7, #48	; 0x30
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	58024400 	.word	0x58024400
 80032ac:	ffff0007 	.word	0xffff0007

080032b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e19c      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c4:	4b8a      	ldr	r3, [pc, #552]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d910      	bls.n	80032f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b87      	ldr	r3, [pc, #540]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 020f 	bic.w	r2, r3, #15
 80032da:	4985      	ldr	r1, [pc, #532]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b83      	ldr	r3, [pc, #524]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e184      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d010      	beq.n	8003322 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	4b7b      	ldr	r3, [pc, #492]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800330c:	429a      	cmp	r2, r3
 800330e:	d908      	bls.n	8003322 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003310:	4b78      	ldr	r3, [pc, #480]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	4975      	ldr	r1, [pc, #468]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800331e:	4313      	orrs	r3, r2
 8003320:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d010      	beq.n	8003350 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	4b70      	ldr	r3, [pc, #448]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800333a:	429a      	cmp	r2, r3
 800333c:	d908      	bls.n	8003350 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800333e:	4b6d      	ldr	r3, [pc, #436]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	496a      	ldr	r1, [pc, #424]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800334c:	4313      	orrs	r3, r2
 800334e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	d010      	beq.n	800337e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	4b64      	ldr	r3, [pc, #400]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003368:	429a      	cmp	r2, r3
 800336a:	d908      	bls.n	800337e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800336c:	4b61      	ldr	r3, [pc, #388]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	495e      	ldr	r1, [pc, #376]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800337a:	4313      	orrs	r3, r2
 800337c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d010      	beq.n	80033ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	4b59      	ldr	r3, [pc, #356]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003396:	429a      	cmp	r2, r3
 8003398:	d908      	bls.n	80033ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800339a:	4b56      	ldr	r3, [pc, #344]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4953      	ldr	r1, [pc, #332]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d010      	beq.n	80033da <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	4b4d      	ldr	r3, [pc, #308]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d908      	bls.n	80033da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c8:	4b4a      	ldr	r3, [pc, #296]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f023 020f 	bic.w	r2, r3, #15
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4947      	ldr	r1, [pc, #284]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d055      	beq.n	8003492 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033e6:	4b43      	ldr	r3, [pc, #268]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	4940      	ldr	r1, [pc, #256]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003400:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d121      	bne.n	8003450 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0f6      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d107      	bne.n	8003428 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d115      	bne.n	8003450 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0ea      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d107      	bne.n	8003440 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003430:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0de      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003440:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0d6      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003450:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f023 0207 	bic.w	r2, r3, #7
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4925      	ldr	r1, [pc, #148]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800345e:	4313      	orrs	r3, r2
 8003460:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003462:	f7fe f833 	bl	80014cc <HAL_GetTick>
 8003466:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003468:	e00a      	b.n	8003480 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346a:	f7fe f82f 	bl	80014cc <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	; 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e0be      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003480:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	429a      	cmp	r2, r3
 8003490:	d1eb      	bne.n	800346a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d010      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d208      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ae:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f023 020f 	bic.w	r2, r3, #15
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	490e      	ldr	r1, [pc, #56]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d214      	bcs.n	80034f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 020f 	bic.w	r2, r3, #15
 80034d6:	4906      	ldr	r1, [pc, #24]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d005      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e086      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
 80034f0:	52002000 	.word	0x52002000
 80034f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d010      	beq.n	8003526 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	4b3f      	ldr	r3, [pc, #252]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003510:	429a      	cmp	r2, r3
 8003512:	d208      	bcs.n	8003526 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003514:	4b3c      	ldr	r3, [pc, #240]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	4939      	ldr	r1, [pc, #228]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003522:	4313      	orrs	r3, r2
 8003524:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d010      	beq.n	8003554 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	4b34      	ldr	r3, [pc, #208]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800353e:	429a      	cmp	r2, r3
 8003540:	d208      	bcs.n	8003554 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	492e      	ldr	r1, [pc, #184]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003550:	4313      	orrs	r3, r2
 8003552:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b00      	cmp	r3, #0
 800355e:	d010      	beq.n	8003582 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	4b28      	ldr	r3, [pc, #160]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800356c:	429a      	cmp	r2, r3
 800356e:	d208      	bcs.n	8003582 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003570:	4b25      	ldr	r3, [pc, #148]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	4922      	ldr	r1, [pc, #136]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 800357e:	4313      	orrs	r3, r2
 8003580:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d010      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69da      	ldr	r2, [r3, #28]
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800359a:	429a      	cmp	r2, r3
 800359c:	d208      	bcs.n	80035b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800359e:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	4917      	ldr	r1, [pc, #92]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80035b0:	f000 f834 	bl	800361c <HAL_RCC_GetSysClockFreq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	0a1b      	lsrs	r3, r3, #8
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	4912      	ldr	r1, [pc, #72]	; (800360c <HAL_RCC_ClockConfig+0x35c>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
 80035cc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	4a0d      	ldr	r2, [pc, #52]	; (800360c <HAL_RCC_ClockConfig+0x35c>)
 80035d8:	5cd3      	ldrb	r3, [r2, r3]
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
 80035e4:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <HAL_RCC_ClockConfig+0x360>)
 80035e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035e8:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <HAL_RCC_ClockConfig+0x364>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <HAL_RCC_ClockConfig+0x368>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd ff20 	bl	8001438 <HAL_InitTick>
 80035f8:	4603      	mov	r3, r0
 80035fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	58024400 	.word	0x58024400
 800360c:	08008924 	.word	0x08008924
 8003610:	24000004 	.word	0x24000004
 8003614:	24000000 	.word	0x24000000
 8003618:	24000008 	.word	0x24000008

0800361c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	; 0x24
 8003620:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003622:	4bb3      	ldr	r3, [pc, #716]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800362a:	2b18      	cmp	r3, #24
 800362c:	f200 8155 	bhi.w	80038da <HAL_RCC_GetSysClockFreq+0x2be>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	0800369d 	.word	0x0800369d
 800363c:	080038db 	.word	0x080038db
 8003640:	080038db 	.word	0x080038db
 8003644:	080038db 	.word	0x080038db
 8003648:	080038db 	.word	0x080038db
 800364c:	080038db 	.word	0x080038db
 8003650:	080038db 	.word	0x080038db
 8003654:	080038db 	.word	0x080038db
 8003658:	080036c3 	.word	0x080036c3
 800365c:	080038db 	.word	0x080038db
 8003660:	080038db 	.word	0x080038db
 8003664:	080038db 	.word	0x080038db
 8003668:	080038db 	.word	0x080038db
 800366c:	080038db 	.word	0x080038db
 8003670:	080038db 	.word	0x080038db
 8003674:	080038db 	.word	0x080038db
 8003678:	080036c9 	.word	0x080036c9
 800367c:	080038db 	.word	0x080038db
 8003680:	080038db 	.word	0x080038db
 8003684:	080038db 	.word	0x080038db
 8003688:	080038db 	.word	0x080038db
 800368c:	080038db 	.word	0x080038db
 8003690:	080038db 	.word	0x080038db
 8003694:	080038db 	.word	0x080038db
 8003698:	080036cf 	.word	0x080036cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800369c:	4b94      	ldr	r3, [pc, #592]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036a8:	4b91      	ldr	r3, [pc, #580]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	08db      	lsrs	r3, r3, #3
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	4a90      	ldr	r2, [pc, #576]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
 80036b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80036ba:	e111      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036bc:	4b8d      	ldr	r3, [pc, #564]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036be:	61bb      	str	r3, [r7, #24]
      break;
 80036c0:	e10e      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80036c2:	4b8d      	ldr	r3, [pc, #564]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036c4:	61bb      	str	r3, [r7, #24]
      break;
 80036c6:	e10b      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80036c8:	4b8c      	ldr	r3, [pc, #560]	; (80038fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036ca:	61bb      	str	r3, [r7, #24]
      break;
 80036cc:	e108      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036ce:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80036d8:	4b85      	ldr	r3, [pc, #532]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036e4:	4b82      	ldr	r3, [pc, #520]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80036ee:	4b80      	ldr	r3, [pc, #512]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f2:	08db      	lsrs	r3, r3, #3
 80036f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003706:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80e1 	beq.w	80038d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b02      	cmp	r3, #2
 8003716:	f000 8083 	beq.w	8003820 <HAL_RCC_GetSysClockFreq+0x204>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b02      	cmp	r3, #2
 800371e:	f200 80a1 	bhi.w	8003864 <HAL_RCC_GetSysClockFreq+0x248>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x114>
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d056      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800372e:	e099      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003730:	4b6f      	ldr	r3, [pc, #444]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d02d      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800373c:	4b6c      	ldr	r3, [pc, #432]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	08db      	lsrs	r3, r3, #3
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	4a6b      	ldr	r2, [pc, #428]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
 800374c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003766:	4b62      	ldr	r3, [pc, #392]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003776:	ed97 6a02 	vldr	s12, [r7, #8]
 800377a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003900 <HAL_RCC_GetSysClockFreq+0x2e4>
 800377e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800378a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800378e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003792:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003796:	e087      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003904 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037aa:	4b51      	ldr	r3, [pc, #324]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80037be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003900 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037da:	e065      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003908 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ee:	4b40      	ldr	r3, [pc, #256]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003802:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003900 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800380a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800380e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800381e:	e043      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800390c <HAL_RCC_GetSysClockFreq+0x2f0>
 800382e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003832:	4b2f      	ldr	r3, [pc, #188]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003842:	ed97 6a02 	vldr	s12, [r7, #8]
 8003846:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003900 <HAL_RCC_GetSysClockFreq+0x2e4>
 800384a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800384e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003862:	e021      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003908 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003876:	4b1e      	ldr	r3, [pc, #120]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003886:	ed97 6a02 	vldr	s12, [r7, #8]
 800388a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003900 <HAL_RCC_GetSysClockFreq+0x2e4>
 800388e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800389a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	0a5b      	lsrs	r3, r3, #9
 80038ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b2:	3301      	adds	r3, #1
 80038b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	ee07 3a90 	vmov	s15, r3
 80038bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80038c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038cc:	ee17 3a90 	vmov	r3, s15
 80038d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80038d2:	e005      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
      break;
 80038d8:	e002      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038dc:	61bb      	str	r3, [r7, #24]
      break;
 80038de:	bf00      	nop
  }

  return sysclockfreq;
 80038e0:	69bb      	ldr	r3, [r7, #24]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3724      	adds	r7, #36	; 0x24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	58024400 	.word	0x58024400
 80038f4:	03d09000 	.word	0x03d09000
 80038f8:	003d0900 	.word	0x003d0900
 80038fc:	007a1200 	.word	0x007a1200
 8003900:	46000000 	.word	0x46000000
 8003904:	4c742400 	.word	0x4c742400
 8003908:	4a742400 	.word	0x4a742400
 800390c:	4af42400 	.word	0x4af42400

08003910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003916:	f7ff fe81 	bl	800361c <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b10      	ldr	r3, [pc, #64]	; (8003960 <HAL_RCC_GetHCLKFreq+0x50>)
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	0a1b      	lsrs	r3, r3, #8
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490f      	ldr	r1, [pc, #60]	; (8003964 <HAL_RCC_GetHCLKFreq+0x54>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	fa22 f303 	lsr.w	r3, r2, r3
 8003932:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <HAL_RCC_GetHCLKFreq+0x50>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	4a09      	ldr	r2, [pc, #36]	; (8003964 <HAL_RCC_GetHCLKFreq+0x54>)
 800393e:	5cd3      	ldrb	r3, [r2, r3]
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	4a07      	ldr	r2, [pc, #28]	; (8003968 <HAL_RCC_GetHCLKFreq+0x58>)
 800394c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800394e:	4a07      	ldr	r2, [pc, #28]	; (800396c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <HAL_RCC_GetHCLKFreq+0x58>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	58024400 	.word	0x58024400
 8003964:	08008924 	.word	0x08008924
 8003968:	24000004 	.word	0x24000004
 800396c:	24000000 	.word	0x24000000

08003970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003974:	f7ff ffcc 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4904      	ldr	r1, [pc, #16]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	58024400 	.word	0x58024400
 8003998:	08008924 	.word	0x08008924

0800399c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80039a0:	f7ff ffb6 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4904      	ldr	r1, [pc, #16]	; (80039c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	58024400 	.word	0x58024400
 80039c4:	08008924 	.word	0x08008924

080039c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039cc:	b0c8      	sub	sp, #288	; 0x120
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039d4:	2300      	movs	r3, #0
 80039d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039da:	2300      	movs	r3, #0
 80039dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80039ec:	2500      	movs	r5, #0
 80039ee:	ea54 0305 	orrs.w	r3, r4, r5
 80039f2:	d049      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80039f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039fe:	d02f      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a04:	d828      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a0a:	d01a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a10:	d822      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1a:	d007      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a1c:	e01c      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a1e:	4ba7      	ldr	r3, [pc, #668]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	4aa6      	ldr	r2, [pc, #664]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a2a:	e01a      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a30:	3308      	adds	r3, #8
 8003a32:	2102      	movs	r1, #2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f002 fa6d 	bl	8005f14 <RCCEx_PLL2_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a40:	e00f      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a46:	3328      	adds	r3, #40	; 0x28
 8003a48:	2102      	movs	r1, #2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f002 fb14 	bl	8006078 <RCCEx_PLL3_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a56:	e004      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a5e:	e000      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a6a:	4b94      	ldr	r3, [pc, #592]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a78:	4a90      	ldr	r2, [pc, #576]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	6513      	str	r3, [r2, #80]	; 0x50
 8003a7e:	e003      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003a94:	f04f 0900 	mov.w	r9, #0
 8003a98:	ea58 0309 	orrs.w	r3, r8, r9
 8003a9c:	d047      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d82a      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003aa8:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003ac5 	.word	0x08003ac5
 8003ab4:	08003ad3 	.word	0x08003ad3
 8003ab8:	08003ae9 	.word	0x08003ae9
 8003abc:	08003b07 	.word	0x08003b07
 8003ac0:	08003b07 	.word	0x08003b07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac4:	4b7d      	ldr	r3, [pc, #500]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	4a7c      	ldr	r2, [pc, #496]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ad0:	e01a      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f002 fa1a 	bl	8005f14 <RCCEx_PLL2_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ae6:	e00f      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aec:	3328      	adds	r3, #40	; 0x28
 8003aee:	2100      	movs	r1, #0
 8003af0:	4618      	mov	r0, r3
 8003af2:	f002 fac1 	bl	8006078 <RCCEx_PLL3_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003afc:	e004      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b10:	4b6a      	ldr	r3, [pc, #424]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b14:	f023 0107 	bic.w	r1, r3, #7
 8003b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	4a67      	ldr	r2, [pc, #412]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6513      	str	r3, [r2, #80]	; 0x50
 8003b24:	e003      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b2a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003b3a:	f04f 0b00 	mov.w	fp, #0
 8003b3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b42:	d054      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b4e:	d036      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003b50:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b54:	d82f      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5a:	d032      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b60:	d829      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b62:	2bc0      	cmp	r3, #192	; 0xc0
 8003b64:	d02f      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003b66:	2bc0      	cmp	r3, #192	; 0xc0
 8003b68:	d825      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b6a:	2b80      	cmp	r3, #128	; 0x80
 8003b6c:	d018      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003b6e:	2b80      	cmp	r3, #128	; 0x80
 8003b70:	d821      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003b76:	2b40      	cmp	r3, #64	; 0x40
 8003b78:	d007      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003b7a:	e01c      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b7c:	4b4f      	ldr	r3, [pc, #316]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	4a4e      	ldr	r2, [pc, #312]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003b88:	e01e      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8e:	3308      	adds	r3, #8
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f002 f9be 	bl	8005f14 <RCCEx_PLL2_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003b9e:	e013      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba4:	3328      	adds	r3, #40	; 0x28
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f002 fa65 	bl	8006078 <RCCEx_PLL3_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bbc:	e004      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003bbe:	bf00      	nop
 8003bc0:	e002      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003bd0:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	4a37      	ldr	r2, [pc, #220]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6513      	str	r3, [r2, #80]	; 0x50
 8003be4:	e003      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003bfa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c04:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	d05c      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c14:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003c18:	d03b      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c1a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003c1e:	d834      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c24:	d037      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2a:	d82e      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c30:	d033      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c32:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c36:	d828      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3c:	d01a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c42:	d822      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c4c:	d007      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003c4e:	e01c      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c50:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c5c:	e01e      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c62:	3308      	adds	r3, #8
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f002 f954 	bl	8005f14 <RCCEx_PLL2_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c72:	e013      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c78:	3328      	adds	r3, #40	; 0x28
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f002 f9fb 	bl	8006078 <RCCEx_PLL3_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c88:	e008      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c90:	e004      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003c92:	bf00      	nop
 8003c94:	e002      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10d      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb2:	4a02      	ldr	r2, [pc, #8]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6513      	str	r3, [r2, #80]	; 0x50
 8003cb8:	e006      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003cba:	bf00      	nop
 8003cbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003cde:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	d03a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cee:	2b30      	cmp	r3, #48	; 0x30
 8003cf0:	d01f      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003cf2:	2b30      	cmp	r3, #48	; 0x30
 8003cf4:	d819      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d00c      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d815      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d019      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d111      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d06:	4bae      	ldr	r3, [pc, #696]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	4aad      	ldr	r2, [pc, #692]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003d12:	e011      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d18:	3308      	adds	r3, #8
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f002 f8f9 	bl	8005f14 <RCCEx_PLL2_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003d28:	e006      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d30:	e002      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003d32:	bf00      	nop
 8003d34:	e000      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003d40:	4b9f      	ldr	r3, [pc, #636]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d44:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4e:	4a9c      	ldr	r2, [pc, #624]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d50:	430b      	orrs	r3, r1
 8003d52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d54:	e003      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003d6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	d051      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d88:	d035      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d8e:	d82e      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003d90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d94:	d031      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003d96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d9a:	d828      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da0:	d01a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da6:	d822      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db0:	d007      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003db2:	e01c      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db4:	4b82      	ldr	r3, [pc, #520]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	4a81      	ldr	r2, [pc, #516]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dc0:	e01c      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f002 f8a2 	bl	8005f14 <RCCEx_PLL2_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dd6:	e011      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ddc:	3328      	adds	r3, #40	; 0x28
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f002 f949 	bl	8006078 <RCCEx_PLL3_Config>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dec:	e006      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003df4:	e002      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003df6:	bf00      	nop
 8003df8:	e000      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10a      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e04:	4b6e      	ldr	r3, [pc, #440]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e08:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e12:	4a6b      	ldr	r2, [pc, #428]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6513      	str	r3, [r2, #80]	; 0x50
 8003e18:	e003      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e1e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	d053      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4c:	d033      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003e4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e52:	d82c      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e58:	d02f      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003e5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e5e:	d826      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e64:	d02b      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e6a:	d820      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e70:	d012      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003e72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e76:	d81a      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d022      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d115      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e86:	3308      	adds	r3, #8
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f002 f842 	bl	8005f14 <RCCEx_PLL2_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e96:	e015      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e9c:	3328      	adds	r3, #40	; 0x28
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f002 f8e9 	bl	8006078 <RCCEx_PLL3_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003eb4:	e006      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003eb6:	bf00      	nop
 8003eb8:	e004      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003eba:	bf00      	nop
 8003ebc:	e002      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ecc:	4b3c      	ldr	r3, [pc, #240]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eda:	4a39      	ldr	r2, [pc, #228]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003edc:	430b      	orrs	r3, r1
 8003ede:	6513      	str	r3, [r2, #80]	; 0x50
 8003ee0:	e003      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ee6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003ef6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003efa:	2300      	movs	r3, #0
 8003efc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f00:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4313      	orrs	r3, r2
 8003f08:	d060      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f12:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003f16:	d039      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003f18:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003f1c:	d832      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f22:	d035      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f28:	d82c      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2e:	d031      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f34:	d826      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f3a:	d02d      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003f3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f40:	d820      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f46:	d012      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f4c:	d81a      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d024      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f56:	d115      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	2101      	movs	r1, #1
 8003f60:	4618      	mov	r0, r3
 8003f62:	f001 ffd7 	bl	8005f14 <RCCEx_PLL2_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f6c:	e017      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f72:	3328      	adds	r3, #40	; 0x28
 8003f74:	2101      	movs	r1, #1
 8003f76:	4618      	mov	r0, r3
 8003f78:	f002 f87e 	bl	8006078 <RCCEx_PLL3_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f82:	e00c      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f8a:	e008      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f8c:	bf00      	nop
 8003f8e:	e006      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f90:	bf00      	nop
 8003f92:	e004      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f94:	bf00      	nop
 8003f96:	e002      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f98:	bf00      	nop
 8003f9a:	e000      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10e      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003faa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fb6:	4a02      	ldr	r2, [pc, #8]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6593      	str	r3, [r2, #88]	; 0x58
 8003fbc:	e006      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003fbe:	bf00      	nop
 8003fc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003fe2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	d037      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff6:	d00e      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ffc:	d816      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004006:	d111      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004008:	4bc4      	ldr	r3, [pc, #784]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	4ac3      	ldr	r2, [pc, #780]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800400e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004014:	e00f      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401a:	3308      	adds	r3, #8
 800401c:	2101      	movs	r1, #1
 800401e:	4618      	mov	r0, r3
 8004020:	f001 ff78 	bl	8005f14 <RCCEx_PLL2_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800402a:	e004      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004032:	e000      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004036:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800403e:	4bb7      	ldr	r3, [pc, #732]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004042:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800404c:	4ab3      	ldr	r2, [pc, #716]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800404e:	430b      	orrs	r3, r1
 8004050:	6513      	str	r3, [r2, #80]	; 0x50
 8004052:	e003      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004058:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800405c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004068:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800406c:	2300      	movs	r3, #0
 800406e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004072:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004076:	460b      	mov	r3, r1
 8004078:	4313      	orrs	r3, r2
 800407a:	d039      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800407c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004082:	2b03      	cmp	r3, #3
 8004084:	d81c      	bhi.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004086:	a201      	add	r2, pc, #4	; (adr r2, 800408c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408c:	080040c9 	.word	0x080040c9
 8004090:	0800409d 	.word	0x0800409d
 8004094:	080040ab 	.word	0x080040ab
 8004098:	080040c9 	.word	0x080040c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800409c:	4b9f      	ldr	r3, [pc, #636]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	4a9e      	ldr	r2, [pc, #632]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040a8:	e00f      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ae:	3308      	adds	r3, #8
 80040b0:	2102      	movs	r1, #2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f001 ff2e 	bl	8005f14 <RCCEx_PLL2_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040be:	e004      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040c6:	e000      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80040c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10a      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80040d2:	4b92      	ldr	r3, [pc, #584]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	f023 0103 	bic.w	r1, r3, #3
 80040da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	4a8e      	ldr	r2, [pc, #568]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040e2:	430b      	orrs	r3, r1
 80040e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040e6:	e003      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80040fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004100:	2300      	movs	r3, #0
 8004102:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004106:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800410a:	460b      	mov	r3, r1
 800410c:	4313      	orrs	r3, r2
 800410e:	f000 8099 	beq.w	8004244 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004112:	4b83      	ldr	r3, [pc, #524]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a82      	ldr	r2, [pc, #520]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800411e:	f7fd f9d5 	bl	80014cc <HAL_GetTick>
 8004122:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004126:	e00b      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004128:	f7fd f9d0 	bl	80014cc <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b64      	cmp	r3, #100	; 0x64
 8004136:	d903      	bls.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800413e:	e005      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004140:	4b77      	ldr	r3, [pc, #476]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ed      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800414c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004150:	2b00      	cmp	r3, #0
 8004152:	d173      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004154:	4b71      	ldr	r3, [pc, #452]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004156:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800415c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004160:	4053      	eors	r3, r2
 8004162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004166:	2b00      	cmp	r3, #0
 8004168:	d015      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800416a:	4b6c      	ldr	r3, [pc, #432]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004172:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004176:	4b69      	ldr	r3, [pc, #420]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	4a68      	ldr	r2, [pc, #416]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800417c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004180:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004182:	4b66      	ldr	r3, [pc, #408]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	4a65      	ldr	r2, [pc, #404]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800418e:	4a63      	ldr	r2, [pc, #396]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004194:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800419e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a2:	d118      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fd f992 	bl	80014cc <HAL_GetTick>
 80041a8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ac:	e00d      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ae:	f7fd f98d 	bl	80014cc <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041b8:	1ad2      	subs	r2, r2, r3
 80041ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80041be:	429a      	cmp	r2, r3
 80041c0:	d903      	bls.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80041c8:	e005      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ca:	4b54      	ldr	r3, [pc, #336]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0eb      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80041d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d129      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ee:	d10e      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x846>
 80041f0:	4b4a      	ldr	r3, [pc, #296]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80041f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004200:	091a      	lsrs	r2, r3, #4
 8004202:	4b48      	ldr	r3, [pc, #288]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004204:	4013      	ands	r3, r2
 8004206:	4a45      	ldr	r2, [pc, #276]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004208:	430b      	orrs	r3, r1
 800420a:	6113      	str	r3, [r2, #16]
 800420c:	e005      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800420e:	4b43      	ldr	r3, [pc, #268]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	4a42      	ldr	r2, [pc, #264]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004214:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004218:	6113      	str	r3, [r2, #16]
 800421a:	4b40      	ldr	r3, [pc, #256]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800421c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800421e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004222:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422a:	4a3c      	ldr	r2, [pc, #240]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800422c:	430b      	orrs	r3, r1
 800422e:	6713      	str	r3, [r2, #112]	; 0x70
 8004230:	e008      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004232:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004236:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800423a:	e003      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004240:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f002 0301 	and.w	r3, r2, #1
 8004250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004254:	2300      	movs	r3, #0
 8004256:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800425a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800425e:	460b      	mov	r3, r1
 8004260:	4313      	orrs	r3, r2
 8004262:	f000 8090 	beq.w	8004386 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800426a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426e:	2b28      	cmp	r3, #40	; 0x28
 8004270:	d870      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	0800435d 	.word	0x0800435d
 800427c:	08004355 	.word	0x08004355
 8004280:	08004355 	.word	0x08004355
 8004284:	08004355 	.word	0x08004355
 8004288:	08004355 	.word	0x08004355
 800428c:	08004355 	.word	0x08004355
 8004290:	08004355 	.word	0x08004355
 8004294:	08004355 	.word	0x08004355
 8004298:	08004329 	.word	0x08004329
 800429c:	08004355 	.word	0x08004355
 80042a0:	08004355 	.word	0x08004355
 80042a4:	08004355 	.word	0x08004355
 80042a8:	08004355 	.word	0x08004355
 80042ac:	08004355 	.word	0x08004355
 80042b0:	08004355 	.word	0x08004355
 80042b4:	08004355 	.word	0x08004355
 80042b8:	0800433f 	.word	0x0800433f
 80042bc:	08004355 	.word	0x08004355
 80042c0:	08004355 	.word	0x08004355
 80042c4:	08004355 	.word	0x08004355
 80042c8:	08004355 	.word	0x08004355
 80042cc:	08004355 	.word	0x08004355
 80042d0:	08004355 	.word	0x08004355
 80042d4:	08004355 	.word	0x08004355
 80042d8:	0800435d 	.word	0x0800435d
 80042dc:	08004355 	.word	0x08004355
 80042e0:	08004355 	.word	0x08004355
 80042e4:	08004355 	.word	0x08004355
 80042e8:	08004355 	.word	0x08004355
 80042ec:	08004355 	.word	0x08004355
 80042f0:	08004355 	.word	0x08004355
 80042f4:	08004355 	.word	0x08004355
 80042f8:	0800435d 	.word	0x0800435d
 80042fc:	08004355 	.word	0x08004355
 8004300:	08004355 	.word	0x08004355
 8004304:	08004355 	.word	0x08004355
 8004308:	08004355 	.word	0x08004355
 800430c:	08004355 	.word	0x08004355
 8004310:	08004355 	.word	0x08004355
 8004314:	08004355 	.word	0x08004355
 8004318:	0800435d 	.word	0x0800435d
 800431c:	58024400 	.word	0x58024400
 8004320:	58024800 	.word	0x58024800
 8004324:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432c:	3308      	adds	r3, #8
 800432e:	2101      	movs	r1, #1
 8004330:	4618      	mov	r0, r3
 8004332:	f001 fdef 	bl	8005f14 <RCCEx_PLL2_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800433c:	e00f      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800433e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004342:	3328      	adds	r3, #40	; 0x28
 8004344:	2101      	movs	r1, #1
 8004346:	4618      	mov	r0, r3
 8004348:	f001 fe96 	bl	8006078 <RCCEx_PLL3_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004352:	e004      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800435a:	e000      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800435c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004366:	4bc0      	ldr	r3, [pc, #768]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800436e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004376:	4abc      	ldr	r2, [pc, #752]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004378:	430b      	orrs	r3, r1
 800437a:	6553      	str	r3, [r2, #84]	; 0x54
 800437c:	e003      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004382:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f002 0302 	and.w	r3, r2, #2
 8004392:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004396:	2300      	movs	r3, #0
 8004398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800439c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80043a0:	460b      	mov	r3, r1
 80043a2:	4313      	orrs	r3, r2
 80043a4:	d043      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ae:	2b05      	cmp	r3, #5
 80043b0:	d824      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80043b2:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80043b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b8:	08004405 	.word	0x08004405
 80043bc:	080043d1 	.word	0x080043d1
 80043c0:	080043e7 	.word	0x080043e7
 80043c4:	08004405 	.word	0x08004405
 80043c8:	08004405 	.word	0x08004405
 80043cc:	08004405 	.word	0x08004405
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d4:	3308      	adds	r3, #8
 80043d6:	2101      	movs	r1, #1
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 fd9b 	bl	8005f14 <RCCEx_PLL2_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043e4:	e00f      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ea:	3328      	adds	r3, #40	; 0x28
 80043ec:	2101      	movs	r1, #1
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 fe42 	bl	8006078 <RCCEx_PLL3_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043fa:	e004      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004402:	e000      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004406:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10b      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800440e:	4b96      	ldr	r3, [pc, #600]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004412:	f023 0107 	bic.w	r1, r3, #7
 8004416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800441a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800441e:	4a92      	ldr	r2, [pc, #584]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004420:	430b      	orrs	r3, r1
 8004422:	6553      	str	r3, [r2, #84]	; 0x54
 8004424:	e003      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004426:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800442a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800442e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f002 0304 	and.w	r3, r2, #4
 800443a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800443e:	2300      	movs	r3, #0
 8004440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004444:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004448:	460b      	mov	r3, r1
 800444a:	4313      	orrs	r3, r2
 800444c:	d043      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800444e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004456:	2b05      	cmp	r3, #5
 8004458:	d824      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800445a:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800445c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004460:	080044ad 	.word	0x080044ad
 8004464:	08004479 	.word	0x08004479
 8004468:	0800448f 	.word	0x0800448f
 800446c:	080044ad 	.word	0x080044ad
 8004470:	080044ad 	.word	0x080044ad
 8004474:	080044ad 	.word	0x080044ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800447c:	3308      	adds	r3, #8
 800447e:	2101      	movs	r1, #1
 8004480:	4618      	mov	r0, r3
 8004482:	f001 fd47 	bl	8005f14 <RCCEx_PLL2_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800448c:	e00f      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800448e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004492:	3328      	adds	r3, #40	; 0x28
 8004494:	2101      	movs	r1, #1
 8004496:	4618      	mov	r0, r3
 8004498:	f001 fdee 	bl	8006078 <RCCEx_PLL3_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044a2:	e004      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044aa:	e000      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80044ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044b6:	4b6c      	ldr	r3, [pc, #432]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ba:	f023 0107 	bic.w	r1, r3, #7
 80044be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044c6:	4a68      	ldr	r2, [pc, #416]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044c8:	430b      	orrs	r3, r1
 80044ca:	6593      	str	r3, [r2, #88]	; 0x58
 80044cc:	e003      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044de:	f002 0320 	and.w	r3, r2, #32
 80044e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044e6:	2300      	movs	r3, #0
 80044e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044f0:	460b      	mov	r3, r1
 80044f2:	4313      	orrs	r3, r2
 80044f4:	d055      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80044f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004502:	d033      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004508:	d82c      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800450a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450e:	d02f      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004514:	d826      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004516:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800451a:	d02b      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800451c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004520:	d820      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004526:	d012      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800452c:	d81a      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800452e:	2b00      	cmp	r3, #0
 8004530:	d022      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004536:	d115      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800453c:	3308      	adds	r3, #8
 800453e:	2100      	movs	r1, #0
 8004540:	4618      	mov	r0, r3
 8004542:	f001 fce7 	bl	8005f14 <RCCEx_PLL2_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800454c:	e015      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800454e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004552:	3328      	adds	r3, #40	; 0x28
 8004554:	2102      	movs	r1, #2
 8004556:	4618      	mov	r0, r3
 8004558:	f001 fd8e 	bl	8006078 <RCCEx_PLL3_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004562:	e00a      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800456a:	e006      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800456c:	bf00      	nop
 800456e:	e004      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004570:	bf00      	nop
 8004572:	e002      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004574:	bf00      	nop
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004582:	4b39      	ldr	r3, [pc, #228]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800458a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004592:	4a35      	ldr	r2, [pc, #212]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004594:	430b      	orrs	r3, r1
 8004596:	6553      	str	r3, [r2, #84]	; 0x54
 8004598:	e003      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800459e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80045ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045b2:	2300      	movs	r3, #0
 80045b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80045b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80045bc:	460b      	mov	r3, r1
 80045be:	4313      	orrs	r3, r2
 80045c0:	d058      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80045c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045ce:	d033      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80045d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045d4:	d82c      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045da:	d02f      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80045dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e0:	d826      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045e6:	d02b      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80045e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045ec:	d820      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f2:	d012      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80045f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f8:	d81a      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d022      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80045fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004602:	d115      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004608:	3308      	adds	r3, #8
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f001 fc81 	bl	8005f14 <RCCEx_PLL2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004618:	e015      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800461a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800461e:	3328      	adds	r3, #40	; 0x28
 8004620:	2102      	movs	r1, #2
 8004622:	4618      	mov	r0, r3
 8004624:	f001 fd28 	bl	8006078 <RCCEx_PLL3_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800462e:	e00a      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004636:	e006      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004638:	bf00      	nop
 800463a:	e004      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800463c:	bf00      	nop
 800463e:	e002      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004640:	bf00      	nop
 8004642:	e000      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004646:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10e      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004652:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800465a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800465e:	4a02      	ldr	r2, [pc, #8]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004660:	430b      	orrs	r3, r1
 8004662:	6593      	str	r3, [r2, #88]	; 0x58
 8004664:	e006      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004666:	bf00      	nop
 8004668:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004670:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004684:	2300      	movs	r3, #0
 8004686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800468a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800468e:	460b      	mov	r3, r1
 8004690:	4313      	orrs	r3, r2
 8004692:	d055      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004698:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800469c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046a0:	d033      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80046a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046a6:	d82c      	bhi.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ac:	d02f      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80046ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b2:	d826      	bhi.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046b8:	d02b      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80046ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046be:	d820      	bhi.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c4:	d012      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80046c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ca:	d81a      	bhi.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d022      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80046d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d4:	d115      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046da:	3308      	adds	r3, #8
 80046dc:	2100      	movs	r1, #0
 80046de:	4618      	mov	r0, r3
 80046e0:	f001 fc18 	bl	8005f14 <RCCEx_PLL2_Config>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046ea:	e015      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f0:	3328      	adds	r3, #40	; 0x28
 80046f2:	2102      	movs	r1, #2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f001 fcbf 	bl	8006078 <RCCEx_PLL3_Config>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004700:	e00a      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004708:	e006      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800470a:	bf00      	nop
 800470c:	e004      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800470e:	bf00      	nop
 8004710:	e002      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004712:	bf00      	nop
 8004714:	e000      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004718:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004720:	4ba1      	ldr	r3, [pc, #644]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800472c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004730:	4a9d      	ldr	r2, [pc, #628]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004732:	430b      	orrs	r3, r1
 8004734:	6593      	str	r3, [r2, #88]	; 0x58
 8004736:	e003      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004738:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800473c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	f002 0308 	and.w	r3, r2, #8
 800474c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004750:	2300      	movs	r3, #0
 8004752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004756:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800475a:	460b      	mov	r3, r1
 800475c:	4313      	orrs	r3, r2
 800475e:	d01e      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476c:	d10c      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800476e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004772:	3328      	adds	r3, #40	; 0x28
 8004774:	2102      	movs	r1, #2
 8004776:	4618      	mov	r0, r3
 8004778:	f001 fc7e 	bl	8006078 <RCCEx_PLL3_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004788:	4b87      	ldr	r3, [pc, #540]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004798:	4a83      	ldr	r2, [pc, #524]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800479a:	430b      	orrs	r3, r1
 800479c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800479e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	f002 0310 	and.w	r3, r2, #16
 80047aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047ae:	2300      	movs	r3, #0
 80047b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80047b8:	460b      	mov	r3, r1
 80047ba:	4313      	orrs	r3, r2
 80047bc:	d01e      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80047be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ca:	d10c      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d0:	3328      	adds	r3, #40	; 0x28
 80047d2:	2102      	movs	r1, #2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 fc4f 	bl	8006078 <RCCEx_PLL3_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047e6:	4b70      	ldr	r3, [pc, #448]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047f6:	4a6c      	ldr	r2, [pc, #432]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004812:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004816:	460b      	mov	r3, r1
 8004818:	4313      	orrs	r3, r2
 800481a:	d03e      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800481c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004820:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004828:	d022      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800482a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800482e:	d81b      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d00b      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800483a:	e015      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800483c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004840:	3308      	adds	r3, #8
 8004842:	2100      	movs	r1, #0
 8004844:	4618      	mov	r0, r3
 8004846:	f001 fb65 	bl	8005f14 <RCCEx_PLL2_Config>
 800484a:	4603      	mov	r3, r0
 800484c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004850:	e00f      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004856:	3328      	adds	r3, #40	; 0x28
 8004858:	2102      	movs	r1, #2
 800485a:	4618      	mov	r0, r3
 800485c:	f001 fc0c 	bl	8006078 <RCCEx_PLL3_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004866:	e004      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004872:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800487a:	4b4b      	ldr	r3, [pc, #300]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004886:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800488a:	4a47      	ldr	r2, [pc, #284]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800488c:	430b      	orrs	r3, r1
 800488e:	6593      	str	r3, [r2, #88]	; 0x58
 8004890:	e003      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004892:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004896:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800489a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80048a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80048a8:	2300      	movs	r3, #0
 80048aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80048b0:	460b      	mov	r3, r1
 80048b2:	4313      	orrs	r3, r2
 80048b4:	d03b      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048c2:	d01f      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80048c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048c8:	d818      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80048ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ce:	d003      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80048d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048d4:	d007      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80048d6:	e011      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d8:	4b33      	ldr	r3, [pc, #204]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	4a32      	ldr	r2, [pc, #200]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80048e4:	e00f      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ea:	3328      	adds	r3, #40	; 0x28
 80048ec:	2101      	movs	r1, #1
 80048ee:	4618      	mov	r0, r3
 80048f0:	f001 fbc2 	bl	8006078 <RCCEx_PLL3_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80048fa:	e004      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004902:	e000      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004906:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800490e:	4b26      	ldr	r3, [pc, #152]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004912:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	4a22      	ldr	r2, [pc, #136]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004920:	430b      	orrs	r3, r1
 8004922:	6553      	str	r3, [r2, #84]	; 0x54
 8004924:	e003      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004926:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800492a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800492e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004936:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800493a:	673b      	str	r3, [r7, #112]	; 0x70
 800493c:	2300      	movs	r3, #0
 800493e:	677b      	str	r3, [r7, #116]	; 0x74
 8004940:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004944:	460b      	mov	r3, r1
 8004946:	4313      	orrs	r3, r2
 8004948:	d034      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800494a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004958:	d007      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800495a:	e011      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800495c:	4b12      	ldr	r3, [pc, #72]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	4a11      	ldr	r2, [pc, #68]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004968:	e00e      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800496a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496e:	3308      	adds	r3, #8
 8004970:	2102      	movs	r1, #2
 8004972:	4618      	mov	r0, r3
 8004974:	f001 face 	bl	8005f14 <RCCEx_PLL2_Config>
 8004978:	4603      	mov	r3, r0
 800497a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800497e:	e003      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004988:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10d      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004994:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499e:	4a02      	ldr	r2, [pc, #8]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049a0:	430b      	orrs	r3, r1
 80049a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049a4:	e006      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80049a6:	bf00      	nop
 80049a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80049c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80049c2:	2300      	movs	r3, #0
 80049c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80049ca:	460b      	mov	r3, r1
 80049cc:	4313      	orrs	r3, r2
 80049ce:	d00c      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d4:	3328      	adds	r3, #40	; 0x28
 80049d6:	2102      	movs	r1, #2
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 fb4d 	bl	8006078 <RCCEx_PLL3_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80049f6:	663b      	str	r3, [r7, #96]	; 0x60
 80049f8:	2300      	movs	r3, #0
 80049fa:	667b      	str	r3, [r7, #100]	; 0x64
 80049fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004a00:	460b      	mov	r3, r1
 8004a02:	4313      	orrs	r3, r2
 8004a04:	d038      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a12:	d018      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a18:	d811      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a1e:	d014      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a24:	d80b      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d011      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a30:	4bc3      	ldr	r3, [pc, #780]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	4ac2      	ldr	r2, [pc, #776]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a3c:	e008      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a44:	e004      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004a46:	bf00      	nop
 8004a48:	e002      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004a4a:	bf00      	nop
 8004a4c:	e000      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10b      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a58:	4bb9      	ldr	r3, [pc, #740]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a68:	4ab5      	ldr	r2, [pc, #724]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	6553      	str	r3, [r2, #84]	; 0x54
 8004a6e:	e003      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004a84:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a86:	2300      	movs	r3, #0
 8004a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a8a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4313      	orrs	r3, r2
 8004a92:	d009      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a94:	4baa      	ldr	r3, [pc, #680]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa2:	4aa7      	ldr	r2, [pc, #668]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004ab4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	657b      	str	r3, [r7, #84]	; 0x54
 8004aba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	d009      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ac4:	4b9e      	ldr	r3, [pc, #632]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	4a9b      	ldr	r2, [pc, #620]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004ae4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004aee:	460b      	mov	r3, r1
 8004af0:	4313      	orrs	r3, r2
 8004af2:	d009      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004af4:	4b92      	ldr	r3, [pc, #584]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b02:	4a8f      	ldr	r2, [pc, #572]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004b14:	643b      	str	r3, [r7, #64]	; 0x40
 8004b16:	2300      	movs	r3, #0
 8004b18:	647b      	str	r3, [r7, #68]	; 0x44
 8004b1a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4313      	orrs	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b24:	4b86      	ldr	r3, [pc, #536]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	4a85      	ldr	r2, [pc, #532]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b2e:	6113      	str	r3, [r2, #16]
 8004b30:	4b83      	ldr	r3, [pc, #524]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b32:	6919      	ldr	r1, [r3, #16]
 8004b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b3c:	4a80      	ldr	r2, [pc, #512]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b50:	2300      	movs	r3, #0
 8004b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b54:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	d009      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b5e:	4b78      	ldr	r3, [pc, #480]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b62:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6c:	4a74      	ldr	r2, [pc, #464]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b6e:	430b      	orrs	r3, r1
 8004b70:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b80:	2300      	movs	r3, #0
 8004b82:	637b      	str	r3, [r7, #52]	; 0x34
 8004b84:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b8e:	4b6c      	ldr	r3, [pc, #432]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b92:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b9e:	4a68      	ldr	r2, [pc, #416]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	2100      	movs	r1, #0
 8004bae:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	d011      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 f9a3 	bl	8005f14 <RCCEx_PLL2_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004bd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bdc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004be0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	2100      	movs	r1, #0
 8004bee:	6239      	str	r1, [r7, #32]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	d011      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c04:	3308      	adds	r3, #8
 8004c06:	2101      	movs	r1, #1
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 f983 	bl	8005f14 <RCCEx_PLL2_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004c14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	61b9      	str	r1, [r7, #24]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	d011      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c44:	3308      	adds	r3, #8
 8004c46:	2102      	movs	r1, #2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f001 f963 	bl	8005f14 <RCCEx_PLL2_Config>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004c54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c60:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	6139      	str	r1, [r7, #16]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	d011      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c84:	3328      	adds	r3, #40	; 0x28
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 f9f5 	bl	8006078 <RCCEx_PLL3_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004c94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ca0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	2100      	movs	r1, #0
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	d011      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc4:	3328      	adds	r3, #40	; 0x28
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 f9d5 	bl	8006078 <RCCEx_PLL3_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ce0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	2100      	movs	r1, #0
 8004cee:	6039      	str	r1, [r7, #0]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	d011      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d04:	3328      	adds	r3, #40	; 0x28
 8004d06:	2102      	movs	r1, #2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f001 f9b5 	bl	8006078 <RCCEx_PLL3_Config>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004d14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004d24:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3e:	bf00      	nop
 8004d40:	58024400 	.word	0x58024400

08004d44 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b090      	sub	sp, #64	; 0x40
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d52:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004d56:	430b      	orrs	r3, r1
 8004d58:	f040 8094 	bne.w	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004d5c:	4b97      	ldr	r3, [pc, #604]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	f200 8087 	bhi.w	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d89 	.word	0x08004d89
 8004d78:	08004db1 	.word	0x08004db1
 8004d7c:	08004dd9 	.word	0x08004dd9
 8004d80:	08004e75 	.word	0x08004e75
 8004d84:	08004e01 	.word	0x08004e01
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d88:	4b8c      	ldr	r3, [pc, #560]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d94:	d108      	bne.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 ff68 	bl	8005c70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004da4:	f000 bc97 	b.w	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dac:	f000 bc93 	b.w	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004db0:	4b82      	ldr	r3, [pc, #520]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dbc:	d108      	bne.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dbe:	f107 0318 	add.w	r3, r7, #24
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fcac 	bl	8005720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004dcc:	f000 bc83 	b.w	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dd4:	f000 bc7f 	b.w	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004dd8:	4b78      	ldr	r3, [pc, #480]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de4:	d108      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004de6:	f107 030c 	add.w	r3, r7, #12
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fdec 	bl	80059c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004df4:	f000 bc6f 	b.w	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dfc:	f000 bc6b 	b.w	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e00:	4b6e      	ldr	r3, [pc, #440]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e0a:	4b6c      	ldr	r3, [pc, #432]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d10c      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d109      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e1c:	4b67      	ldr	r3, [pc, #412]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	08db      	lsrs	r3, r3, #3
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	4a66      	ldr	r2, [pc, #408]	; (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e2e:	e01f      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e30:	4b62      	ldr	r3, [pc, #392]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3c:	d106      	bne.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e44:	d102      	bne.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004e46:	4b5f      	ldr	r3, [pc, #380]	; (8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e4a:	e011      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e4c:	4b5b      	ldr	r3, [pc, #364]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e58:	d106      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e60:	d102      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004e62:	4b59      	ldr	r3, [pc, #356]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e66:	e003      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004e6c:	f000 bc33 	b.w	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004e70:	f000 bc31 	b.w	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004e74:	4b55      	ldr	r3, [pc, #340]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e78:	f000 bc2d 	b.w	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e80:	f000 bc29 	b.w	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e88:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	f040 809f 	bne.w	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8004e92:	4b4a      	ldr	r3, [pc, #296]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e96:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004e9a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea2:	d04d      	beq.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eaa:	f200 8084 	bhi.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	2bc0      	cmp	r3, #192	; 0xc0
 8004eb2:	d07d      	beq.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	2bc0      	cmp	r3, #192	; 0xc0
 8004eb8:	d87d      	bhi.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	2b80      	cmp	r3, #128	; 0x80
 8004ebe:	d02d      	beq.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	2b80      	cmp	r3, #128	; 0x80
 8004ec4:	d877      	bhi.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d012      	beq.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8004ed2:	e070      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ed4:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004edc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ee0:	d107      	bne.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fec2 	bl	8005c70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ef0:	e3f1      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ef6:	e3ee      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ef8:	4b30      	ldr	r3, [pc, #192]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f04:	d107      	bne.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f06:	f107 0318 	add.w	r3, r7, #24
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fc08 	bl	8005720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f14:	e3df      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f1a:	e3dc      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f1c:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f28:	d107      	bne.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f2a:	f107 030c 	add.w	r3, r7, #12
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fd4a 	bl	80059c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f38:	e3cd      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f3e:	e3ca      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f40:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8004f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d109      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f5c:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	08db      	lsrs	r3, r3, #3
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	4a16      	ldr	r2, [pc, #88]	; (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f6e:	e01e      	b.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f70:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7c:	d106      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f84:	d102      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004f86:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f8a:	e010      	b.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f98:	d106      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa0:	d102      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004fa2:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa6:	e002      	b.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004fac:	e393      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004fae:	e392      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fb4:	e38f      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fba:	e38c      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	03d09000 	.word	0x03d09000
 8004fc4:	003d0900 	.word	0x003d0900
 8004fc8:	007a1200 	.word	0x007a1200
 8004fcc:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	f040 809c 	bne.w	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8004fde:	4b9e      	ldr	r3, [pc, #632]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe2:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004fe6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fee:	d054      	beq.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff6:	f200 808b 	bhi.w	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005000:	f000 8083 	beq.w	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800500a:	f200 8081 	bhi.w	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005014:	d02f      	beq.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800501c:	d878      	bhi.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800502a:	d012      	beq.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800502c:	e070      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800502e:	4b8a      	ldr	r3, [pc, #552]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800503a:	d107      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800503c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fe15 	bl	8005c70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800504a:	e344      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005050:	e341      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005052:	4b81      	ldr	r3, [pc, #516]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800505a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800505e:	d107      	bne.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005060:	f107 0318 	add.w	r3, r7, #24
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fb5b 	bl	8005720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800506e:	e332      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005074:	e32f      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005076:	4b78      	ldr	r3, [pc, #480]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800507e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005082:	d107      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005084:	f107 030c 	add.w	r3, r7, #12
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fc9d 	bl	80059c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005092:	e320      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005098:	e31d      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800509a:	4b6f      	ldr	r3, [pc, #444]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800509c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050a4:	4b6c      	ldr	r3, [pc, #432]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d10c      	bne.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050b6:	4b68      	ldr	r3, [pc, #416]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	08db      	lsrs	r3, r3, #3
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	4a66      	ldr	r2, [pc, #408]	; (800525c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80050c2:	fa22 f303 	lsr.w	r3, r2, r3
 80050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c8:	e01e      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050ca:	4b63      	ldr	r3, [pc, #396]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d6:	d106      	bne.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80050d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050de:	d102      	bne.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80050e0:	4b5f      	ldr	r3, [pc, #380]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e4:	e010      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050e6:	4b5c      	ldr	r3, [pc, #368]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050f2:	d106      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80050f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050fa:	d102      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80050fc:	4b59      	ldr	r3, [pc, #356]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005100:	e002      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8005106:	e2e6      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005108:	e2e5      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800510a:	4b57      	ldr	r3, [pc, #348]	; (8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800510e:	e2e2      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005114:	e2df      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800511a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800511e:	430b      	orrs	r3, r1
 8005120:	f040 80a7 	bne.w	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005124:	4b4c      	ldr	r3, [pc, #304]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005128:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800512c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005134:	d055      	beq.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800513c:	f200 8096 	bhi.w	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005146:	f000 8084 	beq.w	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005150:	f200 808c 	bhi.w	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515a:	d030      	beq.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005162:	f200 8083 	bhi.w	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	2b00      	cmp	r3, #0
 800516a:	d004      	beq.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005172:	d012      	beq.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8005174:	e07a      	b.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005176:	4b38      	ldr	r3, [pc, #224]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005182:	d107      	bne.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fd71 	bl	8005c70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005192:	e2a0      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005198:	e29d      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800519a:	4b2f      	ldr	r3, [pc, #188]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a6:	d107      	bne.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051a8:	f107 0318 	add.w	r3, r7, #24
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fab7 	bl	8005720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051b6:	e28e      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051bc:	e28b      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051be:	4b26      	ldr	r3, [pc, #152]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ca:	d107      	bne.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051cc:	f107 030c 	add.w	r3, r7, #12
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fbf9 	bl	80059c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051da:	e27c      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051e0:	e279      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051e2:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80051e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d10c      	bne.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051fe:	4b16      	ldr	r3, [pc, #88]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	08db      	lsrs	r3, r3, #3
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	4a14      	ldr	r2, [pc, #80]	; (800525c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800520a:	fa22 f303 	lsr.w	r3, r2, r3
 800520e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005210:	e01e      	b.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005212:	4b11      	ldr	r3, [pc, #68]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521e:	d106      	bne.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005226:	d102      	bne.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005228:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800522a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800522c:	e010      	b.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800522e:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800523a:	d106      	bne.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800523c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005242:	d102      	bne.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005244:	4b07      	ldr	r3, [pc, #28]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005248:	e002      	b.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800524a:	2300      	movs	r3, #0
 800524c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800524e:	e242      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005250:	e241      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005252:	4b05      	ldr	r3, [pc, #20]	; (8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005256:	e23e      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005258:	58024400 	.word	0x58024400
 800525c:	03d09000 	.word	0x03d09000
 8005260:	003d0900 	.word	0x003d0900
 8005264:	007a1200 	.word	0x007a1200
 8005268:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005270:	e231      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005276:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800527a:	430b      	orrs	r3, r1
 800527c:	f040 8085 	bne.w	800538a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005280:	4b9c      	ldr	r3, [pc, #624]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005284:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005288:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005290:	d06b      	beq.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005298:	d874      	bhi.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052a0:	d056      	beq.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80052a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052a8:	d86c      	bhi.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052b0:	d03b      	beq.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80052b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052b8:	d864      	bhi.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052c0:	d021      	beq.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052c8:	d85c      	bhi.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80052d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d6:	d004      	beq.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80052d8:	e054      	b.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80052da:	f7fe fb49 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 80052de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052e0:	e1f9      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052e2:	4b84      	ldr	r3, [pc, #528]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052ee:	d107      	bne.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052f0:	f107 0318 	add.w	r3, r7, #24
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fa13 	bl	8005720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052fe:	e1ea      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005304:	e1e7      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005306:	4b7b      	ldr	r3, [pc, #492]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800530e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005312:	d107      	bne.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005314:	f107 030c 	add.w	r3, r7, #12
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fb55 	bl	80059c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005322:	e1d8      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005328:	e1d5      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800532a:	4b72      	ldr	r3, [pc, #456]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b04      	cmp	r3, #4
 8005334:	d109      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005336:	4b6f      	ldr	r3, [pc, #444]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	08db      	lsrs	r3, r3, #3
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	4a6d      	ldr	r2, [pc, #436]	; (80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005342:	fa22 f303 	lsr.w	r3, r2, r3
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005348:	e1c5      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800534e:	e1c2      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005350:	4b68      	ldr	r3, [pc, #416]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800535c:	d102      	bne.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800535e:	4b67      	ldr	r3, [pc, #412]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005362:	e1b8      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005368:	e1b5      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800536a:	4b62      	ldr	r3, [pc, #392]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005376:	d102      	bne.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8005378:	4b61      	ldr	r3, [pc, #388]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800537c:	e1ab      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005382:	e1a8      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005388:	e1a5      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800538a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800538e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005392:	430b      	orrs	r3, r1
 8005394:	d173      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005396:	4b57      	ldr	r3, [pc, #348]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800539e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053a6:	d02f      	beq.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ae:	d863      	bhi.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053bc:	d012      	beq.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80053be:	e05b      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053c0:	4b4c      	ldr	r3, [pc, #304]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053cc:	d107      	bne.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ce:	f107 0318 	add.w	r3, r7, #24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 f9a4 	bl	8005720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053dc:	e17b      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053e2:	e178      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053e4:	4b43      	ldr	r3, [pc, #268]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053f0:	d107      	bne.n	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053f2:	f107 030c 	add.w	r3, r7, #12
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fae6 	bl	80059c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005400:	e169      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005406:	e166      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005408:	4b3a      	ldr	r3, [pc, #232]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800540a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005410:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005412:	4b38      	ldr	r3, [pc, #224]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b04      	cmp	r3, #4
 800541c:	d10c      	bne.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800541e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005420:	2b00      	cmp	r3, #0
 8005422:	d109      	bne.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005424:	4b33      	ldr	r3, [pc, #204]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	08db      	lsrs	r3, r3, #3
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	4a32      	ldr	r2, [pc, #200]	; (80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
 8005434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005436:	e01e      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005438:	4b2e      	ldr	r3, [pc, #184]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005444:	d106      	bne.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8005446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800544c:	d102      	bne.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800544e:	4b2b      	ldr	r3, [pc, #172]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005452:	e010      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005454:	4b27      	ldr	r3, [pc, #156]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005460:	d106      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005468:	d102      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800546a:	4b25      	ldr	r3, [pc, #148]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800546e:	e002      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005474:	e12f      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005476:	e12e      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800547c:	e12b      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800547e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005482:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005486:	430b      	orrs	r3, r1
 8005488:	d13c      	bne.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800548a:	4b1a      	ldr	r3, [pc, #104]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005492:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d012      	beq.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80054a2:	e023      	b.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054a4:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054b0:	d107      	bne.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fbda 	bl	8005c70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054c0:	e109      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054c6:	e106      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d4:	d107      	bne.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054d6:	f107 0318 	add.w	r3, r7, #24
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 f920 	bl	8005720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054e4:	e0f7      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054ea:	e0f4      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054f0:	e0f1      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80054f2:	bf00      	nop
 80054f4:	58024400 	.word	0x58024400
 80054f8:	03d09000 	.word	0x03d09000
 80054fc:	003d0900 	.word	0x003d0900
 8005500:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005508:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800550c:	430b      	orrs	r3, r1
 800550e:	f040 8091 	bne.w	8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005512:	4b73      	ldr	r3, [pc, #460]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005516:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800551a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005522:	f000 8081 	beq.w	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800552c:	d87f      	bhi.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005534:	d06b      	beq.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800553c:	d877      	bhi.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005544:	d056      	beq.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554c:	d86f      	bhi.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005554:	d03b      	beq.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800555c:	d867      	bhi.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005564:	d021      	beq.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800556c:	d85f      	bhi.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d004      	beq.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800557a:	d004      	beq.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800557c:	e057      	b.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800557e:	f000 f8b9 	bl	80056f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005582:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005584:	e0a7      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005586:	4b56      	ldr	r3, [pc, #344]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800558e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005592:	d107      	bne.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005594:	f107 0318 	add.w	r3, r7, #24
 8005598:	4618      	mov	r0, r3
 800559a:	f000 f8c1 	bl	8005720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055a2:	e098      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055a8:	e095      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055aa:	4b4d      	ldr	r3, [pc, #308]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055b6:	d107      	bne.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055b8:	f107 030c 	add.w	r3, r7, #12
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fa03 	bl	80059c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055c6:	e086      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055cc:	e083      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055ce:	4b44      	ldr	r3, [pc, #272]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d109      	bne.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055da:	4b41      	ldr	r3, [pc, #260]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	08db      	lsrs	r3, r3, #3
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	4a3f      	ldr	r2, [pc, #252]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80055e6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055ec:	e073      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055f2:	e070      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80055f4:	4b3a      	ldr	r3, [pc, #232]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005600:	d102      	bne.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8005602:	4b39      	ldr	r3, [pc, #228]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8005604:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005606:	e066      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800560c:	e063      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800560e:	4b34      	ldr	r3, [pc, #208]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800561a:	d102      	bne.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800561c:	4b33      	ldr	r3, [pc, #204]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005620:	e059      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005626:	e056      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005628:	4b31      	ldr	r3, [pc, #196]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800562a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800562c:	e053      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005632:	e050      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005638:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800563c:	430b      	orrs	r3, r1
 800563e:	d148      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005640:	4b27      	ldr	r3, [pc, #156]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005644:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005648:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005650:	d02a      	beq.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005658:	d838      	bhi.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005666:	d00d      	beq.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005668:	e030      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800566a:	4b1d      	ldr	r3, [pc, #116]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005676:	d102      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8005678:	4b1c      	ldr	r3, [pc, #112]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800567c:	e02b      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005682:	e028      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005684:	4b16      	ldr	r3, [pc, #88]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005690:	d107      	bne.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005696:	4618      	mov	r0, r3
 8005698:	f000 faea 	bl	8005c70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056a0:	e019      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056a6:	e016      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056a8:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056b4:	d107      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056b6:	f107 0318 	add.w	r3, r7, #24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 f830 	bl	8005720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056c4:	e007      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ca:	e004      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80056cc:	2300      	movs	r3, #0
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d0:	e001      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80056d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3740      	adds	r7, #64	; 0x40
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	58024400 	.word	0x58024400
 80056e4:	03d09000 	.word	0x03d09000
 80056e8:	003d0900 	.word	0x003d0900
 80056ec:	007a1200 	.word	0x007a1200
 80056f0:	00bb8000 	.word	0x00bb8000

080056f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80056f8:	f7fe f90a 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 80056fc:	4602      	mov	r2, r0
 80056fe:	4b06      	ldr	r3, [pc, #24]	; (8005718 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	091b      	lsrs	r3, r3, #4
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	4904      	ldr	r1, [pc, #16]	; (800571c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800570a:	5ccb      	ldrb	r3, [r1, r3]
 800570c:	f003 031f 	and.w	r3, r3, #31
 8005710:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005714:	4618      	mov	r0, r3
 8005716:	bd80      	pop	{r7, pc}
 8005718:	58024400 	.word	0x58024400
 800571c:	08008924 	.word	0x08008924

08005720 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005720:	b480      	push	{r7}
 8005722:	b089      	sub	sp, #36	; 0x24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005728:	4ba1      	ldr	r3, [pc, #644]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005732:	4b9f      	ldr	r3, [pc, #636]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	0b1b      	lsrs	r3, r3, #12
 8005738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800573c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800573e:	4b9c      	ldr	r3, [pc, #624]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	091b      	lsrs	r3, r3, #4
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800574a:	4b99      	ldr	r3, [pc, #612]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800574c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574e:	08db      	lsrs	r3, r3, #3
 8005750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005762:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8111 	beq.w	8005990 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	2b02      	cmp	r3, #2
 8005772:	f000 8083 	beq.w	800587c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	2b02      	cmp	r3, #2
 800577a:	f200 80a1 	bhi.w	80058c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d056      	beq.n	8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800578a:	e099      	b.n	80058c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800578c:	4b88      	ldr	r3, [pc, #544]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d02d      	beq.n	80057f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005798:	4b85      	ldr	r3, [pc, #532]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	08db      	lsrs	r3, r3, #3
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	4a84      	ldr	r2, [pc, #528]	; (80059b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
 80057a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c2:	4b7b      	ldr	r3, [pc, #492]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80057f2:	e087      	b.n	8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005806:	4b6a      	ldr	r3, [pc, #424]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005816:	ed97 6a03 	vldr	s12, [r7, #12]
 800581a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800581e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005836:	e065      	b.n	8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584a:	4b59      	ldr	r3, [pc, #356]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	ed97 6a03 	vldr	s12, [r7, #12]
 800585e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800587a:	e043      	b.n	8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800588a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588e:	4b48      	ldr	r3, [pc, #288]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589e:	ed97 6a03 	vldr	s12, [r7, #12]
 80058a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058be:	e021      	b.n	8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d2:	4b37      	ldr	r3, [pc, #220]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005902:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005904:	4b2a      	ldr	r3, [pc, #168]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	0a5b      	lsrs	r3, r3, #9
 800590a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800591a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800591e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800592a:	ee17 2a90 	vmov	r2, s15
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005932:	4b1f      	ldr	r3, [pc, #124]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593c:	ee07 3a90 	vmov	s15, r3
 8005940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005948:	ee37 7a87 	vadd.f32	s14, s15, s14
 800594c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005958:	ee17 2a90 	vmov	r2, s15
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005960:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	0e1b      	lsrs	r3, r3, #24
 8005966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800597a:	edd7 6a07 	vldr	s13, [r7, #28]
 800597e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005986:	ee17 2a90 	vmov	r2, s15
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800598e:	e008      	b.n	80059a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	609a      	str	r2, [r3, #8]
}
 80059a2:	bf00      	nop
 80059a4:	3724      	adds	r7, #36	; 0x24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	58024400 	.word	0x58024400
 80059b4:	03d09000 	.word	0x03d09000
 80059b8:	46000000 	.word	0x46000000
 80059bc:	4c742400 	.word	0x4c742400
 80059c0:	4a742400 	.word	0x4a742400
 80059c4:	4af42400 	.word	0x4af42400

080059c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b089      	sub	sp, #36	; 0x24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059d0:	4ba1      	ldr	r3, [pc, #644]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d4:	f003 0303 	and.w	r3, r3, #3
 80059d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80059da:	4b9f      	ldr	r3, [pc, #636]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	0d1b      	lsrs	r3, r3, #20
 80059e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80059e6:	4b9c      	ldr	r3, [pc, #624]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	0a1b      	lsrs	r3, r3, #8
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80059f2:	4b99      	ldr	r3, [pc, #612]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f6:	08db      	lsrs	r3, r3, #3
 80059f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	fb02 f303 	mul.w	r3, r2, r3
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 8111 	beq.w	8005c38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	f000 8083 	beq.w	8005b24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	f200 80a1 	bhi.w	8005b68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d056      	beq.n	8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005a32:	e099      	b.n	8005b68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a34:	4b88      	ldr	r3, [pc, #544]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d02d      	beq.n	8005a9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a40:	4b85      	ldr	r3, [pc, #532]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	08db      	lsrs	r3, r3, #3
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	4a84      	ldr	r2, [pc, #528]	; (8005c5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a50:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	ee07 3a90 	vmov	s15, r3
 8005a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a6a:	4b7b      	ldr	r3, [pc, #492]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a9a:	e087      	b.n	8005bac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aae:	4b6a      	ldr	r3, [pc, #424]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ac2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ade:	e065      	b.n	8005bac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af2:	4b59      	ldr	r3, [pc, #356]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b22:	e043      	b.n	8005bac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b36:	4b48      	ldr	r3, [pc, #288]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b66:	e021      	b.n	8005bac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7a:	4b37      	ldr	r3, [pc, #220]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005baa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005bac:	4b2a      	ldr	r3, [pc, #168]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	0a5b      	lsrs	r3, r3, #9
 8005bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bd2:	ee17 2a90 	vmov	r2, s15
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005bda:	4b1f      	ldr	r3, [pc, #124]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005be4:	ee07 3a90 	vmov	s15, r3
 8005be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c00:	ee17 2a90 	vmov	r2, s15
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c08:	4b13      	ldr	r3, [pc, #76]	; (8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	0e1b      	lsrs	r3, r3, #24
 8005c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c2e:	ee17 2a90 	vmov	r2, s15
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005c36:	e008      	b.n	8005c4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	609a      	str	r2, [r3, #8]
}
 8005c4a:	bf00      	nop
 8005c4c:	3724      	adds	r7, #36	; 0x24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	58024400 	.word	0x58024400
 8005c5c:	03d09000 	.word	0x03d09000
 8005c60:	46000000 	.word	0x46000000
 8005c64:	4c742400 	.word	0x4c742400
 8005c68:	4a742400 	.word	0x4a742400
 8005c6c:	4af42400 	.word	0x4af42400

08005c70 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b089      	sub	sp, #36	; 0x24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c78:	4ba0      	ldr	r3, [pc, #640]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005c82:	4b9e      	ldr	r3, [pc, #632]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	091b      	lsrs	r3, r3, #4
 8005c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c8c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005c8e:	4b9b      	ldr	r3, [pc, #620]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c98:	4b98      	ldr	r3, [pc, #608]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9c:	08db      	lsrs	r3, r3, #3
 8005c9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	fb02 f303 	mul.w	r3, r2, r3
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8111 	beq.w	8005ede <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	f000 8083 	beq.w	8005dca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	f200 80a1 	bhi.w	8005e0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d056      	beq.n	8005d86 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005cd8:	e099      	b.n	8005e0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cda:	4b88      	ldr	r3, [pc, #544]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d02d      	beq.n	8005d42 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ce6:	4b85      	ldr	r3, [pc, #532]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	08db      	lsrs	r3, r3, #3
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	4a83      	ldr	r2, [pc, #524]	; (8005f00 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	ee07 3a90 	vmov	s15, r3
 8005d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d10:	4b7a      	ldr	r3, [pc, #488]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d18:	ee07 3a90 	vmov	s15, r3
 8005d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d20:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d24:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005f04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d40:	e087      	b.n	8005e52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	ee07 3a90 	vmov	s15, r3
 8005d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d54:	4b69      	ldr	r3, [pc, #420]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5c:	ee07 3a90 	vmov	s15, r3
 8005d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d64:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d68:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005f04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d84:	e065      	b.n	8005e52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	ee07 3a90 	vmov	s15, r3
 8005d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d90:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005f0c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005d94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d98:	4b58      	ldr	r3, [pc, #352]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da0:	ee07 3a90 	vmov	s15, r3
 8005da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005f04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005db0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dc8:	e043      	b.n	8005e52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	ee07 3a90 	vmov	s15, r3
 8005dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005dd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ddc:	4b47      	ldr	r3, [pc, #284]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de4:	ee07 3a90 	vmov	s15, r3
 8005de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dec:	ed97 6a03 	vldr	s12, [r7, #12]
 8005df0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005f04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005df4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e0c:	e021      	b.n	8005e52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	ee07 3a90 	vmov	s15, r3
 8005e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e18:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e20:	4b36      	ldr	r3, [pc, #216]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e28:	ee07 3a90 	vmov	s15, r3
 8005e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e30:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e34:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005f04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e50:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005e52:	4b2a      	ldr	r3, [pc, #168]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e56:	0a5b      	lsrs	r3, r3, #9
 8005e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e5c:	ee07 3a90 	vmov	s15, r3
 8005e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e78:	ee17 2a90 	vmov	r2, s15
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005e80:	4b1e      	ldr	r3, [pc, #120]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e84:	0c1b      	lsrs	r3, r3, #16
 8005e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ea6:	ee17 2a90 	vmov	r2, s15
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005eae:	4b13      	ldr	r3, [pc, #76]	; (8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	0e1b      	lsrs	r3, r3, #24
 8005eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb8:	ee07 3a90 	vmov	s15, r3
 8005ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed4:	ee17 2a90 	vmov	r2, s15
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005edc:	e008      	b.n	8005ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	609a      	str	r2, [r3, #8]
}
 8005ef0:	bf00      	nop
 8005ef2:	3724      	adds	r7, #36	; 0x24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	58024400 	.word	0x58024400
 8005f00:	03d09000 	.word	0x03d09000
 8005f04:	46000000 	.word	0x46000000
 8005f08:	4c742400 	.word	0x4c742400
 8005f0c:	4a742400 	.word	0x4a742400
 8005f10:	4af42400 	.word	0x4af42400

08005f14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f22:	4b53      	ldr	r3, [pc, #332]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d101      	bne.n	8005f32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e099      	b.n	8006066 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005f32:	4b4f      	ldr	r3, [pc, #316]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a4e      	ldr	r2, [pc, #312]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005f38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f3e:	f7fb fac5 	bl	80014cc <HAL_GetTick>
 8005f42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f44:	e008      	b.n	8005f58 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f46:	f7fb fac1 	bl	80014cc <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e086      	b.n	8006066 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f58:	4b45      	ldr	r3, [pc, #276]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f0      	bne.n	8005f46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f64:	4b42      	ldr	r3, [pc, #264]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	031b      	lsls	r3, r3, #12
 8005f72:	493f      	ldr	r1, [pc, #252]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	628b      	str	r3, [r1, #40]	; 0x28
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	025b      	lsls	r3, r3, #9
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	041b      	lsls	r3, r3, #16
 8005f96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	061b      	lsls	r3, r3, #24
 8005fa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fa8:	4931      	ldr	r1, [pc, #196]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005fae:	4b30      	ldr	r3, [pc, #192]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	492d      	ldr	r1, [pc, #180]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005fc0:	4b2b      	ldr	r3, [pc, #172]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	f023 0220 	bic.w	r2, r3, #32
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	4928      	ldr	r1, [pc, #160]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005fd2:	4b27      	ldr	r3, [pc, #156]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	4a26      	ldr	r2, [pc, #152]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005fd8:	f023 0310 	bic.w	r3, r3, #16
 8005fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005fde:	4b24      	ldr	r3, [pc, #144]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe2:	4b24      	ldr	r3, [pc, #144]	; (8006074 <RCCEx_PLL2_Config+0x160>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	69d2      	ldr	r2, [r2, #28]
 8005fea:	00d2      	lsls	r2, r2, #3
 8005fec:	4920      	ldr	r1, [pc, #128]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ff2:	4b1f      	ldr	r3, [pc, #124]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	4a1e      	ldr	r2, [pc, #120]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8005ff8:	f043 0310 	orr.w	r3, r3, #16
 8005ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d106      	bne.n	8006012 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006004:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	4a19      	ldr	r2, [pc, #100]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 800600a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800600e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006010:	e00f      	b.n	8006032 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d106      	bne.n	8006026 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006018:	4b15      	ldr	r3, [pc, #84]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	4a14      	ldr	r2, [pc, #80]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 800601e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006022:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006024:	e005      	b.n	8006032 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006026:	4b12      	ldr	r3, [pc, #72]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	4a11      	ldr	r2, [pc, #68]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 800602c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006030:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006032:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a0e      	ldr	r2, [pc, #56]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 8006038:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800603c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800603e:	f7fb fa45 	bl	80014cc <HAL_GetTick>
 8006042:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006044:	e008      	b.n	8006058 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006046:	f7fb fa41 	bl	80014cc <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e006      	b.n	8006066 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <RCCEx_PLL2_Config+0x15c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f0      	beq.n	8006046 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006064:	7bfb      	ldrb	r3, [r7, #15]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	58024400 	.word	0x58024400
 8006074:	ffff0007 	.word	0xffff0007

08006078 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006086:	4b53      	ldr	r3, [pc, #332]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	2b03      	cmp	r3, #3
 8006090:	d101      	bne.n	8006096 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e099      	b.n	80061ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006096:	4b4f      	ldr	r3, [pc, #316]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a4e      	ldr	r2, [pc, #312]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 800609c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a2:	f7fb fa13 	bl	80014cc <HAL_GetTick>
 80060a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060a8:	e008      	b.n	80060bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80060aa:	f7fb fa0f 	bl	80014cc <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e086      	b.n	80061ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060bc:	4b45      	ldr	r3, [pc, #276]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1f0      	bne.n	80060aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80060c8:	4b42      	ldr	r3, [pc, #264]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 80060ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	051b      	lsls	r3, r3, #20
 80060d6:	493f      	ldr	r1, [pc, #252]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	628b      	str	r3, [r1, #40]	; 0x28
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	025b      	lsls	r3, r3, #9
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	041b      	lsls	r3, r3, #16
 80060fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	3b01      	subs	r3, #1
 8006106:	061b      	lsls	r3, r3, #24
 8006108:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800610c:	4931      	ldr	r1, [pc, #196]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 800610e:	4313      	orrs	r3, r2
 8006110:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006112:	4b30      	ldr	r3, [pc, #192]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	492d      	ldr	r1, [pc, #180]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 8006120:	4313      	orrs	r3, r2
 8006122:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006124:	4b2b      	ldr	r3, [pc, #172]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	4928      	ldr	r1, [pc, #160]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 8006132:	4313      	orrs	r3, r2
 8006134:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006136:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 8006138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613a:	4a26      	ldr	r2, [pc, #152]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 800613c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006140:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006142:	4b24      	ldr	r3, [pc, #144]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 8006144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006146:	4b24      	ldr	r3, [pc, #144]	; (80061d8 <RCCEx_PLL3_Config+0x160>)
 8006148:	4013      	ands	r3, r2
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	69d2      	ldr	r2, [r2, #28]
 800614e:	00d2      	lsls	r2, r2, #3
 8006150:	4920      	ldr	r1, [pc, #128]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 8006152:	4313      	orrs	r3, r2
 8006154:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006156:	4b1f      	ldr	r3, [pc, #124]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	4a1e      	ldr	r2, [pc, #120]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 800615c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006160:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d106      	bne.n	8006176 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006168:	4b1a      	ldr	r3, [pc, #104]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	4a19      	ldr	r2, [pc, #100]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 800616e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006172:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006174:	e00f      	b.n	8006196 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d106      	bne.n	800618a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800617c:	4b15      	ldr	r3, [pc, #84]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	4a14      	ldr	r2, [pc, #80]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 8006182:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006186:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006188:	e005      	b.n	8006196 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800618a:	4b12      	ldr	r3, [pc, #72]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	4a11      	ldr	r2, [pc, #68]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 8006190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006194:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006196:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a0e      	ldr	r2, [pc, #56]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 800619c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a2:	f7fb f993 	bl	80014cc <HAL_GetTick>
 80061a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061a8:	e008      	b.n	80061bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061aa:	f7fb f98f 	bl	80014cc <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d901      	bls.n	80061bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e006      	b.n	80061ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061bc:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <RCCEx_PLL3_Config+0x15c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0f0      	beq.n	80061aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	58024400 	.word	0x58024400
 80061d8:	ffff0007 	.word	0xffff0007

080061dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e049      	b.n	8006282 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fa ff26 	bl	8001054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3304      	adds	r3, #4
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f000 fabc 	bl	8006798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e08f      	b.n	80063c0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7fa fe83 	bl	8000fc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2202      	movs	r2, #2
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6899      	ldr	r1, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	4b3e      	ldr	r3, [pc, #248]	; (80063c8 <HAL_TIM_Encoder_Init+0x13c>)
 80062ce:	400b      	ands	r3, r1
 80062d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3304      	adds	r3, #4
 80062da:	4619      	mov	r1, r3
 80062dc:	4610      	mov	r0, r2
 80062de:	f000 fa5b 	bl	8006798 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4b31      	ldr	r3, [pc, #196]	; (80063cc <HAL_TIM_Encoder_Init+0x140>)
 8006308:	4013      	ands	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	021b      	lsls	r3, r3, #8
 8006316:	4313      	orrs	r3, r2
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4b2b      	ldr	r3, [pc, #172]	; (80063d0 <HAL_TIM_Encoder_Init+0x144>)
 8006322:	4013      	ands	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4b2a      	ldr	r3, [pc, #168]	; (80063d4 <HAL_TIM_Encoder_Init+0x148>)
 800632a:	4013      	ands	r3, r2
 800632c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	4313      	orrs	r3, r2
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	011a      	lsls	r2, r3, #4
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	031b      	lsls	r3, r3, #12
 800634c:	4313      	orrs	r3, r2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800635a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	4313      	orrs	r3, r2
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	fffebff8 	.word	0xfffebff8
 80063cc:	fffffcfc 	.word	0xfffffcfc
 80063d0:	fffff3f3 	.word	0xfffff3f3
 80063d4:	ffff0f0f 	.word	0xffff0f0f

080063d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006400:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d110      	bne.n	800642a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d102      	bne.n	8006414 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800640e:	7b7b      	ldrb	r3, [r7, #13]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d001      	beq.n	8006418 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e069      	b.n	80064ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006428:	e031      	b.n	800648e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b04      	cmp	r3, #4
 800642e:	d110      	bne.n	8006452 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d102      	bne.n	800643c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006436:	7b3b      	ldrb	r3, [r7, #12]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d001      	beq.n	8006440 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e055      	b.n	80064ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006450:	e01d      	b.n	800648e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006452:	7bfb      	ldrb	r3, [r7, #15]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d108      	bne.n	800646a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d105      	bne.n	800646a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800645e:	7b7b      	ldrb	r3, [r7, #13]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d102      	bne.n	800646a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006464:	7b3b      	ldrb	r3, [r7, #12]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d001      	beq.n	800646e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e03e      	b.n	80064ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2202      	movs	r2, #2
 800647a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2202      	movs	r2, #2
 8006482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2202      	movs	r2, #2
 800648a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <HAL_TIM_Encoder_Start+0xc4>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b04      	cmp	r3, #4
 8006498:	d008      	beq.n	80064ac <HAL_TIM_Encoder_Start+0xd4>
 800649a:	e00f      	b.n	80064bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2201      	movs	r2, #1
 80064a2:	2100      	movs	r1, #0
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fa11 	bl	80068cc <TIM_CCxChannelCmd>
      break;
 80064aa:	e016      	b.n	80064da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2201      	movs	r2, #1
 80064b2:	2104      	movs	r1, #4
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fa09 	bl	80068cc <TIM_CCxChannelCmd>
      break;
 80064ba:	e00e      	b.n	80064da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2201      	movs	r2, #1
 80064c2:	2100      	movs	r1, #0
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fa01 	bl	80068cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2201      	movs	r2, #1
 80064d0:	2104      	movs	r1, #4
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 f9fa 	bl	80068cc <TIM_CCxChannelCmd>
      break;
 80064d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0201 	orr.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b02      	cmp	r3, #2
 8006508:	d122      	bne.n	8006550 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b02      	cmp	r3, #2
 8006516:	d11b      	bne.n	8006550 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f06f 0202 	mvn.w	r2, #2
 8006520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	f003 0303 	and.w	r3, r3, #3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f90f 	bl	800675a <HAL_TIM_IC_CaptureCallback>
 800653c:	e005      	b.n	800654a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f901 	bl	8006746 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f912 	bl	800676e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b04      	cmp	r3, #4
 800655c:	d122      	bne.n	80065a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b04      	cmp	r3, #4
 800656a:	d11b      	bne.n	80065a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0204 	mvn.w	r2, #4
 8006574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2202      	movs	r2, #2
 800657a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f8e5 	bl	800675a <HAL_TIM_IC_CaptureCallback>
 8006590:	e005      	b.n	800659e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f8d7 	bl	8006746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f8e8 	bl	800676e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0308 	and.w	r3, r3, #8
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d122      	bne.n	80065f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d11b      	bne.n	80065f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0208 	mvn.w	r2, #8
 80065c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2204      	movs	r2, #4
 80065ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f8bb 	bl	800675a <HAL_TIM_IC_CaptureCallback>
 80065e4:	e005      	b.n	80065f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f8ad 	bl	8006746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f8be 	bl	800676e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 0310 	and.w	r3, r3, #16
 8006602:	2b10      	cmp	r3, #16
 8006604:	d122      	bne.n	800664c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b10      	cmp	r3, #16
 8006612:	d11b      	bne.n	800664c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f06f 0210 	mvn.w	r2, #16
 800661c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2208      	movs	r2, #8
 8006622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f891 	bl	800675a <HAL_TIM_IC_CaptureCallback>
 8006638:	e005      	b.n	8006646 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f883 	bl	8006746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f894 	bl	800676e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b01      	cmp	r3, #1
 8006658:	d10e      	bne.n	8006678 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b01      	cmp	r3, #1
 8006666:	d107      	bne.n	8006678 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0201 	mvn.w	r2, #1
 8006670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f85d 	bl	8006732 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006682:	2b80      	cmp	r3, #128	; 0x80
 8006684:	d10e      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006690:	2b80      	cmp	r3, #128	; 0x80
 8006692:	d107      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800669c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f9d2 	bl	8006a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b2:	d10e      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066be:	2b80      	cmp	r3, #128	; 0x80
 80066c0:	d107      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f9c5 	bl	8006a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066dc:	2b40      	cmp	r3, #64	; 0x40
 80066de:	d10e      	bne.n	80066fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ea:	2b40      	cmp	r3, #64	; 0x40
 80066ec:	d107      	bne.n	80066fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f842 	bl	8006782 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b20      	cmp	r3, #32
 800670a:	d10e      	bne.n	800672a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f003 0320 	and.w	r3, r3, #32
 8006716:	2b20      	cmp	r3, #32
 8006718:	d107      	bne.n	800672a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f06f 0220 	mvn.w	r2, #32
 8006722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f985 	bl	8006a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800672a:	bf00      	nop
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
	...

08006798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a40      	ldr	r2, [pc, #256]	; (80068ac <TIM_Base_SetConfig+0x114>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d013      	beq.n	80067d8 <TIM_Base_SetConfig+0x40>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b6:	d00f      	beq.n	80067d8 <TIM_Base_SetConfig+0x40>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a3d      	ldr	r2, [pc, #244]	; (80068b0 <TIM_Base_SetConfig+0x118>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00b      	beq.n	80067d8 <TIM_Base_SetConfig+0x40>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a3c      	ldr	r2, [pc, #240]	; (80068b4 <TIM_Base_SetConfig+0x11c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d007      	beq.n	80067d8 <TIM_Base_SetConfig+0x40>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a3b      	ldr	r2, [pc, #236]	; (80068b8 <TIM_Base_SetConfig+0x120>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d003      	beq.n	80067d8 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a3a      	ldr	r2, [pc, #232]	; (80068bc <TIM_Base_SetConfig+0x124>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d108      	bne.n	80067ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a2f      	ldr	r2, [pc, #188]	; (80068ac <TIM_Base_SetConfig+0x114>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d01f      	beq.n	8006832 <TIM_Base_SetConfig+0x9a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f8:	d01b      	beq.n	8006832 <TIM_Base_SetConfig+0x9a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a2c      	ldr	r2, [pc, #176]	; (80068b0 <TIM_Base_SetConfig+0x118>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d017      	beq.n	8006832 <TIM_Base_SetConfig+0x9a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a2b      	ldr	r2, [pc, #172]	; (80068b4 <TIM_Base_SetConfig+0x11c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d013      	beq.n	8006832 <TIM_Base_SetConfig+0x9a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2a      	ldr	r2, [pc, #168]	; (80068b8 <TIM_Base_SetConfig+0x120>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00f      	beq.n	8006832 <TIM_Base_SetConfig+0x9a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a29      	ldr	r2, [pc, #164]	; (80068bc <TIM_Base_SetConfig+0x124>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00b      	beq.n	8006832 <TIM_Base_SetConfig+0x9a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a28      	ldr	r2, [pc, #160]	; (80068c0 <TIM_Base_SetConfig+0x128>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d007      	beq.n	8006832 <TIM_Base_SetConfig+0x9a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a27      	ldr	r2, [pc, #156]	; (80068c4 <TIM_Base_SetConfig+0x12c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_Base_SetConfig+0x9a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a26      	ldr	r2, [pc, #152]	; (80068c8 <TIM_Base_SetConfig+0x130>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d108      	bne.n	8006844 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a10      	ldr	r2, [pc, #64]	; (80068ac <TIM_Base_SetConfig+0x114>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00f      	beq.n	8006890 <TIM_Base_SetConfig+0xf8>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a12      	ldr	r2, [pc, #72]	; (80068bc <TIM_Base_SetConfig+0x124>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00b      	beq.n	8006890 <TIM_Base_SetConfig+0xf8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a11      	ldr	r2, [pc, #68]	; (80068c0 <TIM_Base_SetConfig+0x128>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d007      	beq.n	8006890 <TIM_Base_SetConfig+0xf8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a10      	ldr	r2, [pc, #64]	; (80068c4 <TIM_Base_SetConfig+0x12c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_Base_SetConfig+0xf8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a0f      	ldr	r2, [pc, #60]	; (80068c8 <TIM_Base_SetConfig+0x130>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d103      	bne.n	8006898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	615a      	str	r2, [r3, #20]
}
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40010000 	.word	0x40010000
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40000c00 	.word	0x40000c00
 80068bc:	40010400 	.word	0x40010400
 80068c0:	40014000 	.word	0x40014000
 80068c4:	40014400 	.word	0x40014400
 80068c8:	40014800 	.word	0x40014800

080068cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 031f 	and.w	r3, r3, #31
 80068de:	2201      	movs	r2, #1
 80068e0:	fa02 f303 	lsl.w	r3, r2, r3
 80068e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6a1a      	ldr	r2, [r3, #32]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	43db      	mvns	r3, r3
 80068ee:	401a      	ands	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a1a      	ldr	r2, [r3, #32]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f003 031f 	and.w	r3, r3, #31
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	fa01 f303 	lsl.w	r3, r1, r3
 8006904:	431a      	orrs	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
	...

08006918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800692c:	2302      	movs	r3, #2
 800692e:	e06d      	b.n	8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a30      	ldr	r2, [pc, #192]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d004      	beq.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a2f      	ldr	r2, [pc, #188]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d108      	bne.n	8006976 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800696a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a20      	ldr	r2, [pc, #128]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d022      	beq.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a2:	d01d      	beq.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a1d      	ldr	r2, [pc, #116]	; (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d018      	beq.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a1c      	ldr	r2, [pc, #112]	; (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d013      	beq.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1a      	ldr	r2, [pc, #104]	; (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00e      	beq.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a15      	ldr	r2, [pc, #84]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d009      	beq.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d004      	beq.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d10c      	bne.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	40010000 	.word	0x40010000
 8006a1c:	40010400 	.word	0x40010400
 8006a20:	40000400 	.word	0x40000400
 8006a24:	40000800 	.word	0x40000800
 8006a28:	40000c00 	.word	0x40000c00
 8006a2c:	40001800 	.word	0x40001800
 8006a30:	40014000 	.word	0x40014000

08006a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e042      	b.n	8006b08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d106      	bne.n	8006a9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7fa fb1d 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2224      	movs	r2, #36	; 0x24
 8006a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0201 	bic.w	r2, r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f8ba 	bl	8006c2c <UART_SetConfig>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d101      	bne.n	8006ac2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e022      	b.n	8006b08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 ff1a 	bl	8007904 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ade:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0201 	orr.w	r2, r2, #1
 8006afe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 ffa1 	bl	8007a48 <UART_CheckIdleState>
 8006b06:	4603      	mov	r3, r0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d17b      	bne.n	8006c22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <HAL_UART_Transmit+0x26>
 8006b30:	88fb      	ldrh	r3, [r7, #6]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e074      	b.n	8006c24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2221      	movs	r2, #33	; 0x21
 8006b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b4a:	f7fa fcbf 	bl	80014cc <HAL_GetTick>
 8006b4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	88fa      	ldrh	r2, [r7, #6]
 8006b54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	88fa      	ldrh	r2, [r7, #6]
 8006b5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b68:	d108      	bne.n	8006b7c <HAL_UART_Transmit+0x6c>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d104      	bne.n	8006b7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	61bb      	str	r3, [r7, #24]
 8006b7a:	e003      	b.n	8006b84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b80:	2300      	movs	r3, #0
 8006b82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b84:	e030      	b.n	8006be8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2180      	movs	r1, #128	; 0x80
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f001 f803 	bl	8007b9c <UART_WaitOnFlagUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d005      	beq.n	8006ba8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e03d      	b.n	8006c24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10b      	bne.n	8006bc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	3302      	adds	r3, #2
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	e007      	b.n	8006bd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	781a      	ldrb	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1c8      	bne.n	8006b86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2140      	movs	r1, #64	; 0x40
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 ffcc 	bl	8007b9c <UART_WaitOnFlagUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d005      	beq.n	8006c16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e006      	b.n	8006c24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	e000      	b.n	8006c24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c22:	2302      	movs	r3, #2
  }
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c30:	b092      	sub	sp, #72	; 0x48
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	431a      	orrs	r2, r3
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	4bbe      	ldr	r3, [pc, #760]	; (8006f54 <UART_SetConfig+0x328>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	6812      	ldr	r2, [r2, #0]
 8006c62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c64:	430b      	orrs	r3, r1
 8006c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4ab3      	ldr	r2, [pc, #716]	; (8006f58 <UART_SetConfig+0x32c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d004      	beq.n	8006c98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c94:	4313      	orrs	r3, r2
 8006c96:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	4baf      	ldr	r3, [pc, #700]	; (8006f5c <UART_SetConfig+0x330>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	6812      	ldr	r2, [r2, #0]
 8006ca6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	f023 010f 	bic.w	r1, r3, #15
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4aa6      	ldr	r2, [pc, #664]	; (8006f60 <UART_SetConfig+0x334>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d177      	bne.n	8006dbc <UART_SetConfig+0x190>
 8006ccc:	4ba5      	ldr	r3, [pc, #660]	; (8006f64 <UART_SetConfig+0x338>)
 8006cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cd4:	2b28      	cmp	r3, #40	; 0x28
 8006cd6:	d86d      	bhi.n	8006db4 <UART_SetConfig+0x188>
 8006cd8:	a201      	add	r2, pc, #4	; (adr r2, 8006ce0 <UART_SetConfig+0xb4>)
 8006cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cde:	bf00      	nop
 8006ce0:	08006d85 	.word	0x08006d85
 8006ce4:	08006db5 	.word	0x08006db5
 8006ce8:	08006db5 	.word	0x08006db5
 8006cec:	08006db5 	.word	0x08006db5
 8006cf0:	08006db5 	.word	0x08006db5
 8006cf4:	08006db5 	.word	0x08006db5
 8006cf8:	08006db5 	.word	0x08006db5
 8006cfc:	08006db5 	.word	0x08006db5
 8006d00:	08006d8d 	.word	0x08006d8d
 8006d04:	08006db5 	.word	0x08006db5
 8006d08:	08006db5 	.word	0x08006db5
 8006d0c:	08006db5 	.word	0x08006db5
 8006d10:	08006db5 	.word	0x08006db5
 8006d14:	08006db5 	.word	0x08006db5
 8006d18:	08006db5 	.word	0x08006db5
 8006d1c:	08006db5 	.word	0x08006db5
 8006d20:	08006d95 	.word	0x08006d95
 8006d24:	08006db5 	.word	0x08006db5
 8006d28:	08006db5 	.word	0x08006db5
 8006d2c:	08006db5 	.word	0x08006db5
 8006d30:	08006db5 	.word	0x08006db5
 8006d34:	08006db5 	.word	0x08006db5
 8006d38:	08006db5 	.word	0x08006db5
 8006d3c:	08006db5 	.word	0x08006db5
 8006d40:	08006d9d 	.word	0x08006d9d
 8006d44:	08006db5 	.word	0x08006db5
 8006d48:	08006db5 	.word	0x08006db5
 8006d4c:	08006db5 	.word	0x08006db5
 8006d50:	08006db5 	.word	0x08006db5
 8006d54:	08006db5 	.word	0x08006db5
 8006d58:	08006db5 	.word	0x08006db5
 8006d5c:	08006db5 	.word	0x08006db5
 8006d60:	08006da5 	.word	0x08006da5
 8006d64:	08006db5 	.word	0x08006db5
 8006d68:	08006db5 	.word	0x08006db5
 8006d6c:	08006db5 	.word	0x08006db5
 8006d70:	08006db5 	.word	0x08006db5
 8006d74:	08006db5 	.word	0x08006db5
 8006d78:	08006db5 	.word	0x08006db5
 8006d7c:	08006db5 	.word	0x08006db5
 8006d80:	08006dad 	.word	0x08006dad
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d8a:	e326      	b.n	80073da <UART_SetConfig+0x7ae>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d92:	e322      	b.n	80073da <UART_SetConfig+0x7ae>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d9a:	e31e      	b.n	80073da <UART_SetConfig+0x7ae>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006da2:	e31a      	b.n	80073da <UART_SetConfig+0x7ae>
 8006da4:	2320      	movs	r3, #32
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006daa:	e316      	b.n	80073da <UART_SetConfig+0x7ae>
 8006dac:	2340      	movs	r3, #64	; 0x40
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db2:	e312      	b.n	80073da <UART_SetConfig+0x7ae>
 8006db4:	2380      	movs	r3, #128	; 0x80
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dba:	e30e      	b.n	80073da <UART_SetConfig+0x7ae>
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a69      	ldr	r2, [pc, #420]	; (8006f68 <UART_SetConfig+0x33c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d130      	bne.n	8006e28 <UART_SetConfig+0x1fc>
 8006dc6:	4b67      	ldr	r3, [pc, #412]	; (8006f64 <UART_SetConfig+0x338>)
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	2b05      	cmp	r3, #5
 8006dd0:	d826      	bhi.n	8006e20 <UART_SetConfig+0x1f4>
 8006dd2:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <UART_SetConfig+0x1ac>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006df1 	.word	0x08006df1
 8006ddc:	08006df9 	.word	0x08006df9
 8006de0:	08006e01 	.word	0x08006e01
 8006de4:	08006e09 	.word	0x08006e09
 8006de8:	08006e11 	.word	0x08006e11
 8006dec:	08006e19 	.word	0x08006e19
 8006df0:	2300      	movs	r3, #0
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df6:	e2f0      	b.n	80073da <UART_SetConfig+0x7ae>
 8006df8:	2304      	movs	r3, #4
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dfe:	e2ec      	b.n	80073da <UART_SetConfig+0x7ae>
 8006e00:	2308      	movs	r3, #8
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e06:	e2e8      	b.n	80073da <UART_SetConfig+0x7ae>
 8006e08:	2310      	movs	r3, #16
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0e:	e2e4      	b.n	80073da <UART_SetConfig+0x7ae>
 8006e10:	2320      	movs	r3, #32
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e16:	e2e0      	b.n	80073da <UART_SetConfig+0x7ae>
 8006e18:	2340      	movs	r3, #64	; 0x40
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1e:	e2dc      	b.n	80073da <UART_SetConfig+0x7ae>
 8006e20:	2380      	movs	r3, #128	; 0x80
 8006e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e26:	e2d8      	b.n	80073da <UART_SetConfig+0x7ae>
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a4f      	ldr	r2, [pc, #316]	; (8006f6c <UART_SetConfig+0x340>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d130      	bne.n	8006e94 <UART_SetConfig+0x268>
 8006e32:	4b4c      	ldr	r3, [pc, #304]	; (8006f64 <UART_SetConfig+0x338>)
 8006e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	2b05      	cmp	r3, #5
 8006e3c:	d826      	bhi.n	8006e8c <UART_SetConfig+0x260>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <UART_SetConfig+0x218>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e5d 	.word	0x08006e5d
 8006e48:	08006e65 	.word	0x08006e65
 8006e4c:	08006e6d 	.word	0x08006e6d
 8006e50:	08006e75 	.word	0x08006e75
 8006e54:	08006e7d 	.word	0x08006e7d
 8006e58:	08006e85 	.word	0x08006e85
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e2ba      	b.n	80073da <UART_SetConfig+0x7ae>
 8006e64:	2304      	movs	r3, #4
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6a:	e2b6      	b.n	80073da <UART_SetConfig+0x7ae>
 8006e6c:	2308      	movs	r3, #8
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e72:	e2b2      	b.n	80073da <UART_SetConfig+0x7ae>
 8006e74:	2310      	movs	r3, #16
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7a:	e2ae      	b.n	80073da <UART_SetConfig+0x7ae>
 8006e7c:	2320      	movs	r3, #32
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e82:	e2aa      	b.n	80073da <UART_SetConfig+0x7ae>
 8006e84:	2340      	movs	r3, #64	; 0x40
 8006e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8a:	e2a6      	b.n	80073da <UART_SetConfig+0x7ae>
 8006e8c:	2380      	movs	r3, #128	; 0x80
 8006e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e92:	e2a2      	b.n	80073da <UART_SetConfig+0x7ae>
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a35      	ldr	r2, [pc, #212]	; (8006f70 <UART_SetConfig+0x344>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d130      	bne.n	8006f00 <UART_SetConfig+0x2d4>
 8006e9e:	4b31      	ldr	r3, [pc, #196]	; (8006f64 <UART_SetConfig+0x338>)
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	2b05      	cmp	r3, #5
 8006ea8:	d826      	bhi.n	8006ef8 <UART_SetConfig+0x2cc>
 8006eaa:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <UART_SetConfig+0x284>)
 8006eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb0:	08006ec9 	.word	0x08006ec9
 8006eb4:	08006ed1 	.word	0x08006ed1
 8006eb8:	08006ed9 	.word	0x08006ed9
 8006ebc:	08006ee1 	.word	0x08006ee1
 8006ec0:	08006ee9 	.word	0x08006ee9
 8006ec4:	08006ef1 	.word	0x08006ef1
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e284      	b.n	80073da <UART_SetConfig+0x7ae>
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed6:	e280      	b.n	80073da <UART_SetConfig+0x7ae>
 8006ed8:	2308      	movs	r3, #8
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ede:	e27c      	b.n	80073da <UART_SetConfig+0x7ae>
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee6:	e278      	b.n	80073da <UART_SetConfig+0x7ae>
 8006ee8:	2320      	movs	r3, #32
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eee:	e274      	b.n	80073da <UART_SetConfig+0x7ae>
 8006ef0:	2340      	movs	r3, #64	; 0x40
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef6:	e270      	b.n	80073da <UART_SetConfig+0x7ae>
 8006ef8:	2380      	movs	r3, #128	; 0x80
 8006efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efe:	e26c      	b.n	80073da <UART_SetConfig+0x7ae>
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a1b      	ldr	r2, [pc, #108]	; (8006f74 <UART_SetConfig+0x348>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d142      	bne.n	8006f90 <UART_SetConfig+0x364>
 8006f0a:	4b16      	ldr	r3, [pc, #88]	; (8006f64 <UART_SetConfig+0x338>)
 8006f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	2b05      	cmp	r3, #5
 8006f14:	d838      	bhi.n	8006f88 <UART_SetConfig+0x35c>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <UART_SetConfig+0x2f0>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f35 	.word	0x08006f35
 8006f20:	08006f3d 	.word	0x08006f3d
 8006f24:	08006f45 	.word	0x08006f45
 8006f28:	08006f4d 	.word	0x08006f4d
 8006f2c:	08006f79 	.word	0x08006f79
 8006f30:	08006f81 	.word	0x08006f81
 8006f34:	2300      	movs	r3, #0
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e24e      	b.n	80073da <UART_SetConfig+0x7ae>
 8006f3c:	2304      	movs	r3, #4
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e24a      	b.n	80073da <UART_SetConfig+0x7ae>
 8006f44:	2308      	movs	r3, #8
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e246      	b.n	80073da <UART_SetConfig+0x7ae>
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f52:	e242      	b.n	80073da <UART_SetConfig+0x7ae>
 8006f54:	cfff69f3 	.word	0xcfff69f3
 8006f58:	58000c00 	.word	0x58000c00
 8006f5c:	11fff4ff 	.word	0x11fff4ff
 8006f60:	40011000 	.word	0x40011000
 8006f64:	58024400 	.word	0x58024400
 8006f68:	40004400 	.word	0x40004400
 8006f6c:	40004800 	.word	0x40004800
 8006f70:	40004c00 	.word	0x40004c00
 8006f74:	40005000 	.word	0x40005000
 8006f78:	2320      	movs	r3, #32
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7e:	e22c      	b.n	80073da <UART_SetConfig+0x7ae>
 8006f80:	2340      	movs	r3, #64	; 0x40
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f86:	e228      	b.n	80073da <UART_SetConfig+0x7ae>
 8006f88:	2380      	movs	r3, #128	; 0x80
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8e:	e224      	b.n	80073da <UART_SetConfig+0x7ae>
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4ab1      	ldr	r2, [pc, #708]	; (800725c <UART_SetConfig+0x630>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d176      	bne.n	8007088 <UART_SetConfig+0x45c>
 8006f9a:	4bb1      	ldr	r3, [pc, #708]	; (8007260 <UART_SetConfig+0x634>)
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fa2:	2b28      	cmp	r3, #40	; 0x28
 8006fa4:	d86c      	bhi.n	8007080 <UART_SetConfig+0x454>
 8006fa6:	a201      	add	r2, pc, #4	; (adr r2, 8006fac <UART_SetConfig+0x380>)
 8006fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fac:	08007051 	.word	0x08007051
 8006fb0:	08007081 	.word	0x08007081
 8006fb4:	08007081 	.word	0x08007081
 8006fb8:	08007081 	.word	0x08007081
 8006fbc:	08007081 	.word	0x08007081
 8006fc0:	08007081 	.word	0x08007081
 8006fc4:	08007081 	.word	0x08007081
 8006fc8:	08007081 	.word	0x08007081
 8006fcc:	08007059 	.word	0x08007059
 8006fd0:	08007081 	.word	0x08007081
 8006fd4:	08007081 	.word	0x08007081
 8006fd8:	08007081 	.word	0x08007081
 8006fdc:	08007081 	.word	0x08007081
 8006fe0:	08007081 	.word	0x08007081
 8006fe4:	08007081 	.word	0x08007081
 8006fe8:	08007081 	.word	0x08007081
 8006fec:	08007061 	.word	0x08007061
 8006ff0:	08007081 	.word	0x08007081
 8006ff4:	08007081 	.word	0x08007081
 8006ff8:	08007081 	.word	0x08007081
 8006ffc:	08007081 	.word	0x08007081
 8007000:	08007081 	.word	0x08007081
 8007004:	08007081 	.word	0x08007081
 8007008:	08007081 	.word	0x08007081
 800700c:	08007069 	.word	0x08007069
 8007010:	08007081 	.word	0x08007081
 8007014:	08007081 	.word	0x08007081
 8007018:	08007081 	.word	0x08007081
 800701c:	08007081 	.word	0x08007081
 8007020:	08007081 	.word	0x08007081
 8007024:	08007081 	.word	0x08007081
 8007028:	08007081 	.word	0x08007081
 800702c:	08007071 	.word	0x08007071
 8007030:	08007081 	.word	0x08007081
 8007034:	08007081 	.word	0x08007081
 8007038:	08007081 	.word	0x08007081
 800703c:	08007081 	.word	0x08007081
 8007040:	08007081 	.word	0x08007081
 8007044:	08007081 	.word	0x08007081
 8007048:	08007081 	.word	0x08007081
 800704c:	08007079 	.word	0x08007079
 8007050:	2301      	movs	r3, #1
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007056:	e1c0      	b.n	80073da <UART_SetConfig+0x7ae>
 8007058:	2304      	movs	r3, #4
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705e:	e1bc      	b.n	80073da <UART_SetConfig+0x7ae>
 8007060:	2308      	movs	r3, #8
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007066:	e1b8      	b.n	80073da <UART_SetConfig+0x7ae>
 8007068:	2310      	movs	r3, #16
 800706a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706e:	e1b4      	b.n	80073da <UART_SetConfig+0x7ae>
 8007070:	2320      	movs	r3, #32
 8007072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007076:	e1b0      	b.n	80073da <UART_SetConfig+0x7ae>
 8007078:	2340      	movs	r3, #64	; 0x40
 800707a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707e:	e1ac      	b.n	80073da <UART_SetConfig+0x7ae>
 8007080:	2380      	movs	r3, #128	; 0x80
 8007082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007086:	e1a8      	b.n	80073da <UART_SetConfig+0x7ae>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a75      	ldr	r2, [pc, #468]	; (8007264 <UART_SetConfig+0x638>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d130      	bne.n	80070f4 <UART_SetConfig+0x4c8>
 8007092:	4b73      	ldr	r3, [pc, #460]	; (8007260 <UART_SetConfig+0x634>)
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	2b05      	cmp	r3, #5
 800709c:	d826      	bhi.n	80070ec <UART_SetConfig+0x4c0>
 800709e:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <UART_SetConfig+0x478>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	080070bd 	.word	0x080070bd
 80070a8:	080070c5 	.word	0x080070c5
 80070ac:	080070cd 	.word	0x080070cd
 80070b0:	080070d5 	.word	0x080070d5
 80070b4:	080070dd 	.word	0x080070dd
 80070b8:	080070e5 	.word	0x080070e5
 80070bc:	2300      	movs	r3, #0
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070c2:	e18a      	b.n	80073da <UART_SetConfig+0x7ae>
 80070c4:	2304      	movs	r3, #4
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ca:	e186      	b.n	80073da <UART_SetConfig+0x7ae>
 80070cc:	2308      	movs	r3, #8
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d2:	e182      	b.n	80073da <UART_SetConfig+0x7ae>
 80070d4:	2310      	movs	r3, #16
 80070d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070da:	e17e      	b.n	80073da <UART_SetConfig+0x7ae>
 80070dc:	2320      	movs	r3, #32
 80070de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e2:	e17a      	b.n	80073da <UART_SetConfig+0x7ae>
 80070e4:	2340      	movs	r3, #64	; 0x40
 80070e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ea:	e176      	b.n	80073da <UART_SetConfig+0x7ae>
 80070ec:	2380      	movs	r3, #128	; 0x80
 80070ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f2:	e172      	b.n	80073da <UART_SetConfig+0x7ae>
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a5b      	ldr	r2, [pc, #364]	; (8007268 <UART_SetConfig+0x63c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d130      	bne.n	8007160 <UART_SetConfig+0x534>
 80070fe:	4b58      	ldr	r3, [pc, #352]	; (8007260 <UART_SetConfig+0x634>)
 8007100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	2b05      	cmp	r3, #5
 8007108:	d826      	bhi.n	8007158 <UART_SetConfig+0x52c>
 800710a:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <UART_SetConfig+0x4e4>)
 800710c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007110:	08007129 	.word	0x08007129
 8007114:	08007131 	.word	0x08007131
 8007118:	08007139 	.word	0x08007139
 800711c:	08007141 	.word	0x08007141
 8007120:	08007149 	.word	0x08007149
 8007124:	08007151 	.word	0x08007151
 8007128:	2300      	movs	r3, #0
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712e:	e154      	b.n	80073da <UART_SetConfig+0x7ae>
 8007130:	2304      	movs	r3, #4
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007136:	e150      	b.n	80073da <UART_SetConfig+0x7ae>
 8007138:	2308      	movs	r3, #8
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713e:	e14c      	b.n	80073da <UART_SetConfig+0x7ae>
 8007140:	2310      	movs	r3, #16
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007146:	e148      	b.n	80073da <UART_SetConfig+0x7ae>
 8007148:	2320      	movs	r3, #32
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714e:	e144      	b.n	80073da <UART_SetConfig+0x7ae>
 8007150:	2340      	movs	r3, #64	; 0x40
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007156:	e140      	b.n	80073da <UART_SetConfig+0x7ae>
 8007158:	2380      	movs	r3, #128	; 0x80
 800715a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715e:	e13c      	b.n	80073da <UART_SetConfig+0x7ae>
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a41      	ldr	r2, [pc, #260]	; (800726c <UART_SetConfig+0x640>)
 8007166:	4293      	cmp	r3, r2
 8007168:	f040 8082 	bne.w	8007270 <UART_SetConfig+0x644>
 800716c:	4b3c      	ldr	r3, [pc, #240]	; (8007260 <UART_SetConfig+0x634>)
 800716e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007170:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007174:	2b28      	cmp	r3, #40	; 0x28
 8007176:	d86d      	bhi.n	8007254 <UART_SetConfig+0x628>
 8007178:	a201      	add	r2, pc, #4	; (adr r2, 8007180 <UART_SetConfig+0x554>)
 800717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717e:	bf00      	nop
 8007180:	08007225 	.word	0x08007225
 8007184:	08007255 	.word	0x08007255
 8007188:	08007255 	.word	0x08007255
 800718c:	08007255 	.word	0x08007255
 8007190:	08007255 	.word	0x08007255
 8007194:	08007255 	.word	0x08007255
 8007198:	08007255 	.word	0x08007255
 800719c:	08007255 	.word	0x08007255
 80071a0:	0800722d 	.word	0x0800722d
 80071a4:	08007255 	.word	0x08007255
 80071a8:	08007255 	.word	0x08007255
 80071ac:	08007255 	.word	0x08007255
 80071b0:	08007255 	.word	0x08007255
 80071b4:	08007255 	.word	0x08007255
 80071b8:	08007255 	.word	0x08007255
 80071bc:	08007255 	.word	0x08007255
 80071c0:	08007235 	.word	0x08007235
 80071c4:	08007255 	.word	0x08007255
 80071c8:	08007255 	.word	0x08007255
 80071cc:	08007255 	.word	0x08007255
 80071d0:	08007255 	.word	0x08007255
 80071d4:	08007255 	.word	0x08007255
 80071d8:	08007255 	.word	0x08007255
 80071dc:	08007255 	.word	0x08007255
 80071e0:	0800723d 	.word	0x0800723d
 80071e4:	08007255 	.word	0x08007255
 80071e8:	08007255 	.word	0x08007255
 80071ec:	08007255 	.word	0x08007255
 80071f0:	08007255 	.word	0x08007255
 80071f4:	08007255 	.word	0x08007255
 80071f8:	08007255 	.word	0x08007255
 80071fc:	08007255 	.word	0x08007255
 8007200:	08007245 	.word	0x08007245
 8007204:	08007255 	.word	0x08007255
 8007208:	08007255 	.word	0x08007255
 800720c:	08007255 	.word	0x08007255
 8007210:	08007255 	.word	0x08007255
 8007214:	08007255 	.word	0x08007255
 8007218:	08007255 	.word	0x08007255
 800721c:	08007255 	.word	0x08007255
 8007220:	0800724d 	.word	0x0800724d
 8007224:	2301      	movs	r3, #1
 8007226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722a:	e0d6      	b.n	80073da <UART_SetConfig+0x7ae>
 800722c:	2304      	movs	r3, #4
 800722e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007232:	e0d2      	b.n	80073da <UART_SetConfig+0x7ae>
 8007234:	2308      	movs	r3, #8
 8007236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723a:	e0ce      	b.n	80073da <UART_SetConfig+0x7ae>
 800723c:	2310      	movs	r3, #16
 800723e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007242:	e0ca      	b.n	80073da <UART_SetConfig+0x7ae>
 8007244:	2320      	movs	r3, #32
 8007246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724a:	e0c6      	b.n	80073da <UART_SetConfig+0x7ae>
 800724c:	2340      	movs	r3, #64	; 0x40
 800724e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007252:	e0c2      	b.n	80073da <UART_SetConfig+0x7ae>
 8007254:	2380      	movs	r3, #128	; 0x80
 8007256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725a:	e0be      	b.n	80073da <UART_SetConfig+0x7ae>
 800725c:	40011400 	.word	0x40011400
 8007260:	58024400 	.word	0x58024400
 8007264:	40007800 	.word	0x40007800
 8007268:	40007c00 	.word	0x40007c00
 800726c:	40011800 	.word	0x40011800
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4aad      	ldr	r2, [pc, #692]	; (800752c <UART_SetConfig+0x900>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d176      	bne.n	8007368 <UART_SetConfig+0x73c>
 800727a:	4bad      	ldr	r3, [pc, #692]	; (8007530 <UART_SetConfig+0x904>)
 800727c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007282:	2b28      	cmp	r3, #40	; 0x28
 8007284:	d86c      	bhi.n	8007360 <UART_SetConfig+0x734>
 8007286:	a201      	add	r2, pc, #4	; (adr r2, 800728c <UART_SetConfig+0x660>)
 8007288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728c:	08007331 	.word	0x08007331
 8007290:	08007361 	.word	0x08007361
 8007294:	08007361 	.word	0x08007361
 8007298:	08007361 	.word	0x08007361
 800729c:	08007361 	.word	0x08007361
 80072a0:	08007361 	.word	0x08007361
 80072a4:	08007361 	.word	0x08007361
 80072a8:	08007361 	.word	0x08007361
 80072ac:	08007339 	.word	0x08007339
 80072b0:	08007361 	.word	0x08007361
 80072b4:	08007361 	.word	0x08007361
 80072b8:	08007361 	.word	0x08007361
 80072bc:	08007361 	.word	0x08007361
 80072c0:	08007361 	.word	0x08007361
 80072c4:	08007361 	.word	0x08007361
 80072c8:	08007361 	.word	0x08007361
 80072cc:	08007341 	.word	0x08007341
 80072d0:	08007361 	.word	0x08007361
 80072d4:	08007361 	.word	0x08007361
 80072d8:	08007361 	.word	0x08007361
 80072dc:	08007361 	.word	0x08007361
 80072e0:	08007361 	.word	0x08007361
 80072e4:	08007361 	.word	0x08007361
 80072e8:	08007361 	.word	0x08007361
 80072ec:	08007349 	.word	0x08007349
 80072f0:	08007361 	.word	0x08007361
 80072f4:	08007361 	.word	0x08007361
 80072f8:	08007361 	.word	0x08007361
 80072fc:	08007361 	.word	0x08007361
 8007300:	08007361 	.word	0x08007361
 8007304:	08007361 	.word	0x08007361
 8007308:	08007361 	.word	0x08007361
 800730c:	08007351 	.word	0x08007351
 8007310:	08007361 	.word	0x08007361
 8007314:	08007361 	.word	0x08007361
 8007318:	08007361 	.word	0x08007361
 800731c:	08007361 	.word	0x08007361
 8007320:	08007361 	.word	0x08007361
 8007324:	08007361 	.word	0x08007361
 8007328:	08007361 	.word	0x08007361
 800732c:	08007359 	.word	0x08007359
 8007330:	2301      	movs	r3, #1
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007336:	e050      	b.n	80073da <UART_SetConfig+0x7ae>
 8007338:	2304      	movs	r3, #4
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733e:	e04c      	b.n	80073da <UART_SetConfig+0x7ae>
 8007340:	2308      	movs	r3, #8
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007346:	e048      	b.n	80073da <UART_SetConfig+0x7ae>
 8007348:	2310      	movs	r3, #16
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734e:	e044      	b.n	80073da <UART_SetConfig+0x7ae>
 8007350:	2320      	movs	r3, #32
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007356:	e040      	b.n	80073da <UART_SetConfig+0x7ae>
 8007358:	2340      	movs	r3, #64	; 0x40
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800735e:	e03c      	b.n	80073da <UART_SetConfig+0x7ae>
 8007360:	2380      	movs	r3, #128	; 0x80
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007366:	e038      	b.n	80073da <UART_SetConfig+0x7ae>
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a71      	ldr	r2, [pc, #452]	; (8007534 <UART_SetConfig+0x908>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d130      	bne.n	80073d4 <UART_SetConfig+0x7a8>
 8007372:	4b6f      	ldr	r3, [pc, #444]	; (8007530 <UART_SetConfig+0x904>)
 8007374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	2b05      	cmp	r3, #5
 800737c:	d826      	bhi.n	80073cc <UART_SetConfig+0x7a0>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <UART_SetConfig+0x758>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	0800739d 	.word	0x0800739d
 8007388:	080073a5 	.word	0x080073a5
 800738c:	080073ad 	.word	0x080073ad
 8007390:	080073b5 	.word	0x080073b5
 8007394:	080073bd 	.word	0x080073bd
 8007398:	080073c5 	.word	0x080073c5
 800739c:	2302      	movs	r3, #2
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a2:	e01a      	b.n	80073da <UART_SetConfig+0x7ae>
 80073a4:	2304      	movs	r3, #4
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073aa:	e016      	b.n	80073da <UART_SetConfig+0x7ae>
 80073ac:	2308      	movs	r3, #8
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b2:	e012      	b.n	80073da <UART_SetConfig+0x7ae>
 80073b4:	2310      	movs	r3, #16
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ba:	e00e      	b.n	80073da <UART_SetConfig+0x7ae>
 80073bc:	2320      	movs	r3, #32
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073c2:	e00a      	b.n	80073da <UART_SetConfig+0x7ae>
 80073c4:	2340      	movs	r3, #64	; 0x40
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ca:	e006      	b.n	80073da <UART_SetConfig+0x7ae>
 80073cc:	2380      	movs	r3, #128	; 0x80
 80073ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073d2:	e002      	b.n	80073da <UART_SetConfig+0x7ae>
 80073d4:	2380      	movs	r3, #128	; 0x80
 80073d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a55      	ldr	r2, [pc, #340]	; (8007534 <UART_SetConfig+0x908>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	f040 80f8 	bne.w	80075d6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	dc46      	bgt.n	800747c <UART_SetConfig+0x850>
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	db75      	blt.n	80074de <UART_SetConfig+0x8b2>
 80073f2:	3b02      	subs	r3, #2
 80073f4:	2b1e      	cmp	r3, #30
 80073f6:	d872      	bhi.n	80074de <UART_SetConfig+0x8b2>
 80073f8:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <UART_SetConfig+0x7d4>)
 80073fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fe:	bf00      	nop
 8007400:	08007483 	.word	0x08007483
 8007404:	080074df 	.word	0x080074df
 8007408:	0800748b 	.word	0x0800748b
 800740c:	080074df 	.word	0x080074df
 8007410:	080074df 	.word	0x080074df
 8007414:	080074df 	.word	0x080074df
 8007418:	0800749b 	.word	0x0800749b
 800741c:	080074df 	.word	0x080074df
 8007420:	080074df 	.word	0x080074df
 8007424:	080074df 	.word	0x080074df
 8007428:	080074df 	.word	0x080074df
 800742c:	080074df 	.word	0x080074df
 8007430:	080074df 	.word	0x080074df
 8007434:	080074df 	.word	0x080074df
 8007438:	080074ab 	.word	0x080074ab
 800743c:	080074df 	.word	0x080074df
 8007440:	080074df 	.word	0x080074df
 8007444:	080074df 	.word	0x080074df
 8007448:	080074df 	.word	0x080074df
 800744c:	080074df 	.word	0x080074df
 8007450:	080074df 	.word	0x080074df
 8007454:	080074df 	.word	0x080074df
 8007458:	080074df 	.word	0x080074df
 800745c:	080074df 	.word	0x080074df
 8007460:	080074df 	.word	0x080074df
 8007464:	080074df 	.word	0x080074df
 8007468:	080074df 	.word	0x080074df
 800746c:	080074df 	.word	0x080074df
 8007470:	080074df 	.word	0x080074df
 8007474:	080074df 	.word	0x080074df
 8007478:	080074d1 	.word	0x080074d1
 800747c:	2b40      	cmp	r3, #64	; 0x40
 800747e:	d02a      	beq.n	80074d6 <UART_SetConfig+0x8aa>
 8007480:	e02d      	b.n	80074de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007482:	f7fe f937 	bl	80056f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007486:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007488:	e02f      	b.n	80074ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800748a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe f946 	bl	8005720 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007498:	e027      	b.n	80074ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800749a:	f107 0318 	add.w	r3, r7, #24
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fa92 	bl	80059c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074a8:	e01f      	b.n	80074ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074aa:	4b21      	ldr	r3, [pc, #132]	; (8007530 <UART_SetConfig+0x904>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d009      	beq.n	80074ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074b6:	4b1e      	ldr	r3, [pc, #120]	; (8007530 <UART_SetConfig+0x904>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	08db      	lsrs	r3, r3, #3
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	4a1d      	ldr	r2, [pc, #116]	; (8007538 <UART_SetConfig+0x90c>)
 80074c2:	fa22 f303 	lsr.w	r3, r2, r3
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074c8:	e00f      	b.n	80074ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80074ca:	4b1b      	ldr	r3, [pc, #108]	; (8007538 <UART_SetConfig+0x90c>)
 80074cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074ce:	e00c      	b.n	80074ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074d0:	4b1a      	ldr	r3, [pc, #104]	; (800753c <UART_SetConfig+0x910>)
 80074d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074d4:	e009      	b.n	80074ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074dc:	e005      	b.n	80074ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80074de:	2300      	movs	r3, #0
 80074e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80074e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 81ee 	beq.w	80078ce <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	4a12      	ldr	r2, [pc, #72]	; (8007540 <UART_SetConfig+0x914>)
 80074f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074fc:	461a      	mov	r2, r3
 80074fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007500:	fbb3 f3f2 	udiv	r3, r3, r2
 8007504:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	4613      	mov	r3, r2
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	4413      	add	r3, r2
 8007510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007512:	429a      	cmp	r2, r3
 8007514:	d305      	bcc.n	8007522 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800751c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800751e:	429a      	cmp	r2, r3
 8007520:	d910      	bls.n	8007544 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007528:	e1d1      	b.n	80078ce <UART_SetConfig+0xca2>
 800752a:	bf00      	nop
 800752c:	40011c00 	.word	0x40011c00
 8007530:	58024400 	.word	0x58024400
 8007534:	58000c00 	.word	0x58000c00
 8007538:	03d09000 	.word	0x03d09000
 800753c:	003d0900 	.word	0x003d0900
 8007540:	08008934 	.word	0x08008934
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007546:	2200      	movs	r2, #0
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	60fa      	str	r2, [r7, #12]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	4ac0      	ldr	r2, [pc, #768]	; (8007854 <UART_SetConfig+0xc28>)
 8007552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007556:	b29b      	uxth	r3, r3
 8007558:	2200      	movs	r2, #0
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	607a      	str	r2, [r7, #4]
 800755e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007562:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007566:	f7f8 ff13 	bl	8000390 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4610      	mov	r0, r2
 8007570:	4619      	mov	r1, r3
 8007572:	f04f 0200 	mov.w	r2, #0
 8007576:	f04f 0300 	mov.w	r3, #0
 800757a:	020b      	lsls	r3, r1, #8
 800757c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007580:	0202      	lsls	r2, r0, #8
 8007582:	6979      	ldr	r1, [r7, #20]
 8007584:	6849      	ldr	r1, [r1, #4]
 8007586:	0849      	lsrs	r1, r1, #1
 8007588:	2000      	movs	r0, #0
 800758a:	460c      	mov	r4, r1
 800758c:	4605      	mov	r5, r0
 800758e:	eb12 0804 	adds.w	r8, r2, r4
 8007592:	eb43 0905 	adc.w	r9, r3, r5
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	469a      	mov	sl, r3
 800759e:	4693      	mov	fp, r2
 80075a0:	4652      	mov	r2, sl
 80075a2:	465b      	mov	r3, fp
 80075a4:	4640      	mov	r0, r8
 80075a6:	4649      	mov	r1, r9
 80075a8:	f7f8 fef2 	bl	8000390 <__aeabi_uldivmod>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4613      	mov	r3, r2
 80075b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ba:	d308      	bcc.n	80075ce <UART_SetConfig+0x9a2>
 80075bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075c2:	d204      	bcs.n	80075ce <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ca:	60da      	str	r2, [r3, #12]
 80075cc:	e17f      	b.n	80078ce <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80075d4:	e17b      	b.n	80078ce <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075de:	f040 80bd 	bne.w	800775c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80075e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	dc48      	bgt.n	800767c <UART_SetConfig+0xa50>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	db7b      	blt.n	80076e6 <UART_SetConfig+0xaba>
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d879      	bhi.n	80076e6 <UART_SetConfig+0xaba>
 80075f2:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <UART_SetConfig+0x9cc>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	08007683 	.word	0x08007683
 80075fc:	0800768b 	.word	0x0800768b
 8007600:	080076e7 	.word	0x080076e7
 8007604:	080076e7 	.word	0x080076e7
 8007608:	08007693 	.word	0x08007693
 800760c:	080076e7 	.word	0x080076e7
 8007610:	080076e7 	.word	0x080076e7
 8007614:	080076e7 	.word	0x080076e7
 8007618:	080076a3 	.word	0x080076a3
 800761c:	080076e7 	.word	0x080076e7
 8007620:	080076e7 	.word	0x080076e7
 8007624:	080076e7 	.word	0x080076e7
 8007628:	080076e7 	.word	0x080076e7
 800762c:	080076e7 	.word	0x080076e7
 8007630:	080076e7 	.word	0x080076e7
 8007634:	080076e7 	.word	0x080076e7
 8007638:	080076b3 	.word	0x080076b3
 800763c:	080076e7 	.word	0x080076e7
 8007640:	080076e7 	.word	0x080076e7
 8007644:	080076e7 	.word	0x080076e7
 8007648:	080076e7 	.word	0x080076e7
 800764c:	080076e7 	.word	0x080076e7
 8007650:	080076e7 	.word	0x080076e7
 8007654:	080076e7 	.word	0x080076e7
 8007658:	080076e7 	.word	0x080076e7
 800765c:	080076e7 	.word	0x080076e7
 8007660:	080076e7 	.word	0x080076e7
 8007664:	080076e7 	.word	0x080076e7
 8007668:	080076e7 	.word	0x080076e7
 800766c:	080076e7 	.word	0x080076e7
 8007670:	080076e7 	.word	0x080076e7
 8007674:	080076e7 	.word	0x080076e7
 8007678:	080076d9 	.word	0x080076d9
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d02e      	beq.n	80076de <UART_SetConfig+0xab2>
 8007680:	e031      	b.n	80076e6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007682:	f7fc f975 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8007686:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007688:	e033      	b.n	80076f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800768a:	f7fc f987 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 800768e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007690:	e02f      	b.n	80076f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe f842 	bl	8005720 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076a0:	e027      	b.n	80076f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076a2:	f107 0318 	add.w	r3, r7, #24
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe f98e 	bl	80059c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076b0:	e01f      	b.n	80076f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076b2:	4b69      	ldr	r3, [pc, #420]	; (8007858 <UART_SetConfig+0xc2c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0320 	and.w	r3, r3, #32
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d009      	beq.n	80076d2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076be:	4b66      	ldr	r3, [pc, #408]	; (8007858 <UART_SetConfig+0xc2c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	08db      	lsrs	r3, r3, #3
 80076c4:	f003 0303 	and.w	r3, r3, #3
 80076c8:	4a64      	ldr	r2, [pc, #400]	; (800785c <UART_SetConfig+0xc30>)
 80076ca:	fa22 f303 	lsr.w	r3, r2, r3
 80076ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076d0:	e00f      	b.n	80076f2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80076d2:	4b62      	ldr	r3, [pc, #392]	; (800785c <UART_SetConfig+0xc30>)
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076d6:	e00c      	b.n	80076f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076d8:	4b61      	ldr	r3, [pc, #388]	; (8007860 <UART_SetConfig+0xc34>)
 80076da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076dc:	e009      	b.n	80076f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076e4:	e005      	b.n	80076f2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80076f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 80ea 	beq.w	80078ce <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	4a55      	ldr	r2, [pc, #340]	; (8007854 <UART_SetConfig+0xc28>)
 8007700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007704:	461a      	mov	r2, r3
 8007706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007708:	fbb3 f3f2 	udiv	r3, r3, r2
 800770c:	005a      	lsls	r2, r3, #1
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	085b      	lsrs	r3, r3, #1
 8007714:	441a      	add	r2, r3
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	fbb2 f3f3 	udiv	r3, r2, r3
 800771e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	2b0f      	cmp	r3, #15
 8007724:	d916      	bls.n	8007754 <UART_SetConfig+0xb28>
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800772c:	d212      	bcs.n	8007754 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007730:	b29b      	uxth	r3, r3
 8007732:	f023 030f 	bic.w	r3, r3, #15
 8007736:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	085b      	lsrs	r3, r3, #1
 800773c:	b29b      	uxth	r3, r3
 800773e:	f003 0307 	and.w	r3, r3, #7
 8007742:	b29a      	uxth	r2, r3
 8007744:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007746:	4313      	orrs	r3, r2
 8007748:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007750:	60da      	str	r2, [r3, #12]
 8007752:	e0bc      	b.n	80078ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800775a:	e0b8      	b.n	80078ce <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800775c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007760:	2b20      	cmp	r3, #32
 8007762:	dc4b      	bgt.n	80077fc <UART_SetConfig+0xbd0>
 8007764:	2b00      	cmp	r3, #0
 8007766:	f2c0 8087 	blt.w	8007878 <UART_SetConfig+0xc4c>
 800776a:	2b20      	cmp	r3, #32
 800776c:	f200 8084 	bhi.w	8007878 <UART_SetConfig+0xc4c>
 8007770:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <UART_SetConfig+0xb4c>)
 8007772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007776:	bf00      	nop
 8007778:	08007803 	.word	0x08007803
 800777c:	0800780b 	.word	0x0800780b
 8007780:	08007879 	.word	0x08007879
 8007784:	08007879 	.word	0x08007879
 8007788:	08007813 	.word	0x08007813
 800778c:	08007879 	.word	0x08007879
 8007790:	08007879 	.word	0x08007879
 8007794:	08007879 	.word	0x08007879
 8007798:	08007823 	.word	0x08007823
 800779c:	08007879 	.word	0x08007879
 80077a0:	08007879 	.word	0x08007879
 80077a4:	08007879 	.word	0x08007879
 80077a8:	08007879 	.word	0x08007879
 80077ac:	08007879 	.word	0x08007879
 80077b0:	08007879 	.word	0x08007879
 80077b4:	08007879 	.word	0x08007879
 80077b8:	08007833 	.word	0x08007833
 80077bc:	08007879 	.word	0x08007879
 80077c0:	08007879 	.word	0x08007879
 80077c4:	08007879 	.word	0x08007879
 80077c8:	08007879 	.word	0x08007879
 80077cc:	08007879 	.word	0x08007879
 80077d0:	08007879 	.word	0x08007879
 80077d4:	08007879 	.word	0x08007879
 80077d8:	08007879 	.word	0x08007879
 80077dc:	08007879 	.word	0x08007879
 80077e0:	08007879 	.word	0x08007879
 80077e4:	08007879 	.word	0x08007879
 80077e8:	08007879 	.word	0x08007879
 80077ec:	08007879 	.word	0x08007879
 80077f0:	08007879 	.word	0x08007879
 80077f4:	08007879 	.word	0x08007879
 80077f8:	0800786b 	.word	0x0800786b
 80077fc:	2b40      	cmp	r3, #64	; 0x40
 80077fe:	d037      	beq.n	8007870 <UART_SetConfig+0xc44>
 8007800:	e03a      	b.n	8007878 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007802:	f7fc f8b5 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8007806:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007808:	e03c      	b.n	8007884 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800780a:	f7fc f8c7 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 800780e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007810:	e038      	b.n	8007884 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007816:	4618      	mov	r0, r3
 8007818:	f7fd ff82 	bl	8005720 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007820:	e030      	b.n	8007884 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007822:	f107 0318 	add.w	r3, r7, #24
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe f8ce 	bl	80059c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007830:	e028      	b.n	8007884 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007832:	4b09      	ldr	r3, [pc, #36]	; (8007858 <UART_SetConfig+0xc2c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b00      	cmp	r3, #0
 800783c:	d012      	beq.n	8007864 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800783e:	4b06      	ldr	r3, [pc, #24]	; (8007858 <UART_SetConfig+0xc2c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	08db      	lsrs	r3, r3, #3
 8007844:	f003 0303 	and.w	r3, r3, #3
 8007848:	4a04      	ldr	r2, [pc, #16]	; (800785c <UART_SetConfig+0xc30>)
 800784a:	fa22 f303 	lsr.w	r3, r2, r3
 800784e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007850:	e018      	b.n	8007884 <UART_SetConfig+0xc58>
 8007852:	bf00      	nop
 8007854:	08008934 	.word	0x08008934
 8007858:	58024400 	.word	0x58024400
 800785c:	03d09000 	.word	0x03d09000
 8007860:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007864:	4b24      	ldr	r3, [pc, #144]	; (80078f8 <UART_SetConfig+0xccc>)
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007868:	e00c      	b.n	8007884 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800786a:	4b24      	ldr	r3, [pc, #144]	; (80078fc <UART_SetConfig+0xcd0>)
 800786c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800786e:	e009      	b.n	8007884 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007874:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007876:	e005      	b.n	8007884 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007882:	bf00      	nop
    }

    if (pclk != 0U)
 8007884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d021      	beq.n	80078ce <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	4a1c      	ldr	r2, [pc, #112]	; (8007900 <UART_SetConfig+0xcd4>)
 8007890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007894:	461a      	mov	r2, r3
 8007896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007898:	fbb3 f2f2 	udiv	r2, r3, r2
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	085b      	lsrs	r3, r3, #1
 80078a2:	441a      	add	r2, r3
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ac:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	2b0f      	cmp	r3, #15
 80078b2:	d909      	bls.n	80078c8 <UART_SetConfig+0xc9c>
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ba:	d205      	bcs.n	80078c8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078be:	b29a      	uxth	r2, r3
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60da      	str	r2, [r3, #12]
 80078c6:	e002      	b.n	80078ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2201      	movs	r2, #1
 80078da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	2200      	movs	r2, #0
 80078e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	2200      	movs	r2, #0
 80078e8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80078ea:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3748      	adds	r7, #72	; 0x48
 80078f2:	46bd      	mov	sp, r7
 80078f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078f8:	03d09000 	.word	0x03d09000
 80078fc:	003d0900 	.word	0x003d0900
 8007900:	08008934 	.word	0x08008934

08007904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00a      	beq.n	800792e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00a      	beq.n	8007972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	f003 0308 	and.w	r3, r3, #8
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	f003 0310 	and.w	r3, r3, #16
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00a      	beq.n	80079b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ba:	f003 0320 	and.w	r3, r3, #32
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00a      	beq.n	80079d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d01a      	beq.n	8007a1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a02:	d10a      	bne.n	8007a1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	605a      	str	r2, [r3, #4]
  }
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b098      	sub	sp, #96	; 0x60
 8007a4c:	af02      	add	r7, sp, #8
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a58:	f7f9 fd38 	bl	80014cc <HAL_GetTick>
 8007a5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0308 	and.w	r3, r3, #8
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	d12f      	bne.n	8007acc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a74:	2200      	movs	r2, #0
 8007a76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f88e 	bl	8007b9c <UART_WaitOnFlagUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d022      	beq.n	8007acc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	e853 3f00 	ldrex	r3, [r3]
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8007aa6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007aaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e6      	bne.n	8007a86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2220      	movs	r2, #32
 8007abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e063      	b.n	8007b94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0304 	and.w	r3, r3, #4
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d149      	bne.n	8007b6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ada:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f857 	bl	8007b9c <UART_WaitOnFlagUntilTimeout>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d03c      	beq.n	8007b6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	623b      	str	r3, [r7, #32]
   return(result);
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b12:	633b      	str	r3, [r7, #48]	; 0x30
 8007b14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e6      	bne.n	8007af4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f023 0301 	bic.w	r3, r3, #1
 8007b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3308      	adds	r3, #8
 8007b44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b46:	61fa      	str	r2, [r7, #28]
 8007b48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	69b9      	ldr	r1, [r7, #24]
 8007b4c:	69fa      	ldr	r2, [r7, #28]
 8007b4e:	e841 2300 	strex	r3, r2, [r1]
 8007b52:	617b      	str	r3, [r7, #20]
   return(result);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e5      	bne.n	8007b26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e012      	b.n	8007b94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3758      	adds	r7, #88	; 0x58
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bac:	e049      	b.n	8007c42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bb4:	d045      	beq.n	8007c42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb6:	f7f9 fc89 	bl	80014cc <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d302      	bcc.n	8007bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e048      	b.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0304 	and.w	r3, r3, #4
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d031      	beq.n	8007c42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d110      	bne.n	8007c0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2208      	movs	r2, #8
 8007bf2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f839 	bl	8007c6c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2208      	movs	r2, #8
 8007bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e029      	b.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c1c:	d111      	bne.n	8007c42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f81f 	bl	8007c6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2220      	movs	r2, #32
 8007c32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e00f      	b.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69da      	ldr	r2, [r3, #28]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	bf0c      	ite	eq
 8007c52:	2301      	moveq	r3, #1
 8007c54:	2300      	movne	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	461a      	mov	r2, r3
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d0a6      	beq.n	8007bae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
	...

08007c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b095      	sub	sp, #84	; 0x54
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c7c:	e853 3f00 	ldrex	r3, [r3]
 8007c80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c92:	643b      	str	r3, [r7, #64]	; 0x40
 8007c94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e6      	bne.n	8007c74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3308      	adds	r3, #8
 8007cac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	4b1e      	ldr	r3, [pc, #120]	; (8007d34 <UART_EndRxTransfer+0xc8>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e5      	bne.n	8007ca6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d118      	bne.n	8007d14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	e853 3f00 	ldrex	r3, [r3]
 8007cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f023 0310 	bic.w	r3, r3, #16
 8007cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d00:	61bb      	str	r3, [r7, #24]
 8007d02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6979      	ldr	r1, [r7, #20]
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e6      	bne.n	8007ce2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d28:	bf00      	nop
 8007d2a:	3754      	adds	r7, #84	; 0x54
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	effffffe 	.word	0xeffffffe

08007d38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <HAL_UARTEx_DisableFifoMode+0x16>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e027      	b.n	8007d9e <HAL_UARTEx_DisableFifoMode+0x66>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2224      	movs	r2, #36	; 0x24
 8007d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0201 	bic.w	r2, r2, #1
 8007d74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d101      	bne.n	8007dc2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e02d      	b.n	8007e1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2224      	movs	r2, #36	; 0x24
 8007dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0201 	bic.w	r2, r2, #1
 8007de8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f850 	bl	8007ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d101      	bne.n	8007e3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	e02d      	b.n	8007e9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2224      	movs	r2, #36	; 0x24
 8007e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0201 	bic.w	r2, r2, #1
 8007e64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f812 	bl	8007ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d108      	bne.n	8007ec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ec4:	e031      	b.n	8007f2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ec6:	2310      	movs	r3, #16
 8007ec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007eca:	2310      	movs	r3, #16
 8007ecc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	0e5b      	lsrs	r3, r3, #25
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	f003 0307 	and.w	r3, r3, #7
 8007edc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	0f5b      	lsrs	r3, r3, #29
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	f003 0307 	and.w	r3, r3, #7
 8007eec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	7b3a      	ldrb	r2, [r7, #12]
 8007ef2:	4911      	ldr	r1, [pc, #68]	; (8007f38 <UARTEx_SetNbDataToProcess+0x94>)
 8007ef4:	5c8a      	ldrb	r2, [r1, r2]
 8007ef6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007efa:	7b3a      	ldrb	r2, [r7, #12]
 8007efc:	490f      	ldr	r1, [pc, #60]	; (8007f3c <UARTEx_SetNbDataToProcess+0x98>)
 8007efe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	7b7a      	ldrb	r2, [r7, #13]
 8007f10:	4909      	ldr	r1, [pc, #36]	; (8007f38 <UARTEx_SetNbDataToProcess+0x94>)
 8007f12:	5c8a      	ldrb	r2, [r1, r2]
 8007f14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f18:	7b7a      	ldrb	r2, [r7, #13]
 8007f1a:	4908      	ldr	r1, [pc, #32]	; (8007f3c <UARTEx_SetNbDataToProcess+0x98>)
 8007f1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	0800894c 	.word	0x0800894c
 8007f3c:	08008954 	.word	0x08008954

08007f40 <siprintf>:
 8007f40:	b40e      	push	{r1, r2, r3}
 8007f42:	b500      	push	{lr}
 8007f44:	b09c      	sub	sp, #112	; 0x70
 8007f46:	ab1d      	add	r3, sp, #116	; 0x74
 8007f48:	9002      	str	r0, [sp, #8]
 8007f4a:	9006      	str	r0, [sp, #24]
 8007f4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f50:	4809      	ldr	r0, [pc, #36]	; (8007f78 <siprintf+0x38>)
 8007f52:	9107      	str	r1, [sp, #28]
 8007f54:	9104      	str	r1, [sp, #16]
 8007f56:	4909      	ldr	r1, [pc, #36]	; (8007f7c <siprintf+0x3c>)
 8007f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f5c:	9105      	str	r1, [sp, #20]
 8007f5e:	6800      	ldr	r0, [r0, #0]
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	a902      	add	r1, sp, #8
 8007f64:	f000 f992 	bl	800828c <_svfiprintf_r>
 8007f68:	9b02      	ldr	r3, [sp, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	701a      	strb	r2, [r3, #0]
 8007f6e:	b01c      	add	sp, #112	; 0x70
 8007f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f74:	b003      	add	sp, #12
 8007f76:	4770      	bx	lr
 8007f78:	2400005c 	.word	0x2400005c
 8007f7c:	ffff0208 	.word	0xffff0208

08007f80 <memset>:
 8007f80:	4402      	add	r2, r0
 8007f82:	4603      	mov	r3, r0
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d100      	bne.n	8007f8a <memset+0xa>
 8007f88:	4770      	bx	lr
 8007f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f8e:	e7f9      	b.n	8007f84 <memset+0x4>

08007f90 <__errno>:
 8007f90:	4b01      	ldr	r3, [pc, #4]	; (8007f98 <__errno+0x8>)
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	2400005c 	.word	0x2400005c

08007f9c <__libc_init_array>:
 8007f9c:	b570      	push	{r4, r5, r6, lr}
 8007f9e:	4d0d      	ldr	r5, [pc, #52]	; (8007fd4 <__libc_init_array+0x38>)
 8007fa0:	4c0d      	ldr	r4, [pc, #52]	; (8007fd8 <__libc_init_array+0x3c>)
 8007fa2:	1b64      	subs	r4, r4, r5
 8007fa4:	10a4      	asrs	r4, r4, #2
 8007fa6:	2600      	movs	r6, #0
 8007fa8:	42a6      	cmp	r6, r4
 8007faa:	d109      	bne.n	8007fc0 <__libc_init_array+0x24>
 8007fac:	4d0b      	ldr	r5, [pc, #44]	; (8007fdc <__libc_init_array+0x40>)
 8007fae:	4c0c      	ldr	r4, [pc, #48]	; (8007fe0 <__libc_init_array+0x44>)
 8007fb0:	f000 fc6a 	bl	8008888 <_init>
 8007fb4:	1b64      	subs	r4, r4, r5
 8007fb6:	10a4      	asrs	r4, r4, #2
 8007fb8:	2600      	movs	r6, #0
 8007fba:	42a6      	cmp	r6, r4
 8007fbc:	d105      	bne.n	8007fca <__libc_init_array+0x2e>
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
 8007fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fc4:	4798      	blx	r3
 8007fc6:	3601      	adds	r6, #1
 8007fc8:	e7ee      	b.n	8007fa8 <__libc_init_array+0xc>
 8007fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fce:	4798      	blx	r3
 8007fd0:	3601      	adds	r6, #1
 8007fd2:	e7f2      	b.n	8007fba <__libc_init_array+0x1e>
 8007fd4:	08008998 	.word	0x08008998
 8007fd8:	08008998 	.word	0x08008998
 8007fdc:	08008998 	.word	0x08008998
 8007fe0:	0800899c 	.word	0x0800899c

08007fe4 <__retarget_lock_acquire_recursive>:
 8007fe4:	4770      	bx	lr

08007fe6 <__retarget_lock_release_recursive>:
 8007fe6:	4770      	bx	lr

08007fe8 <_free_r>:
 8007fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fea:	2900      	cmp	r1, #0
 8007fec:	d044      	beq.n	8008078 <_free_r+0x90>
 8007fee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff2:	9001      	str	r0, [sp, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f1a1 0404 	sub.w	r4, r1, #4
 8007ffa:	bfb8      	it	lt
 8007ffc:	18e4      	addlt	r4, r4, r3
 8007ffe:	f000 f8df 	bl	80081c0 <__malloc_lock>
 8008002:	4a1e      	ldr	r2, [pc, #120]	; (800807c <_free_r+0x94>)
 8008004:	9801      	ldr	r0, [sp, #4]
 8008006:	6813      	ldr	r3, [r2, #0]
 8008008:	b933      	cbnz	r3, 8008018 <_free_r+0x30>
 800800a:	6063      	str	r3, [r4, #4]
 800800c:	6014      	str	r4, [r2, #0]
 800800e:	b003      	add	sp, #12
 8008010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008014:	f000 b8da 	b.w	80081cc <__malloc_unlock>
 8008018:	42a3      	cmp	r3, r4
 800801a:	d908      	bls.n	800802e <_free_r+0x46>
 800801c:	6825      	ldr	r5, [r4, #0]
 800801e:	1961      	adds	r1, r4, r5
 8008020:	428b      	cmp	r3, r1
 8008022:	bf01      	itttt	eq
 8008024:	6819      	ldreq	r1, [r3, #0]
 8008026:	685b      	ldreq	r3, [r3, #4]
 8008028:	1949      	addeq	r1, r1, r5
 800802a:	6021      	streq	r1, [r4, #0]
 800802c:	e7ed      	b.n	800800a <_free_r+0x22>
 800802e:	461a      	mov	r2, r3
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	b10b      	cbz	r3, 8008038 <_free_r+0x50>
 8008034:	42a3      	cmp	r3, r4
 8008036:	d9fa      	bls.n	800802e <_free_r+0x46>
 8008038:	6811      	ldr	r1, [r2, #0]
 800803a:	1855      	adds	r5, r2, r1
 800803c:	42a5      	cmp	r5, r4
 800803e:	d10b      	bne.n	8008058 <_free_r+0x70>
 8008040:	6824      	ldr	r4, [r4, #0]
 8008042:	4421      	add	r1, r4
 8008044:	1854      	adds	r4, r2, r1
 8008046:	42a3      	cmp	r3, r4
 8008048:	6011      	str	r1, [r2, #0]
 800804a:	d1e0      	bne.n	800800e <_free_r+0x26>
 800804c:	681c      	ldr	r4, [r3, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	6053      	str	r3, [r2, #4]
 8008052:	440c      	add	r4, r1
 8008054:	6014      	str	r4, [r2, #0]
 8008056:	e7da      	b.n	800800e <_free_r+0x26>
 8008058:	d902      	bls.n	8008060 <_free_r+0x78>
 800805a:	230c      	movs	r3, #12
 800805c:	6003      	str	r3, [r0, #0]
 800805e:	e7d6      	b.n	800800e <_free_r+0x26>
 8008060:	6825      	ldr	r5, [r4, #0]
 8008062:	1961      	adds	r1, r4, r5
 8008064:	428b      	cmp	r3, r1
 8008066:	bf04      	itt	eq
 8008068:	6819      	ldreq	r1, [r3, #0]
 800806a:	685b      	ldreq	r3, [r3, #4]
 800806c:	6063      	str	r3, [r4, #4]
 800806e:	bf04      	itt	eq
 8008070:	1949      	addeq	r1, r1, r5
 8008072:	6021      	streq	r1, [r4, #0]
 8008074:	6054      	str	r4, [r2, #4]
 8008076:	e7ca      	b.n	800800e <_free_r+0x26>
 8008078:	b003      	add	sp, #12
 800807a:	bd30      	pop	{r4, r5, pc}
 800807c:	240003f8 	.word	0x240003f8

08008080 <sbrk_aligned>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	4e0e      	ldr	r6, [pc, #56]	; (80080bc <sbrk_aligned+0x3c>)
 8008084:	460c      	mov	r4, r1
 8008086:	6831      	ldr	r1, [r6, #0]
 8008088:	4605      	mov	r5, r0
 800808a:	b911      	cbnz	r1, 8008092 <sbrk_aligned+0x12>
 800808c:	f000 fba6 	bl	80087dc <_sbrk_r>
 8008090:	6030      	str	r0, [r6, #0]
 8008092:	4621      	mov	r1, r4
 8008094:	4628      	mov	r0, r5
 8008096:	f000 fba1 	bl	80087dc <_sbrk_r>
 800809a:	1c43      	adds	r3, r0, #1
 800809c:	d00a      	beq.n	80080b4 <sbrk_aligned+0x34>
 800809e:	1cc4      	adds	r4, r0, #3
 80080a0:	f024 0403 	bic.w	r4, r4, #3
 80080a4:	42a0      	cmp	r0, r4
 80080a6:	d007      	beq.n	80080b8 <sbrk_aligned+0x38>
 80080a8:	1a21      	subs	r1, r4, r0
 80080aa:	4628      	mov	r0, r5
 80080ac:	f000 fb96 	bl	80087dc <_sbrk_r>
 80080b0:	3001      	adds	r0, #1
 80080b2:	d101      	bne.n	80080b8 <sbrk_aligned+0x38>
 80080b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80080b8:	4620      	mov	r0, r4
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
 80080bc:	240003fc 	.word	0x240003fc

080080c0 <_malloc_r>:
 80080c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c4:	1ccd      	adds	r5, r1, #3
 80080c6:	f025 0503 	bic.w	r5, r5, #3
 80080ca:	3508      	adds	r5, #8
 80080cc:	2d0c      	cmp	r5, #12
 80080ce:	bf38      	it	cc
 80080d0:	250c      	movcc	r5, #12
 80080d2:	2d00      	cmp	r5, #0
 80080d4:	4607      	mov	r7, r0
 80080d6:	db01      	blt.n	80080dc <_malloc_r+0x1c>
 80080d8:	42a9      	cmp	r1, r5
 80080da:	d905      	bls.n	80080e8 <_malloc_r+0x28>
 80080dc:	230c      	movs	r3, #12
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	2600      	movs	r6, #0
 80080e2:	4630      	mov	r0, r6
 80080e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80081bc <_malloc_r+0xfc>
 80080ec:	f000 f868 	bl	80081c0 <__malloc_lock>
 80080f0:	f8d8 3000 	ldr.w	r3, [r8]
 80080f4:	461c      	mov	r4, r3
 80080f6:	bb5c      	cbnz	r4, 8008150 <_malloc_r+0x90>
 80080f8:	4629      	mov	r1, r5
 80080fa:	4638      	mov	r0, r7
 80080fc:	f7ff ffc0 	bl	8008080 <sbrk_aligned>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	4604      	mov	r4, r0
 8008104:	d155      	bne.n	80081b2 <_malloc_r+0xf2>
 8008106:	f8d8 4000 	ldr.w	r4, [r8]
 800810a:	4626      	mov	r6, r4
 800810c:	2e00      	cmp	r6, #0
 800810e:	d145      	bne.n	800819c <_malloc_r+0xdc>
 8008110:	2c00      	cmp	r4, #0
 8008112:	d048      	beq.n	80081a6 <_malloc_r+0xe6>
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	4631      	mov	r1, r6
 8008118:	4638      	mov	r0, r7
 800811a:	eb04 0903 	add.w	r9, r4, r3
 800811e:	f000 fb5d 	bl	80087dc <_sbrk_r>
 8008122:	4581      	cmp	r9, r0
 8008124:	d13f      	bne.n	80081a6 <_malloc_r+0xe6>
 8008126:	6821      	ldr	r1, [r4, #0]
 8008128:	1a6d      	subs	r5, r5, r1
 800812a:	4629      	mov	r1, r5
 800812c:	4638      	mov	r0, r7
 800812e:	f7ff ffa7 	bl	8008080 <sbrk_aligned>
 8008132:	3001      	adds	r0, #1
 8008134:	d037      	beq.n	80081a6 <_malloc_r+0xe6>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	442b      	add	r3, r5
 800813a:	6023      	str	r3, [r4, #0]
 800813c:	f8d8 3000 	ldr.w	r3, [r8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d038      	beq.n	80081b6 <_malloc_r+0xf6>
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	42a2      	cmp	r2, r4
 8008148:	d12b      	bne.n	80081a2 <_malloc_r+0xe2>
 800814a:	2200      	movs	r2, #0
 800814c:	605a      	str	r2, [r3, #4]
 800814e:	e00f      	b.n	8008170 <_malloc_r+0xb0>
 8008150:	6822      	ldr	r2, [r4, #0]
 8008152:	1b52      	subs	r2, r2, r5
 8008154:	d41f      	bmi.n	8008196 <_malloc_r+0xd6>
 8008156:	2a0b      	cmp	r2, #11
 8008158:	d917      	bls.n	800818a <_malloc_r+0xca>
 800815a:	1961      	adds	r1, r4, r5
 800815c:	42a3      	cmp	r3, r4
 800815e:	6025      	str	r5, [r4, #0]
 8008160:	bf18      	it	ne
 8008162:	6059      	strne	r1, [r3, #4]
 8008164:	6863      	ldr	r3, [r4, #4]
 8008166:	bf08      	it	eq
 8008168:	f8c8 1000 	streq.w	r1, [r8]
 800816c:	5162      	str	r2, [r4, r5]
 800816e:	604b      	str	r3, [r1, #4]
 8008170:	4638      	mov	r0, r7
 8008172:	f104 060b 	add.w	r6, r4, #11
 8008176:	f000 f829 	bl	80081cc <__malloc_unlock>
 800817a:	f026 0607 	bic.w	r6, r6, #7
 800817e:	1d23      	adds	r3, r4, #4
 8008180:	1af2      	subs	r2, r6, r3
 8008182:	d0ae      	beq.n	80080e2 <_malloc_r+0x22>
 8008184:	1b9b      	subs	r3, r3, r6
 8008186:	50a3      	str	r3, [r4, r2]
 8008188:	e7ab      	b.n	80080e2 <_malloc_r+0x22>
 800818a:	42a3      	cmp	r3, r4
 800818c:	6862      	ldr	r2, [r4, #4]
 800818e:	d1dd      	bne.n	800814c <_malloc_r+0x8c>
 8008190:	f8c8 2000 	str.w	r2, [r8]
 8008194:	e7ec      	b.n	8008170 <_malloc_r+0xb0>
 8008196:	4623      	mov	r3, r4
 8008198:	6864      	ldr	r4, [r4, #4]
 800819a:	e7ac      	b.n	80080f6 <_malloc_r+0x36>
 800819c:	4634      	mov	r4, r6
 800819e:	6876      	ldr	r6, [r6, #4]
 80081a0:	e7b4      	b.n	800810c <_malloc_r+0x4c>
 80081a2:	4613      	mov	r3, r2
 80081a4:	e7cc      	b.n	8008140 <_malloc_r+0x80>
 80081a6:	230c      	movs	r3, #12
 80081a8:	603b      	str	r3, [r7, #0]
 80081aa:	4638      	mov	r0, r7
 80081ac:	f000 f80e 	bl	80081cc <__malloc_unlock>
 80081b0:	e797      	b.n	80080e2 <_malloc_r+0x22>
 80081b2:	6025      	str	r5, [r4, #0]
 80081b4:	e7dc      	b.n	8008170 <_malloc_r+0xb0>
 80081b6:	605b      	str	r3, [r3, #4]
 80081b8:	deff      	udf	#255	; 0xff
 80081ba:	bf00      	nop
 80081bc:	240003f8 	.word	0x240003f8

080081c0 <__malloc_lock>:
 80081c0:	4801      	ldr	r0, [pc, #4]	; (80081c8 <__malloc_lock+0x8>)
 80081c2:	f7ff bf0f 	b.w	8007fe4 <__retarget_lock_acquire_recursive>
 80081c6:	bf00      	nop
 80081c8:	240003f4 	.word	0x240003f4

080081cc <__malloc_unlock>:
 80081cc:	4801      	ldr	r0, [pc, #4]	; (80081d4 <__malloc_unlock+0x8>)
 80081ce:	f7ff bf0a 	b.w	8007fe6 <__retarget_lock_release_recursive>
 80081d2:	bf00      	nop
 80081d4:	240003f4 	.word	0x240003f4

080081d8 <__ssputs_r>:
 80081d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081dc:	688e      	ldr	r6, [r1, #8]
 80081de:	461f      	mov	r7, r3
 80081e0:	42be      	cmp	r6, r7
 80081e2:	680b      	ldr	r3, [r1, #0]
 80081e4:	4682      	mov	sl, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	4690      	mov	r8, r2
 80081ea:	d82c      	bhi.n	8008246 <__ssputs_r+0x6e>
 80081ec:	898a      	ldrh	r2, [r1, #12]
 80081ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081f2:	d026      	beq.n	8008242 <__ssputs_r+0x6a>
 80081f4:	6965      	ldr	r5, [r4, #20]
 80081f6:	6909      	ldr	r1, [r1, #16]
 80081f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081fc:	eba3 0901 	sub.w	r9, r3, r1
 8008200:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008204:	1c7b      	adds	r3, r7, #1
 8008206:	444b      	add	r3, r9
 8008208:	106d      	asrs	r5, r5, #1
 800820a:	429d      	cmp	r5, r3
 800820c:	bf38      	it	cc
 800820e:	461d      	movcc	r5, r3
 8008210:	0553      	lsls	r3, r2, #21
 8008212:	d527      	bpl.n	8008264 <__ssputs_r+0x8c>
 8008214:	4629      	mov	r1, r5
 8008216:	f7ff ff53 	bl	80080c0 <_malloc_r>
 800821a:	4606      	mov	r6, r0
 800821c:	b360      	cbz	r0, 8008278 <__ssputs_r+0xa0>
 800821e:	6921      	ldr	r1, [r4, #16]
 8008220:	464a      	mov	r2, r9
 8008222:	f000 faeb 	bl	80087fc <memcpy>
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800822c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008230:	81a3      	strh	r3, [r4, #12]
 8008232:	6126      	str	r6, [r4, #16]
 8008234:	6165      	str	r5, [r4, #20]
 8008236:	444e      	add	r6, r9
 8008238:	eba5 0509 	sub.w	r5, r5, r9
 800823c:	6026      	str	r6, [r4, #0]
 800823e:	60a5      	str	r5, [r4, #8]
 8008240:	463e      	mov	r6, r7
 8008242:	42be      	cmp	r6, r7
 8008244:	d900      	bls.n	8008248 <__ssputs_r+0x70>
 8008246:	463e      	mov	r6, r7
 8008248:	6820      	ldr	r0, [r4, #0]
 800824a:	4632      	mov	r2, r6
 800824c:	4641      	mov	r1, r8
 800824e:	f000 faab 	bl	80087a8 <memmove>
 8008252:	68a3      	ldr	r3, [r4, #8]
 8008254:	1b9b      	subs	r3, r3, r6
 8008256:	60a3      	str	r3, [r4, #8]
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	4433      	add	r3, r6
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	2000      	movs	r0, #0
 8008260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008264:	462a      	mov	r2, r5
 8008266:	f000 fad7 	bl	8008818 <_realloc_r>
 800826a:	4606      	mov	r6, r0
 800826c:	2800      	cmp	r0, #0
 800826e:	d1e0      	bne.n	8008232 <__ssputs_r+0x5a>
 8008270:	6921      	ldr	r1, [r4, #16]
 8008272:	4650      	mov	r0, sl
 8008274:	f7ff feb8 	bl	8007fe8 <_free_r>
 8008278:	230c      	movs	r3, #12
 800827a:	f8ca 3000 	str.w	r3, [sl]
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008284:	81a3      	strh	r3, [r4, #12]
 8008286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800828a:	e7e9      	b.n	8008260 <__ssputs_r+0x88>

0800828c <_svfiprintf_r>:
 800828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	4698      	mov	r8, r3
 8008292:	898b      	ldrh	r3, [r1, #12]
 8008294:	061b      	lsls	r3, r3, #24
 8008296:	b09d      	sub	sp, #116	; 0x74
 8008298:	4607      	mov	r7, r0
 800829a:	460d      	mov	r5, r1
 800829c:	4614      	mov	r4, r2
 800829e:	d50e      	bpl.n	80082be <_svfiprintf_r+0x32>
 80082a0:	690b      	ldr	r3, [r1, #16]
 80082a2:	b963      	cbnz	r3, 80082be <_svfiprintf_r+0x32>
 80082a4:	2140      	movs	r1, #64	; 0x40
 80082a6:	f7ff ff0b 	bl	80080c0 <_malloc_r>
 80082aa:	6028      	str	r0, [r5, #0]
 80082ac:	6128      	str	r0, [r5, #16]
 80082ae:	b920      	cbnz	r0, 80082ba <_svfiprintf_r+0x2e>
 80082b0:	230c      	movs	r3, #12
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082b8:	e0d0      	b.n	800845c <_svfiprintf_r+0x1d0>
 80082ba:	2340      	movs	r3, #64	; 0x40
 80082bc:	616b      	str	r3, [r5, #20]
 80082be:	2300      	movs	r3, #0
 80082c0:	9309      	str	r3, [sp, #36]	; 0x24
 80082c2:	2320      	movs	r3, #32
 80082c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80082cc:	2330      	movs	r3, #48	; 0x30
 80082ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008474 <_svfiprintf_r+0x1e8>
 80082d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082d6:	f04f 0901 	mov.w	r9, #1
 80082da:	4623      	mov	r3, r4
 80082dc:	469a      	mov	sl, r3
 80082de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082e2:	b10a      	cbz	r2, 80082e8 <_svfiprintf_r+0x5c>
 80082e4:	2a25      	cmp	r2, #37	; 0x25
 80082e6:	d1f9      	bne.n	80082dc <_svfiprintf_r+0x50>
 80082e8:	ebba 0b04 	subs.w	fp, sl, r4
 80082ec:	d00b      	beq.n	8008306 <_svfiprintf_r+0x7a>
 80082ee:	465b      	mov	r3, fp
 80082f0:	4622      	mov	r2, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	4638      	mov	r0, r7
 80082f6:	f7ff ff6f 	bl	80081d8 <__ssputs_r>
 80082fa:	3001      	adds	r0, #1
 80082fc:	f000 80a9 	beq.w	8008452 <_svfiprintf_r+0x1c6>
 8008300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008302:	445a      	add	r2, fp
 8008304:	9209      	str	r2, [sp, #36]	; 0x24
 8008306:	f89a 3000 	ldrb.w	r3, [sl]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 80a1 	beq.w	8008452 <_svfiprintf_r+0x1c6>
 8008310:	2300      	movs	r3, #0
 8008312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800831a:	f10a 0a01 	add.w	sl, sl, #1
 800831e:	9304      	str	r3, [sp, #16]
 8008320:	9307      	str	r3, [sp, #28]
 8008322:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008326:	931a      	str	r3, [sp, #104]	; 0x68
 8008328:	4654      	mov	r4, sl
 800832a:	2205      	movs	r2, #5
 800832c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008330:	4850      	ldr	r0, [pc, #320]	; (8008474 <_svfiprintf_r+0x1e8>)
 8008332:	f7f7 ffdd 	bl	80002f0 <memchr>
 8008336:	9a04      	ldr	r2, [sp, #16]
 8008338:	b9d8      	cbnz	r0, 8008372 <_svfiprintf_r+0xe6>
 800833a:	06d0      	lsls	r0, r2, #27
 800833c:	bf44      	itt	mi
 800833e:	2320      	movmi	r3, #32
 8008340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008344:	0711      	lsls	r1, r2, #28
 8008346:	bf44      	itt	mi
 8008348:	232b      	movmi	r3, #43	; 0x2b
 800834a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800834e:	f89a 3000 	ldrb.w	r3, [sl]
 8008352:	2b2a      	cmp	r3, #42	; 0x2a
 8008354:	d015      	beq.n	8008382 <_svfiprintf_r+0xf6>
 8008356:	9a07      	ldr	r2, [sp, #28]
 8008358:	4654      	mov	r4, sl
 800835a:	2000      	movs	r0, #0
 800835c:	f04f 0c0a 	mov.w	ip, #10
 8008360:	4621      	mov	r1, r4
 8008362:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008366:	3b30      	subs	r3, #48	; 0x30
 8008368:	2b09      	cmp	r3, #9
 800836a:	d94d      	bls.n	8008408 <_svfiprintf_r+0x17c>
 800836c:	b1b0      	cbz	r0, 800839c <_svfiprintf_r+0x110>
 800836e:	9207      	str	r2, [sp, #28]
 8008370:	e014      	b.n	800839c <_svfiprintf_r+0x110>
 8008372:	eba0 0308 	sub.w	r3, r0, r8
 8008376:	fa09 f303 	lsl.w	r3, r9, r3
 800837a:	4313      	orrs	r3, r2
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	46a2      	mov	sl, r4
 8008380:	e7d2      	b.n	8008328 <_svfiprintf_r+0x9c>
 8008382:	9b03      	ldr	r3, [sp, #12]
 8008384:	1d19      	adds	r1, r3, #4
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	9103      	str	r1, [sp, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	bfbb      	ittet	lt
 800838e:	425b      	neglt	r3, r3
 8008390:	f042 0202 	orrlt.w	r2, r2, #2
 8008394:	9307      	strge	r3, [sp, #28]
 8008396:	9307      	strlt	r3, [sp, #28]
 8008398:	bfb8      	it	lt
 800839a:	9204      	strlt	r2, [sp, #16]
 800839c:	7823      	ldrb	r3, [r4, #0]
 800839e:	2b2e      	cmp	r3, #46	; 0x2e
 80083a0:	d10c      	bne.n	80083bc <_svfiprintf_r+0x130>
 80083a2:	7863      	ldrb	r3, [r4, #1]
 80083a4:	2b2a      	cmp	r3, #42	; 0x2a
 80083a6:	d134      	bne.n	8008412 <_svfiprintf_r+0x186>
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	1d1a      	adds	r2, r3, #4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	9203      	str	r2, [sp, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bfb8      	it	lt
 80083b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80083b8:	3402      	adds	r4, #2
 80083ba:	9305      	str	r3, [sp, #20]
 80083bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008484 <_svfiprintf_r+0x1f8>
 80083c0:	7821      	ldrb	r1, [r4, #0]
 80083c2:	2203      	movs	r2, #3
 80083c4:	4650      	mov	r0, sl
 80083c6:	f7f7 ff93 	bl	80002f0 <memchr>
 80083ca:	b138      	cbz	r0, 80083dc <_svfiprintf_r+0x150>
 80083cc:	9b04      	ldr	r3, [sp, #16]
 80083ce:	eba0 000a 	sub.w	r0, r0, sl
 80083d2:	2240      	movs	r2, #64	; 0x40
 80083d4:	4082      	lsls	r2, r0
 80083d6:	4313      	orrs	r3, r2
 80083d8:	3401      	adds	r4, #1
 80083da:	9304      	str	r3, [sp, #16]
 80083dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e0:	4825      	ldr	r0, [pc, #148]	; (8008478 <_svfiprintf_r+0x1ec>)
 80083e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083e6:	2206      	movs	r2, #6
 80083e8:	f7f7 ff82 	bl	80002f0 <memchr>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d038      	beq.n	8008462 <_svfiprintf_r+0x1d6>
 80083f0:	4b22      	ldr	r3, [pc, #136]	; (800847c <_svfiprintf_r+0x1f0>)
 80083f2:	bb1b      	cbnz	r3, 800843c <_svfiprintf_r+0x1b0>
 80083f4:	9b03      	ldr	r3, [sp, #12]
 80083f6:	3307      	adds	r3, #7
 80083f8:	f023 0307 	bic.w	r3, r3, #7
 80083fc:	3308      	adds	r3, #8
 80083fe:	9303      	str	r3, [sp, #12]
 8008400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008402:	4433      	add	r3, r6
 8008404:	9309      	str	r3, [sp, #36]	; 0x24
 8008406:	e768      	b.n	80082da <_svfiprintf_r+0x4e>
 8008408:	fb0c 3202 	mla	r2, ip, r2, r3
 800840c:	460c      	mov	r4, r1
 800840e:	2001      	movs	r0, #1
 8008410:	e7a6      	b.n	8008360 <_svfiprintf_r+0xd4>
 8008412:	2300      	movs	r3, #0
 8008414:	3401      	adds	r4, #1
 8008416:	9305      	str	r3, [sp, #20]
 8008418:	4619      	mov	r1, r3
 800841a:	f04f 0c0a 	mov.w	ip, #10
 800841e:	4620      	mov	r0, r4
 8008420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008424:	3a30      	subs	r2, #48	; 0x30
 8008426:	2a09      	cmp	r2, #9
 8008428:	d903      	bls.n	8008432 <_svfiprintf_r+0x1a6>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0c6      	beq.n	80083bc <_svfiprintf_r+0x130>
 800842e:	9105      	str	r1, [sp, #20]
 8008430:	e7c4      	b.n	80083bc <_svfiprintf_r+0x130>
 8008432:	fb0c 2101 	mla	r1, ip, r1, r2
 8008436:	4604      	mov	r4, r0
 8008438:	2301      	movs	r3, #1
 800843a:	e7f0      	b.n	800841e <_svfiprintf_r+0x192>
 800843c:	ab03      	add	r3, sp, #12
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	462a      	mov	r2, r5
 8008442:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <_svfiprintf_r+0x1f4>)
 8008444:	a904      	add	r1, sp, #16
 8008446:	4638      	mov	r0, r7
 8008448:	f3af 8000 	nop.w
 800844c:	1c42      	adds	r2, r0, #1
 800844e:	4606      	mov	r6, r0
 8008450:	d1d6      	bne.n	8008400 <_svfiprintf_r+0x174>
 8008452:	89ab      	ldrh	r3, [r5, #12]
 8008454:	065b      	lsls	r3, r3, #25
 8008456:	f53f af2d 	bmi.w	80082b4 <_svfiprintf_r+0x28>
 800845a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800845c:	b01d      	add	sp, #116	; 0x74
 800845e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008462:	ab03      	add	r3, sp, #12
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	462a      	mov	r2, r5
 8008468:	4b05      	ldr	r3, [pc, #20]	; (8008480 <_svfiprintf_r+0x1f4>)
 800846a:	a904      	add	r1, sp, #16
 800846c:	4638      	mov	r0, r7
 800846e:	f000 f879 	bl	8008564 <_printf_i>
 8008472:	e7eb      	b.n	800844c <_svfiprintf_r+0x1c0>
 8008474:	0800895c 	.word	0x0800895c
 8008478:	08008966 	.word	0x08008966
 800847c:	00000000 	.word	0x00000000
 8008480:	080081d9 	.word	0x080081d9
 8008484:	08008962 	.word	0x08008962

08008488 <_printf_common>:
 8008488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800848c:	4616      	mov	r6, r2
 800848e:	4699      	mov	r9, r3
 8008490:	688a      	ldr	r2, [r1, #8]
 8008492:	690b      	ldr	r3, [r1, #16]
 8008494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008498:	4293      	cmp	r3, r2
 800849a:	bfb8      	it	lt
 800849c:	4613      	movlt	r3, r2
 800849e:	6033      	str	r3, [r6, #0]
 80084a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084a4:	4607      	mov	r7, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	b10a      	cbz	r2, 80084ae <_printf_common+0x26>
 80084aa:	3301      	adds	r3, #1
 80084ac:	6033      	str	r3, [r6, #0]
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	0699      	lsls	r1, r3, #26
 80084b2:	bf42      	ittt	mi
 80084b4:	6833      	ldrmi	r3, [r6, #0]
 80084b6:	3302      	addmi	r3, #2
 80084b8:	6033      	strmi	r3, [r6, #0]
 80084ba:	6825      	ldr	r5, [r4, #0]
 80084bc:	f015 0506 	ands.w	r5, r5, #6
 80084c0:	d106      	bne.n	80084d0 <_printf_common+0x48>
 80084c2:	f104 0a19 	add.w	sl, r4, #25
 80084c6:	68e3      	ldr	r3, [r4, #12]
 80084c8:	6832      	ldr	r2, [r6, #0]
 80084ca:	1a9b      	subs	r3, r3, r2
 80084cc:	42ab      	cmp	r3, r5
 80084ce:	dc26      	bgt.n	800851e <_printf_common+0x96>
 80084d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084d4:	1e13      	subs	r3, r2, #0
 80084d6:	6822      	ldr	r2, [r4, #0]
 80084d8:	bf18      	it	ne
 80084da:	2301      	movne	r3, #1
 80084dc:	0692      	lsls	r2, r2, #26
 80084de:	d42b      	bmi.n	8008538 <_printf_common+0xb0>
 80084e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084e4:	4649      	mov	r1, r9
 80084e6:	4638      	mov	r0, r7
 80084e8:	47c0      	blx	r8
 80084ea:	3001      	adds	r0, #1
 80084ec:	d01e      	beq.n	800852c <_printf_common+0xa4>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	6922      	ldr	r2, [r4, #16]
 80084f2:	f003 0306 	and.w	r3, r3, #6
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	bf02      	ittt	eq
 80084fa:	68e5      	ldreq	r5, [r4, #12]
 80084fc:	6833      	ldreq	r3, [r6, #0]
 80084fe:	1aed      	subeq	r5, r5, r3
 8008500:	68a3      	ldr	r3, [r4, #8]
 8008502:	bf0c      	ite	eq
 8008504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008508:	2500      	movne	r5, #0
 800850a:	4293      	cmp	r3, r2
 800850c:	bfc4      	itt	gt
 800850e:	1a9b      	subgt	r3, r3, r2
 8008510:	18ed      	addgt	r5, r5, r3
 8008512:	2600      	movs	r6, #0
 8008514:	341a      	adds	r4, #26
 8008516:	42b5      	cmp	r5, r6
 8008518:	d11a      	bne.n	8008550 <_printf_common+0xc8>
 800851a:	2000      	movs	r0, #0
 800851c:	e008      	b.n	8008530 <_printf_common+0xa8>
 800851e:	2301      	movs	r3, #1
 8008520:	4652      	mov	r2, sl
 8008522:	4649      	mov	r1, r9
 8008524:	4638      	mov	r0, r7
 8008526:	47c0      	blx	r8
 8008528:	3001      	adds	r0, #1
 800852a:	d103      	bne.n	8008534 <_printf_common+0xac>
 800852c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008534:	3501      	adds	r5, #1
 8008536:	e7c6      	b.n	80084c6 <_printf_common+0x3e>
 8008538:	18e1      	adds	r1, r4, r3
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	2030      	movs	r0, #48	; 0x30
 800853e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008542:	4422      	add	r2, r4
 8008544:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008548:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800854c:	3302      	adds	r3, #2
 800854e:	e7c7      	b.n	80084e0 <_printf_common+0x58>
 8008550:	2301      	movs	r3, #1
 8008552:	4622      	mov	r2, r4
 8008554:	4649      	mov	r1, r9
 8008556:	4638      	mov	r0, r7
 8008558:	47c0      	blx	r8
 800855a:	3001      	adds	r0, #1
 800855c:	d0e6      	beq.n	800852c <_printf_common+0xa4>
 800855e:	3601      	adds	r6, #1
 8008560:	e7d9      	b.n	8008516 <_printf_common+0x8e>
	...

08008564 <_printf_i>:
 8008564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008568:	7e0f      	ldrb	r7, [r1, #24]
 800856a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800856c:	2f78      	cmp	r7, #120	; 0x78
 800856e:	4691      	mov	r9, r2
 8008570:	4680      	mov	r8, r0
 8008572:	460c      	mov	r4, r1
 8008574:	469a      	mov	sl, r3
 8008576:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800857a:	d807      	bhi.n	800858c <_printf_i+0x28>
 800857c:	2f62      	cmp	r7, #98	; 0x62
 800857e:	d80a      	bhi.n	8008596 <_printf_i+0x32>
 8008580:	2f00      	cmp	r7, #0
 8008582:	f000 80d4 	beq.w	800872e <_printf_i+0x1ca>
 8008586:	2f58      	cmp	r7, #88	; 0x58
 8008588:	f000 80c0 	beq.w	800870c <_printf_i+0x1a8>
 800858c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008594:	e03a      	b.n	800860c <_printf_i+0xa8>
 8008596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800859a:	2b15      	cmp	r3, #21
 800859c:	d8f6      	bhi.n	800858c <_printf_i+0x28>
 800859e:	a101      	add	r1, pc, #4	; (adr r1, 80085a4 <_printf_i+0x40>)
 80085a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085a4:	080085fd 	.word	0x080085fd
 80085a8:	08008611 	.word	0x08008611
 80085ac:	0800858d 	.word	0x0800858d
 80085b0:	0800858d 	.word	0x0800858d
 80085b4:	0800858d 	.word	0x0800858d
 80085b8:	0800858d 	.word	0x0800858d
 80085bc:	08008611 	.word	0x08008611
 80085c0:	0800858d 	.word	0x0800858d
 80085c4:	0800858d 	.word	0x0800858d
 80085c8:	0800858d 	.word	0x0800858d
 80085cc:	0800858d 	.word	0x0800858d
 80085d0:	08008715 	.word	0x08008715
 80085d4:	0800863d 	.word	0x0800863d
 80085d8:	080086cf 	.word	0x080086cf
 80085dc:	0800858d 	.word	0x0800858d
 80085e0:	0800858d 	.word	0x0800858d
 80085e4:	08008737 	.word	0x08008737
 80085e8:	0800858d 	.word	0x0800858d
 80085ec:	0800863d 	.word	0x0800863d
 80085f0:	0800858d 	.word	0x0800858d
 80085f4:	0800858d 	.word	0x0800858d
 80085f8:	080086d7 	.word	0x080086d7
 80085fc:	682b      	ldr	r3, [r5, #0]
 80085fe:	1d1a      	adds	r2, r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	602a      	str	r2, [r5, #0]
 8008604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800860c:	2301      	movs	r3, #1
 800860e:	e09f      	b.n	8008750 <_printf_i+0x1ec>
 8008610:	6820      	ldr	r0, [r4, #0]
 8008612:	682b      	ldr	r3, [r5, #0]
 8008614:	0607      	lsls	r7, r0, #24
 8008616:	f103 0104 	add.w	r1, r3, #4
 800861a:	6029      	str	r1, [r5, #0]
 800861c:	d501      	bpl.n	8008622 <_printf_i+0xbe>
 800861e:	681e      	ldr	r6, [r3, #0]
 8008620:	e003      	b.n	800862a <_printf_i+0xc6>
 8008622:	0646      	lsls	r6, r0, #25
 8008624:	d5fb      	bpl.n	800861e <_printf_i+0xba>
 8008626:	f9b3 6000 	ldrsh.w	r6, [r3]
 800862a:	2e00      	cmp	r6, #0
 800862c:	da03      	bge.n	8008636 <_printf_i+0xd2>
 800862e:	232d      	movs	r3, #45	; 0x2d
 8008630:	4276      	negs	r6, r6
 8008632:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008636:	485a      	ldr	r0, [pc, #360]	; (80087a0 <_printf_i+0x23c>)
 8008638:	230a      	movs	r3, #10
 800863a:	e012      	b.n	8008662 <_printf_i+0xfe>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	6820      	ldr	r0, [r4, #0]
 8008640:	1d19      	adds	r1, r3, #4
 8008642:	6029      	str	r1, [r5, #0]
 8008644:	0605      	lsls	r5, r0, #24
 8008646:	d501      	bpl.n	800864c <_printf_i+0xe8>
 8008648:	681e      	ldr	r6, [r3, #0]
 800864a:	e002      	b.n	8008652 <_printf_i+0xee>
 800864c:	0641      	lsls	r1, r0, #25
 800864e:	d5fb      	bpl.n	8008648 <_printf_i+0xe4>
 8008650:	881e      	ldrh	r6, [r3, #0]
 8008652:	4853      	ldr	r0, [pc, #332]	; (80087a0 <_printf_i+0x23c>)
 8008654:	2f6f      	cmp	r7, #111	; 0x6f
 8008656:	bf0c      	ite	eq
 8008658:	2308      	moveq	r3, #8
 800865a:	230a      	movne	r3, #10
 800865c:	2100      	movs	r1, #0
 800865e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008662:	6865      	ldr	r5, [r4, #4]
 8008664:	60a5      	str	r5, [r4, #8]
 8008666:	2d00      	cmp	r5, #0
 8008668:	bfa2      	ittt	ge
 800866a:	6821      	ldrge	r1, [r4, #0]
 800866c:	f021 0104 	bicge.w	r1, r1, #4
 8008670:	6021      	strge	r1, [r4, #0]
 8008672:	b90e      	cbnz	r6, 8008678 <_printf_i+0x114>
 8008674:	2d00      	cmp	r5, #0
 8008676:	d04b      	beq.n	8008710 <_printf_i+0x1ac>
 8008678:	4615      	mov	r5, r2
 800867a:	fbb6 f1f3 	udiv	r1, r6, r3
 800867e:	fb03 6711 	mls	r7, r3, r1, r6
 8008682:	5dc7      	ldrb	r7, [r0, r7]
 8008684:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008688:	4637      	mov	r7, r6
 800868a:	42bb      	cmp	r3, r7
 800868c:	460e      	mov	r6, r1
 800868e:	d9f4      	bls.n	800867a <_printf_i+0x116>
 8008690:	2b08      	cmp	r3, #8
 8008692:	d10b      	bne.n	80086ac <_printf_i+0x148>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	07de      	lsls	r6, r3, #31
 8008698:	d508      	bpl.n	80086ac <_printf_i+0x148>
 800869a:	6923      	ldr	r3, [r4, #16]
 800869c:	6861      	ldr	r1, [r4, #4]
 800869e:	4299      	cmp	r1, r3
 80086a0:	bfde      	ittt	le
 80086a2:	2330      	movle	r3, #48	; 0x30
 80086a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80086ac:	1b52      	subs	r2, r2, r5
 80086ae:	6122      	str	r2, [r4, #16]
 80086b0:	f8cd a000 	str.w	sl, [sp]
 80086b4:	464b      	mov	r3, r9
 80086b6:	aa03      	add	r2, sp, #12
 80086b8:	4621      	mov	r1, r4
 80086ba:	4640      	mov	r0, r8
 80086bc:	f7ff fee4 	bl	8008488 <_printf_common>
 80086c0:	3001      	adds	r0, #1
 80086c2:	d14a      	bne.n	800875a <_printf_i+0x1f6>
 80086c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086c8:	b004      	add	sp, #16
 80086ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	f043 0320 	orr.w	r3, r3, #32
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	4833      	ldr	r0, [pc, #204]	; (80087a4 <_printf_i+0x240>)
 80086d8:	2778      	movs	r7, #120	; 0x78
 80086da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	6829      	ldr	r1, [r5, #0]
 80086e2:	061f      	lsls	r7, r3, #24
 80086e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80086e8:	d402      	bmi.n	80086f0 <_printf_i+0x18c>
 80086ea:	065f      	lsls	r7, r3, #25
 80086ec:	bf48      	it	mi
 80086ee:	b2b6      	uxthmi	r6, r6
 80086f0:	07df      	lsls	r7, r3, #31
 80086f2:	bf48      	it	mi
 80086f4:	f043 0320 	orrmi.w	r3, r3, #32
 80086f8:	6029      	str	r1, [r5, #0]
 80086fa:	bf48      	it	mi
 80086fc:	6023      	strmi	r3, [r4, #0]
 80086fe:	b91e      	cbnz	r6, 8008708 <_printf_i+0x1a4>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	f023 0320 	bic.w	r3, r3, #32
 8008706:	6023      	str	r3, [r4, #0]
 8008708:	2310      	movs	r3, #16
 800870a:	e7a7      	b.n	800865c <_printf_i+0xf8>
 800870c:	4824      	ldr	r0, [pc, #144]	; (80087a0 <_printf_i+0x23c>)
 800870e:	e7e4      	b.n	80086da <_printf_i+0x176>
 8008710:	4615      	mov	r5, r2
 8008712:	e7bd      	b.n	8008690 <_printf_i+0x12c>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	6826      	ldr	r6, [r4, #0]
 8008718:	6961      	ldr	r1, [r4, #20]
 800871a:	1d18      	adds	r0, r3, #4
 800871c:	6028      	str	r0, [r5, #0]
 800871e:	0635      	lsls	r5, r6, #24
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	d501      	bpl.n	8008728 <_printf_i+0x1c4>
 8008724:	6019      	str	r1, [r3, #0]
 8008726:	e002      	b.n	800872e <_printf_i+0x1ca>
 8008728:	0670      	lsls	r0, r6, #25
 800872a:	d5fb      	bpl.n	8008724 <_printf_i+0x1c0>
 800872c:	8019      	strh	r1, [r3, #0]
 800872e:	2300      	movs	r3, #0
 8008730:	6123      	str	r3, [r4, #16]
 8008732:	4615      	mov	r5, r2
 8008734:	e7bc      	b.n	80086b0 <_printf_i+0x14c>
 8008736:	682b      	ldr	r3, [r5, #0]
 8008738:	1d1a      	adds	r2, r3, #4
 800873a:	602a      	str	r2, [r5, #0]
 800873c:	681d      	ldr	r5, [r3, #0]
 800873e:	6862      	ldr	r2, [r4, #4]
 8008740:	2100      	movs	r1, #0
 8008742:	4628      	mov	r0, r5
 8008744:	f7f7 fdd4 	bl	80002f0 <memchr>
 8008748:	b108      	cbz	r0, 800874e <_printf_i+0x1ea>
 800874a:	1b40      	subs	r0, r0, r5
 800874c:	6060      	str	r0, [r4, #4]
 800874e:	6863      	ldr	r3, [r4, #4]
 8008750:	6123      	str	r3, [r4, #16]
 8008752:	2300      	movs	r3, #0
 8008754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008758:	e7aa      	b.n	80086b0 <_printf_i+0x14c>
 800875a:	6923      	ldr	r3, [r4, #16]
 800875c:	462a      	mov	r2, r5
 800875e:	4649      	mov	r1, r9
 8008760:	4640      	mov	r0, r8
 8008762:	47d0      	blx	sl
 8008764:	3001      	adds	r0, #1
 8008766:	d0ad      	beq.n	80086c4 <_printf_i+0x160>
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	079b      	lsls	r3, r3, #30
 800876c:	d413      	bmi.n	8008796 <_printf_i+0x232>
 800876e:	68e0      	ldr	r0, [r4, #12]
 8008770:	9b03      	ldr	r3, [sp, #12]
 8008772:	4298      	cmp	r0, r3
 8008774:	bfb8      	it	lt
 8008776:	4618      	movlt	r0, r3
 8008778:	e7a6      	b.n	80086c8 <_printf_i+0x164>
 800877a:	2301      	movs	r3, #1
 800877c:	4632      	mov	r2, r6
 800877e:	4649      	mov	r1, r9
 8008780:	4640      	mov	r0, r8
 8008782:	47d0      	blx	sl
 8008784:	3001      	adds	r0, #1
 8008786:	d09d      	beq.n	80086c4 <_printf_i+0x160>
 8008788:	3501      	adds	r5, #1
 800878a:	68e3      	ldr	r3, [r4, #12]
 800878c:	9903      	ldr	r1, [sp, #12]
 800878e:	1a5b      	subs	r3, r3, r1
 8008790:	42ab      	cmp	r3, r5
 8008792:	dcf2      	bgt.n	800877a <_printf_i+0x216>
 8008794:	e7eb      	b.n	800876e <_printf_i+0x20a>
 8008796:	2500      	movs	r5, #0
 8008798:	f104 0619 	add.w	r6, r4, #25
 800879c:	e7f5      	b.n	800878a <_printf_i+0x226>
 800879e:	bf00      	nop
 80087a0:	0800896d 	.word	0x0800896d
 80087a4:	0800897e 	.word	0x0800897e

080087a8 <memmove>:
 80087a8:	4288      	cmp	r0, r1
 80087aa:	b510      	push	{r4, lr}
 80087ac:	eb01 0402 	add.w	r4, r1, r2
 80087b0:	d902      	bls.n	80087b8 <memmove+0x10>
 80087b2:	4284      	cmp	r4, r0
 80087b4:	4623      	mov	r3, r4
 80087b6:	d807      	bhi.n	80087c8 <memmove+0x20>
 80087b8:	1e43      	subs	r3, r0, #1
 80087ba:	42a1      	cmp	r1, r4
 80087bc:	d008      	beq.n	80087d0 <memmove+0x28>
 80087be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087c6:	e7f8      	b.n	80087ba <memmove+0x12>
 80087c8:	4402      	add	r2, r0
 80087ca:	4601      	mov	r1, r0
 80087cc:	428a      	cmp	r2, r1
 80087ce:	d100      	bne.n	80087d2 <memmove+0x2a>
 80087d0:	bd10      	pop	{r4, pc}
 80087d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087da:	e7f7      	b.n	80087cc <memmove+0x24>

080087dc <_sbrk_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4d06      	ldr	r5, [pc, #24]	; (80087f8 <_sbrk_r+0x1c>)
 80087e0:	2300      	movs	r3, #0
 80087e2:	4604      	mov	r4, r0
 80087e4:	4608      	mov	r0, r1
 80087e6:	602b      	str	r3, [r5, #0]
 80087e8:	f7f8 fd12 	bl	8001210 <_sbrk>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_sbrk_r+0x1a>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_sbrk_r+0x1a>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	240003f0 	.word	0x240003f0

080087fc <memcpy>:
 80087fc:	440a      	add	r2, r1
 80087fe:	4291      	cmp	r1, r2
 8008800:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008804:	d100      	bne.n	8008808 <memcpy+0xc>
 8008806:	4770      	bx	lr
 8008808:	b510      	push	{r4, lr}
 800880a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800880e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008812:	4291      	cmp	r1, r2
 8008814:	d1f9      	bne.n	800880a <memcpy+0xe>
 8008816:	bd10      	pop	{r4, pc}

08008818 <_realloc_r>:
 8008818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800881c:	4680      	mov	r8, r0
 800881e:	4614      	mov	r4, r2
 8008820:	460e      	mov	r6, r1
 8008822:	b921      	cbnz	r1, 800882e <_realloc_r+0x16>
 8008824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008828:	4611      	mov	r1, r2
 800882a:	f7ff bc49 	b.w	80080c0 <_malloc_r>
 800882e:	b92a      	cbnz	r2, 800883c <_realloc_r+0x24>
 8008830:	f7ff fbda 	bl	8007fe8 <_free_r>
 8008834:	4625      	mov	r5, r4
 8008836:	4628      	mov	r0, r5
 8008838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800883c:	f000 f81b 	bl	8008876 <_malloc_usable_size_r>
 8008840:	4284      	cmp	r4, r0
 8008842:	4607      	mov	r7, r0
 8008844:	d802      	bhi.n	800884c <_realloc_r+0x34>
 8008846:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800884a:	d812      	bhi.n	8008872 <_realloc_r+0x5a>
 800884c:	4621      	mov	r1, r4
 800884e:	4640      	mov	r0, r8
 8008850:	f7ff fc36 	bl	80080c0 <_malloc_r>
 8008854:	4605      	mov	r5, r0
 8008856:	2800      	cmp	r0, #0
 8008858:	d0ed      	beq.n	8008836 <_realloc_r+0x1e>
 800885a:	42bc      	cmp	r4, r7
 800885c:	4622      	mov	r2, r4
 800885e:	4631      	mov	r1, r6
 8008860:	bf28      	it	cs
 8008862:	463a      	movcs	r2, r7
 8008864:	f7ff ffca 	bl	80087fc <memcpy>
 8008868:	4631      	mov	r1, r6
 800886a:	4640      	mov	r0, r8
 800886c:	f7ff fbbc 	bl	8007fe8 <_free_r>
 8008870:	e7e1      	b.n	8008836 <_realloc_r+0x1e>
 8008872:	4635      	mov	r5, r6
 8008874:	e7df      	b.n	8008836 <_realloc_r+0x1e>

08008876 <_malloc_usable_size_r>:
 8008876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800887a:	1f18      	subs	r0, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	bfbc      	itt	lt
 8008880:	580b      	ldrlt	r3, [r1, r0]
 8008882:	18c0      	addlt	r0, r0, r3
 8008884:	4770      	bx	lr
	...

08008888 <_init>:
 8008888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888a:	bf00      	nop
 800888c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888e:	bc08      	pop	{r3}
 8008890:	469e      	mov	lr, r3
 8008892:	4770      	bx	lr

08008894 <_fini>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	bf00      	nop
 8008898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889a:	bc08      	pop	{r3}
 800889c:	469e      	mov	lr, r3
 800889e:	4770      	bx	lr
